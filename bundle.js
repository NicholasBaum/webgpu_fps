(()=>{"use strict";var t,e,r,n,s={115:(t,e,r)=>{r.d(e,{D:()=>p});var n=r(416);class s{camera;lights;viewProjectionMatrix=n._E.identity();constructor(t,e){this.camera=t,this.lights=e}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}writeToGpu(t){let e=this.lights[0].size;this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"scene uniforms buffer",size:80+this.lights.length*e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})),n._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,0,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,64,this.camera.position);for(let[r,n]of this.lights.entries())t.queue.writeBuffer(this._gpuBuffer,80+r*e,n.getBytes())}}class i{instances;constructor(t){this.instances=t}get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}_gpuBuffer;writeToGpu(t){this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"models uniforms buffer",size:64*this.instances.length*2,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}));for(let e=0;e<this.instances.length;e++){let r=this.instances[e].transform,s=n._E.transpose(n._E.invert(this.instances[e].transform));t.queue.writeBuffer(this._gpuBuffer,128*e,r),t.queue.writeBuffer(this._gpuBuffer,128*e+64,s)}}}var a,o=r(582),u=r(436);!function(t){t[t.BlinnPhong=0]="BlinnPhong",t[t.NormalMap=1]="NormalMap"}(a||(a={}));class l{device;scene;canvasFormat;aaSampleCount;sceneMap;lights;camera;groups=[];blinnPhongPipeline;normalPipeline;camAndLightUniform;constructor(t,e,r,n){this.device=t,this.scene=e,this.canvasFormat=r,this.aaSampleCount=n,this.sceneMap=this.groupByAsset(e.models),this.lights=e.lights,this.camera=e.camera}render(t){this.camAndLightUniform.writeToGpu(this.device);for(let e of this.groups)e.writeToGpu(this.device),t.setPipeline(e.pipeline),t.setBindGroup(0,e.bindGroup),t.setVertexBuffer(0,e.vertexBuffer),this.normalPipeline==e.pipeline&&t.setVertexBuffer(1,e.normalDataBuffer),t.draw(e.vertexCount,e.instancesCount,0,0)}async initializeAsync(){let t=(0,u.bb)(this.device);this.blinnPhongPipeline=await(0,u.Qf)(this.device,this.canvasFormat,this.aaSampleCount),this.normalPipeline=await(0,o.ms)(this.device,this.canvasFormat,this.aaSampleCount),this.camAndLightUniform=new s(this.camera,this.lights),this.camAndLightUniform.writeToGpu(this.device);for(let e of this.sceneMap.entries()){let r=e[1],n=e[0].mode==a.BlinnPhong?this.blinnPhongPipeline:this.normalPipeline,s=r[0].asset;s.writeMeshToGpu(this.device),await s.material.writeTexturesToGpuAsync(this.device,!0),s.material.writeToGpu(this.device);const l=new i(r);let h;l.writeToGpu(this.device),h=this.blinnPhongPipeline==n?(0,u.Nz)(this.device,n,l,this.camAndLightUniform,s.material,t):(0,o.vW)(this.device,n,l,this.camAndLightUniform,s.material,t);let d=new c(l,r.length,s.vertexBuffer,s.vertexCount,s.material,h,n,s.normalBuffer);this.groups.push(d)}}groupByAsset(t){let e=t.reduce(((t,e)=>{let r=(t=>{let e=null!=t.asset.material.normalMapPath?a.NormalMap:a.BlinnPhong;return{asset:t.asset,mode:e}})(e);return t.has(r)||t.set(r,[]),t.get(r)?.push(e),t}),new Map),r=this.scene.lights.map((t=>t.model));return r.length>0&&e.set({asset:r[0].asset,mode:a.BlinnPhong},r),e}}class c{instancesBuffer;instancesCount;vertexBuffer;vertexCount;material;bindGroup;pipeline;normalDataBuffer;constructor(t,e,r,n,s,i,a,o=null){this.instancesBuffer=t,this.instancesCount=e,this.vertexBuffer=r,this.vertexCount=n,this.material=s,this.bindGroup=i,this.pipeline=a,this.normalDataBuffer=o}writeToGpu(t){this.instancesBuffer.writeToGpu(t),this.material.writeToGpu(t)}}const h={arrayStride:56,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]};class d{device;scene;shadowDepthTextureSize=1024;shadowDepthTextureView;shadowPipeline;_gpuBuffer;constructor(t,e){this.device=t,this.scene=e}async initializeAsync(){this.shadowPipeline=await function(t){let e=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}],r=t.createBindGroupLayout({entries:e}),n={label:"shadow map pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[r]}),vertex:{module:t.createShaderModule({label:"shadow shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\n@group(0) @binding(0) var<uniform> model : Instance;\n@group(0) @binding(1) var<uniform> lightView : mat4x4 < f32>;\n\n@vertex\nfn vertexMain(@location(0) position : vec3 < f32>) -> @builtin(position) vec4 < f32>\n{\n    return lightView * model.transform * vec4(position, 1);\n}\n"}),entryPoint:"vertexMain",buffers:[h]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}};return t.createRenderPipelineAsync(n)}(this.device),this.writeToGpu(this.device,this.scene.models[0]);const t=this.device.createTexture({size:[this.shadowDepthTextureSize,this.shadowDepthTextureSize,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});this.shadowDepthTextureView=t.createView()}render(t){this.writeToGpu(this.device,this.scene.models[0]);const e=this.scene.models[0],r=this.scene.lights[0],n={colorAttachments:[],depthStencilAttachment:{view:this.shadowDepthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},s=t.beginRenderPass(n);s.setPipeline(this.shadowPipeline),s.setBindGroup(0,function(t,e,r,n){let s={label:"shadow map binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r}},{binding:1,resource:{buffer:n}}]};return t.createBindGroup(s)}(this.device,this.shadowPipeline,this._gpuBuffer,this.getLightViewMatrix(r))),s.setVertexBuffer(0,e.asset.vertexBuffer),s.draw(36,2),s.end()}writeToGpu(t,e){this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"shadow models uniforms buffer",size:128,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}));let r=e.transform,s=n._E.transpose(n._E.invert(e.transform));t.queue.writeBuffer(this._gpuBuffer,0,r),t.queue.writeBuffer(this._gpuBuffer,64,s)}lightBuffer=null;getLightViewMatrix(t){if(!this.lightBuffer){this.lightBuffer=this.device.createBuffer({label:"light buffer",size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});const e=n.R3.fromValues(0,1,0),r=n.R3.fromValues(0,0,0),s=n._E.lookAt(n.R3.mulScalar(t.positionOrDirection,-1),r,e),i=n._E.create();{const t=-80,e=80,r=-80,s=80,a=0,o=50;n._E.ortho(t,e,r,s,a,o,i)}const a=n._E.multiply(i,s);this.device.queue.writeBuffer(this.lightBuffer,0,a)}return this.lightBuffer}}class f{device;canvasFormat;aaSampleCount;fullScreenQuadVertexBuffer;pipeline;sampler;constructor(t,e,r){this.device=t,this.canvasFormat=e,this.aaSampleCount=r;const n=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,-1,1,0,1,1,-1,0,1,1,1,0,1]);this.fullScreenQuadVertexBuffer=t.createBuffer({size:n.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.fullScreenQuadVertexBuffer,0,n),this.sampler=t.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"}),this.pipeline=this.createPipeline(t)}render(t,e){e.setPipeline(this.pipeline),e.setBindGroup(0,this.createBindGroup(t)),e.setVertexBuffer(0,this.fullScreenQuadVertexBuffer),e.draw(6,1)}createBindGroup(t){let e={label:"texture renderer binding group",layout:this.pipeline.getBindGroupLayout(0),entries:[{binding:0,resource:this.sampler},{binding:1,resource:t}]};return this.device.createBindGroup(e)}createPipeline(t){let e=[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}}],r=t.createBindGroupLayout({entries:e}),n=t.createPipelineLayout({bindGroupLayouts:[r]});const s=t.createShaderModule({label:"texture renderer",code:"@group(0) @binding(0) var textureSampler : sampler;\n//@group(0) @binding(1) var textureMap : texture_2d<f32>;\n@group(0) @binding(1) var textureMap : texture_depth_2d;\n\n\nstruct VertexOutput {\n    @builtin(position) fragCoord : vec4f,\n};\n\n@vertex\nfn vertexMain(@location(0) position : vec4f)\n-> VertexOutput {\n    return VertexOutput(position);\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    let depthValue = textureLoad(textureMap, vec2 < i32 > (floor(fragCoord.xy)), 0);\n    return vec4 < f32 > (depthValue, depthValue, depthValue, 1.0);\n}\n"});return t.createRenderPipeline({layout:n,vertex:{module:s,entryPoint:"vertexMain",buffers:[this.VERTEX_BUFFER_LAYOUT]},fragment:{module:s,entryPoint:"fragmentMain",targets:[{format:this.canvasFormat}]},primitive:{topology:"triangle-list"},multisample:{count:this.aaSampleCount},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"always"}})}VERTEX_BUFFER_LAYOUT={arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]}}class p{scene;canvas;get useMSAA(){return 4==this.aaSampleCount}aaSampleCount=4;device;context;canvasFormat;renderTarget;depthTexture;depthTextureView;inputHandler;lastFrameMS=Date.now();renderer;shadowMapRenderer;textureRenderer;constructor(t,e){this.scene=t,this.canvas=e,this.inputHandler=function(t,e){const r={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},n={x:0,y:0,zoom:0};let s=!1;const i=(t,e)=>{switch(t.code){case"KeyW":r.forward=e,t.preventDefault(),t.stopPropagation();break;case"KeyS":r.backward=e,t.preventDefault(),t.stopPropagation();break;case"KeyA":r.left=e,t.preventDefault(),t.stopPropagation();break;case"KeyD":r.right=e,t.preventDefault(),t.stopPropagation();break;case"Space":r.up=e,t.preventDefault(),t.stopPropagation();break;case"ShiftLeft":case"ControlLeft":case"KeyC":r.down=e,t.preventDefault(),t.stopPropagation()}};return t.addEventListener("keydown",(t=>i(t,!0))),t.addEventListener("keyup",(t=>i(t,!1))),e.addEventListener("mousedown",(()=>{s=!0})),e.addEventListener("mouseup",(()=>{s=!1})),e.addEventListener("mousemove",(t=>{s=0!=(1&t.buttons),s&&(n.x+=t.movementX,n.y+=t.movementY)})),e.addEventListener("wheel",(t=>{s=0!=(1&t.buttons),s&&(n.zoom+=Math.sign(t.deltaY),t.preventDefault(),t.stopPropagation())}),{passive:!1}),()=>{const t={digital:r,analog:{x:n.x,y:n.y,zoom:n.zoom,touching:s}};return n.x=0,n.y=0,n.zoom=0,t}}(window,e)}async run(){await this.initAsync(),this.render()}async initAsync(){await this.initGpuContext(),this.scene.camera.aspect=this.canvas.width/this.canvas.height,this.renderer=new l(this.device,this.scene,this.canvasFormat,this.aaSampleCount),await this.renderer.initializeAsync(),this.shadowMapRenderer=new d(this.device,this.scene),await this.shadowMapRenderer.initializeAsync(),this.textureRenderer=new f(this.device,this.canvasFormat,this.aaSampleCount)}render(){requestAnimationFrame((()=>{const t=this.getDeltaTime();this.scene.update(t),this.scene.camera.update(t,this.inputHandler());let e=this.context.getCurrentTexture().createView();const r={colorAttachments:[{view:this.useMSAA?this.renderTarget.createView():e,resolveTarget:this.useMSAA?e:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},n=this.device.createCommandEncoder();this.shadowMapRenderer.render(n);const s=n.beginRenderPass(r);this.renderer.render(s),s.end(),this.device.queue.submit([n.finish()]),this.render()}))}getDeltaTime(){const t=Date.now(),e=(t-this.lastFrameMS)/1e3;return this.lastFrameMS=t,e}async initGpuContext(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");this.device=await t.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),this.context.configure({device:this.device,format:this.canvasFormat,alphaMode:"premultiplied"}),this.useMSAA&&(this.renderTarget=this.device.createTexture({size:[this.canvas.width,this.canvas.height],sampleCount:this.aaSampleCount,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.depthTexture=this.device.createTexture({size:[this.canvas.width,this.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:this.useMSAA?this.aaSampleCount:1}),this.depthTextureView=this.depthTexture.createView()}}},582:(t,e,r)=>{r.d(e,{aH:()=>o,vW:()=>u,ms:()=>a});var n=r(284);const s="struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    positionOrDirection : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n@group(0) @binding(7) var normalTexture : texture_2d<f32>;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n//remark 1\n//wgsl doesn't support forwarding matrices or arrays to the FS as function argument\n//for matrices this can be solved by forwarding the columns separatly\n//for arrays i actually don't have any solution\n//a fixed amount of array entries could be forwarded as separate arguments\n\n//remark 2\n//literature says the vertex shader isn't called as often as the fragment shader\n//reasoning is probably that the VS runs for every vertex and 3 vertices usually belong to more than 2 fragments/pixels\n//but i'm not sure if this is actually still true when using zbuffer or even when just using a high poly model\n\n//so it might be advantageous to push calculations into the VS\n//the tbn can be built in the VS and inverted by only taking the transpose because it's an orthonormal matrix\n//now instead of calculating everything in world space we can take the light position/direction and the camera position\n//into tangent space in the VS! and foward them to the FS\n\n//in case of multiple lights one has to forward every light pos/dir what is problematic because arrays can't be forwarded\n//this problem vanishes when using deferred shading as every light is calculated in a separate run\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_t = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var normal = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_t).xyz * 2-1));\n    normal = select(normal, worldNormal, material.mode.y==1);\n\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv_t).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv_t).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv_t).xyz;\n    var finalColor = vec4f(0, 0, 0, 1);\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], uv, worldPosition, normal, ambientColor, diffuseColor, specularColor);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, uv : vec2f, worldPosition : vec4f, worldNormal : vec3f, ambientColor : vec3f, diffuseColor : vec3f, specularColor : vec3f) -> vec4f\n{\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let fragToLight = light.positionOrDirection.xyz - worldPosition.xyz;\n    //DirectLight=0; PointLight=1\n    let lightDir = normalize(select(-light.positionOrDirection.xyz, fragToLight, light.mode.x == 1));\n    //use falloff\n    let lightSqrDist = select(1, dot(fragToLight, fragToLight), light.mode.x == 1 && light.mode.y == 1);\n    let intensity = max(dot(lightDir, unitNormal), 0);\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity / lightSqrDist;\n\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    let H = normalize(lightDir + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x) / lightSqrDist;\n\n    var finalColor = ambient + diffuse + specular * intensity;\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n    return vec4f(finalColor, 1);\n}\n";var i=r(436);async function a(t,e,r){const a=t.createShaderModule({label:"Normal Shader",code:s}),u={binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{}};return(0,i.Jy)(t,a,[n.sY,o],e,r,[u])}const o={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:4},{format:"float32x3",offset:12,shaderLocation:5}]};function u(t,e,r,n,s,a){const o={binding:7,resource:s.normalTexture.createView()};return(0,i.J3)(t,e,r,n,s,a,[o])}},436:(t,e,r)=>{r.d(e,{J3:()=>o,Nz:()=>a,Qf:()=>i,Jy:()=>l,bb:()=>u});var n=r(284);const s="struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    lightType : vec4f,\n    positionOrDirection : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n\nstruct VertexOut\n{\n    @builtin(position) position : vec4f,\n    @location(0) vColor : vec4f,\n    @location(1) uv : vec2f,\n    @location(2) normal : vec4f,\n    @location(3) worldPosition : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    return VertexOut(uni.viewProjectionMatrix * worldPos, color, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) vColor : vec4f,\n@location(1) uv : vec2f,\n@location(2) worldPosition : vec4f,\n@location(3) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let lightsCount = i32(arrayLength(&uni.lights));\n    var finalColor = vec4f(0, 0, 0, 1);\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], uv, worldPosition, worldNormal);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let lightDir = normalize(select(-light.positionOrDirection.xyz, light.positionOrDirection.xyz - worldPosition.xyz, light.lightType.x == 1));\n    let intensity = max(dot(lightDir, unitNormal), 0);\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity;\n\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    let H = normalize(lightDir + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x);\n\n    //Blinn-Phong seems to have some artefacts\n    //first of specular should only be rendered on surfaces that are hit by the light aka diffuse intensity>0\n    //by doing this you get some strange cutoffs\n    //that why an alternative ist to multiply the specular with the difusse intensity but this lead to specular highlights with weak intensity\n    //var finalColor = select(ambient + diffuse, ambient + diffuse + specular, intensity > 0);\n    var finalColor = ambient + diffuse + specular * intensity;\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n    return vec4f(finalColor, 1);\n}\n";async function i(t,e,r){const i=t.createShaderModule({label:"Blinn Phong Shader",code:s});return l(t,i,[n.sY],e,r)}function a(t,e,r,n,s,i){return o(t,e,r,n,s,i)}function o(t,e,r,n,s,i,a){let o={label:"binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r.gpuBuffer}},{binding:1,resource:{buffer:n.gpuBuffer}},{binding:2,resource:{buffer:s.gpuBuffer}},{binding:3,resource:i},{binding:4,resource:s.ambientTexture.createView()},{binding:5,resource:s.diffuseTexture.createView()},{binding:6,resource:s.specularTexture.createView()}]};return a&&o.entries.push(...a),t.createBindGroup(o)}function u(t){return t.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16})}async function l(t,e,r,n,s,i){let a=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}}];i&&i.length>0&&a.push(...i);let o=t.createBindGroupLayout({entries:a}),u={label:"mesh pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[o]}),vertex:{module:e,entryPoint:"vertexMain",buffers:r},fragment:{module:e,entryPoint:"fragmentMain",targets:[{format:n,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]},primitive:{topology:"triangle-list",cullMode:"back"},multisample:{count:s},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await t.createRenderPipelineAsync(u)}},607:(t,e,r)=>{r.a(t,(async(t,e)=>{try{var n=r(115),s=r(186);const t=document.querySelector("canvas"),i=new n.D(new s.N,t);i.scene.attachUi(t),await i.run(),e()}catch(t){e(t)}}),1)},284:(t,e,r)=>{r.d(e,{Vk:()=>a,nk:()=>n,qw:()=>s,sY:()=>i});const n="triangle-list",s=36,i={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1])},186:(t,e,r)=>{r.d(e,{N:()=>ne});var n=r(416);class s{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(t){this._aspect=t,this._projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=n._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(t){n._E.copy(t,this.matrix_)}get view(){return this.view_}set view(t){n._E.copy(t,this.view_)}get right(){return this.right_}set right(t){n.R3.copy(t,this.right_)}get up(){return this.up_}set up(t){n.R3.copy(t,this.up_)}get back(){return this.back_}set back(t){n.R3.copy(t,this.back_)}get position(){return this.position_}set position(t){n.R3.copy(t,this.position_)}}class i extends s{pitch=0;yaw=0;velocity_=n.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(t){n.R3.copy(t,this.velocity_)}constructor(t){if(super(),t&&(t.position||t.target||t.movementSpeed)){const e=t.position??n.R3.create(0,0,-5),r=t.target??n.R3.create(0,0,0);this.back=n.R3.normalize(n.R3.subtract(e,r)),this.recalculateAngles(this.back),this.position=e,this.movementSpeed=t.movementSpeed??10,this.aspect=t.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(t){super.matrix=t,this.recalculateAngles(this.back)}update(t,e){const r=(t,e)=>(t?1:0)-(e?1:0);var s,i;this.yaw-=e.analog.x*t*this.rotationSpeed,this.pitch-=e.analog.y*t*this.rotationSpeed,this.yaw=(s=this.yaw,i=2*Math.PI,s-Math.floor(Math.abs(s)/i)*i*Math.sign(s)),this.pitch=function(t,e,r){return Math.min(Math.max(t,e),r)}(this.pitch,-Math.PI/2,Math.PI/2);const a=n.R3.copy(this.position);super.matrix=n._E.rotateX(n._E.rotationY(this.yaw),this.pitch);const o=e.digital,u=r(o.right,o.left),l=r(o.up,o.down),c=n.R3.create(),h=r(o.backward,o.forward);n.R3.addScaled(c,this.right,u,c),n.R3.addScaled(c,this.up,l,c),n.R3.addScaled(c,this.back,h,c),n.R3.normalize(c,c),n.R3.mulScalar(c,this.movementSpeed,c),this.velocity=function(t,e,r){return n.R3.addScaled(t,n.R3.sub(e,t),r)}(c,this.velocity,Math.pow(1-this.frictionCoefficient,t)),this.position=n.R3.addScaled(a,this.velocity,t),this.view=n._E.invert(this.matrix)}recalculateAngles(t){this.yaw=Math.atan2(t[0],t[2]),this.pitch=-Math.asin(t[1])}}class a{name;asset;transform;constructor(t,e,r=n._E.identity()){this.name=t,this.asset=e,this.transform=r}translate(t,e,r){return n._E.translate(this.transform,[t,e,r],this.transform),this}rotate(t,e,r){return n._E.rotateX(this.transform,t/180*Math.PI,this.transform),n._E.rotateY(this.transform,e/180*Math.PI,this.transform),n._E.rotateZ(this.transform,r/180*Math.PI,this.transform),this}scale(t,e,r){return n._E.scale(this.transform,[t,e,r],this.transform),this}}const o=t=>t&&"number"==typeof t.length&&t.buffer instanceof ArrayBuffer&&"number"==typeof t.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class u{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class l{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(t){throw new Error("Cannot evaluate node")}evaluateString(t){return this.evaluate(t).toString()}}class c extends l{constructor(){super()}}class h extends c{constructor(t,e,r,n){super(),this.name=t,this.args=e,this.returnType=r,this.body=n}get astNodeType(){return"function"}}class d extends c{constructor(t){super(),this.expression=t}get astNodeType(){return"staticAssert"}}class f extends c{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"while"}}class p extends c{constructor(t){super(),this.body=t}get astNodeType(){return"continuing"}}class _ extends c{constructor(t,e,r,n){super(),this.init=t,this.condition=e,this.increment=r,this.body=n}get astNodeType(){return"for"}}class m extends c{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"var"}}class g extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.value=r}get astNodeType(){return"override"}}class w extends c{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"let"}}class y extends c{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"const"}evaluate(t){return this.value.evaluate(t)}}var x,v,b,k,M;!function(t){t.increment="++",t.decrement="--"}(x||(x={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return t[r]}}(x||(x={}));class S extends c{constructor(t,e){super(),this.operator=t,this.variable=e}get astNodeType(){return"increment"}}!function(t){t.assign="=",t.addAssign="+=",t.subtractAssin="-=",t.multiplyAssign="*=",t.divideAssign="/=",t.moduloAssign="%=",t.andAssign="&=",t.orAssign="|=",t.xorAssign="^=",t.shiftLeftAssign="<<=",t.shiftRightAssign=">>="}(v||(v={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for AssignOperator");return t[r]}}(v||(v={}));class T extends c{constructor(t,e,r){super(),this.operator=t,this.variable=e,this.value=r}get astNodeType(){return"assign"}}class A extends c{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"call"}}class E extends c{constructor(t,e){super(),this.body=t,this.continuing=e}get astNodeType(){return"loop"}}class P extends c{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"body"}}class C extends c{constructor(t,e,r,n){super(),this.condition=t,this.body=e,this.elseif=r,this.else=n}get astNodeType(){return"if"}}class B extends c{constructor(t){super(),this.value=t}get astNodeType(){return"return"}}class z extends c{constructor(t){super(),this.name=t}get astNodeType(){return"enable"}}class U extends c{constructor(t,e){super(),this.name=t,this.type=e}get astNodeType(){return"alias"}}class q extends c{constructor(){super()}get astNodeType(){return"discard"}}class N extends c{constructor(){super()}get astNodeType(){return"break"}}class F extends c{constructor(){super()}get astNodeType(){return"continue"}}class I extends c{constructor(t){super(),this.name=t}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class D extends I{constructor(t,e){super(t),this.members=e}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(t){for(let e=0;e<this.members.length;e++)if(this.members[e].name==t)return e;return-1}}class G extends I{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"template"}}class L extends I{constructor(t,e,r,n){super(t),this.storage=e,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class R extends I{constructor(t,e,r,n){super(t),this.attributes=e,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class O extends I{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"sampler"}}class V extends l{constructor(){super()}}class Y extends V{constructor(t){super(),this.value=t}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class j extends V{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"createExpr"}}class H extends V{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"callExpr"}evaluate(t){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(t));case"acos":return Math.acos(this.args[0].evaluate(t));case"acosh":return Math.acosh(this.args[0].evaluate(t));case"asin":return Math.asin(this.args[0].evaluate(t));case"asinh":return Math.asinh(this.args[0].evaluate(t));case"atan":return Math.atan(this.args[0].evaluate(t));case"atan2":return Math.atan2(this.args[0].evaluate(t),this.args[1].evaluate(t));case"atanh":return Math.atanh(this.args[0].evaluate(t));case"ceil":return Math.ceil(this.args[0].evaluate(t));case"clamp":return Math.min(Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t)),this.args[2].evaluate(t));case"cos":return Math.cos(this.args[0].evaluate(t));case"degrees":return 180*this.args[0].evaluate(t)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(t)-this.args[1].evaluate(t),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(t));case"exp2":return Math.pow(2,this.args[0].evaluate(t));case"floor":return Math.floor(this.args[0].evaluate(t));case"fma":return this.args[0].evaluate(t)*this.args[1].evaluate(t)+this.args[2].evaluate(t);case"fract":case"modf":return this.args[0].evaluate(t)-Math.floor(this.args[0].evaluate(t));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(t));case"log":return Math.log(this.args[0].evaluate(t));case"log2":return Math.log2(this.args[0].evaluate(t));case"max":return Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t));case"min":return Math.min(this.args[0].evaluate(t),this.args[1].evaluate(t));case"mix":return this.args[0].evaluate(t)*(1-this.args[2].evaluate(t))+this.args[1].evaluate(t)*this.args[2].evaluate(t);case"pow":return Math.pow(this.args[0].evaluate(t),this.args[1].evaluate(t));case"radians":return this.args[0].evaluate(t)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(t));case"sign":return Math.sign(this.args[0].evaluate(t));case"sin":return Math.sin(this.args[0].evaluate(t));case"sinh":return Math.sinh(this.args[0].evaluate(t));case"saturate":return Math.min(Math.max(this.args[0].evaluate(t),0),1);case"smoothstep":return this.args[0].evaluate(t)*this.args[0].evaluate(t)*(3-2*this.args[0].evaluate(t));case"sqrt":return Math.sqrt(this.args[0].evaluate(t));case"step":return this.args[0].evaluate(t)<this.args[1].evaluate(t)?0:1;case"tan":return Math.tan(this.args[0].evaluate(t));case"tanh":return Math.tanh(this.args[0].evaluate(t));case"trunc":return Math.trunc(this.args[0].evaluate(t));default:throw new Error("Non const function: "+this.name)}}}class X extends V{constructor(t){super(),this.name=t}get astNodeType(){return"varExpr"}}class $ extends V{constructor(t,e){super(),this.name=t,this.initializer=e}get astNodeType(){return"constExpr"}evaluate(t){var e,r;if(this.initializer instanceof j){const n=null===(e=this.postfix)||void 0===e?void 0:e.evaluateString(t),s=null===(r=this.initializer.type)||void 0===r?void 0:r.name,i=t.structs.get(s),a=null==i?void 0:i.getMemberIndex(n);if(-1!=a)return this.initializer.args[a].evaluate(t);console.log(a)}return this.initializer.evaluate(t)}}class K extends V{constructor(t){super(),this.value=t}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class W extends V{constructor(t,e){super(),this.type=t,this.value=e}get astNodeType(){return"bitcastExpr"}}class Q extends V{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"typecastExpr"}evaluate(t){return this.args[0].evaluate(t)}}class Z extends V{constructor(t){super(),this.contents=t}get astNodeType(){return"groupExpr"}evaluate(t){return this.contents[0].evaluate(t)}}class J extends V{constructor(){super()}}class tt extends J{constructor(t,e){super(),this.operator=t,this.right=e}get astNodeType(){return"unaryOp"}evaluate(t){switch(this.operator){case"+":return this.right.evaluate(t);case"-":return-this.right.evaluate(t);case"!":return this.right.evaluate(t)?0:1;case"~":return~this.right.evaluate(t);default:throw new Error("Unknown unary operator: "+this.operator)}}}class et extends J{constructor(t,e,r){super(),this.operator=t,this.left=e,this.right=r}get astNodeType(){return"binaryOp"}evaluate(t){switch(this.operator){case"+":return this.left.evaluate(t)+this.right.evaluate(t);case"-":return this.left.evaluate(t)-this.right.evaluate(t);case"*":return this.left.evaluate(t)*this.right.evaluate(t);case"/":return this.left.evaluate(t)/this.right.evaluate(t);case"%":return this.left.evaluate(t)%this.right.evaluate(t);case"==":return this.left.evaluate(t)==this.right.evaluate(t)?1:0;case"!=":return this.left.evaluate(t)!=this.right.evaluate(t)?1:0;case"<":return this.left.evaluate(t)<this.right.evaluate(t)?1:0;case">":return this.left.evaluate(t)>this.right.evaluate(t)?1:0;case"<=":return this.left.evaluate(t)<=this.right.evaluate(t)?1:0;case">=":return this.left.evaluate(t)>=this.right.evaluate(t)?1:0;case"&&":return this.left.evaluate(t)&&this.right.evaluate(t)?1:0;case"||":return this.left.evaluate(t)||this.right.evaluate(t)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class rt extends l{constructor(){super()}}class nt extends rt{constructor(t,e){super(),this.selector=t,this.body=e}get astNodeType(){return"case"}}class st extends rt{constructor(t){super(),this.body=t}get astNodeType(){return"default"}}class it extends l{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"argument"}}class at extends l{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"elseif"}}class ot extends l{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"member"}}class ut extends l{constructor(t,e){super(),this.name=t,this.value=e}get astNodeType(){return"attribute"}}!function(t){t[t.token=0]="token",t[t.keyword=1]="keyword",t[t.reserved=2]="reserved"}(k||(k={}));class lt{constructor(t,e,r){this.name=t,this.type=e,this.rule=r}toString(){return this.name}}class ct{}b=ct,ct.none=new lt("",k.reserved,""),ct.eof=new lt("EOF",k.token,""),ct.reserved={asm:new lt("asm",k.reserved,"asm"),bf16:new lt("bf16",k.reserved,"bf16"),do:new lt("do",k.reserved,"do"),enum:new lt("enum",k.reserved,"enum"),f16:new lt("f16",k.reserved,"f16"),f64:new lt("f64",k.reserved,"f64"),handle:new lt("handle",k.reserved,"handle"),i8:new lt("i8",k.reserved,"i8"),i16:new lt("i16",k.reserved,"i16"),i64:new lt("i64",k.reserved,"i64"),mat:new lt("mat",k.reserved,"mat"),premerge:new lt("premerge",k.reserved,"premerge"),regardless:new lt("regardless",k.reserved,"regardless"),typedef:new lt("typedef",k.reserved,"typedef"),u8:new lt("u8",k.reserved,"u8"),u16:new lt("u16",k.reserved,"u16"),u64:new lt("u64",k.reserved,"u64"),unless:new lt("unless",k.reserved,"unless"),using:new lt("using",k.reserved,"using"),vec:new lt("vec",k.reserved,"vec"),void:new lt("void",k.reserved,"void")},ct.keywords={array:new lt("array",k.keyword,"array"),atomic:new lt("atomic",k.keyword,"atomic"),bool:new lt("bool",k.keyword,"bool"),f32:new lt("f32",k.keyword,"f32"),i32:new lt("i32",k.keyword,"i32"),mat2x2:new lt("mat2x2",k.keyword,"mat2x2"),mat2x3:new lt("mat2x3",k.keyword,"mat2x3"),mat2x4:new lt("mat2x4",k.keyword,"mat2x4"),mat3x2:new lt("mat3x2",k.keyword,"mat3x2"),mat3x3:new lt("mat3x3",k.keyword,"mat3x3"),mat3x4:new lt("mat3x4",k.keyword,"mat3x4"),mat4x2:new lt("mat4x2",k.keyword,"mat4x2"),mat4x3:new lt("mat4x3",k.keyword,"mat4x3"),mat4x4:new lt("mat4x4",k.keyword,"mat4x4"),ptr:new lt("ptr",k.keyword,"ptr"),sampler:new lt("sampler",k.keyword,"sampler"),sampler_comparison:new lt("sampler_comparison",k.keyword,"sampler_comparison"),struct:new lt("struct",k.keyword,"struct"),texture_1d:new lt("texture_1d",k.keyword,"texture_1d"),texture_2d:new lt("texture_2d",k.keyword,"texture_2d"),texture_2d_array:new lt("texture_2d_array",k.keyword,"texture_2d_array"),texture_3d:new lt("texture_3d",k.keyword,"texture_3d"),texture_cube:new lt("texture_cube",k.keyword,"texture_cube"),texture_cube_array:new lt("texture_cube_array",k.keyword,"texture_cube_array"),texture_multisampled_2d:new lt("texture_multisampled_2d",k.keyword,"texture_multisampled_2d"),texture_storage_1d:new lt("texture_storage_1d",k.keyword,"texture_storage_1d"),texture_storage_2d:new lt("texture_storage_2d",k.keyword,"texture_storage_2d"),texture_storage_2d_array:new lt("texture_storage_2d_array",k.keyword,"texture_storage_2d_array"),texture_storage_3d:new lt("texture_storage_3d",k.keyword,"texture_storage_3d"),texture_depth_2d:new lt("texture_depth_2d",k.keyword,"texture_depth_2d"),texture_depth_2d_array:new lt("texture_depth_2d_array",k.keyword,"texture_depth_2d_array"),texture_depth_cube:new lt("texture_depth_cube",k.keyword,"texture_depth_cube"),texture_depth_cube_array:new lt("texture_depth_cube_array",k.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new lt("texture_depth_multisampled_2d",k.keyword,"texture_depth_multisampled_2d"),texture_external:new lt("texture_external",k.keyword,"texture_external"),u32:new lt("u32",k.keyword,"u32"),vec2:new lt("vec2",k.keyword,"vec2"),vec3:new lt("vec3",k.keyword,"vec3"),vec4:new lt("vec4",k.keyword,"vec4"),bitcast:new lt("bitcast",k.keyword,"bitcast"),block:new lt("block",k.keyword,"block"),break:new lt("break",k.keyword,"break"),case:new lt("case",k.keyword,"case"),continue:new lt("continue",k.keyword,"continue"),continuing:new lt("continuing",k.keyword,"continuing"),default:new lt("default",k.keyword,"default"),discard:new lt("discard",k.keyword,"discard"),else:new lt("else",k.keyword,"else"),enable:new lt("enable",k.keyword,"enable"),fallthrough:new lt("fallthrough",k.keyword,"fallthrough"),false:new lt("false",k.keyword,"false"),fn:new lt("fn",k.keyword,"fn"),for:new lt("for",k.keyword,"for"),function:new lt("function",k.keyword,"function"),if:new lt("if",k.keyword,"if"),let:new lt("let",k.keyword,"let"),const:new lt("const",k.keyword,"const"),loop:new lt("loop",k.keyword,"loop"),while:new lt("while",k.keyword,"while"),private:new lt("private",k.keyword,"private"),read:new lt("read",k.keyword,"read"),read_write:new lt("read_write",k.keyword,"read_write"),return:new lt("return",k.keyword,"return"),storage:new lt("storage",k.keyword,"storage"),switch:new lt("switch",k.keyword,"switch"),true:new lt("true",k.keyword,"true"),alias:new lt("alias",k.keyword,"alias"),type:new lt("type",k.keyword,"type"),uniform:new lt("uniform",k.keyword,"uniform"),var:new lt("var",k.keyword,"var"),override:new lt("override",k.keyword,"override"),workgroup:new lt("workgroup",k.keyword,"workgroup"),write:new lt("write",k.keyword,"write"),r8unorm:new lt("r8unorm",k.keyword,"r8unorm"),r8snorm:new lt("r8snorm",k.keyword,"r8snorm"),r8uint:new lt("r8uint",k.keyword,"r8uint"),r8sint:new lt("r8sint",k.keyword,"r8sint"),r16uint:new lt("r16uint",k.keyword,"r16uint"),r16sint:new lt("r16sint",k.keyword,"r16sint"),r16float:new lt("r16float",k.keyword,"r16float"),rg8unorm:new lt("rg8unorm",k.keyword,"rg8unorm"),rg8snorm:new lt("rg8snorm",k.keyword,"rg8snorm"),rg8uint:new lt("rg8uint",k.keyword,"rg8uint"),rg8sint:new lt("rg8sint",k.keyword,"rg8sint"),r32uint:new lt("r32uint",k.keyword,"r32uint"),r32sint:new lt("r32sint",k.keyword,"r32sint"),r32float:new lt("r32float",k.keyword,"r32float"),rg16uint:new lt("rg16uint",k.keyword,"rg16uint"),rg16sint:new lt("rg16sint",k.keyword,"rg16sint"),rg16float:new lt("rg16float",k.keyword,"rg16float"),rgba8unorm:new lt("rgba8unorm",k.keyword,"rgba8unorm"),rgba8unorm_srgb:new lt("rgba8unorm_srgb",k.keyword,"rgba8unorm_srgb"),rgba8snorm:new lt("rgba8snorm",k.keyword,"rgba8snorm"),rgba8uint:new lt("rgba8uint",k.keyword,"rgba8uint"),rgba8sint:new lt("rgba8sint",k.keyword,"rgba8sint"),bgra8unorm:new lt("bgra8unorm",k.keyword,"bgra8unorm"),bgra8unorm_srgb:new lt("bgra8unorm_srgb",k.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new lt("rgb10a2unorm",k.keyword,"rgb10a2unorm"),rg11b10float:new lt("rg11b10float",k.keyword,"rg11b10float"),rg32uint:new lt("rg32uint",k.keyword,"rg32uint"),rg32sint:new lt("rg32sint",k.keyword,"rg32sint"),rg32float:new lt("rg32float",k.keyword,"rg32float"),rgba16uint:new lt("rgba16uint",k.keyword,"rgba16uint"),rgba16sint:new lt("rgba16sint",k.keyword,"rgba16sint"),rgba16float:new lt("rgba16float",k.keyword,"rgba16float"),rgba32uint:new lt("rgba32uint",k.keyword,"rgba32uint"),rgba32sint:new lt("rgba32sint",k.keyword,"rgba32sint"),rgba32float:new lt("rgba32float",k.keyword,"rgba32float"),static_assert:new lt("static_assert",k.keyword,"static_assert")},ct.tokens={decimal_float_literal:new lt("decimal_float_literal",k.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new lt("hex_float_literal",k.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new lt("int_literal",k.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new lt("uint_literal",k.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new lt("ident",k.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new lt("and",k.token,"&"),and_and:new lt("and_and",k.token,"&&"),arrow:new lt("arrow ",k.token,"->"),attr:new lt("attr",k.token,"@"),attr_left:new lt("attr_left",k.token,"[["),attr_right:new lt("attr_right",k.token,"]]"),forward_slash:new lt("forward_slash",k.token,"/"),bang:new lt("bang",k.token,"!"),bracket_left:new lt("bracket_left",k.token,"["),bracket_right:new lt("bracket_right",k.token,"]"),brace_left:new lt("brace_left",k.token,"{"),brace_right:new lt("brace_right",k.token,"}"),colon:new lt("colon",k.token,":"),comma:new lt("comma",k.token,","),equal:new lt("equal",k.token,"="),equal_equal:new lt("equal_equal",k.token,"=="),not_equal:new lt("not_equal",k.token,"!="),greater_than:new lt("greater_than",k.token,">"),greater_than_equal:new lt("greater_than_equal",k.token,">="),shift_right:new lt("shift_right",k.token,">>"),less_than:new lt("less_than",k.token,"<"),less_than_equal:new lt("less_than_equal",k.token,"<="),shift_left:new lt("shift_left",k.token,"<<"),modulo:new lt("modulo",k.token,"%"),minus:new lt("minus",k.token,"-"),minus_minus:new lt("minus_minus",k.token,"--"),period:new lt("period",k.token,"."),plus:new lt("plus",k.token,"+"),plus_plus:new lt("plus_plus",k.token,"++"),or:new lt("or",k.token,"|"),or_or:new lt("or_or",k.token,"||"),paren_left:new lt("paren_left",k.token,"("),paren_right:new lt("paren_right",k.token,")"),semicolon:new lt("semicolon",k.token,";"),star:new lt("star",k.token,"*"),tilde:new lt("tilde",k.token,"~"),underscore:new lt("underscore",k.token,"_"),xor:new lt("xor",k.token,"^"),plus_equal:new lt("plus_equal",k.token,"+="),minus_equal:new lt("minus_equal",k.token,"-="),times_equal:new lt("times_equal",k.token,"*="),division_equal:new lt("division_equal",k.token,"/="),modulo_equal:new lt("modulo_equal",k.token,"%="),and_equal:new lt("and_equal",k.token,"&="),or_equal:new lt("or_equal",k.token,"|="),xor_equal:new lt("xor_equal",k.token,"^="),shift_right_equal:new lt("shift_right_equal",k.token,">>="),shift_left_equal:new lt("shift_left_equal",k.token,"<<=")},ct.storage_class=[b.keywords.function,b.keywords.private,b.keywords.workgroup,b.keywords.uniform,b.keywords.storage],ct.access_mode=[b.keywords.read,b.keywords.write,b.keywords.read_write],ct.sampler_type=[b.keywords.sampler,b.keywords.sampler_comparison],ct.sampled_texture_type=[b.keywords.texture_1d,b.keywords.texture_2d,b.keywords.texture_2d_array,b.keywords.texture_3d,b.keywords.texture_cube,b.keywords.texture_cube_array],ct.multisampled_texture_type=[b.keywords.texture_multisampled_2d],ct.storage_texture_type=[b.keywords.texture_storage_1d,b.keywords.texture_storage_2d,b.keywords.texture_storage_2d_array,b.keywords.texture_storage_3d],ct.depth_texture_type=[b.keywords.texture_depth_2d,b.keywords.texture_depth_2d_array,b.keywords.texture_depth_cube,b.keywords.texture_depth_cube_array,b.keywords.texture_depth_multisampled_2d],ct.texture_external_type=[b.keywords.texture_external],ct.any_texture_type=[...b.sampled_texture_type,...b.multisampled_texture_type,...b.storage_texture_type,...b.depth_texture_type,...b.texture_external_type],ct.texel_format=[b.keywords.r8unorm,b.keywords.r8snorm,b.keywords.r8uint,b.keywords.r8sint,b.keywords.r16uint,b.keywords.r16sint,b.keywords.r16float,b.keywords.rg8unorm,b.keywords.rg8snorm,b.keywords.rg8uint,b.keywords.rg8sint,b.keywords.r32uint,b.keywords.r32sint,b.keywords.r32float,b.keywords.rg16uint,b.keywords.rg16sint,b.keywords.rg16float,b.keywords.rgba8unorm,b.keywords.rgba8unorm_srgb,b.keywords.rgba8snorm,b.keywords.rgba8uint,b.keywords.rgba8sint,b.keywords.bgra8unorm,b.keywords.bgra8unorm_srgb,b.keywords.rgb10a2unorm,b.keywords.rg11b10float,b.keywords.rg32uint,b.keywords.rg32sint,b.keywords.rg32float,b.keywords.rgba16uint,b.keywords.rgba16sint,b.keywords.rgba16float,b.keywords.rgba32uint,b.keywords.rgba32sint,b.keywords.rgba32float],ct.const_literal=[b.tokens.int_literal,b.tokens.uint_literal,b.tokens.decimal_float_literal,b.tokens.hex_float_literal,b.keywords.true,b.keywords.false],ct.literal_or_ident=[b.tokens.ident,b.tokens.int_literal,b.tokens.uint_literal,b.tokens.decimal_float_literal,b.tokens.hex_float_literal],ct.element_count_expression=[b.tokens.int_literal,b.tokens.uint_literal,b.tokens.ident],ct.template_types=[b.keywords.vec2,b.keywords.vec3,b.keywords.vec4,b.keywords.mat2x2,b.keywords.mat2x3,b.keywords.mat2x4,b.keywords.mat3x2,b.keywords.mat3x3,b.keywords.mat3x4,b.keywords.mat4x2,b.keywords.mat4x3,b.keywords.mat4x4,b.keywords.atomic,b.keywords.bitcast,...b.any_texture_type],ct.attribute_name=[b.tokens.ident,b.keywords.block],ct.assignment_operators=[b.tokens.equal,b.tokens.plus_equal,b.tokens.minus_equal,b.tokens.times_equal,b.tokens.division_equal,b.tokens.modulo_equal,b.tokens.and_equal,b.tokens.or_equal,b.tokens.xor_equal,b.tokens.shift_right_equal,b.tokens.shift_left_equal],ct.increment_operators=[b.tokens.plus_plus,b.tokens.minus_minus];class ht{constructor(t,e,r){this.type=t,this.lexeme=e,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=ct.template_types.indexOf(this.type)}isArrayType(){return this.type==ct.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class dt{constructor(t){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=t?t:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new ht(ct.eof,"",this._line)),this._tokens}scanToken(){let t=this._advance();if("\n"==t)return this._line++,!0;if(this._isWhitespace(t))return!0;if("/"==t){if("/"==this._peekAhead()){for(;"\n"!=t;){if(this._isAtEnd())return!0;t=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let e=1;for(;e>0;){if(this._isAtEnd())return!0;if(t=this._advance(),"\n"==t)this._line++;else if("*"==t){if("/"==this._peekAhead()&&(this._advance(),e--,0==e))return!0}else"/"==t&&"*"==this._peekAhead()&&(this._advance(),e++)}return!0}}let e=ct.none;for(;;){let r=this._findType(t);const n=this._peekAhead();if(">"==t&&(">"==n||"="==n)){let t=!1,e=this._tokens.length-1;for(let r=0;r<4&&e>=0;++r,--e)if(this._tokens[e].type===ct.tokens.less_than){e>0&&this._tokens[e-1].isArrayOrTemplateType()&&(t=!0);break}if(t)return this._addToken(r),!0}if(r===ct.none){let n=t,s=0;const i=2;for(let t=0;t<i;++t)if(n+=this._peekAhead(t),r=this._findType(n),r!==ct.none){s=t;break}if(r===ct.none)return e!==ct.none&&(this._current--,this._addToken(e),!0);t=n,this._current+=s+1}if(e=r,this._isAtEnd())break;t+=this._advance()}return e!==ct.none&&(this._addToken(e),!0)}_findType(t){for(const e in ct.keywords){const r=ct.keywords[e];if(this._match(t,r.rule))return r}for(const e in ct.tokens){const r=ct.tokens[e];if(this._match(t,r.rule))return r}return ct.none}_match(t,e){if("string"==typeof e){if(e==t)return!0}else{const r=e.exec(t);if(r&&0==r.index&&r[0]==t)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(t){return" "==t||"\t"==t||"\r"==t}_advance(t=0){let e=this._source[this._current];return t=t||0,t++,this._current+=t,e}_peekAhead(t=0){return t=t||0,this._current+t>=this._source.length?"\0":this._source[this._current+t]}_addToken(t){const e=this._source.substring(this._start,this._current);this._tokens.push(new ht(t,e,this._line))}}class ft{constructor(){this._tokens=[],this._current=0,this._context=new u}parse(t){this._initialize(t);let e=[];for(;!this._isAtEnd();){const t=this._global_decl_or_directive();if(!t)break;e.push(t)}return e}_initialize(t){if(t)if("string"==typeof t){const e=new dt(t);this._tokens=e.scanTokens()}else this._tokens=t;else this._tokens=[];this._current=0}_error(t,e){return console.error(t,e),{token:t,message:e,toString:function(){return`${e}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==ct.eof}_match(t){if(t instanceof lt)return!!this._check(t)&&(this._advance(),!0);for(let e=0,r=t.length;e<r;++e){const r=t[e];if(this._check(r))return this._advance(),!0}return!1}_consume(t,e){if(this._check(t))return this._advance();throw this._error(this._peek(),e)}_check(t){if(this._isAtEnd())return!1;const e=this._peek();if(t instanceof Array){let r=e.type;return-1!=t.indexOf(r)}return e.type==t}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(ct.tokens.semicolon)&&!this._isAtEnd(););if(this._match(ct.keywords.alias)){const t=this._type_alias();return this._consume(ct.tokens.semicolon,"Expected ';'"),t}if(this._match(ct.keywords.enable)){const t=this._enable_directive();return this._consume(ct.tokens.semicolon,"Expected ';'"),t}const t=this._attribute();if(this._check(ct.keywords.var)){const e=this._global_variable_decl();return null!=e&&(e.attributes=t),this._consume(ct.tokens.semicolon,"Expected ';'."),e}if(this._check(ct.keywords.override)){const e=this._override_variable_decl();return null!=e&&(e.attributes=t),this._consume(ct.tokens.semicolon,"Expected ';'."),e}if(this._check(ct.keywords.let)){const e=this._global_let_decl();return null!=e&&(e.attributes=t),this._consume(ct.tokens.semicolon,"Expected ';'."),e}if(this._check(ct.keywords.const)){const e=this._global_const_decl();return null!=e&&(e.attributes=t),this._consume(ct.tokens.semicolon,"Expected ';'."),e}if(this._check(ct.keywords.struct)){const e=this._struct_decl();return null!=e&&(e.attributes=t),e}if(this._check(ct.keywords.fn)){const e=this._function_decl();return null!=e&&(e.attributes=t),e}return null}_function_decl(){if(!this._match(ct.keywords.fn))return null;const t=this._consume(ct.tokens.ident,"Expected function name.").toString();this._consume(ct.tokens.paren_left,"Expected '(' for function arguments.");const e=[];if(!this._check(ct.tokens.paren_right))do{if(this._check(ct.tokens.paren_right))break;const t=this._attribute(),r=this._consume(ct.tokens.ident,"Expected argument name.").toString();this._consume(ct.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n,e.push(new it(r,s,t)))}while(this._match(ct.tokens.comma));this._consume(ct.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(ct.tokens.arrow)){const t=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=t)}const n=this._compound_statement();return new h(t,e,r,n)}_compound_statement(){const t=[];for(this._consume(ct.tokens.brace_left,"Expected '{' for block.");!this._check(ct.tokens.brace_right);){const e=this._statement();null!==e&&t.push(e)}return this._consume(ct.tokens.brace_right,"Expected '}' for block."),t}_statement(){for(;this._match(ct.tokens.semicolon)&&!this._isAtEnd(););if(this._check(ct.keywords.if))return this._if_statement();if(this._check(ct.keywords.switch))return this._switch_statement();if(this._check(ct.keywords.loop))return this._loop_statement();if(this._check(ct.keywords.for))return this._for_statement();if(this._check(ct.keywords.while))return this._while_statement();if(this._check(ct.keywords.continuing))return this._continuing_statement();if(this._check(ct.keywords.static_assert))return this._static_assert_statement();if(this._check(ct.tokens.brace_left))return this._compound_statement();let t=null;return t=this._check(ct.keywords.return)?this._return_statement():this._check([ct.keywords.var,ct.keywords.let,ct.keywords.const])?this._variable_statement():this._match(ct.keywords.discard)?new q:this._match(ct.keywords.break)?new N:this._match(ct.keywords.continue)?new F:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=t&&this._consume(ct.tokens.semicolon,"Expected ';' after statement."),t}_static_assert_statement(){if(!this._match(ct.keywords.static_assert))return null;let t=this._optional_paren_expression();return new d(t)}_while_statement(){if(!this._match(ct.keywords.while))return null;let t=this._optional_paren_expression();const e=this._compound_statement();return new f(t,e)}_continuing_statement(){if(!this._match(ct.keywords.continuing))return null;const t=this._compound_statement();return new p(t)}_for_statement(){if(!this._match(ct.keywords.for))return null;this._consume(ct.tokens.paren_left,"Expected '('.");const t=this._check(ct.tokens.semicolon)?null:this._for_init();this._consume(ct.tokens.semicolon,"Expected ';'.");const e=this._check(ct.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(ct.tokens.semicolon,"Expected ';'.");const r=this._check(ct.tokens.paren_right)?null:this._for_increment();this._consume(ct.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new _(t,e,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(ct.keywords.var)){const t=this._variable_decl();if(null===t)throw this._error(this._peek(),"Variable declaration expected.");let e=null;return this._match(ct.tokens.equal)&&(e=this._short_circuit_or_expression()),new m(t.name,t.type,t.storage,t.access,e)}if(this._match(ct.keywords.let)){const t=this._consume(ct.tokens.ident,"Expected name for let.").toString();let e=null;if(this._match(ct.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(ct.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new w(t,e,null,null,r)}if(this._match(ct.keywords.const)){const t=this._consume(ct.tokens.ident,"Expected name for const.").toString();let e=null;if(this._match(ct.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(ct.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new y(t,e,null,null,r)}return null}_increment_decrement_statement(){const t=this._current,e=this._unary_expression();if(null==e)return null;if(!this._check(ct.increment_operators))return this._current=t,null;const r=this._consume(ct.increment_operators,"Expected increment operator");return new S(r.type===ct.tokens.plus_plus?x.increment:x.decrement,e)}_assignment_statement(){let t=null;if(this._check(ct.tokens.brace_right))return null;let e=this._match(ct.tokens.underscore);if(e||(t=this._unary_expression()),!e&&null==t)return null;const r=this._consume(ct.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new T(v.parse(r.lexeme),t,n)}_func_call_statement(){if(!this._check(ct.tokens.ident))return null;const t=this._current,e=this._consume(ct.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=t,null):new A(e.lexeme,r)}_loop_statement(){if(!this._match(ct.keywords.loop))return null;this._consume(ct.tokens.brace_left,"Expected '{' for loop.");const t=[];let e=this._statement();for(;null!==e;){if(Array.isArray(e))for(let r of e)t.push(r);else t.push(e);e=this._statement()}let r=null;return this._match(ct.keywords.continuing)&&(r=this._compound_statement()),this._consume(ct.tokens.brace_right,"Expected '}' for loop."),new E(t,r)}_switch_statement(){if(!this._match(ct.keywords.switch))return null;const t=this._optional_paren_expression();this._consume(ct.tokens.brace_left,"Expected '{' for switch.");const e=this._switch_body();if(null==e||0==e.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(ct.tokens.brace_right,"Expected '}' for switch."),new P(t,e)}_switch_body(){const t=[];if(this._match(ct.keywords.case)){const e=this._case_selectors();this._match(ct.tokens.colon),this._consume(ct.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(ct.tokens.brace_right,"Exected '}' for switch case."),t.push(new nt(e,r))}if(this._match(ct.keywords.default)){this._match(ct.tokens.colon),this._consume(ct.tokens.brace_left,"Exected '{' for switch default.");const e=this._case_body();this._consume(ct.tokens.brace_right,"Exected '}' for switch default."),t.push(new st(e))}if(this._check([ct.keywords.default,ct.keywords.case])){const e=this._switch_body();t.push(e[0])}return t}_case_selectors(){var t,e,r,n;const s=[null!==(e=null===(t=this._shift_expression())||void 0===t?void 0:t.evaluate(this._context).toString())&&void 0!==e?e:""];for(;this._match(ct.tokens.comma);)s.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return s}_case_body(){if(this._match(ct.keywords.fallthrough))return this._consume(ct.tokens.semicolon,"Expected ';'"),[];let t=this._statement();if(null==t)return[];t instanceof Array||(t=[t]);const e=this._case_body();return 0==e.length?t:[...t,e[0]]}_if_statement(){if(!this._match(ct.keywords.if))return null;const t=this._optional_paren_expression(),e=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(ct.keywords.else)&&(n=this._compound_statement()),new C(t,e,r,n)}_match_elseif(){return this._tokens[this._current].type===ct.keywords.else&&this._tokens[this._current+1].type===ct.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(t=[]){const e=this._optional_paren_expression(),r=this._compound_statement();return t.push(new at(e,r)),this._match_elseif()&&this._elseif_statement(t),t}_return_statement(){if(!this._match(ct.keywords.return))return null;const t=this._short_circuit_or_expression();return new B(t)}_short_circuit_or_expression(){let t=this._short_circuit_and_expr();for(;this._match(ct.tokens.or_or);)t=new et(this._previous().toString(),t,this._short_circuit_and_expr());return t}_short_circuit_and_expr(){let t=this._inclusive_or_expression();for(;this._match(ct.tokens.and_and);)t=new et(this._previous().toString(),t,this._inclusive_or_expression());return t}_inclusive_or_expression(){let t=this._exclusive_or_expression();for(;this._match(ct.tokens.or);)t=new et(this._previous().toString(),t,this._exclusive_or_expression());return t}_exclusive_or_expression(){let t=this._and_expression();for(;this._match(ct.tokens.xor);)t=new et(this._previous().toString(),t,this._and_expression());return t}_and_expression(){let t=this._equality_expression();for(;this._match(ct.tokens.and);)t=new et(this._previous().toString(),t,this._equality_expression());return t}_equality_expression(){const t=this._relational_expression();return this._match([ct.tokens.equal_equal,ct.tokens.not_equal])?new et(this._previous().toString(),t,this._relational_expression()):t}_relational_expression(){let t=this._shift_expression();for(;this._match([ct.tokens.less_than,ct.tokens.greater_than,ct.tokens.less_than_equal,ct.tokens.greater_than_equal]);)t=new et(this._previous().toString(),t,this._shift_expression());return t}_shift_expression(){let t=this._additive_expression();for(;this._match([ct.tokens.shift_left,ct.tokens.shift_right]);)t=new et(this._previous().toString(),t,this._additive_expression());return t}_additive_expression(){let t=this._multiplicative_expression();for(;this._match([ct.tokens.plus,ct.tokens.minus]);)t=new et(this._previous().toString(),t,this._multiplicative_expression());return t}_multiplicative_expression(){let t=this._unary_expression();for(;this._match([ct.tokens.star,ct.tokens.forward_slash,ct.tokens.modulo]);)t=new et(this._previous().toString(),t,this._unary_expression());return t}_unary_expression(){return this._match([ct.tokens.minus,ct.tokens.bang,ct.tokens.tilde,ct.tokens.star,ct.tokens.and])?new tt(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const t=this._primary_expression(),e=this._postfix_expression();return e&&(t.postfix=e),t}_postfix_expression(){if(this._match(ct.tokens.bracket_left)){const t=this._short_circuit_or_expression();this._consume(ct.tokens.bracket_right,"Expected ']'.");const e=this._postfix_expression();return e&&(t.postfix=e),t}if(this._match(ct.tokens.period)){const t=this._consume(ct.tokens.ident,"Expected member name."),e=this._postfix_expression(),r=new Y(t.lexeme);return e&&(r.postfix=e),r}return null}_getStruct(t){return this._context.aliases.has(t)?this._context.aliases.get(t).type:this._context.structs.has(t)?this._context.structs.get(t):null}_primary_expression(){if(this._match(ct.tokens.ident)){const t=this._previous().toString();if(this._check(ct.tokens.paren_left)){const e=this._argument_expression_list(),r=this._getStruct(t);return null!=r?new j(r,e):new H(t,e)}if(this._context.constants.has(t)){const e=this._context.constants.get(t);return new $(t,e.value)}return new X(t)}if(this._match(ct.const_literal))return new K(parseFloat(this._previous().toString()));if(this._check(ct.tokens.paren_left))return this._paren_expression();if(this._match(ct.keywords.bitcast)){this._consume(ct.tokens.less_than,"Expected '<'.");const t=this._type_decl();this._consume(ct.tokens.greater_than,"Expected '>'.");const e=this._paren_expression();return new W(t,e)}const t=this._type_decl(),e=this._argument_expression_list();return new Q(t,e)}_argument_expression_list(){if(!this._match(ct.tokens.paren_left))return null;const t=[];do{if(this._check(ct.tokens.paren_right))break;const e=this._short_circuit_or_expression();t.push(e)}while(this._match(ct.tokens.comma));return this._consume(ct.tokens.paren_right,"Expected ')' for agument list"),t}_optional_paren_expression(){this._match(ct.tokens.paren_left);const t=this._short_circuit_or_expression();return this._match(ct.tokens.paren_right),new Z([t])}_paren_expression(){this._consume(ct.tokens.paren_left,"Expected '('.");const t=this._short_circuit_or_expression();return this._consume(ct.tokens.paren_right,"Expected ')'."),new Z([t])}_struct_decl(){if(!this._match(ct.keywords.struct))return null;const t=this._consume(ct.tokens.ident,"Expected name for struct.").toString();this._consume(ct.tokens.brace_left,"Expected '{' for struct body.");const e=[];for(;!this._check(ct.tokens.brace_right);){const t=this._attribute(),r=this._consume(ct.tokens.ident,"Expected variable name.").toString();this._consume(ct.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n),this._check(ct.tokens.brace_right)?this._match(ct.tokens.comma):this._consume(ct.tokens.comma,"Expected ',' for struct member."),e.push(new ot(r,s,t))}this._consume(ct.tokens.brace_right,"Expected '}' after struct body.");const r=new D(t,e);return this._context.structs.set(t,r),r}_global_variable_decl(){const t=this._variable_decl();return t&&this._match(ct.tokens.equal)&&(t.value=this._const_expression()),t}_override_variable_decl(){const t=this._override_decl();return t&&this._match(ct.tokens.equal)&&(t.value=this._const_expression()),t}_global_const_decl(){if(!this._match(ct.keywords.const))return null;const t=this._consume(ct.tokens.ident,"Expected variable name");let e=null;if(this._match(ct.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;if(this._match(ct.tokens.equal)){const t=this._short_circuit_or_expression();if(t instanceof j)r=t;else if(t instanceof $&&t.initializer instanceof j)r=t.initializer;else try{const e=t.evaluate(this._context);r=new K(e)}catch(e){r=t}}const n=new y(t.toString(),e,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(ct.keywords.let))return null;const t=this._consume(ct.tokens.ident,"Expected variable name");let e=null;if(this._match(ct.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;return this._match(ct.tokens.equal)&&(r=this._const_expression()),new w(t.toString(),e,"","",r)}_const_expression(){if(this._match(ct.const_literal))return new Y(this._previous().toString());const t=this._type_decl();this._consume(ct.tokens.paren_left,"Expected '('.");let e=[];for(;!this._check(ct.tokens.paren_right)&&(e.push(this._const_expression()),this._check(ct.tokens.comma));)this._advance();return this._consume(ct.tokens.paren_right,"Expected ')'."),new j(t,e)}_variable_decl(){if(!this._match(ct.keywords.var))return null;let t="",e="";this._match(ct.tokens.less_than)&&(t=this._consume(ct.storage_class,"Expected storage_class.").toString(),this._match(ct.tokens.comma)&&(e=this._consume(ct.access_mode,"Expected access_mode.").toString()),this._consume(ct.tokens.greater_than,"Expected '>'."));const r=this._consume(ct.tokens.ident,"Expected variable name");let n=null;if(this._match(ct.tokens.colon)){const t=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=t)}return new m(r.toString(),n,t,e,null)}_override_decl(){if(!this._match(ct.keywords.override))return null;const t=this._consume(ct.tokens.ident,"Expected variable name");let e=null;if(this._match(ct.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}return new g(t.toString(),e,null)}_enable_directive(){const t=this._consume(ct.tokens.ident,"identity expected.");return new z(t.toString())}_type_alias(){const t=this._consume(ct.tokens.ident,"identity expected.");this._consume(ct.tokens.equal,"Expected '=' for type alias.");let e=this._type_decl();if(null===e)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);const r=new U(t.toString(),e);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([ct.tokens.ident,...ct.texel_format,ct.keywords.bool,ct.keywords.f32,ct.keywords.i32,ct.keywords.u32])){const t=this._advance(),e=t.toString();return this._context.structs.has(e)?this._context.structs.get(e):this._context.aliases.has(e)?this._context.aliases.get(e).type:new I(t.toString())}if(this._check(ct.template_types)){let t=this._advance().toString(),e=null,r=null;return this._match(ct.tokens.less_than)&&(e=this._type_decl(),r=null,this._match(ct.tokens.comma)&&(r=this._consume(ct.access_mode,"Expected access_mode for pointer").toString()),this._consume(ct.tokens.greater_than,"Expected '>' for type.")),new G(t,e,r)}if(this._match(ct.keywords.ptr)){let t=this._previous().toString();this._consume(ct.tokens.less_than,"Expected '<' for pointer.");const e=this._consume(ct.storage_class,"Expected storage_class for pointer");this._consume(ct.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(ct.tokens.comma)&&(n=this._consume(ct.access_mode,"Expected access_mode for pointer").toString()),this._consume(ct.tokens.greater_than,"Expected '>' for pointer."),new L(t,e.toString(),r,n)}let t=this._texture_sampler_types();if(t)return t;const e=this._attribute();if(this._match(ct.keywords.array)){let t=null,r=-1;const n=this._previous();if(this._match(ct.tokens.less_than)){t=this._type_decl(),this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);let e="";this._match(ct.tokens.comma)&&(e=this._shift_expression().evaluate(this._context).toString()),this._consume(ct.tokens.greater_than,"Expected '>' for array."),r=e?parseInt(e):0}return new R(n.toString(),e,t,r)}return null}_texture_sampler_types(){if(this._match(ct.sampler_type))return new O(this._previous().toString(),null,null);if(this._match(ct.depth_texture_type))return new O(this._previous().toString(),null,null);if(this._match(ct.sampled_texture_type)||this._match(ct.multisampled_texture_type)){const t=this._previous();this._consume(ct.tokens.less_than,"Expected '<' for sampler type.");const e=this._type_decl();return this._consume(ct.tokens.greater_than,"Expected '>' for sampler type."),new O(t.toString(),e,null)}if(this._match(ct.storage_texture_type)){const t=this._previous();this._consume(ct.tokens.less_than,"Expected '<' for sampler type.");const e=this._consume(ct.texel_format,"Invalid texel format.").toString();this._consume(ct.tokens.comma,"Expected ',' after texel format.");const r=this._consume(ct.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(ct.tokens.greater_than,"Expected '>' for sampler type."),new O(t.toString(),e,r)}return null}_attribute(){let t=[];for(;this._match(ct.tokens.attr);){const e=this._consume(ct.attribute_name,"Expected attribute name"),r=new ut(e.toString(),null);if(this._match(ct.tokens.paren_left)){if(r.value=this._consume(ct.literal_or_ident,"Expected attribute value").toString(),this._check(ct.tokens.comma)){this._advance();do{const t=this._consume(ct.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(t)}while(this._match(ct.tokens.comma))}this._consume(ct.tokens.paren_right,"Expected ')'")}t.push(r)}for(;this._match(ct.tokens.attr_left);){if(!this._check(ct.tokens.attr_right))do{const e=this._consume(ct.attribute_name,"Expected attribute name"),r=new ut(e.toString(),null);if(this._match(ct.tokens.paren_left)){if(r.value=[this._consume(ct.literal_or_ident,"Expected attribute value").toString()],this._check(ct.tokens.comma)){this._advance();do{const t=this._consume(ct.literal_or_ident,"Expected attribute value").toString();r.value.push(t)}while(this._match(ct.tokens.comma))}this._consume(ct.tokens.paren_right,"Expected ')'")}t.push(r)}while(this._match(ct.tokens.comma));this._consume(ct.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==t.length?null:t}}class pt{constructor(t,e){this.name=t,this.attributes=e,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class _t{constructor(t,e,r){this.name=t,this.type=e,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class mt extends pt{constructor(t,e){super(t,e),this.members=[],this.align=0}get isStruct(){return!0}}class gt extends pt{constructor(t,e){super(t,e),this.count=0,this.stride=0}get isArray(){return!0}}class wt extends pt{constructor(t,e,r){super(t,r),this.format=e}get isTemplate(){return!0}}!function(t){t[t.Uniform=0]="Uniform",t[t.Storage=1]="Storage",t[t.Texture=2]="Texture",t[t.Sampler=3]="Sampler"}(M||(M={}));class yt{constructor(t,e,r,n,s,i){this.name=t,this.type=e,this.group=r,this.binding=n,this.attributes=s,this.resourceType=i}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class xt{constructor(t,e){this.name=t,this.type=e}}class vt{constructor(t,e){this.align=t,this.size=e}}class bt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n,this.interpolation=null}}class kt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n}}class Mt{constructor(t,e=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=t,this.stage=e}}class St{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Tt{constructor(t,e,r,n){this.name=t,this.type=e,this.attributes=r,this.id=n}}class At{constructor(t){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new St,this._types=new Map,t&&this.update(t)}update(t){const e=(new ft).parse(t);for(const t of e){if(t instanceof D){const e=this._getTypeInfo(t,null);e instanceof mt&&this.structs.push(e)}if(t instanceof U&&this.aliases.push(this._getAliasInfo(t)),t instanceof g){const e=t,r=this._getAttributeNum(e.attributes,"id",0),n=null!=e.type?this._getTypeInfo(e.type,e.attributes):null;this.overrides.push(new Tt(e.name,n,e.attributes,r))}if(this._isUniformVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new yt(e.name,s,r,n,e.attributes,M.Uniform);this.uniforms.push(i)}if(this._isStorageVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new yt(e.name,s,r,n,e.attributes,M.Storage);this.storage.push(i)}if(this._isTextureVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new yt(e.name,s,r,n,e.attributes,M.Texture);this.textures.push(i)}if(this._isSamplerVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new yt(e.name,s,r,n,e.attributes,M.Sampler);this.samplers.push(i)}if(t instanceof h){const e=this._getAttribute(t,"vertex"),r=this._getAttribute(t,"fragment"),n=this._getAttribute(t,"compute"),s=e||r||n;if(s){const e=new Mt(t.name,s.name);e.inputs=this._getInputs(t.args),e.outputs=this._getOutputs(t.returnType),this.entry[s.name].push(e)}}}}getBindGroups(){const t=[];function e(e,r){e>=t.length&&(t.length=e+1),void 0===t[e]&&(t[e]=[]),r>=t[e].length&&(t[e].length=r+1)}for(const r of this.uniforms)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.storage)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.textures)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.samplers)e(r.group,r.binding),t[r.group][r.binding]=r;return t}_getOutputs(t,e=void 0){if(void 0===e&&(e=[]),t instanceof D)this._getStructOutputs(t,e);else{const r=this._getOutputInfo(t);null!==r&&e.push(r)}return e}_getStructOutputs(t,e){for(const r of t.members)if(r.type instanceof D)this._getStructOutputs(r.type,e);else{const t=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==t){const n=this._getTypeInfo(r.type,r.type.attributes),s=this._parseInt(t.value),i=new kt(r.name,n,t.name,s);e.push(i)}}}_getOutputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getTypeInfo(t,t.attributes),n=this._parseInt(e.value);return new kt("",r,e.name,n)}return null}_getInputs(t,e=void 0){void 0===e&&(e=[]);for(const r of t)if(r.type instanceof D)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}return e}_getStructInputs(t,e){for(const r of t.members)if(r.type instanceof D)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}}_getInputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getAttribute(t,"interpolation"),n=this._getTypeInfo(t.type,t.attributes),s=this._parseInt(e.value),i=new bt(t.name,n,e.name,s);return null!==r&&(i.interpolation=this._parseString(r.value)),i}return null}_parseString(t){return t instanceof Array&&(t=t[0]),t}_parseInt(t){t instanceof Array&&(t=t[0]);const e=parseInt(t);return isNaN(e)?t:e}_getAlias(t){for(const e of this.aliases)if(e.name==t)return e.type;return null}_getAliasInfo(t){return new xt(t.name,this._getTypeInfo(t.type,null))}_getTypeInfo(t,e){if(this._types.has(t))return this._types.get(t);if(t instanceof R){const r=t,n=this._getTypeInfo(r.format,r.attributes),s=new gt(r.name,e);return s.format=n,s.count=r.count,this._types.set(t,s),this._updateTypeInfo(s),s}if(t instanceof D){const r=t,n=new mt(r.name,e);for(const t of r.members){const e=this._getTypeInfo(t.type,t.attributes);n.members.push(new _t(t.name,e,t.attributes))}return this._types.set(t,n),this._updateTypeInfo(n),n}if(t instanceof G){const r=t,n=r.format?this._getTypeInfo(r.format,null):null,s=new wt(r.name,n,e);return this._types.set(t,s),this._updateTypeInfo(s),s}const r=new pt(t.name,e);return this._types.set(t,r),this._updateTypeInfo(r),r}_updateTypeInfo(t){var e,r;const n=this._getTypeSize(t);if(t.size=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:0,t instanceof gt){const e=this._getTypeSize(t.format);t.stride=null!==(r=null==e?void 0:e.size)&&void 0!==r?r:0,this._updateTypeInfo(t.format)}t instanceof mt&&this._updateStructInfo(t)}_updateStructInfo(t){var e;let r=0,n=0,s=0,i=0;for(let a=0,o=t.members.length;a<o;++a){const o=t.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(e=this._getAlias(o.type.name))&&void 0!==e||o.type;const l=u.align,c=u.size;r=this._roundUp(l,r+n),n=c,s=r,i=Math.max(i,l),o.offset=r,o.size=c,this._updateTypeInfo(o.type)}t.size=this._roundUp(i,s+n),t.align=i}_getTypeSize(t){var e;if(null==t)return null;const r=this._getAttributeNum(t.attributes,"size",0),n=this._getAttributeNum(t.attributes,"align",0);if(t instanceof _t&&(t=t.type),t instanceof pt){const e=this._getAlias(t.name);null!==e&&(t=e)}{const e=At._typeInfo[t.name];if(void 0!==e){const s="f16"===t.format?2:1;return new vt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}{const e=At._typeInfo[t.name.substring(0,t.name.length-1)];if(e){const s="h"===t.name[t.name.length-1]?2:1;return new vt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}if(t instanceof gt){let s=t,i=8,a=8;const o=this._getTypeSize(s.format);return null!==o&&(a=o.size,i=o.align),a=s.count*this._getAttributeNum(null!==(e=null==t?void 0:t.attributes)&&void 0!==e?e:null,"stride",this._roundUp(i,a)),r&&(a=r),new vt(Math.max(n,i),Math.max(r,a))}if(t instanceof mt){let e=0,s=0,i=0,a=0,o=0;for(const r of t.members){const t=this._getTypeSize(r.type);null!==t&&(e=Math.max(t.align,e),i=this._roundUp(t.align,i+a),a=t.size,o=i)}return s=this._roundUp(e,o+a),new vt(Math.max(n,e),Math.max(r,s))}return null}_isUniformVar(t){return t instanceof m&&"uniform"==t.storage}_isStorageVar(t){return t instanceof m&&"storage"==t.storage}_isTextureVar(t){return t instanceof m&&null!==t.type&&-1!=At._textureTypes.indexOf(t.type.name)}_isSamplerVar(t){return t instanceof m&&null!==t.type&&-1!=At._samplerTypes.indexOf(t.type.name)}_getAttribute(t,e){const r=t;if(!r||!r.attributes)return null;const n=r.attributes;for(let t of n)if(t.name==e)return t;return null}_getAttributeNum(t,e,r){if(null===t)return r;for(let n of t)if(n.name==e){let t=null!==n&&null!==n.value?n.value:r;return t instanceof Array&&(t=t[0]),"number"==typeof t?t:"string"==typeof t?parseInt(t):r}return r}_roundUp(t,e){return Math.ceil(e/t)*t}}function Et(t,e){const r=function(t){return Array.isArray(t)||o(t)?[...t,1,1].slice(0,3):function(t){return[t.width,t.height||1,t.depthOrArrayLayers||1]}(t)}(t),n=Math.max(...r.slice(0,"3d"===e?3:2));return 1+Math.log2(n)|0}At._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},At._textureTypes=ct.any_texture_type.map((t=>t.name)),At._samplerTypes=ct.sampler_type.map((t=>t.name));const Pt=new WeakMap,Ct=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Bt(t){return o(t)||Array.isArray(t)||function(t){const e=t;return o(e.data)||Array.isArray(e.data)}(t)}function zt(t){switch(t){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Ct.entries()].map((([t,{formats:[e,r]}])=>[[e,t],[r,t]])).flat());const Ut={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},qt=/([a-z]+)(\d+)([a-z]+)/;function Nt(t){const[,e,r,n]=qt.exec(t),s=e.length,i=parseInt(r)/8;return{channels:e,numChannels:s,bytesPerChannel:i,bytesPerElement:s*i,Type:Ut[`${r}${n}`]}}function Ft(t,e,r,n={}){r.forEach(((r,s)=>{const i=[0,0,s+(n.baseArrayLayer||0)];if(Bt(r))!function(t,e,r,n){const s=function(t,e){if(o(t))return t;const{Type:r}=Nt(e);return new r(t)}(r.data||r,e.format),i=function(t,e){return[t.width,t.height,t.depthOrArrayLayers].map((t=>Math.max(1,Math.floor(t/1))))}(e),{bytesPerElement:a}=Nt(e.format),u=n.origin||[0,0,0];t.queue.writeTexture({texture:e,origin:u},s,{bytesPerRow:a*i[0],rowsPerImage:i[1]},i)}(t,e,r,{origin:i});else{const s=r,{flipY:a,premultipliedAlpha:o,colorSpace:u}=n;t.queue.copyExternalImageToTexture({source:s,flipY:a},{texture:e,premultipliedAlpha:o,colorSpace:u,origin:i},It(s,n))}})),e.mipLevelCount>1&&function(t,e){let r=Pt.get(t);r||(r={pipelineByFormat:{},moduleByView:{}},Pt.set(t,r));let{sampler:n}=r;const{pipelineByFormat:s,moduleByView:i}=r,a=function(t){switch(t.dimension){case"1d":return"1d";case"3d":return"3d";default:return t.depthOrArrayLayers>1?"2d-array":"2d"}}(e);let o=i[a];o||(o=t.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),i[a]=o),n||(n=t.createSampler({minFilter:"linear"}),r.sampler=n);const u=`${e.format}`;s[u]||(s[u]=t.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:e.format}]}}));const l=s[u],c=t.createCommandEncoder({label:"mip gen encoder"});for(let r=1;r<e.mipLevelCount;++r)for(let s=0;s<e.depthOrArrayLayers;++s){const i=t.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:n},{binding:1,resource:e.createView({dimension:"2d",baseMipLevel:r-1,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:e.createView({baseMipLevel:r,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=c.beginRenderPass(a);o.setPipeline(l),o.setBindGroup(0,i),o.draw(3),o.end()}const h=c.finish();t.queue.submit([h])}(t,e)}function It(t,e){if(t instanceof HTMLVideoElement)return[t.videoWidth,t.videoHeight,1];{const r=t,{width:n,height:s}=r;if(n>0&&s>0&&!Bt(t))return[n,s,1];const i=e.format||"rgba8unorm",{bytesPerElement:a,bytesPerChannel:u}=Nt(i),l=o(t)||Array.isArray(t)?t:t.data;return function(t,e,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(t||e){if(e){if(!t&&(t=r/e)%1)throw new Error("can't guess dimensions")}else if((e=r/t)%1)throw new Error("can't guess dimensions")}else{const s=Math.sqrt(r/("cube"===n?6:1));s%1==0?(t=s,e=s):(t=r,e=1)}const s=r/t/e;if(s%1)throw new Error("can't guess dimensions");return[t,e,s]}(n,s,(o(l)?l.byteLength:l.length*u)/a)}}async function Dt(t,e,r={}){const n=await Promise.all(e.map((t=>async function(t,e={}){const r=await fetch(t),n=await r.blob(),s={...e,...void 0!==e.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,s)}(t))));return function(t,e,r={}){const n=It(e[0],r);n[2]=n[2]>1?n[2]:e.length;const s=t.createTexture({dimension:zt(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Et(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Ft(t,s,e,r),s}(t,n,r)}async function Gt(t,e,r={}){return Dt(t,[e],r)}var Lt;function Rt(t,e,r=1,n=1){const s=r*n,i=new Uint8Array(4*s),[a,o,u,l]=e;for(let t=0;t<s;++t){const e=4*t;i[e]=255*a,i[e+1]=255*o,i[e+2]=255*u,i[e+3]=255*l}const c=t.createTexture({size:{width:r,height:n},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return t.queue.writeTexture({texture:c},i,{bytesPerRow:4*r,rowsPerImage:n},{width:r,height:n}),c}!function(t){t[t.Default=0]="Default",t[t.SolidColor=1]="SolidColor",t[t.VertexNormal=2]="VertexNormal"}(Lt||(Lt={}));class Ot{mode=Lt.Default;tiling={u:1,v:1};ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(t){t&&(this.mode=t.mode??this.mode,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.shininess=t.shininess??this.shininess,this.diffuseMapPath=t.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=t.specularMapPath??this.specularMapPath,this.normalMapPath=t.normalMapPath??this.normalMapPath,this.tiling=t.tiling??this.tiling,this.disableNormalMap=t.disableNormalMap??this.disableNormalMap)}static solidColor(t){return new Ot({mode:Lt.SolidColor,diffuseColor:t})}getBytes(){return new Float32Array([this.mode,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v,...this.ambientColor,...this.specularColor,this.shininess,0,0,0])}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"material",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}async writeTexturesToGpuAsync(t,e){this.ambientMapPath?this._ambientTexture=await Gt(t,this.ambientMapPath,{mips:e}):this._ambientTexture=Rt(t,this.ambientColor),this.diffuseMapPath?this._diffuseTexture=await Gt(t,this.diffuseMapPath,{mips:e}):this._diffuseTexture=Rt(t,this.diffuseColor),this.specularMapPath?this._specularTexture=await Gt(t,this.specularMapPath,{mips:e}):this._specularTexture=Rt(t,this.specularColor),this.normalMapPath?this._normalTexture=await Gt(t,this.normalMapPath,{mips:e}):this._normalTexture=Rt(t,[0,0,1,1])}}class Vt{name;vertices;vertexCount;vertexBufferLayout;topology;material;normalData;normalBufferLayout;vertexBuffer=null;normalBuffer=null;constructor(t,e,r,n,s,i=new Ot,a=null,o=null){this.name=t,this.vertices=e,this.vertexCount=r,this.vertexBufferLayout=n,this.topology=s,this.material=i,this.normalData=a,this.normalBufferLayout=o}writeMeshToGpu(t){if(null!=this.vertexBuffer)return;const e={label:`${this.name} vertex buffer`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};if(this.vertexBuffer=t.createBuffer(e),t.queue.writeBuffer(this.vertexBuffer,0,this.vertices,0),null==this.normalData)return;const r={label:`${this.name} normal buffer`,size:this.normalData.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this.normalBuffer=t.createBuffer(r),t.queue.writeBuffer(this.normalBuffer,0,this.normalData,0)}}var Yt=r(582),jt=r(284);const Ht={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]};function Xt(t,e,r,s=[0,0,0]){let i=Math.sin(e*Math.PI/180),a=Math.cos(e*Math.PI/180);return n.R3.fromValues(t*a+s[0],r+s[1],-t*i+s[2])}function $t(t,e){const r=[],n=14,s=t=>[t.slice(0,3),t.slice(8,10)];for(let i=0;i<e;i++){const[e,a]=s(t.slice(i*n,(i+1)*n));i++;const[o,u]=s(t.slice(i*n,(i+1)*n));i++;const[l,c]=s(t.slice(i*n,(i+1)*n)),[h,d]=Kt(e,o,l,a,u,c);for(let t=0;t<3;t++)r.push(...h),r.push(...d)}return new Float32Array(r)}function Kt(t,e,r,s,i,a,o=!0){const u=n.R3.subtract(e,t),l=n.R3.subtract(r,t),c=n.K4.subtract(i,s),h=n.K4.subtract(a,s),d=1/(c[0]*h[1]-c[1]*h[0]);return[n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,h[1]),n.R3.mulScalar(l,-c[1])),d),n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,-h[0]),n.R3.mulScalar(l,c[0])),o?-d:d)]}var Wt;!function(t){t[t.Direct=0]="Direct",t[t.Point=1]="Point"}(Wt||(Wt={}));class Qt{static _CUBEASSET=function(t){return new Vt("cube_asset",jt.Vk,jt.qw,jt.sY,jt.nk,t??new Ot)}(new Ot({mode:Lt.SolidColor,diffuseColor:[1,1,1,0]}));_model=new a("light",Qt._CUBEASSET);get model(){return this._model}intensity=1;type=Wt.Point;ambientColor=[.2,.2,.2,0];diffuseColor=[.5,.5,.5,0];specularColor=[.8,.8,.8,0];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;useFalloff=!1;_positionOrDirection=[0,30,0];get positionOrDirection(){return this._positionOrDirection}set positionOrDirection(t){this._positionOrDirection=t;let e=this.type==Wt.Point?this._positionOrDirection:n.R3.mulScalar(n.R3.normalize(this._positionOrDirection),-100);this._model.transform=n._E.uniformScale(n._E.translation([...e,0],this._model.transform),.5,this._model.transform)}constructor(t){this._model=new a("light",Qt._CUBEASSET).translate(...this.positionOrDirection).scale(.5,.5,.5),t&&(this.type=t.type??this.type,this.positionOrDirection=t.positionOrDirection??this.positionOrDirection,this.ambientColor=t.ambientColor??this.ambientColor,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.intensity=t.intensity??this.intensity,this.useFalloff=t.useFalloff??this.useFalloff),this.positionOrDirection=this._positionOrDirection}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}getBytes(){return new Float32Array([this.type,this.useFalloff?1:0,0,0,...this.positionOrDirection,0,...this.disableAmbientColor?[0,0,0,1]:n.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor?[0,0,0,1]:n.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor?[0,0,0,1]:n.vh.mulScalar(this.specularColor,this.intensity)])}get size(){return Math.max(this.getBytes().byteLength,80)}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"direct light",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}}const Zt=window.location.pathname;function Jt(){const t=document.createElement("div");return t.style.display="flex",t.style.gap="10px",t}function te(t,e,r,n=!0){let[s,i]=function(t,e=!0){const r=document.createElement("input");r.type="checkbox",r.id=t,r.name=r.id,r.checked=e;const n=document.createElement("label");return n.htmlFor=r.id,n.textContent=r.id,[r,n]}(e,n);t.appendChild(s),t.appendChild(i),s.addEventListener("change",(()=>r(s)))}class ee{isAnimated=!0;camera=new i;lights=[new Qt];models=[];constructor(t){t&&(this.isAnimated=t.isAnimated??!0,this.camera=t.camera??this.camera)}update(t){}attachUi(t){}}class re extends ee{uiContainer;attachUi(t){let e=function(){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t}();this.uiContainer=e;const r=Jt();e.appendChild(r);for(let[t,e]of this.lights.entries())te(r,`${Wt[e.type]}Light_${t.toString().padStart(2,"0")}`,(t=>{e.intensity=t.checked?1:0}));te(r,"isAnimated",(t=>{this.isAnimated=t.checked}),this.isAnimated);const n=Jt();e.appendChild(n),te(n,"ambient",(t=>{for(let e of this.lights.values())e.disableAmbientColor=!t.checked})),te(n,"diffuse",(t=>{for(let e of this.lights.values())e.disableDiffuseColor=!t.checked})),te(n,"specular",(t=>{for(let e of this.lights.values())e.disableSpecularColor=!t.checked})),document.body.insertBefore(e,t.nextSibling)}}class ne extends re{constructor(){super(),this.camera=new i({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new Qt({type:Wt.Point,positionOrDirection:[-30,5,0]}),this.lights[1]=new Qt({type:Wt.Point,positionOrDirection:[30,5,0]}),this.lights[2]=new Qt({type:Wt.Direct,positionOrDirection:[-1,-1,-1]}),this.lights.forEach((t=>t.intensity=.4));let t=function(t){const e=jt.Vk,r=jt.qw,n=$t(e,r);return new Vt("cube_asset",e,r,jt.sY,jt.nk,t??new Ot,n,Yt.aH)}(new Ot({diffuseMapPath:`../${Zt}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${Zt}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`})),e=new a("Cube01",t).translate(-30,0,0).scale(10,10,10);this.models.push(e);let r=function(t=5,e=!1,r){const s=function(t=30,e=!1,r=.7,s=1.5,i=3){if(t<3||r>=s)throw new RangeError("arguments not valid");t+=1;let a=[],o=i/2;const u=[0,0,0];for(let e=0;e<t;e++)a.push([Xt(s,360*e/(t-1),o,u),Xt(s,360*e/(t-1),-o,u),Xt(r,360*e/(t-1),-o,u),Xt(r,360*e/(t-1),o,u)]);let l,c,h,d,f,p,_,m,g=[],w=[],y=[];for(let o=0;o<t-1;o++){l=a[o][0],c=a[o][1],h=a[o][2],d=a[o][3],f=a[o+1][0],p=a[o+1][1],_=a[o+1][2],m=a[o+1][3],g.push(l[0],l[1],l[2],f[0],f[1],f[2],m[0],m[1],m[2],m[0],m[1],m[2],d[0],d[1],d[2],l[0],l[1],l[2],c[0],c[1],c[2],h[0],h[1],h[2],_[0],_[1],_[2],_[0],_[1],_[2],p[0],p[1],p[2],c[0],c[1],c[2],l[0],l[1],l[2],c[0],c[1],c[2],p[0],p[1],p[2],p[0],p[1],p[2],f[0],f[1],f[2],l[0],l[1],l[2],h[0],h[1],h[2],d[0],d[1],d[2],m[0],m[1],m[2],m[0],m[1],m[2],_[0],_[1],_[2],h[0],h[1],h[2]);let u=[l,f,m,m,d,l];for(let t of u){let e=[t[0],t[2]];e=n.K4.divScalar(e,s),e=n.K4.addScaled(n.K4.create(.5,.5),e,.5),y.push(e)}u=[c,h,_,_,p,c];for(let t of u){let e=[t[2],t[0]];e=n.K4.divScalar(e,s),e=n.K4.addScaled(n.K4.create(.5,.5),e,.5),y.push(e)}const x=e=>Math.sqrt(2*e*e*(1-Math.cos(2*Math.PI/t))),v=1*x(s)/i;let b=o*v,k=(o+1)*v;y.push([b,0]),y.push([b,1]),y.push([k,1]),y.push([k,1]),y.push([k,0]),y.push([b,0]);const M=1*x(r)/i;if(k=-o*M,b=-(o+1)*M,y.push([k,1]),y.push([k,0]),y.push([b,0]),y.push([b,0]),y.push([b,1]),y.push([k,1]),w.push(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0),e){let t=n.R3.normalize([l[0],0,l[2]]),e=n.R3.normalize([p[0],0,p[2]]),r=n.R3.mulScalar(t,-1),s=n.R3.mulScalar(e,-1);w.push(...t),w.push(...t),w.push(...e),w.push(...e),w.push(...e),w.push(...t),w.push(...r),w.push(...r),w.push(...s),w.push(...s),w.push(...s),w.push(...r)}else{let t=[l[0]-f[0],0,l[2]-f[2]],e=n.R3.normalize([t[2],0,-t[0]]),r=n.R3.mulScalar(e,-1);for(let t=0;t<6;t++)w.push(...e);for(let t=0;t<6;t++)w.push(...r)}}let x=[];for(let t=0;t<g.length;t+=3)x.push(...g.slice(t,t+3)),x.push(1,1,0,0,1),x.push(...y[t/3]),x.push(...w.slice(t,t+3)),x.push(1);return new Float32Array(x)}(t,e),i=24*t,a=$t(s,i);return new Vt("cylinder_asset",s,i,Ht,jt.nk,r??new Ot,a,Yt.aH)}(100,!0,new Ot({diffuseMapPath:`../${Zt}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${Zt}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`,tiling:{u:2.25,v:2}})),s=new a("Cube01",r).translate(30,0,0).scale(10,10/1.125,10);this.models.push(s)}currentTime=0;startPositions=[];update(t){if(this.isAnimated){0==this.startPositions.length&&this.lights.forEach((t=>this.startPositions.push(t.positionOrDirection))),this.currentTime+=t;for(let t=0;t<this.lights.length-1;t++)this.lights[t].positionOrDirection=[this.startPositions[t][0]+25*Math.sin(this.currentTime),this.startPositions[t][1],this.startPositions[t][2]+25*Math.cos(this.currentTime)]}}attachUi(t){super.attachUi(t);const e=Jt();this.uiContainer.appendChild(e),te(e,"normal_mapping",(t=>{for(let e of this.models)e.asset.material.disableNormalMap=!t.checked}))}}},416:(t,e,r)=>{r.d(e,{K4:()=>E,R3:()=>et,_E:()=>gt,vh:()=>Rt});let n=1e-6,s=Float32Array;function i(t=0,e=0){const r=new s(2);return void 0!==t&&(r[0]=t,void 0!==e&&(r[1]=e)),r}const a=i;function o(t,e,r){return(r=r||new s(2))[0]=t[0]-e[0],r[1]=t[1]-e[1],r}const u=o;function l(t,e,r){return(r=r||new s(2))[0]=t[0]*e,r[1]=t[1]*e,r}const c=l;function h(t,e){return(e=e||new s(2))[0]=1/t[0],e[1]=1/t[1],e}const d=h;function f(t,e){return t[0]*e[0]+t[1]*e[1]}function p(t){const e=t[0],r=t[1];return Math.sqrt(e*e+r*r)}const _=p;function m(t){const e=t[0],r=t[1];return e*e+r*r}const g=m;function w(t,e){const r=t[0]-e[0],n=t[1]-e[1];return Math.sqrt(r*r+n*n)}const y=w;function x(t,e){const r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n}const v=x;function b(t,e){return(e=e||new s(2))[0]=t[0],e[1]=t[1],e}const k=b;function M(t,e,r){return(r=r||new s(2))[0]=t[0]*e[0],r[1]=t[1]*e[1],r}const S=M;function T(t,e,r){return(r=r||new s(2))[0]=t[0]/e[0],r[1]=t[1]/e[1],r}const A=T;var E=Object.freeze({__proto__:null,create:i,setDefaultType:function(t){const e=s;return s=t,e},fromValues:a,set:function(t,e,r){return(r=r||new s(2))[0]=t,r[1]=e,r},ceil:function(t,e){return(e=e||new s(2))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e},floor:function(t,e){return(e=e||new s(2))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e},round:function(t,e){return(e=e||new s(2))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e},clamp:function(t,e=0,r=1,n){return(n=n||new s(2))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n},add:function(t,e,r){return(r=r||new s(2))[0]=t[0]+e[0],r[1]=t[1]+e[1],r},addScaled:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[0],i=t[1],a=Math.sqrt(r*r+n*n)*Math.sqrt(s*s+i*i),o=a&&f(t,e)/a;return Math.acos(o)},subtract:o,sub:u,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},lerp:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n},lerpV:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n},max:function(t,e,r){return(r=r||new s(2))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r},min:function(t,e,r){return(r=r||new s(2))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r},mulScalar:l,scale:c,divScalar:function(t,e,r){return(r=r||new s(2))[0]=t[0]/e,r[1]=t[1]/e,r},inverse:h,invert:d,cross:function(t,e,r){r=r||new s(3);const n=t[0]*e[1]-t[1]*e[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:f,length:p,len:_,lengthSq:m,lenSq:g,distance:w,dist:y,distanceSq:x,distSq:v,normalize:function(t,e){e=e||new s(2);const r=t[0],n=t[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(e[0]=r/i,e[1]=n/i):(e[0]=0,e[1]=0),e},negate:function(t,e){return(e=e||new s(2))[0]=-t[0],e[1]=-t[1],e},copy:b,clone:k,multiply:M,mul:S,divide:T,div:A,random:function(t=1,e){e=e||new s(2);const r=2*Math.random()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e},zero:function(t){return(t=t||new s(2))[0]=0,t[1]=0,t},transformMat4:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=n*e[0]+i*e[4]+e[12],r[1]=n*e[1]+i*e[5]+e[13],r},transformMat3:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=e[0]*n+e[4]*i+e[8],r[1]=e[1]*n+e[5]*i+e[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let P=Float32Array;function C(t,e,r){const n=new P(3);return void 0!==t&&(n[0]=t,void 0!==e&&(n[1]=e,void 0!==r&&(n[2]=r))),n}const B=C;function z(t,e,r){return(r=r||new P(3))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r}const U=z;function q(t,e,r){return(r=r||new P(3))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r}const N=q;function F(t,e){return(e=e||new P(3))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}const I=F;function D(t,e,r){r=r||new P(3);const n=t[2]*e[0]-t[0]*e[2],s=t[0]*e[1]-t[1]*e[0];return r[0]=t[1]*e[2]-t[2]*e[1],r[1]=n,r[2]=s,r}function G(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function L(t){const e=t[0],r=t[1],n=t[2];return Math.sqrt(e*e+r*r+n*n)}const R=L;function O(t){const e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}const V=O;function Y(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}const j=Y;function H(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}const X=H;function $(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=Math.sqrt(r*r+n*n+s*s);return i>1e-5?(e[0]=r/i,e[1]=n/i,e[2]=s/i):(e[0]=0,e[1]=0,e[2]=0),e}function K(t,e){return(e=e||new P(3))[0]=t[0],e[1]=t[1],e[2]=t[2],e}const W=K;function Q(t,e,r){return(r=r||new P(3))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r}const Z=Q;function J(t,e,r){return(r=r||new P(3))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r}const tt=J;var et=Object.freeze({__proto__:null,create:C,setDefaultType:function(t){const e=P;return P=t,e},fromValues:B,set:function(t,e,r,n){return(n=n||new P(3))[0]=t,n[1]=e,n[2]=r,n},ceil:function(t,e){return(e=e||new P(3))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e},floor:function(t,e){return(e=e||new P(3))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e},round:function(t,e){return(e=e||new P(3))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e},clamp:function(t,e=0,r=1,n){return(n=n||new P(3))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n},add:function(t,e,r){return(r=r||new P(3))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r},addScaled:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[2],i=t[0],a=t[1],o=t[2],u=Math.sqrt(r*r+n*n+s*s)*Math.sqrt(i*i+a*a+o*o),l=u&&G(t,e)/u;return Math.acos(l)},subtract:z,sub:U,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},lerp:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n},lerpV:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n},max:function(t,e,r){return(r=r||new P(3))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r},min:function(t,e,r){return(r=r||new P(3))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r},mulScalar:q,scale:N,divScalar:function(t,e,r){return(r=r||new P(3))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r},inverse:F,invert:I,cross:D,dot:G,length:L,len:R,lengthSq:O,lenSq:V,distance:Y,dist:j,distanceSq:H,distSq:X,normalize:$,negate:function(t,e){return(e=e||new P(3))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},copy:K,clone:W,multiply:Q,mul:Z,divide:J,div:tt,random:function(t=1,e){e=e||new P(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,s=Math.sqrt(1-n*n)*t;return e[0]=Math.cos(r)*s,e[1]=Math.sin(r)*s,e[2]=n*t,e},zero:function(t){return(t=t||new P(3))[0]=0,t[1]=0,t[2]=0,t},transformMat4:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2],a=e[3]*n+e[7]*s+e[11]*i+e[15]||1;return r[0]=(e[0]*n+e[4]*s+e[8]*i+e[12])/a,r[1]=(e[1]*n+e[5]*s+e[9]*i+e[13])/a,r[2]=(e[2]*n+e[6]*s+e[10]*i+e[14])/a,r},transformMat4Upper3x3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformMat3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformQuat:function(t,e,r){r=r||new P(3);const n=e[0],s=e[1],i=e[2],a=2*e[3],o=t[0],u=t[1],l=t[2],c=s*l-i*u,h=i*o-n*l,d=n*u-s*o;return r[0]=o+c*a+2*(s*d-i*h),r[1]=u+h*a+2*(i*c-n*d),r[2]=l+d*a+2*(n*h-s*c),r},getTranslation:function(t,e){return(e=e||new P(3))[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||new P(3))[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},getScaling:function(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+l*l+c*c),e}});let rt=Float32Array;function nt(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}const st=nt;function it(t){return(t=t||new rt(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function at(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],l=t[7],c=t[8],h=t[9],d=t[10],f=t[11],p=t[12],_=t[13],m=t[14],g=t[15],w=d*g,y=m*f,x=u*g,v=m*l,b=u*f,k=d*l,M=s*g,S=m*i,T=s*f,A=d*i,E=s*l,P=u*i,C=c*_,B=p*h,z=a*_,U=p*o,q=a*h,N=c*o,F=r*_,I=p*n,D=r*h,G=c*n,L=r*o,R=a*n,O=w*o+v*h+b*_-(y*o+x*h+k*_),V=y*n+M*h+A*_-(w*n+S*h+T*_),Y=x*n+S*o+E*_-(v*n+M*o+P*_),j=k*n+T*o+P*h-(b*n+A*o+E*h),H=1/(r*O+a*V+c*Y+p*j);return e[0]=H*O,e[1]=H*V,e[2]=H*Y,e[3]=H*j,e[4]=H*(y*a+x*c+k*p-(w*a+v*c+b*p)),e[5]=H*(w*r+S*c+T*p-(y*r+M*c+A*p)),e[6]=H*(v*r+M*a+P*p-(x*r+S*a+E*p)),e[7]=H*(b*r+A*a+E*c-(k*r+T*a+P*c)),e[8]=H*(C*l+U*f+q*g-(B*l+z*f+N*g)),e[9]=H*(B*i+F*f+G*g-(C*i+I*f+D*g)),e[10]=H*(z*i+I*l+L*g-(U*i+F*l+R*g)),e[11]=H*(N*i+D*l+R*f-(q*i+G*l+L*f)),e[12]=H*(z*d+N*m+B*u-(q*m+C*u+U*d)),e[13]=H*(D*m+C*s+I*d-(F*d+G*m+B*s)),e[14]=H*(F*u+R*m+U*s-(L*m+z*s+I*u)),e[15]=H*(L*d+q*s+G*u-(D*u+R*d+N*s)),e}const ot=at;function ut(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],l=t[6],c=t[7],h=t[8],d=t[9],f=t[10],p=t[11],_=t[12],m=t[13],g=t[14],w=t[15],y=e[0],x=e[1],v=e[2],b=e[3],k=e[4],M=e[5],S=e[6],T=e[7],A=e[8],E=e[9],P=e[10],C=e[11],B=e[12],z=e[13],U=e[14],q=e[15];return r[0]=n*y+o*x+h*v+_*b,r[1]=s*y+u*x+d*v+m*b,r[2]=i*y+l*x+f*v+g*b,r[3]=a*y+c*x+p*v+w*b,r[4]=n*k+o*M+h*S+_*T,r[5]=s*k+u*M+d*S+m*T,r[6]=i*k+l*M+f*S+g*T,r[7]=a*k+c*M+p*S+w*T,r[8]=n*A+o*E+h*P+_*C,r[9]=s*A+u*E+d*P+m*C,r[10]=i*A+l*E+f*P+g*C,r[11]=a*A+c*E+p*P+w*C,r[12]=n*B+o*z+h*U+_*q,r[13]=s*B+u*z+d*U+m*q,r[14]=i*B+l*z+f*U+g*q,r[15]=a*B+c*z+p*U+w*q,r}const lt=ut;let ct,ht,dt;function ft(t,e,r){r=r||new rt(16);let n=t[0],s=t[1],i=t[2];const a=Math.sqrt(n*n+s*s+i*i);n/=a,s/=a,i/=a;const o=n*n,u=s*s,l=i*i,c=Math.cos(e),h=Math.sin(e),d=1-c;return r[0]=o+(1-o)*c,r[1]=n*s*d+i*h,r[2]=n*i*d-s*h,r[3]=0,r[4]=n*s*d-i*h,r[5]=u+(1-u)*c,r[6]=s*i*d+n*h,r[7]=0,r[8]=n*i*d+s*h,r[9]=s*i*d-n*h,r[10]=l+(1-l)*c,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const pt=ft;function _t(t,e,r,n){n=n||new rt(16);let s=e[0],i=e[1],a=e[2];const o=Math.sqrt(s*s+i*i+a*a);s/=o,i/=o,a/=o;const u=s*s,l=i*i,c=a*a,h=Math.cos(r),d=Math.sin(r),f=1-h,p=u+(1-u)*h,_=s*i*f+a*d,m=s*a*f-i*d,g=s*i*f-a*d,w=l+(1-l)*h,y=i*a*f+s*d,x=s*a*f+i*d,v=i*a*f-s*d,b=c+(1-c)*h,k=t[0],M=t[1],S=t[2],T=t[3],A=t[4],E=t[5],P=t[6],C=t[7],B=t[8],z=t[9],U=t[10],q=t[11];return n[0]=p*k+_*A+m*B,n[1]=p*M+_*E+m*z,n[2]=p*S+_*P+m*U,n[3]=p*T+_*C+m*q,n[4]=g*k+w*A+y*B,n[5]=g*M+w*E+y*z,n[6]=g*S+w*P+y*U,n[7]=g*T+w*C+y*q,n[8]=x*k+v*A+b*B,n[9]=x*M+v*E+b*z,n[10]=x*S+v*P+b*U,n[11]=x*T+v*C+b*q,t!==n&&(n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n}const mt=_t;var gt=Object.freeze({__proto__:null,setDefaultType:function(t){const e=rt;return rt=t,e},create:function(t,e,r,n,s,i,a,o,u,l,c,h,d,f,p,_){const m=new rt(16);return void 0!==t&&(m[0]=t,void 0!==e&&(m[1]=e,void 0!==r&&(m[2]=r,void 0!==n&&(m[3]=n,void 0!==s&&(m[4]=s,void 0!==i&&(m[5]=i,void 0!==a&&(m[6]=a,void 0!==o&&(m[7]=o,void 0!==u&&(m[8]=u,void 0!==l&&(m[9]=l,void 0!==c&&(m[10]=c,void 0!==h&&(m[11]=h,void 0!==d&&(m[12]=d,void 0!==f&&(m[13]=f,void 0!==p&&(m[14]=p,void 0!==_&&(m[15]=_)))))))))))))))),m},set:function(t,e,r,n,s,i,a,o,u,l,c,h,d,f,p,_,m){return(m=m||new rt(16))[0]=t,m[1]=e,m[2]=r,m[3]=n,m[4]=s,m[5]=i,m[6]=a,m[7]=o,m[8]=u,m[9]=l,m[10]=c,m[11]=h,m[12]=d,m[13]=f,m[14]=p,m[15]=_,m},fromMat3:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=0,e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=0,e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},fromQuat:function(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=r+r,o=n+n,u=s+s,l=r*a,c=n*a,h=n*o,d=s*a,f=s*o,p=s*u,_=i*a,m=i*o,g=i*u;return e[0]=1-h-p,e[1]=c+g,e[2]=d-m,e[3]=0,e[4]=c-g,e[5]=1-l-p,e[6]=f+_,e[7]=0,e[8]=d+m,e[9]=f-_,e[10]=1-l-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},negate:function(t,e){return(e=e||new rt(16))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=-t[7],e[8]=-t[8],e[9]=-t[9],e[10]=-t[10],e[11]=-t[11],e[12]=-t[12],e[13]=-t[13],e[14]=-t[14],e[15]=-t[15],e},copy:nt,clone:st,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n&&Math.abs(t[4]-e[4])<n&&Math.abs(t[5]-e[5])<n&&Math.abs(t[6]-e[6])<n&&Math.abs(t[7]-e[7])<n&&Math.abs(t[8]-e[8])<n&&Math.abs(t[9]-e[9])<n&&Math.abs(t[10]-e[10])<n&&Math.abs(t[11]-e[11])<n&&Math.abs(t[12]-e[12])<n&&Math.abs(t[13]-e[13])<n&&Math.abs(t[14]-e[14])<n&&Math.abs(t[15]-e[15])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},identity:it,transpose:function(t,e){if((e=e||new rt(16))===t){let r;return r=t[1],t[1]=t[4],t[4]=r,r=t[2],t[2]=t[8],t[8]=r,r=t[3],t[3]=t[12],t[12]=r,r=t[6],t[6]=t[9],t[9]=r,r=t[7],t[7]=t[13],t[13]=r,r=t[11],t[11]=t[14],t[14]=r,e}const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],l=t[7],c=t[8],h=t[9],d=t[10],f=t[11],p=t[12],_=t[13],m=t[14],g=t[15];return e[0]=r,e[1]=a,e[2]=c,e[3]=p,e[4]=n,e[5]=o,e[6]=h,e[7]=_,e[8]=s,e[9]=u,e[10]=d,e[11]=m,e[12]=i,e[13]=l,e[14]=f,e[15]=g,e},inverse:at,determinant:function(t){const e=t[0],r=t[1],n=t[2],s=t[3],i=t[4],a=t[5],o=t[6],u=t[7],l=t[8],c=t[9],h=t[10],d=t[11],f=t[12],p=t[13],_=t[14],m=t[15],g=h*m,w=_*d,y=o*m,x=_*u,v=o*d,b=h*u,k=n*m,M=_*s,S=n*d,T=h*s,A=n*u,E=o*s;return e*(g*a+x*c+v*p-(w*a+y*c+b*p))+i*(w*r+k*c+T*p-(g*r+M*c+S*p))+l*(y*r+M*a+A*p-(x*r+k*a+E*p))+f*(b*r+S*a+E*c-(v*r+T*a+A*c))},invert:ot,multiply:ut,mul:lt,setTranslation:function(t,e,r){return t!==(r=r||it())&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11]),r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},getTranslation:function(t,e){return(e=e||C())[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||C())[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},setAxis:function(t,e,r,n){n!==t&&(n=nt(t,n));const s=4*r;return n[s+0]=e[0],n[s+1]=e[1],n[s+2]=e[2],n},getScaling:function(t,e){e=e||C();const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+l*l+c*c),e},perspective:function(t,e,r,n,s){s=s||new rt(16);const i=Math.tan(.5*Math.PI-.5*t);if(s[0]=i/e,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,n===1/0)s[10]=-1,s[14]=-r;else{const t=1/(r-n);s[10]=n*t,s[14]=n*r*t}return s},ortho:function(t,e,r,n,s,i,a){return(a=a||new rt(16))[0]=2/(e-t),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(n-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(s-i),a[11]=0,a[12]=(e+t)/(t-e),a[13]=(n+r)/(r-n),a[14]=s/(s-i),a[15]=1,a},frustum:function(t,e,r,n,s,i,a){const o=e-t,u=n-r,l=s-i;return(a=a||new rt(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(t+e)/o,a[9]=(n+r)/u,a[10]=i/l,a[11]=-1,a[12]=0,a[13]=0,a[14]=s*i/l,a[15]=0,a},aim:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),$(z(e,t,dt),dt),$(D(r,dt,ct),ct),$(D(dt,ct,ht),ht),n[0]=ct[0],n[1]=ct[1],n[2]=ct[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},cameraAim:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),$(z(t,e,dt),dt),$(D(r,dt,ct),ct),$(D(dt,ct,ht),ht),n[0]=ct[0],n[1]=ct[1],n[2]=ct[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},lookAt:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),$(z(t,e,dt),dt),$(D(r,dt,ct),ct),$(D(dt,ct,ht),ht),n[0]=ct[0],n[1]=ht[0],n[2]=dt[0],n[3]=0,n[4]=ct[1],n[5]=ht[1],n[6]=dt[1],n[7]=0,n[8]=ct[2],n[9]=ht[2],n[10]=dt[2],n[11]=0,n[12]=-(ct[0]*t[0]+ct[1]*t[1]+ct[2]*t[2]),n[13]=-(ht[0]*t[0]+ht[1]*t[1]+ht[2]*t[2]),n[14]=-(dt[0]*t[0]+dt[1]*t[1]+dt[2]*t[2]),n[15]=1,n},translation:function(t,e){return(e=e||new rt(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},translate:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2],a=t[0],o=t[1],u=t[2],l=t[3],c=t[4],h=t[5],d=t[6],f=t[7],p=t[8],_=t[9],m=t[10],g=t[11],w=t[12],y=t[13],x=t[14],v=t[15];return t!==r&&(r[0]=a,r[1]=o,r[2]=u,r[3]=l,r[4]=c,r[5]=h,r[6]=d,r[7]=f,r[8]=p,r[9]=_,r[10]=m,r[11]=g),r[12]=a*n+c*s+p*i+w,r[13]=o*n+h*s+_*i+y,r[14]=u*n+d*s+m*i+x,r[15]=l*n+f*s+g*i+v,r},rotationX:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateX:function(t,e,r){r=r||new rt(16);const n=t[4],s=t[5],i=t[6],a=t[7],o=t[8],u=t[9],l=t[10],c=t[11],h=Math.cos(e),d=Math.sin(e);return r[4]=h*n+d*o,r[5]=h*s+d*u,r[6]=h*i+d*l,r[7]=h*a+d*c,r[8]=h*o-d*n,r[9]=h*u-d*s,r[10]=h*l-d*i,r[11]=h*c-d*a,t!==r&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationY:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateY:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[8],u=t[9],l=t[10],c=t[11],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n-d*o,r[1]=h*s-d*u,r[2]=h*i-d*l,r[3]=h*a-d*c,r[8]=h*o+d*n,r[9]=h*u+d*s,r[10]=h*l+d*i,r[11]=h*c+d*a,t!==r&&(r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationZ:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateZ:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],l=t[6],c=t[7],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n+d*o,r[1]=h*s+d*u,r[2]=h*i+d*l,r[3]=h*a+d*c,r[4]=h*o-d*n,r[5]=h*u-d*s,r[6]=h*l-d*i,r[7]=h*c-d*a,t!==r&&(r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},axisRotation:ft,rotation:pt,axisRotate:_t,rotate:mt,scaling:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},scale:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2];return r[0]=n*t[0],r[1]=n*t[1],r[2]=n*t[2],r[3]=n*t[3],r[4]=s*t[4],r[5]=s*t[5],r[6]=s*t[6],r[7]=s*t[7],r[8]=i*t[8],r[9]=i*t[9],r[10]=i*t[10],r[11]=i*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},uniformScaling:function(t,e){return(e=e||new rt(16))[0]=t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},uniformScale:function(t,e,r){return(r=r||new rt(16))[0]=e*t[0],r[1]=e*t[1],r[2]=e*t[2],r[3]=e*t[3],r[4]=e*t[4],r[5]=e*t[5],r[6]=e*t[6],r[7]=e*t[7],r[8]=e*t[8],r[9]=e*t[9],r[10]=e*t[10],r[11]=e*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r}});Float32Array;let wt=Float32Array;function yt(t,e,r,n){const s=new wt(4);return void 0!==t&&(s[0]=t,void 0!==e&&(s[1]=e,void 0!==r&&(s[2]=r,void 0!==n&&(s[3]=n)))),s}const xt=yt;function vt(t,e,r){return(r=r||new wt(4))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r[3]=t[3]-e[3],r}const bt=vt;function kt(t,e,r){return(r=r||new wt(4))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r[3]=t[3]*e,r}const Mt=kt;function St(t,e){return(e=e||new wt(4))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}const Tt=St;function At(t){const e=t[0],r=t[1],n=t[2],s=t[3];return Math.sqrt(e*e+r*r+n*n+s*s)}const Et=At;function Pt(t){const e=t[0],r=t[1],n=t[2],s=t[3];return e*e+r*r+n*n+s*s}const Ct=Pt;function Bt(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return Math.sqrt(r*r+n*n+s*s+i*i)}const zt=Bt;function Ut(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return r*r+n*n+s*s+i*i}const qt=Ut;function Nt(t,e){return(e=e||new wt(4))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}const Ft=Nt;function It(t,e,r){return(r=r||new wt(4))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r[3]=t[3]*e[3],r}const Dt=It;function Gt(t,e,r){return(r=r||new wt(4))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r[3]=t[3]/e[3],r}const Lt=Gt;var Rt=Object.freeze({__proto__:null,create:yt,setDefaultType:function(t){const e=wt;return wt=t,e},fromValues:xt,set:function(t,e,r,n,s){return(s=s||new wt(4))[0]=t,s[1]=e,s[2]=r,s[3]=n,s},ceil:function(t,e){return(e=e||new wt(4))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e},floor:function(t,e){return(e=e||new wt(4))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e},round:function(t,e){return(e=e||new wt(4))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e},clamp:function(t,e=0,r=1,n){return(n=n||new wt(4))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n[3]=Math.min(r,Math.max(e,t[3])),n},add:function(t,e,r){return(r=r||new wt(4))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r[3]=t[3]+e[3],r},addScaled:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n},subtract:vt,sub:bt,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},lerp:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n[3]=t[3]+r*(e[3]-t[3]),n},lerpV:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n[3]=t[3]+r[3]*(e[3]-t[3]),n},max:function(t,e,r){return(r=r||new wt(4))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r[3]=Math.max(t[3],e[3]),r},min:function(t,e,r){return(r=r||new wt(4))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r[3]=Math.min(t[3],e[3]),r},mulScalar:kt,scale:Mt,divScalar:function(t,e,r){return(r=r||new wt(4))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r[3]=t[3]/e,r},inverse:St,invert:Tt,dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},length:At,len:Et,lengthSq:Pt,lenSq:Ct,distance:Bt,dist:zt,distanceSq:Ut,distSq:qt,normalize:function(t,e){e=e||new wt(4);const r=t[0],n=t[1],s=t[2],i=t[3],a=Math.sqrt(r*r+n*n+s*s+i*i);return a>1e-5?(e[0]=r/a,e[1]=n/a,e[2]=s/a,e[3]=i/a):(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e},negate:function(t,e){return(e=e||new wt(4))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},copy:Nt,clone:Ft,multiply:It,mul:Dt,divide:Gt,div:Lt,zero:function(t){return(t=t||new wt(4))[0]=0,t[1]=0,t[2]=0,t[3]=0,t},transformMat4:function(t,e,r){r=r||new wt(4);const n=t[0],s=t[1],i=t[2],a=t[3];return r[0]=e[0]*n+e[4]*s+e[8]*i+e[12]*a,r[1]=e[1]*n+e[5]*s+e[9]*i+e[13]*a,r[2]=e[2]*n+e[6]*s+e[10]*i+e[14]*a,r[3]=e[3]*n+e[7]*s+e[11]*i+e[15]*a,r}})}},i={};function a(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return s[t](r,r.exports,a),r.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(s,i,a)=>{var o;a&&((o=[]).d=-1);var u,l,c,h=new Set,d=s.exports,f=new Promise(((t,e)=>{c=e,l=t}));f[e]=d,f[t]=t=>(o&&t(o),h.forEach(t),f.catch((t=>{}))),s.exports=f,i((s=>{var i;u=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[t])return s;if(s.then){var i=[];i.d=0,s.then((t=>{a[e]=t,n(i)}),(t=>{a[r]=t,n(i)}));var a={};return a[t]=t=>t(i),a}}var o={};return o[t]=t=>{},o[e]=s,o})))(s);var a=()=>u.map((t=>{if(t[r])throw t[r];return t[e]})),l=new Promise((e=>{(i=()=>e(a)).r=0;var r=t=>t!==o&&!h.has(t)&&(h.add(t),t&&!t.d&&(i.r++,t.push(i)));u.map((e=>e[t](r)))}));return i.r?l:a()}),(t=>(t?c(f[r]=t):l(d),n(o)))),o&&o.d<0&&(o.d=0)},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,