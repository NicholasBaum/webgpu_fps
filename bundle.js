(()=>{"use strict";var e,t,n,r,s={446:(e,t,n)=>{n.d(t,{l:()=>i});var r=n(300);class s{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=16/9;get aspect(){return this._aspect}set aspect(e){this._aspect!=e&&(this._aspect=e,this._projectionMatrix=r.pB.perspective(2*Math.PI/5,this._aspect,1,this.zFar))}_projectionMatrix=r.pB.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=r.pB.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(e){r.pB.copy(e,this.matrix_)}get view(){return this.view_}set view(e){r.pB.copy(e,this.view_)}get right(){return this.right_}set right(e){r.eR.copy(e,this.right_)}get up(){return this.up_}set up(e){r.eR.copy(e,this.up_)}get back(){return this.back_}set back(e){r.eR.copy(e,this.back_)}get position(){return this.position_}set position(e){r.eR.copy(e,this.position_)}}class i extends s{pitch=0;yaw=0;velocity_=r.eR.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(e){r.eR.copy(e,this.velocity_)}constructor(e){if(super(),e&&(e.position||e.target||e.movementSpeed)){const t=e.position??r.eR.create(0,0,-5),n=e.target??r.eR.create(0,0,0);this.back=r.eR.normalize(r.eR.subtract(t,n)),this.recalculateAngles(this.back),this.position=t,this.movementSpeed=e.movementSpeed??10,this.aspect=e.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(e){super.matrix=e,this.recalculateAngles(this.back)}update(e,t){const n=(e,t)=>(e?1:0)-(t?1:0);var s,i;this.yaw-=t.analog.x*e*this.rotationSpeed,this.pitch-=t.analog.y*e*this.rotationSpeed,this.yaw=(s=this.yaw,i=2*Math.PI,s-Math.floor(Math.abs(s)/i)*i*Math.sign(s)),this.pitch=function(e,t,n){return Math.min(Math.max(e,t),n)}(this.pitch,-Math.PI/2,Math.PI/2);const a=r.eR.copy(this.position);super.matrix=r.pB.rotateX(r.pB.rotationY(this.yaw),this.pitch);const o=t.digital,u=n(o.right,o.left),l=n(o.up,o.down),c=r.eR.create(),h=n(o.backward,o.forward);var d,p,f;r.eR.addScaled(c,this.right,u,c),r.eR.addScaled(c,this.up,l,c),r.eR.addScaled(c,this.back,h,c),r.eR.normalize(c,c),r.eR.mulScalar(c,this.movementSpeed,c),this.velocity=(d=c,p=this.velocity,f=Math.pow(1-this.frictionCoefficient,e),r.eR.addScaled(d,r.eR.sub(p,d),f)),this.position=r.eR.addScaled(a,this.velocity,e),this.view=r.pB.invert(this.matrix)}recalculateAngles(e){this.yaw=Math.atan2(e[0],e[2]),this.pitch=-Math.asin(e[1])}}},275:(e,t,n)=>{n.d(t,{q:()=>T});var r=n(273),s=n(300),i=n(499),a=n(431),o=n(379);const u="\nstruct VOut\n{\n    @builtin(position) pos : vec4f,\n    @location(0) uv : vec2f,\n}\n\n@vertex\nfn vertexBrdf(@location(0) pos : vec4f, @location(1) uv : vec2f) -> VOut\n{\n    return VOut(pos, uv);\n}\n\n@fragment\nfn fragmentBrdf(@location(0) uv : vec2f) -> @location(0) vec4f\n{\n    return vec4f(IntegrateBRDF(uv.x, uv.y),0,1);\n}\n\nfn IntegrateBRDF(NdotV : f32, roughness : f32) -> vec2f\n{\n    var V = vec3f();\n    V.x = sqrt(1.0 - NdotV * NdotV);\n    V.y = 0.0;\n    V.z = NdotV;\n\n    var A = 0.0;\n    var B = 0.0;\n\n    let N = vec3(0.0, 0.0, 1.0);\n\n    const SAMPLE_COUNT = 1024u;\n    for(var i = 0u; i < SAMPLE_COUNT; i++)\n    {\n        //generates a sample vector that's biased towards the\n        //preferred alignment direction (importance sampling).\n        let Xi = Hammersley(i, SAMPLE_COUNT);\n        let H = ImportanceSampleGGX(Xi, N, roughness);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NdotL = max(L.z, 0.0);\n        let NdotH = max(H.z, 0.0);\n        let VdotH = max(dot(V, H), 0.0);\n\n        if(NdotL > 0.0)\n        {\n            let G = GeometrySmith(N, V, L, roughness);\n            let G_Vis = (G * VdotH) / (NdotH * NdotV);\n            let Fc = pow(1.0 - VdotH, 5.0);\n\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    A /= f32(SAMPLE_COUNT);\n    B /= f32(SAMPLE_COUNT);\n    return vec2(A, B);\n}\n"+o,l=c();function c(){const e=new ArrayBuffer(4),t=new Float32Array(e),n=new Uint32Array(e),r=new Uint32Array(512),s=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(r[e]=0,r[256|e]=32768,s[e]=24,s[256|e]=24):t<-14?(r[e]=1024>>-t-14,r[256|e]=1024>>-t-14|32768,s[e]=-t-1,s[256|e]=-t-1):t<=15?(r[e]=t+15<<10,r[256|e]=t+15<<10|32768,s[e]=13,s[256|e]=13):t<128?(r[e]=31744,r[256|e]=64512,s[e]=24,s[256|e]=24):(r[e]=31744,r[256|e]=64512,s[e]=13,s[256|e]=13)}const i=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let e=1;e<1024;++e){let t=e<<13,n=0;for(;!(8388608&t);)t<<=1,n-=8388608;t&=-8388609,n+=947912704,i[e]=t|n}for(let e=1024;e<2048;++e)i[e]=939524096+(e-1024<<13);for(let e=1;e<31;++e)a[e]=e<<23;a[31]=1199570944,a[32]=2147483648;for(let e=33;e<63;++e)a[e]=2147483648+(e-32<<23);a[63]=3347054592;for(let e=1;e<64;++e)32!==e&&(o[e]=1024);return{floatView:t,uint32View:n,baseTable:r,shiftTable:s,mantissaTable:i,exponentTable:a,offsetTable:o}}function h(e){var t;Math.abs(e)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=e,e=Math.max(-65504,Math.min(65504,t)),l.floatView[0]=e;const n=l.uint32View[0],r=n>>23&511;return l.baseTable[r]+((8388607&n)>>l.shiftTable[r])}async function d(e,t){const n=await fetch(t),r=await n.arrayBuffer();return async function(e,t){const n=e.createTexture({size:[t.width,t.height],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),r=new Uint16Array(t.width*t.height*4);let s=0;for(let e=0;e<t.data.length;e+=3)r[s+0]=h(t.data[e+0]),r[s+1]=h(t.data[e+1]),r[s+2]=h(t.data[e+2]),r[s+3]=h(1),s+=4;return e.queue.writeTexture({texture:n},r.buffer,{bytesPerRow:8*t.width},{width:t.width,height:t.height}),await e.queue.onSubmittedWorkDone(),n}(e,function(e){const t={data:e,offset:0},n=function(e){let t=f(e);const n={colorCorr:[1,1,1],exposure:1,gamma:1,width:0,height:0,flipX:!1,flipY:!1};if("#?RADIANCE"!==t&&"#?RGBE"!==t)throw new Error("Incorrect file format!");for(;""!==t;){t=f(e);const r=t.split("=");switch(r[0]){case"GAMMA":n.gamma=parseFloat(r[1]);break;case"FORMAT":if("32-bit_rle_rgbe"!==r[1]&&"32-bit_rle_xyze"!==r[1])throw new Error("Incorrect encoding format!");break;case"EXPOSURE":n.exposure=parseFloat(r[1]);break;case"COLORCORR":n.colorCorr=r[1].replace(/^\s+|\s+$/g,"").split(" ").map((e=>parseFloat(e)))}}t=f(e);const r=t.split(" ");return p(r[0],parseInt(r[1]),n),p(r[2],parseInt(r[3]),n),n}(t);return{width:n.width,height:n.height,exposure:n.exposure,gamma:n.gamma,data:m(t,n)}}(new DataView(r)))}function p(e,t,n){switch(e){case"+X":n.width=t;break;case"-X":n.width=t,n.flipX=!0,console.warn("Flipping horizontal orientation not currently supported");break;case"-Y":n.height=t;break;case"+Y":n.height=t,n.flipY=!0}}function f(e){let t,n="";for(;10!==(t=e.data.getUint8(e.offset++));)n+=String.fromCharCode(t);return n}function m(e,t){let n;if(514!==e.data.getUint16(e.offset))throw new Error("Obsolete HDR file version!");return n=function(e,t){const{width:n,height:r,colorCorr:s}=t,i=new Float32Array(n*r*3);let a=0,{offset:o,data:u}=e;for(let e=0;e<r;++e){if(514!==u.getUint16(o))throw new Error("Incorrect scanline start hash");if(u.getUint16(o+2)!==n)throw new Error("Scanline doesn't match picture dimension!");o+=4;const e=4*n,t=[];let r=0;for(;r<e;){let e=u.getUint8(o++);if(e>128){const n=e-128;e=u.getUint8(o++);for(let s=0;s<n;++s)t[r++]=e}else for(let n=0;n<e;++n)t[r++]=u.getUint8(o++)}for(r=0;r<n;++r){const e=t[r],o=t[r+n],u=t[r+2*n];let l=t[r+3*n];l=l?Math.pow(2,l-136):0,i[a++]=e*l*s[0],i[a++]=o*l*s[1],i[a++]=u*l*s[2]}}return i}(e,t),t.flipX&&function(e,t){const{width:n,height:r}=t,s=n>>1;for(let t=0;t<r;++t){const r=t*n;for(let t=0;t<s;++t)_(e,r+t,r+n-1-t)}}(n,t),t.flipY&&function(e,t){const{width:n,height:r}=t,s=r>>1;for(let t=0;t<s;++t){const s=t*n,i=(r-1-t)*n;for(let t=0;t<n;++t)_(e,s+t,i+t)}}(n,t),n}function _(e,t,n){t*=3,n*=3;for(let r=0;r<3;++r){const s=e[t+r];e[t+r]=e[n+r],e[n+r]=s}}var g=n(147),w=n(371);const v="//#include ./pbr_functions.wgsl\n\n//shader renders one part of the split sum approximation for the following roughness level\noverride roughness : f32 = 1.0;\n//mode 1 expects mipmaps on the given cubemap and uses them to compensate for insufficient rays\noverride mode = 0;\noverride SAMPLE_COUNT = 1024u;\n//resolution of source cubemap\noverride resolution : f32 = 1024.0;\n\n@group(0) @binding(1) var sourceTexture : texture_cube < f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@location(0) WorldPos : vec4f) -> @location(0) vec4f\n{\n    let N = normalize(WorldPos.xyz);\n\n    //make the simplifying assumption that V equals R equals the normal\n    let R = N;\n    let V = R;\n\n    var prefilteredColor = vec3(0.0);\n    var totalWeight = 0.0;\n\n    for(var i = 0u; i < SAMPLE_COUNT; i++)\n    {\n        //generates a sample vector that's biased towards the preferred alignment direction (importance sampling).\n        let Xi = Hammersley(i, SAMPLE_COUNT);\n        let H = ImportanceSampleGGX(Xi, N, roughness);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NdotL = max(dot(N, L), 0.0);\n        // L.z inverted\n        // confirmed by verifying that Cubemap, IrradianceMap and SpecularMap align    \n        let corr_L = L * vec3f(1, 1, -1);\n        //only sample value if NdotL > 0 and choose method\n        prefilteredColor += select(vec3(0.0), select(modeOne(corr_L), modeTwo(corr_L, N, H, V, roughness), mode==1) * NdotL, NdotL > 0.0);\n        totalWeight += select(0.0, NdotL, NdotL > 0.0);\n    }\n\n    prefilteredColor = prefilteredColor / totalWeight;\n\n    return vec4(prefilteredColor, 1.0);\n}\n\nfn modeOne(L : vec3f) -> vec3f\n{\n    return textureSample(sourceTexture, textureSampler, L).xyz;\n}\n\n//sampling from mip map\nfn modeTwo(L : vec3f, N : vec3f, H : vec3f, V : vec3f, roughness : f32) -> vec3f\n{\n    //sample from the environment's mip level based on roughness/pdf\n    let D = DistributionGGX(N, H, roughness);\n    let NdotH = max(dot(N, H), 0.0);\n    let HdotV = max(dot(H, V), 0.0);\n    let pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n\n    let saTexel = 4.0 * PI / (6.0 * resolution * resolution);\n    let saSample = 1.0 / (f32(SAMPLE_COUNT) * pdf + 0.0001);\n\n    let mipLevel = select(0.5 * log2(saSample / saTexel), 0.0, roughness == 0.0);\n\n    return textureSampleLevel(sourceTexture, textureSampler, L, mipLevel).xyz;\n}\n"+o;async function y(e,t,n){if("2d"!=t.dimension||1!=t.depthOrArrayLayers)throw new Error("GPUTexture has wrong dimension");const r=Math.round(Math.log2(t.height/2));return x(e,t,n?.size??Math.pow(2,r),1==n?.withMips?"cube_mips":"cube",n?.format,n?.offset)}async function x(e,t,n,a,o,u){u=u??0,o=o??t.format;const l=t.width,c=Math.min(1+Math.floor(Math.log2(l)),5),h="specular"==a||"cube_mips"==a?c:1,d="cube"==a||"cube_mips"==a?t.createView():t.createView({dimension:"cube"});let p="cube"==a||"cube_mips"==a?M:"irradiance"==a?S:v;const f=1==t.mipLevelCount?0:1;let m;"specular"==a?m={mode:f,resolution:l,roughness:1}:"cube"!=a&&"cube_mips"!=a||(m={offset:u},console.log(u));let _=e.createTexture({size:[n,n,6],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,format:o,mipLevelCount:h}),g=e.createBuffer({size:i.p.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(g,0,i.p);let y=e.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:32,maxAnisotropy:16}),x=s.pB.perspective(Math.PI/2,1,.1,10),k=[s.pB.lookAt([0,0,0],[1,0,0],[0,1,0]),s.pB.lookAt([0,0,0],[-1,0,0],[0,1,0]),s.pB.lookAt([0,0,0],[0,1,0],[0,0,1]),s.pB.lookAt([0,0,0],[0,-1,0],[0,0,-1]),s.pB.lookAt([0,0,0],[0,0,-1],[0,1,0]),s.pB.lookAt([0,0,0],[0,0,1],[0,1,0])],T=e.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});const A="specular"==a?h:1;for(let t=0;t<A;t++)for(let n=0;n<6;n++){let r={colorAttachments:[{view:_.createView({dimension:"2d",baseArrayLayer:n,arrayLayerCount:1,mipLevelCount:1,baseMipLevel:t}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]};e.queue.writeBuffer(T,0,s.pB.multiply(x,k[n]));let u=e.createCommandEncoder(),l=u.beginRenderPass(r);l.setVertexBuffer(0,g),m&&"specular"==a&&(m.roughness=t/(h-1));let c=await b(e,o,p,m);l.setPipeline(c);let f=new w.g(e,c,"Texture Builder Binding Group").addBuffer(T).addTexture(d).addSampler(y).createBindGroup();l.setBindGroup(0,f),l.draw(i.Z),l.end(),e.queue.submit([u.finish()])}return await e.queue.onSubmittedWorkDone(),"cube_mips"==a&&(0,r.an)(e,_),_}async function b(e,t,n,r){let s={arrayStride:a.pG,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]},i={label:"Texture Builder Piepline",aaSampleCount:1,cullMode:"none",fragmentConstants:r,depthStencilState:"none",targets:[{format:t}]},o=new g.SI({vertex:k,fragment:n},s,a.uo,i);return await o.buildAsync(e)}const k="\nstruct Uniforms\n{\n    vp : mat4x4f,\n}\n\nstruct VertexOut\n{\n    @builtin(position) position : vec4f,\n    @location(0) viewDir: vec4f,\n}\n\n@group(0) @binding(0) var<uniform> uni : Uniforms;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> VertexOut\n{\n    return VertexOut(uni.vp * position, position);\n}\n",M="\noverride offset : f32 = 1.0;\n\n@group(0) @binding(1) var sourceTexture : texture_2d<f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@builtin(position) position : vec4f, @location(0) viewDir : vec4f) ->  @location(0) vec4f\n{\n    let dumm = offset;\n    const PI = 3.14159265359; \n    const invPI = 1.0/vec2f(2*PI, PI);\n    let v = normalize(viewDir.xyz);\n    var uv = vec2f(offset + atan2(v.z, v.x), acos(v.y)) * invPI;    \n    return textureSample(sourceTexture, textureSampler, uv);\n}\n",S="\n@group(0) @binding(1) var sourceTexture : texture_cube<f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@location(0) worldPos : vec4f) ->  @location(0) vec4f\n{\n    const PI = 3.14159265359;\n    let N = normalize(worldPos.xyz);\n    var irradiance = vec3f(0.0);  \n\n    var up    = vec3f(0.0, 1.0, 0.0);\n    let right = normalize(cross(up, N));\n    up        = normalize(cross(N, right));\n    \n    let sampleDelta = 0.025;\n    var nrSamples = 0.0; \n    for(var phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)\n    {\n        for(var theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)\n        {\n            // spherical to cartesian (in tangent space)\n            let sinTheta = sin(theta);\n            let cosTheta = sqrt(1 - sinTheta * sinTheta);\n            let tangentSample = vec3f(sinTheta * cos(phi),  sinTheta * sin(phi), cosTheta);\n            // tangent space to world\n            let sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;     \n            // sampleVec is inverted\n            // confirmed by verifying that Cubemap, IrradianceMap and SpecularMap align            \n            irradiance += textureSample(sourceTexture, textureSampler, sampleVec * vec3f(1, 1, -1)).xyz * cosTheta * sinTheta;\n            nrSamples += 1;\n        }\n    }\n    irradiance = PI * irradiance * (1.0 / nrSamples);\n\n    return vec4f(irradiance,1);\n}\n";class T{offset;flatTextureMap=null;get specularMipsCount(){return this._specularMap?.mipLevelCount??0}_cubeMap=null;get cubeMap(){if(!this._cubeMap)throw new Error("cubeMap map texture wasn't loaded");return this._cubeMap}_irradianceMap=null;get irradianceMap(){if(!this._irradianceMap)throw new Error("irradianceMap map texture wasn't loaded");return this._irradianceMap}_specularMap=null;get specularMap(){if(!this._specularMap)throw new Error("specular map texture wasn't loaded");return this._specularMap}_brdfMap=null;get brdfMap(){if(!this._brdfMap)throw new Error("brdf map texture wasn't loaded");return this._brdfMap}urls;_isHdr=!1;constructor(e,t=0){if(this.offset=t,this.urls="string"==typeof e?[e]:e,1!=this.urls.length&&6!=this.urls.length)throw new Error("input needs to be a single equirectangular map or six images");this._isHdr=this.urls[0].toLowerCase().endsWith(".hdr")}async buildAsync(e){this.flatTextureMap=this._isHdr?await d(e,this.urls[0]):await(0,r.$L)(e,this.urls[0]);let t=6!=this.urls.length?await y(e,this.flatTextureMap,{withMips:!0,offset:this.offset}):await async function(e,t,n){if(1!=(t="string"==typeof t?[t]:t).length&&6!=t.length)throw new Error("input needs to be a single equirectangular map or six images");return 6==t.length?await(0,r.cy)(e,t,{mips:n?.withMips}):y(e,t[0].toLowerCase().endsWith(".hdr")?await d(e,t[0]):await(0,r.$L)(e,t[0],{usage:GPUTextureUsage.COPY_SRC,format:n?.format}),n)}(e,this.urls,{offset:this.offset});this._cubeMap=t,this._irradianceMap=await async function(e,t,n=64){if("2d"!=t.dimension||6!=t.depthOrArrayLayers)throw new Error("texture isn't a cubemap aka 6 layered 2d texture array");return x(e,t,n,"irradiance")}(e,t),this._specularMap=await async function(e,t,n=128){if("2d"!=t.dimension||6!=t.depthOrArrayLayers)throw new Error("texture isn't a cubemap aka 6 layered 2d texture array");return x(e,t,n,"specular")}(e,t),this._brdfMap=await async function(e,t=512){return async function(e,t=128){const n="rgba8unorm",r=new Float32Array([-1,1,0,0,0,-1,-1,0,0,1,1,1,0,1,0,1,-1,0,1,1]);let s=e.createBuffer({size:r.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(s,0,r);let i=e.createTexture({size:[t,t,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,format:n});const a=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({label:"brdf texture builder",code:u}),entryPoint:"vertexBrdf",buffers:[{arrayStride:20,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({label:"brdf texture builder",code:u}),entryPoint:"fragmentBrdf",targets:[{format:n}]},primitive:{topology:"triangle-strip"}}),o=e.createCommandEncoder(),l=o.beginRenderPass({colorAttachments:[{view:i.createView({}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});return l.setPipeline(a),l.setVertexBuffer(0,s),l.draw(4),l.end(),e.queue.submit([o.finish(l)]),i}(e,t)}(e)}}},858:(e,t,n)=>{n.d(t,{v:()=>i,z:()=>r});var r,s=n(300);!function(e){e[e.Direct=0]="Direct",e[e.Point=1]="Point",e[e.Target=2]="Target"}(r||(r={}));class i{isOn=!0;intensity=1;type=r.Point;ambientColor=[.2,.2,.2,1];diffuseColor=[1,1,1,1];specularColor=[.8,.8,.8,1];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;useFalloff=!1;coneAngleDeg=72;get position(){return this._position}set position(e){this._position=e,this.type==r.Target&&(this._direction=s.eR.subtract(this._target,this._position))}_position=[0,30,0];get direction(){return this._direction}set direction(e){this._direction=e,this.type==r.Target?this._target=s.eR.add(this._position,this._direction):this.type==r.Direct&&(this._position=s.eR.mulScalar(s.eR.normalize(this._direction),-100))}_direction=[0,-1,0];get target(){return this._target}set target(e){this._target=e,this.type==r.Target&&(this._direction=s.eR.sub(this._target,this.position))}_target=[0,0,0];constructor(e){if(e)switch(this.type=e.type??this.type,this._position=e.position??this._position,this._direction=e.direction??this._direction,this._target=e.target??this._target,this.ambientColor=e.ambientColor??this.ambientColor,this.diffuseColor=e.diffuseColor??this.diffuseColor,this.specularColor=e.specularColor??this.specularColor,this.intensity=e.intensity??this.intensity,this.useFalloff=e.useFalloff??this.useFalloff,this._useShadowMap=e.useShadowMap??!0,this.coneAngleDeg=e.coneAngleDeg??this.coneAngleDeg,this.type){case r.Direct:this.direction=this.direction;break;case r.Target:!e.target&&e.direction?this.direction=this.direction:this.target=this.target}}get byteLength(){return Math.max(this.getBytes().byteLength,80)}getBytes(){return new Float32Array([this.type,this.useFalloff?1:0,this.shadowMap&&this.showShadows?this.shadowMap.id:-1,Math.cos(this.coneAngleDeg/360*Math.PI),...this._position,0,...this._direction,0,...this.disableAmbientColor||!this.isOn?[0,0,0,1]:s.ln.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor||!this.isOn?[0,0,0,1]:s.ln.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor||!this.isOn?[0,0,0,1]:s.ln.mulScalar(this.specularColor,this.intensity),...this.shadowMap?this.shadowMap.light_mat:this.dummy])}showShadows=!0;get useShadowMap(){return this.type!=r.Point&&this._useShadowMap}_useShadowMap=!0;shadowMap;dummy=s.pB.create()}},611:(e,t,n)=>{n.d(t,{L:()=>o});var r,s=n(273),i=n(993),a=n(689);!function(e){e[e.Default=0]="Default",e[e.SolidColor=1]="SolidColor",e[e.VertexNormal=2]="VertexNormal"}(r||(r={}));class o extends a.X{get hasNormalMap(){return!!this.normalMapPath}mode=r.Default;reflectivness=0;tiling={u:1,v:1};ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(e){super("Blinn Phong Material Buffer"),e&&(this.mode=e.mode??this.mode,this.reflectivness=e.reflectivness??this.reflectivness,this.diffuseColor=e.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=e.specularColor??this.specularColor,this.shininess=e.shininess??this.shininess,this.diffuseMapPath=e.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=e.specularMapPath??this.specularMapPath,this.normalMapPath=e.normalMapPath??this.normalMapPath,this.tiling=e.tiling??this.tiling,this.disableNormalMap=e.disableNormalMap??this.disableNormalMap)}static solidColor(e){return new o({mode:r.SolidColor,diffuseColor:e})}get device(){return this._device}_device;_buffer=null;get buffer(){if(!this._buffer)throw new Error("buffer wasn't initialized");return this._buffer}getFloatArray(){return new Float32Array([this.mode,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v,...this.ambientColor,...this.specularColor,this.shininess,this.reflectivness,0,0])}writeToGpu(e){this._device=e;const t=this.getFloatArray();this._buffer||(this._buffer=e.createBuffer({label:"material",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._buffer,0,t)}async writeTexturesToGpuAsync(e,t){if(this._ambientTexture&&this._device==e)return void console.log("texture maps are already loaded.");this._device=e;const n=this.ambientMapPath?(0,s.$L)(e,this.ambientMapPath,{mips:t}):Promise.resolve((0,i.w)(e,this.ambientColor)),r=this.diffuseMapPath?(0,s.$L)(e,this.diffuseMapPath,{mips:t}):Promise.resolve((0,i.w)(e,this.diffuseColor)),a=this.specularMapPath?(0,s.$L)(e,this.specularMapPath,{mips:t}):Promise.resolve((0,i.w)(e,this.specularColor)),o=this.normalMapPath?(0,s.$L)(e,this.normalMapPath,{mips:t}):Promise.resolve((0,i.w)(e,[0,0,1,1]));[this._ambientTexture,this._diffuseTexture,this._specularTexture,this._normalTexture]=await Promise.all([n,r,a,o])}}},930:(e,t,n)=>{n.d(t,{K:()=>a,_:()=>i});var r=n(993),s=n(689);class i extends s.X{get hasNormalMap(){return!!this.normalMapPath}ambientOcclussion=1;albedo=.3;metal=.1;roughness=.3;normalMapPath=null;tiling={u:1,v:1};disableNormalMap=!1;constructor(e){super("Pbr Shader Buffer"),e&&(this.ambientOcclussion=e.ambientOcclussion??this.ambientOcclussion,this.albedo=e.albedo??this.albedo,this.metal=e.metal??this.metal,this.roughness=e.roughness??this.roughness,this.normalMapPath=e.normalMapPath??this.normalMapPath,this.tiling=e.tiling??this.tiling,this.disableNormalMap=e.disableNormalMap??this.disableNormalMap)}_albedoTexture=null;get albedoTexture(){if(!this._albedoTexture)throw new Error("albedo texture wasn't loaded");return this._albedoTexture}_ambientOcclussionTexture=null;get ambientOcclussionTexture(){if(!this._ambientOcclussionTexture)throw new Error("ambient occlussion texture wasn't loaded");return this._ambientOcclussionTexture}_metalTexture=null;get metalTexture(){if(!this._metalTexture)throw new Error("specular texture wasn't loaded");return this._metalTexture}_roughnessTexture=null;get roughnessTexture(){if(!this._roughnessTexture)throw new Error("normal texture wasn't loaded");return this._roughnessTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}get device(){return this._device}_device;_buffer=null;get buffer(){if(!this._buffer)throw new Error("buffer wasn't initialized");return this._buffer}getFloatArray(){return new Float32Array([0,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v])}writeToGpu(e){this._device=e;const t=this.getFloatArray();this._buffer||(this._buffer=e.createBuffer({label:"pbr material",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._buffer,0,t)}async writeTexturesToGpuAsync(e,t){if(this._ambientOcclussionTexture&&this._device==e)return void console.log("texture maps are already loaded.");this._device=e;const n="rgba8unorm",s=(0,r.sZ)(e,this.ambientOcclussion,t,n),i=(0,r.sZ)(e,this.albedo,t,"rgba8unorm-srgb"),a=(0,r.sZ)(e,this.metal,t,n),o=(0,r.sZ)(e,this.roughness,t,n),u=(0,r.sZ)(e,this.normalMapPath?this.normalMapPath:[0,0,1,1],t,n);[this._ambientOcclussionTexture,this._albedoTexture,this._metalTexture,this._roughnessTexture,this._normalTexture]=await Promise.all([s,i,a,o,u])}}function a(e,t=!1,n="png"){return new i({ambientOcclussion:t?e+`ao.${n}`:1,albedo:e+`albedo.${n}`,metal:e+`metallic.${n}`,roughness:e+`roughness.${n}`,normalMapPath:e+`normal.${n}`})}},204:(e,t,n)=>{n.d(t,{Fc:()=>o,Gx:()=>a,YT:()=>i,bU:()=>s});var r=n(300);function s(e){let t=[0,0,0],n=[0,0,0];for(let s of e)r.eR.min(t,s.min,t),r.eR.max(n,s.max,n);return{min:t,max:n}}function i(e,t){const n=r.eR.clone(e.min),s=r.eR.clone(e.max),i=[r.eR.fromValues(n[0],n[1],n[2]),r.eR.fromValues(n[0],n[1],s[2]),r.eR.fromValues(n[0],s[1],n[2]),r.eR.fromValues(n[0],s[1],s[2]),r.eR.fromValues(s[0],n[1],n[2]),r.eR.fromValues(s[0],n[1],s[2]),r.eR.fromValues(s[0],s[1],n[2]),r.eR.fromValues(s[0],s[1],s[2])];for(const e of i)r.eR.transformMat4(e,t,e);return a(i)}function a(e){const t=r.eR.clone(e[0]),n=r.eR.clone(e[0]);for(const s of e)r.eR.min(t,s,t),r.eR.max(n,s,n);return{min:t,max:n}}function o(e){const t=r.eR.create();return r.eR.add(e.min,e.max,t),r.eR.scale(t,.5,t),t}},689:(e,t,n)=>{n.d(t,{G:()=>s,X:()=>r});class r{static getNewId(){return r.ID++}static ID=0;id=0;label;constructor(e){this.id=r.getNewId(),this.label=e}}function s(e){return Array.isArray(e)?e.length<=0?0:e.reduce(((e,t)=>e+t.byteLength),0):e.byteLength}},410:(e,t,n)=>{n.d(t,{y:()=>s});var r=n(689);class s extends r.X{vertices;vertexCount;layout;topology;get device(){return this._device}_device;get buffer(){if(this._buffer)return this._buffer;throw new Error(`Buffer wasn't initialized. ${this.label}`)}_buffer;constructor(e,t,n,r,s){super(s),this.vertices=e,this.vertexCount=t,this.layout=n,this.topology=r}writeToGpu(e){this._device=e;const t={label:`${this.label}`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(t),e.queue.writeBuffer(this._buffer,0,this.vertices,0)}async buildAsync(e){this._device==e&&this._buffer||(this._device=e,this.writeToGpu(e))}}},371:(e,t,n)=>{n.d(t,{g:()=>s});var r=n(147);class s{_device;_pipeline;label;groups=[[]];get current(){return this.rebuildRequired=!0,this.groups[this.groups.length-1]}build;rebuildRequired=!0;constructor(e,t,n){this._device=e,this._pipeline=t,this.label=n}getBindGroups(){return this.build&&!this.rebuildRequired||(this.build=this.createBindGroups()),this.build}createBindGroups(){return this.build=this.groups.map(((e,t)=>this._device.createBindGroup({layout:this._pipeline.getBindGroupLayout(t),entries:e.map(((e,t)=>e.getEntry(t))),label:`BindGroup ${t} of ${this.label}`}))),this.rebuildRequired=!1,this.build}addGroup(){return this.groups.push([]),this}createBindGroup(){return this.createBindGroups()[0]}addBuffer(e,t,n){if(Array.isArray(e))for(let t of e)this.current.push({getEntry:e=>({binding:e,resource:{buffer:t.buffer}})});else this.current.push({getEntry:r=>({binding:r,resource:{buffer:e instanceof GPUBuffer?e:e.buffer,size:t,offset:n}})});return this}addTexture(e){return this.current.push({getEntry:t=>({binding:t,resource:e})}),this}addSampler(e){return this.current.push({getEntry:t=>({binding:t,resource:e instanceof GPUSampler?e:this._device.createSampler(e)})}),this}addLinearSampler(){return this.current.push({getEntry:e=>({binding:e,resource:(0,r.W7)(this._device)})}),this}addNearestSampler(){return this.current.push({getEntry:e=>({binding:e,resource:(0,r.hA)(this._device)})}),this}addDepthSampler(){return this.current.push({getEntry:e=>({binding:e,resource:(0,r.eY)(this._device)})}),this}when(e,t){return e?t(this):this}}},319:(e,t,n)=>{n.d(t,{Si:()=>r});class r{label;index=0;get bindings(){return this._bindings}_bindings=[];constructor(e,t){this.label=t,e&&this.add(...Array.isArray(e)?e:[e])}getBindGroupLayoutDescriptor(){return{entries:this._bindings.map(((e,t)=>e.getLayout(t))),label:this.label}}add(...e){return this._bindings.push(...e),this}addBuffer(e,t=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,n=!1){return this._bindings.push(new s({type:e,hasDynamicOffset:n},t)),this}addTexture(e,t,n,r=GPUShaderStage.FRAGMENT){return this._bindings.push(new i({sampleType:t,viewDimension:e,multisampled:n},r)),this}addSampler(e,t=GPUShaderStage.FRAGMENT){return this._bindings.push(new a(e,t)),this}addLinearSampler(){return this._bindings.push(new o),this}addNearestSampler(){return this._bindings.push(new u),this}addDepthSampler(){return this._bindings.push(new l),this}when(e,t){return e?t(this):this}}class s{type;visibility;constructor(e,t=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT){this.type=e,this.visibility=t}getLayout(e){return{binding:e,visibility:this.visibility,buffer:this.type}}}class i{type;visibility;constructor(e={},t=GPUShaderStage.FRAGMENT){this.type=e,this.visibility=t}getLayout(e){return{binding:e,visibility:this.visibility,texture:this.type}}}class a{type;visibility;constructor(e,t=GPUShaderStage.FRAGMENT){this.type=e,this.visibility=t}getLayout(e){return{binding:e,visibility:this.visibility,sampler:{type:this.type}}}}class o extends a{constructor(e=GPUShaderStage.FRAGMENT){super("filtering",e)}}class u extends a{constructor(e=GPUShaderStage.FRAGMENT){super("filtering",e)}}class l extends a{constructor(e=GPUShaderStage.FRAGMENT){super("comparison",e)}}},147:(e,t,n)=>{n.d(t,{SI:()=>i,W7:()=>u,eY:()=>f,hA:()=>h});var r=n(410),s=n(319);class i{get groupDefinitions(){return this._groupDefinitions}_groupDefinitions=[];SHADER;get device(){return this._device}_device;get actualPipeline(){return this._pipeline}_pipeline;options;_vertexBufferLayouts=[];_topology="triangle-list";constructor(e,t,n,r){this.SHADER=e,n?(this.setVertexBufferLayouts(t,n),this.options=r):this.options=t}async buildAsync(e){return this._device=e,this._pipeline=await async function(e,t,n,s,i,a="triangle-list"){if(t.length<=0)throw new Error("vertexBufferLayout argument can't be empty.");t[0]instanceof r.y&&(t=t.map((e=>e.layout)));let o,u,l="auto";if(n.length>0||0==i?.autoLayout){let t=n.map((t=>e.createBindGroupLayout(t.getBindGroupLayoutDescriptor())));l=e.createPipelineLayout({bindGroupLayouts:t})}"string"==typeof s?(o=e.createShaderModule({code:s,label:`${i?.label} Shader`}),u=o):(o=e.createShaderModule({code:s.vertex,label:`${i?.label} Vertex Shader`}),s.fragment&&(u=e.createShaderModule({code:s.fragment,label:`${i?.label} Fragment Shader`})));let c={label:`${i?.label} Pipeline`,layout:l,vertex:{module:o,entryPoint:i?.vertexEntry??"vertexMain",buffers:t,constants:i?.vertexConstants},primitive:{topology:a,cullMode:i?.cullMode??"back"},multisample:{count:i?.aaSampleCount??4}};u&&(c.fragment={module:u,entryPoint:i?.fragmentEntry??"fragmentMain",constants:i?.fragmentConstants,targets:i?.targets??[{format:i?.canvasFormat??"bgra8unorm",blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]});const h=i?.depthStencilState;return null==h||"default"==h?c.depthStencil={depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}:"none"!=h&&(c.depthStencil=h),await e.createRenderPipelineAsync(c)}(e,this._vertexBufferLayouts,this._groupDefinitions,this.SHADER,this.options,this._topology),this._pipeline}setVertexBufferLayouts(e,t){return this._vertexBufferLayouts=Array.isArray(e)?e:[e],this._topology=t,this}addBindGroup(e){let t="function"==typeof e?e(new s.Si):e;return t.index=this._groupDefinitions.length,this._groupDefinitions.push(t),this}}const a={addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16};let o;function u(e){return o&&e==o[0]||(o=[e,e.createSampler(a)]),o[1]}const l={addressModeU:"repeat",addressModeV:"repeat",magFilter:"nearest",minFilter:"nearest"};let c;function h(e){return c&&e==c[0]||(c=[e,e.createSampler(l)]),c[1]}const d={compare:"less"};let p;function f(e){return p&&e==p[0]||(p=[e,e.createSampler(d)]),p[1]}},606:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(446),s=n(858);class i{aspectRatio="auto";isAnimated=!0;camera=new r.l({position:[0,0,10]});lights=[new s.v({type:s.z.Direct,direction:[-1,-2,-1]})];models=[];environmentMap;constructor(e){e&&(this.isAnimated=e.isAnimated??!0,this.camera=e.camera??this.camera)}update(e){}}},615:(e,t,n)=>{n.d(t,{F:()=>re});var r=n(741),s=n(300),i=n(689);class a extends i.X{get device(){return this._device}_device;get buffer(){if(this._buffer)return this._buffer;throw new Error(`Buffer wasn't initialized. ${this.label}`)}_buffer;_data;_dataFct;isArrayData=!1;_usage=GPUBufferUsage.UNIFORM;_size=-1;constructor(e,t,n,r){super(n),this._usage=t,this._size=r??this._size,"function"==typeof e?this._dataFct=e:this._data=e}writeToGpu(e){let t=this._dataFct?this._dataFct():this._data;if(!this._buffer||this._device!=e){this._device=e,this.isArrayData=Array.isArray(t),this._size<=0&&(this._size=(0,i.G)(t)),this._usage==GPUBufferUsage.STORAGE&&(this._size=Math.max(this._size,256));const n={label:`${this.label}`,size:this._size,usage:this._usage|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(n)}this.isArrayData||(t=[t]);let n=0;t.forEach((t=>{e.queue.writeBuffer(this._buffer,n,t),n+=t.byteLength}))}}class o extends a{instances;get length(){return this.instances.length}get vertexBuffer(){return this.instances[0].vertexBuffer}get normalBuffer(){return this.instances[0].normalBuffer}get vertexBufferLayout(){return this.normalBuffer?[this.vertexBuffer.layout,this.normalBuffer.layout]:[this.vertexBuffer.layout]}get topology(){return this.vertexBuffer.topology}constructor(e,t){if(e.length<0)throw new Error("instances lenght can't be 0.");super((()=>{let e=[];for(let t=0;t<this.instances.length;t++){let n=this.instances[t].transform,r=s.pB.transpose(s.pB.invert(this.instances[t].transform));e.push(n),e.push(r)}return e}),GPUBufferUsage.STORAGE,t??"Models Instances Buffer",64*e.length*2),this.instances=e}}function u(e,t,n){return e.reduce(((e,r)=>{let s=t(r),i=Array.from(e.keys()).find((e=>n(e,s)));return i||e.set(s,[]),e.get(i??s)?.push(r),e}),new Map)}const l=(e,t)=>{if("object"==typeof e&&"object"==typeof t){const n=Object.values(e),r=Object.values(t);if(n.length!==r.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==r[e])return!1;return!0}return!1};var c=n(147),h=n(431),d=n(371);class p{shadowMaps;renderGroups;lightBuffer;_pipe;get device(){return this._pipe.device}constructor(e,t){var n,r;this.shadowMaps=t,this.renderGroups=[...(n=e,r=e=>e.vertexBuffer,u(n,r,((e,t)=>e===t))).values()].map((e=>new o(e))),this.lightBuffer=new a((()=>t.map((e=>{let t=new Float32Array(64);return t.set(e.light_mat,0),t}))),GPUBufferUsage.UNIFORM,"shadow map ligths buffer",256*this.shadowMaps.length);this._pipe=new c.SI({vertex:f},h.Vg,h.uo,{label:"Shadow Map Pipeline",aaSampleCount:1,cullMode:"back",depthStencilState:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}}).addBindGroup((e=>e.addBuffer("read-only-storage").addBuffer("uniform",GPUShaderStage.VERTEX,!0)))}async buildAsync(e){return await this._pipe.buildAsync(e),this}addPass(e){this.shadowMaps.forEach((e=>e.createViewMat())),this.lightBuffer.writeToGpu(this.device),this.shadowMaps.forEach(((t,n)=>{const r={colorAttachments:[],depthStencilAttachment:{view:t.textureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},s=e.beginRenderPass(r);for(let e of this.renderGroups){e.writeToGpu(this.device);const t=e.vertexBuffer;s.setPipeline(this._pipe.actualPipeline);let r=new d.g(this.device,this._pipe.actualPipeline).addBuffer(e).addBuffer(this.lightBuffer,256).getBindGroups()[0];s.setBindGroup(0,r,[256*n]),s.setVertexBuffer(0,t.buffer),s.draw(t.vertexCount,e.length)}s.end()}))}}const f="\nstruct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\n@group(0) @binding(0) var<storage, read> instances : array<Instance>;\n@group(0) @binding(1) var<uniform> lightView_mat : mat4x4 < f32>;\n\n@vertex\nfn vertexMain(@builtin(instance_index) idx : u32, @location(0) position : vec3 < f32>) -> @builtin(position) vec4 < f32>\n{\n    return lightView_mat * instances[idx].transform * vec4(position, 1);\n}\n";var m=n(967),_=n(319);class g{lights;camera;_pipeBuilder;_vbo;_buffers;_bindGroup;constructor(e,t){this.lights=e,this.camera=t,this._vbo=(0,m.P2)().vBuffer;const n=this.lights.map((e=>new Float32Array(e.diffuseColor)));this._buffers=[new a((()=>s.pB.multiply(this.camera.projectionMatrix,this.camera.view)),GPUBufferUsage.UNIFORM),new a(n,GPUBufferUsage.STORAGE),new a((()=>this.lights.map((e=>s.pB.uniformScale(s.pB.translation([...e.position,0]),.5)))),GPUBufferUsage.STORAGE)],this._pipeBuilder=new c.SI(w).setVertexBufferLayouts(this._vbo.layout,this._vbo.topology).addBindGroup((new _.Si).addBuffer("uniform").addBuffer("read-only-storage").addBuffer("read-only-storage"))}async buildAsync(e){await this._pipeBuilder.buildAsync(e),this._vbo.writeToGpu(e),this._buffers.forEach((t=>t.writeToGpu(e)));let t=new d.g(e,this._pipeBuilder.actualPipeline).addBuffer(this._buffers);return this._bindGroup=t.createBindGroups()[0],this}render(e,t,n){if(!this._pipeBuilder.actualPipeline)throw new Error("Pipeline hasn't been built.");this._buffers.forEach((t=>t.writeToGpu(e))),t.setVertexBuffer(0,this._vbo.buffer),t.setBindGroup(0,this._bindGroup),t.setPipeline(this._pipeBuilder.actualPipeline),t.draw(this._vbo.vertexCount,n??this.lights.length)}}const w="\n\n@group(0) @binding(0) var<uniform> viewProjMat: mat4x4f;\n@group(0) @binding(1) var<storage, read> colors: array<vec4f>;\n@group(0) @binding(2) var<storage, read> transforms: array<mat4x4f>;\n\nstruct VertexOutput\n{\n    @builtin(position) Position : vec4f,\n    @location(0) color: vec4f,\n}\n  \n@vertex\nfn vertexMain(\n@builtin(instance_index) index: u32,\n@location(0) position: vec4f,\n@location(1) uv: vec2f\n) -> VertexOutput \n{  \n    return VertexOutput(viewProjMat*transforms[index]*position, colors[index]);\n}\n\n@fragment\nfn fragmentMain(\n  @location(0) color: vec4f\n) -> @location(0) vec4f \n{    \n    return color;\n}\n\n";var v=n(410);class y extends i.X{get device(){return this._device}_device;get buffer(){if(this._buffer)return this._buffer;throw new Error(`Buffer wasn't initialized. ${this.label}`)}_buffer;_data=new Float32Array;_usage=GPUBufferUsage.UNIFORM;_size=-1;constructor(e,t=GPUBufferUsage.UNIFORM,n,r){super(n),this._usage=t,this._size=r??this._size,e&&(this._data=e)}writeToGpu(e,t){t&&(this._data=t);let n=this._data;if(!this._buffer||this._device!=e){this._device=e,this._size<=0&&(this._size=(0,i.G)(n)),this._usage==GPUBufferUsage.STORAGE&&(this._size=Math.max(this._size,256));const t={label:`${this.label}`,size:this._size,usage:this._usage|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(t)}e.queue.writeBuffer(this._buffer,0,n)}}class x{tex2dRenderer;cube2dArraydRenderer;depthRenderer;constructor(e){this.tex2dRenderer=new k(e),this.cube2dArraydRenderer=new M(e),this.depthRenderer=new S(e)}render(e,t,n){var r;switch(t instanceof GPUTexture&&([t,n]="2d"==(r=t).dimension&&6==r.depthOrArrayLayers?[r.createView(),"2d-array-l6"]:[r.createView(),"2d"]),n){case"2d":this.tex2dRenderer.render(e,t);break;case"2d-array-l6":this.cube2dArraydRenderer.render(e,t);break;case"depth":this.depthRenderer.render(e,t);break;default:throw new Error(`${n} isn't supported.`)}}async buildAsync(e){return await Promise.all([this.tex2dRenderer.buildAsync(e),this.cube2dArraydRenderer.buildAsync(e),this.depthRenderer.buildAsync(e)]),this}}class b{useSampler;_vbo;_pipeBuilder;device;uniform;_dataProvider;constructor(e,t,n,r,s,i){this.useSampler=s,this._vbo=function(){const e=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,-1,1,0,1,1,-1,0,1,1,1,0,1]);return new v.y(e,6,{arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]},"triangle-list","Quad VBO")}(),this._pipeBuilder=new c.SI(t,{label:i}).setVertexBufferLayouts(this._vbo.layout,this._vbo.topology).addBindGroup((new _.Si).addTexture(n,r).when(s,(e=>e.addNearestSampler())).addBuffer("uniform")),this.uniform=new y,this._dataProvider=()=>new Float32Array(Array.isArray(e)?e:e())}async buildAsync(e){this.device=e,this._vbo.writeToGpu(e),await this._pipeBuilder.buildAsync(e)}render(e,t){if(!this._pipeBuilder?.actualPipeline||!this.device)throw new Error("Pipeline hasn't been built.");this.uniform.writeToGpu(this.device,this._dataProvider());let n=new d.g(this.device,this._pipeBuilder.actualPipeline).addTexture(t).when(this.useSampler,(e=>e.addNearestSampler())).addBuffer(this.uniform);e.setVertexBuffer(0,this._vbo.buffer),e.setBindGroup(0,n.getBindGroups()[0]),e.setPipeline(this._pipeBuilder.actualPipeline),e.draw(this._vbo.vertexCount)}}class k extends b{constructor(e){super(e,T,"2d","float",!0,"Texture Renderer 2d")}}class M extends b{constructor(e){super(e,A,"2d-array","float",!0,"Texture Renderer Cube2DArray")}}class S extends b{constructor(e){super(e,P,"2d","depth",!1,"Texture Renderer Depth")}}const T="\n@group(0) @binding(0) var texture : texture_2d<f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n@group(0) @binding(2) var<uniform> screenSize: vec2f;\n\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    return textureSample(texture, textureSampler, fragCoord.xy  / screenSize);\n}\n",A="\nstruct VOut\n{\n    @builtin(position) pixelPos : vec4f,\n    @location(0) fragPos : vec4f,\n}\n\n@group(0) @binding(0) var texture : texture_2d_array  < f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n@group(0) @binding(2) var<uniform> screenSize: vec2f;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> VOut {\n    return VOut(position, position);\n}\n\n@fragment\nfn fragmentMain(@builtin(position) pixelPos : vec4f, @location(0) f : vec4f)\n-> @location(0) vec4f {\n    let scale = vec2f(4.0,3.0)/screenSize;    \n    const h = 1.0/3.0;    \n    var layer = -1;\n\n    // layer 0 => positive x\n    // layer 1 => negative x\n    // layer 2 => positive y\n    // layer 3 => negative y\n    // layer 4 => positive z\n    // layer 5 => negative z\n\n    if(f.y > h)\n    {\n        if(f.x > -0.5 && f.x < 0)\n        {\n            layer = 2;\n        }     \n    }\n    else if(f.y < -h)\n    {\n        if(f.x > -0.5 && f.x < 0)\n        {\n            layer = 3;\n        }\n    }\n    else\n    {\n        if(f.x < -0.5)\n        {\n            layer = 1;\n        }\n        else if(f.x < 0.0)\n        {\n            layer = 4;\n        }\n        else if(f.x < 0.5)\n        {\n            layer = 0;\n        }\n        else\n        {\n            layer = 5;\n        }        \n    }\n    var uv = pixelPos.xy*scale;\n    return  select(textureSample(texture, textureSampler, uv, layer), vec4f(0,0,0,1), layer<0);\n}\n",P="\n@group(0) @binding(0) var textureMap : texture_depth_2d;\n@group(0) @binding(1) var<uniform> screenSize: vec2f;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    //can't use sampler_comparison as they only return 0 or 1\n    //other sampler don't seem to work\n    //got to calculate pixel indices manually\n    let dim = textureDimensions(textureMap, 0);\n    let textureScreenRatio = vec2f(f32(dim.x), f32(dim.y))/screenSize;\n    let depthValue = textureLoad(textureMap, vec2 < i32 > (floor(fragCoord.xy * textureScreenRatio)), 0);\n    return vec4 < f32 > (depthValue, depthValue, depthValue, 1.0);\n\n\n    //transformation to make depth values distingushable\n    //const zFar = 100.0;\n    //const zNear = 0.1;\n    //let d = (2 * zNear) / (zFar + zNear - depthValue * (zFar - zNear));\n    //return vec4 < f32 > (d, d, d, 1.0);\n}\n",E="fn ACESFilm(x : vec3f) -> vec3f{\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), vec3f(0), vec3f(1));\n}\n\nfn Reinhard(x : vec3f) -> vec3f{\n    return x / (x + vec3(1.0));\n}\n\nfn gammaEncode(x : vec3f) -> vec3f{\n    return pow(x, vec3(1.0 / 2.2));\n}\n";class B{_pipeline;_vbo;_groupBuilder;_cameraBuffer;_envrionmentMapView;constructor(e,t){this._vbo=(0,m.P2)().vBuffer,this._envrionmentMapView=t.createView({dimension:"cube"}),this._cameraBuffer=new a((()=>function(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Float32Array(t);let r=0;for(const t of e)n.set(t,r),r+=t.length;return n}([e.view,e.projectionMatrix])),GPUBufferUsage.UNIFORM);const n={isHdr:"rgba16float"==t.format?1:0};this._pipeline=new c.SI(C,{fragmentConstants:n,cullMode:"none",depthStencilState:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"less-equal"}}).setVertexBufferLayouts(this._vbo.layout,this._vbo.topology).addBindGroup((new _.Si).addTexture("cube").addLinearSampler().addBuffer("uniform"))}async buildAsync(e){return await this._pipeline.buildAsync(e),this._vbo.writeToGpu(e),this._groupBuilder=new d.g(e,this._pipeline.actualPipeline).addTexture(this._envrionmentMapView).addLinearSampler().addBuffer(this._cameraBuffer),this}render(e){if(!this._pipeline.actualPipeline||!this._pipeline.device)throw new Error("Pipeline wasn't built.");this._cameraBuffer.writeToGpu(this._pipeline.device),e.setVertexBuffer(0,this._vbo.buffer),e.setBindGroup(0,this._groupBuilder.getBindGroups()[0]),e.setPipeline(this._pipeline.actualPipeline),e.draw(this._vbo.vertexCount)}}const C=E+"\n\nstruct Uniforms\n{\n    view: mat4x4f,\n    proj: mat4x4f,\n}\n\n@group(0) @binding(0) var texture: texture_cube < f32>;\n@group(0) @binding(1) var textureSampler: sampler;\n@group(0) @binding(2) var<uniform> uni: Uniforms;\n\nstruct VertexOutput\n{\n    @builtin(position) Position: vec4f,\n    @location(0) viewDir: vec4f,\n}\n  \n@vertex\nfn vertexMain(\n@location(0) position: vec4f,\n@location(1) uv: vec2f\n) -> VertexOutput \n{\n    var out : VertexOutput;\n\n    // remove translation from view matrix\n    var tmp = mat4x4f();\n    tmp[0] = vec4f(uni.view[0].xyz,0);\n    tmp[1] = vec4f(uni.view[1].xyz,0);\n    tmp[2] = vec4f(uni.view[2].xyz,0);\n    tmp[3] = vec4f(0,0,0,1);      \n    \n    let p = uni.proj * tmp * position;    \n    // p is divided by p.w before forwarded to the fragement shader (NDC coordinates)\n    // p.z is only used as z-buffer value and if set to p.w the NDC value will be 1\n    // corresponding to the farthest away point \n    out.Position = vec4f(p.x,p.y,p.w,p.w);    \n    out.viewDir = position;\n    return out;\n}\n\noverride isHdr: f32 = 0.0;\n@fragment\nfn fragmentMain(\n  @location(0) viewDir: vec4f\n) -> @location(0) vec4f \n{    \n    var finalColor =  textureSample(texture, textureSampler, viewDir.xyz*vec3(-1,1,1)).xyz;\n\n    if(isHdr == 1.0)\n    {\n        finalColor = ACESFilm(finalColor);       \n        finalColor = gammaEncode(finalColor);\n    }\n\n    return vec4f(finalColor,1);\n}\n\n";var z=n(930);class N extends a{camera;lights;showEnvironment;viewProjectionMatrix=s.pB.identity();constructor(e,t,n){super((()=>{let e=[];return s.pB.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),e.push(this.viewProjectionMatrix),e.push(this.camera.position),e.push(new Float32Array(this.showEnvironment?[1,0,0,0]:[0,0,0,0])),e.push(...this.lights.map((e=>e.getBytes()))),e}),GPUBufferUsage.STORAGE,"Scene Settings Buffer"),this.camera=e,this.lights=t,this.showEnvironment=n}}var V=n(844);const F=[h.Vg],R=[h.Vg,V.x2];function L(e,t=!0){return new U(t?R:F,"triangle-list",t).buildAsync(e)}class U{hasNormals;_pipeline;get device(){return this._pipeline.device}constructor(e,t,n){this.hasNormals=n;const r={vertexEntry:this.hasNormals?"vertexMain":"vertexMain_alt",fragmentEntry:this.hasNormals?"fragmentMain":"fragmentMain_alt"};this._pipeline=new c.SI("struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct BlinnMaterial\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct SceneSettings\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    settings : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : SceneSettings;\n\n@group(1) @binding(0) var<uniform> material : BlinnMaterial;\n@group(1) @binding(1) var textureSampler : sampler;\n@group(1) @binding(2) var ambientTexture : texture_2d<f32>;\n@group(1) @binding(3) var diffuseTexture : texture_2d<f32>;\n@group(1) @binding(4) var specularTexture : texture_2d<f32>;\n@group(1) @binding(5) var normalTexture : texture_2d<f32>;\n\n@group(2) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(2) @binding(1) var shadowMapSampler : sampler_comparison;\n\n@group(3) @binding(0) var environmentMap : texture_cube < f32>;\n@group(3) @binding(1) var environmentMapSampler : sampler;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) uv : vec2f,\n@location(2) normal : vec4f,\n@location(3) tangent : vec3f,\n@location(4) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n//remark 1\n//wgsl doesn't support forwarding matrices or arrays to the FS as function argument\n//for matrices this can be solved by forwarding the columns separatly\n//for arrays i actually don't have any solution\n//a fixed amount of array entries could be forwarded as separate arguments\n\n//remark 2\n//literature says the vertex shader isn't called as often as the fragment shader\n//reasoning is probably that the VS runs for every vertex and 3 vertices usually belong to more than 2 fragments/pixels\n//but i'm not sure if this is actually still true when using zbuffer or even when just using a high poly model\n\n//so it might be advantageous to push calculations into the VS\n//the tbn can be built in the VS and inverted by only taking the transpose because it's an orthonormal matrix\n//now instead of calculating everything in world space we can take the light position/direction and the camera position\n//into tangent space in the VS! and foward them to the FS\n\n//in case of multiple lights one has to forward every light pos/dir what is problematic because arrays can't be forwarded\n//this problem vanishes when using deferred shading as every light is calculated in a separate run\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec4f(0, 0, 0, 1);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], worldPosition, worldNormal, ambientColor, diffuseColor, specularColor);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, worldPos : vec4f, worldNormal : vec3f, ambientColor : vec3f, diffuseColor : vec3f, specularColor : vec3f) -> vec4f\n{\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let fragToLight = light.position.xyz - worldPos.xyz;\n    //set falloff to 1 or to frag to light distance squared\n    let lightSqrDist = select(1, dot(fragToLight, fragToLight), light.mode.y == 1);\n    //DirectLight=0; PointLight=1; TargetLight=2\n    let lightDirInverse = normalize(select(fragToLight, -light.direction.xyz, light.mode.x == 0));\n\n    //calc intensity, 0 if not facing light\n    var intensity = max(dot(lightDirInverse, unitNormal), 0);\n    //target light\n    if(light.mode.x==2 && intensity!=0)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        //const sharpness = 10;\n        //intensity = select(0, 1 - pow((1 - spot) / (1 - cutoff), sharpness), spot > cutoff);\n        intensity = select(0.0, 1.0, spot > cutoff);\n    }\n\n    //calc diffuse\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity / lightSqrDist;\n\n    //calc specular\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPos.xyz);\n    let H = normalize(lightDirInverse + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x) / lightSqrDist;\n\n    //shadow map\n\n    const constOffset = 0.5;\n    //let slopeFactor = 1.1 - clamp(dot(lightDirInverse, unitNormal), 0,1);\n    //correct with an z adjusted texelsize value\n    //let tmp = light.shadow_mat * worldPos;\n    //let texelSize = (2 / shadowMapSize) * tan(coneAngle/90*3.14) * abs(tmp.z/tmp.w) * 100000.0;\n    let offset = constOffset;\n    var shadowPos = light.shadow_mat * (offset * vec4f(unitNormal, 0) + worldPos);\n    //var shadowPos = light.shadow_mat * worldPos;//potentially 0 if no shadowmap exists\n    //perspective transformations alter the w coordinate and it has to be scaled back\n    //the vertex shader actually does this automatically on its output position afterwards\n    shadowPos = shadowPos / shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    let visibility = select(calcShadowVisibility(u32(light.mode.z), shadowMaps, shadowMapSampler, shadowPosUV, 0.0), 1.0, i32(light.mode.z)==-1);\n\n    //Problem: specular higlights (artefacts) on faces that aren't even hit by light\n    //Solution 1: only render specular when intensity>0 -> problem: specular highlight is cutoff\n    //Solution 2: multiply specular with difuse intensity -> problem: weak specular highlights\n    var finalColor = ambient + (diffuse + specular * intensity) * visibility;\n\n    //environment reflection\n    let reflV = reflect(-viewDir, unitNormal.xyz);\n    // correct for left handed cubesampler\n    let env = textureSample(environmentMap, environmentMapSampler, reflV*vec3f(-1,1,1));\n    let reflectivness = clamp(material.shininess.y, 0, 1);\n\n    finalColor = reflectivness * env.xyz + (1 - reflectivness) * finalColor;\n\n\n    //respect other rendermodes\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, unitNormal.xyz * 0.5 + 0.5, material.mode.x == 2);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcShadowVisibilitySmoothed(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    var visibility = 0.0;\n    let pixelRatio = 1.0 / textureSize;\n    for (var y = -1; y <= 1; y++)\n    {\n        for (var x = -1; x <= 1; x++)\n        {\n            let offset = vec2 < f32 > (vec2(x, y)) * pixelRatio;\n            visibility += textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy + offset, shadowMapIndex, shadowPosUV.z - bias);\n        }\n    }\n    visibility /= 9;\n    //depending on the bounding box the shadow map used some fragments might be out of the shadow maps scope\n    visibility = select(visibility, 1.0, shadowPosUV.x < 0 || shadowPosUV.x > 1 || shadowPosUV.y < 0 || shadowPosUV.y > 1);\n    return visibility;\n}\n\nfn calcShadowVisibility(shadowMapIndex: u32, texture: texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    return textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy, shadowMapIndex, shadowPosUV.z - bias);\n}\n\n\n\n//no normal data/map entrypoint\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n//no normal data/map entrypoint\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) uv : vec2f,\n@location(2) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n",r).setVertexBufferLayouts(e,t)}async buildAsync(e){return this.device==e||await this._pipeline.buildAsync(e),this}render(e,t,n,r,s,i){if(!this._pipeline.actualPipeline||!this.device)throw new Error("renderer wasn't built.");let a=new d.g(this.device,this._pipeline.actualPipeline,"Blinn Phong Pipeline");a.addBuffer(t),a.addBuffer(r),a.addGroup(),a.addBuffer(n),a.addLinearSampler(),a.addTexture(n.ambientTexture.createView()),a.addTexture(n.diffuseTexture.createView()),a.addTexture(n.specularTexture.createView()),this.hasNormals&&a.addTexture(n.normalTexture.createView()),a.addGroup(),a.addTexture(i),a.addDepthSampler(),a.addGroup(),a.addTexture(s),a.addLinearSampler(),e.setVertexBuffer(0,t.vertexBuffer.buffer),this.hasNormals&&e.setVertexBuffer(1,t.normalBuffer.buffer),a.createBindGroups().forEach(((t,n)=>e.setBindGroup(n,t))),e.setPipeline(this._pipeline.actualPipeline),e.draw(t.vertexBuffer.vertexCount,t.length)}}const G='//#include ./tone_mapping.wgsl\nstruct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct PbrMaterial\n{\n    mode : vec4f,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct SceneSettings\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    settings : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : SceneSettings;\n\n@group(1) @binding(0) var<uniform> material : PbrMaterial;\n@group(1) @binding(1) var textureSampler : sampler;\n@group(1) @binding(2) var ambientOcclusionTexture : texture_2d<f32>;\n@group(1) @binding(3) var albedoTexture : texture_2d<f32>;\n@group(1) @binding(4) var metalTexture : texture_2d<f32>;\n@group(1) @binding(5) var roughnessTexture : texture_2d<f32>;\n@group(1) @binding(6) var normalTexture : texture_2d<f32>;\n\n@group(2) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(2) @binding(1) var shadowMapSampler : sampler_comparison;\n\n@group(3) @binding(0) var environmentMapSampler : sampler;\n@group(3) @binding(1) var irradianceMap : texture_cube < f32>;\n@group(3) @binding(2) var specularMap : texture_cube < f32>;\n@group(3) @binding(3) var brdfMap : texture_2d<f32>;\n\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) uv : vec2f,\n@location(2) normal : vec4f,\n@location(3) tangent : vec3f,\n@location(4) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let albedo = textureSample(albedoTexture, textureSampler, uv).xyz;\n    let metal = textureSample(metalTexture, textureSampler, uv).r;\n    let roughness = textureSample(roughnessTexture, textureSampler, uv).r;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec3f(0);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(worldPosition.xyz, worldNormal, uni.lights[i], albedo, metal, roughness);\n    }\n\n    if(uni.settings.x == 1)\n    {\n        let ao = textureSample(ambientOcclusionTexture, textureSampler, uv).r;\n        finalColor += calcEnvironmentLight(worldPosition, worldNormal, ao, albedo, metal, roughness);\n    }\n    else\n    {\n        finalColor += 0.2 * albedo;\n    }\n\n\n    //tone mapping\n    finalColor = ACESFilm(finalColor);\n\n    finalColor = gammaEncode(finalColor);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcEnvironmentLight(worldPosition : vec4f, worldNormal : vec3f, ao : f32, albedo : vec3f, metal : f32, roughness : f32) -> vec3f\n{\n    //can be optimize as its calculated per light again i think\n    let N = normalize(worldNormal);\n    let V = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    var F0 = vec3(0.04);\n    F0 = (1.0 - metal) * F0 + metal * albedo;\n    let F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n    let kS = F;\n    var kD = 1.0 - kS;\n    kD *= 1.0 - metal;\n\n    // correcting:\n    // cubemaps seem to be mapped on the outside of a cube\n    // "swapping left and right" \n    const cubeCorr = vec3f(-1, 1, 1);\n\n    let irradiance = textureSample(irradianceMap, environmentMapSampler, N * cubeCorr).xyz;\n    let diffuse = irradiance * albedo;\n\n    //specular\n    let maxRoughnessMipLevel = f32(textureNumLevels(specularMap)) - 1;\n    let R = reflect(-V, N);\n    let preCalcedSpecular = textureSampleLevel(specularMap, environmentMapSampler, R * cubeCorr, roughness * maxRoughnessMipLevel).xyz;\n    let preCalcedBRDF = textureSample(brdfMap, environmentMapSampler, vec2(max(dot(N, V), 0.0), roughness)).xy;\n    let specular = preCalcedSpecular * (F * preCalcedBRDF.x + preCalcedBRDF.y);\n\n    //precalculated environment map light\n    let ambient = (kD * diffuse + specular) * ao;\n    return ambient;\n}\n\nfn calcLight(worldPos : vec3f, normal : vec3f, light : Light, albedo : vec3f, metal : f32, roughness : f32) -> vec3f\n{\n    let lightPos = light.position.xyz;\n    let lightColor = light.diffuseColor.xyz;\n    let fragToLight = select(lightPos - worldPos, -light.direction.xyz, light.mode.x==0);\n\n    //mode.x: DirectLight=0; PointLight=1; TargetLight=2\n    //mode.y: use falloff\n    var falloffFactor = select(1.0, 1.0 / dot(fragToLight, fragToLight), light.mode.x!=0 && light.mode.y == 1);\n    //spot light\n    if(light.mode.x==2)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        falloffFactor = select(0.0, 1.0, spot > cutoff);\n    }\n    let radiance : vec3f = lightColor * falloffFactor;\n\n    //cook-torrance brdf\n    var F0 = vec3(0.04);\n    F0 = (1.0 - metal) * F0 + metal * albedo;\n\n    let L = normalize(fragToLight);\n    let N = normalize(normal);\n    let V = normalize(uni.cameraPosition.xyz - worldPos);\n    let H = normalize(V + L);\n    let NDF = DistributionGGX(N, H, roughness);\n    let G = GeometrySmith(N, V, L, roughness);\n    let F : vec3f = fresnelSchlick(max(dot(H, V), 0.0), F0);\n\n    //specular\n    let numerator : vec3f = NDF * G * F;\n    let denominator : f32 = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;\n    let specular : vec3f = numerator / denominator;\n\n    //diffuse\n    let kS = F;\n    var kD : vec3f = vec3(1.0) - kS;\n    kD *= 1.0 - metal;\n    let diffuse = kD * albedo / PI;\n\n    //shadow factor\n    let visibility = getShadowFactor(light, worldPos, N);\n\n    //add to outgoing radiance Lo\n    let NdotL = max(dot(N, L), 0.0);\n    return (diffuse + specular) * radiance * NdotL * visibility;\n}\n\nfn getShadowFactor(light : Light, worldPos : vec3f, unitNormal : vec3f) -> f32\n{\n    const offset = 0.5;\n    var shadowPos = light.shadow_mat * vec4f((offset * unitNormal + worldPos), 1);\n    shadowPos /= shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    return select(textureSampleCompareLevel(shadowMaps, shadowMapSampler, shadowPosUV.xy, u32(light.mode.z), shadowPosUV.z), 1.0, i32(light.mode.z)==-1);\n}\n\n////////////////////////////////\n//No Normals Entrypoint Block //\n/////////////////////////////////\n\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) uv : vec2f,\n@location(2) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n'+n(379)+E,I=[h.Vg],q=[h.Vg,V.x2];function D(e,t=!0){return new O(t?q:I,"triangle-list",t).buildAsync(e)}class O{hasNormals;_pipeline;get device(){return this._pipeline.device}constructor(e,t,n){this.hasNormals=n;const r={vertexEntry:this.hasNormals?"vertexMain":"vertexMain_alt",fragmentEntry:this.hasNormals?"fragmentMain":"fragmentMain_alt"};this._pipeline=new c.SI(G,r).setVertexBufferLayouts(e,t)}async buildAsync(e){return this.device==e||await this._pipeline.buildAsync(e),this}render(e,t,n,r,s,i,a,o){if(!this._pipeline.actualPipeline||!this.device)throw new Error("renderer wasn't built.");let u=new d.g(this.device,this._pipeline.actualPipeline,"Pbr Pipeline");u.addBuffer(t),u.addBuffer(r),u.addGroup(),u.addBuffer(n),u.addLinearSampler(),u.addTexture(n.ambientOcclussionTexture.createView()),u.addTexture(n.albedoTexture.createView()),u.addTexture(n.metalTexture.createView()),u.addTexture(n.roughnessTexture.createView()),this.hasNormals&&u.addTexture(n.normalTexture.createView()),u.addGroup(),u.addTexture(o),u.addDepthSampler(),u.addGroup(),u.addLinearSampler(),u.addTexture(s),u.addTexture(i),u.addTexture(a),e.setVertexBuffer(0,t.vertexBuffer.buffer),this.hasNormals&&e.setVertexBuffer(1,t.normalBuffer.buffer),u.createBindGroups().forEach(((t,n)=>e.setBindGroup(n,t))),e.setPipeline(this._pipeline.actualPipeline),e.draw(t.vertexBuffer.vertexCount,t.length)}}class H{camera;lights;models;environmentMap;shadowMapBuilder;renderBackground=!0;device;pbrRenderer;pbrRenderer_NN;blinnRenderer;blinnRenderer_NN;environmentRenderer;sceneSettingsBuffer;groups=[];cubeMap;irradianceMap;prefilteredMap;brdfMap;shadowMapView;constructor(e,t,n,r,s){this.camera=e,this.lights=t,this.models=n,this.environmentMap=r,this.shadowMapBuilder=s,this.renderBackground=!!r,this.sceneSettingsBuffer=new N(this.camera,this.lights,this.renderBackground)}async buildAsync(e){return this.device=e,this.pbrRenderer=await D(this.device),this.pbrRenderer_NN=await D(this.device,!1),this.blinnRenderer=await L(this.device),this.blinnRenderer_NN=await L(this.device,!1),this.environmentMap&&(this.environmentRenderer=await async function(e,t,n){return await new B(t,n).buildAsync(e)}(e,this.camera,this.environmentMap.cubeMap)),await this.createRenderGroups(),this.createEnvironmentMaps(),this}render(e){this.sceneSettingsBuffer.writeToGpu(this.device);for(let t of this.groups)t.instancesBuffer.writeToGpu(this.device),t.material.writeToGpu(this.device),t.material instanceof z._?(t.hasNormals?this.pbrRenderer:this.pbrRenderer_NN).render(e,t.instancesBuffer,t.material,this.sceneSettingsBuffer,this.irradianceMap,this.prefilteredMap,this.brdfMap,this.shadowMapView):(t.hasNormals?this.blinnRenderer:this.blinnRenderer_NN).render(e,t.instancesBuffer,t.material,this.sceneSettingsBuffer,this.cubeMap,this.shadowMapView);this.renderBackground&&this.environmentRenderer?.render(e)}async createRenderGroups(){let e=u(this.models,(e=>e.hasNormals&&e.material.hasNormalMap?{usesNormalMap:!0,vbo:e.vertexBuffer,mat:e.material}:{usesNormalMap:!1,vbo:e.vertexBuffer,mat:e.material}),l);for(let[t,n]of e.entries()){let e=new o(n);this.groups.push({hasNormals:t.usesNormalMap,instancesBuffer:e,material:t.mat}),e.vertexBuffer.writeToGpu(this.device),e.normalBuffer?.writeToGpu(this.device),await t.mat.writeTexturesToGpuAsync(this.device,!0),t.mat.writeToGpu(this.device),e.writeToGpu(this.device)}}createEnvironmentMaps(){this.shadowMapView=this.shadowMapBuilder?.textureArray.createView({dimension:"2d-array",label:"Shadow Map View"})??j(this.device,1,"depth32float","2d-array","shadow map dummy"),this.cubeMap=this.environmentMap?.cubeMap.createView({dimension:"cube"})??$(this.device,"cube map dummy"),this.irradianceMap=this.environmentMap?.irradianceMap.createView({dimension:"cube"})??$(this.device,"irradiance map dummy"),this.prefilteredMap=this.environmentMap?.specularMap.createView({dimension:"cube"})??$(this.device,"envSpecular map dummy"),this.brdfMap=this.environmentMap?.brdfMap.createView()??j(this.device,1,"rgba8unorm","2d","brdf map dummy")}}function $(e,t){return j(e,6,"rgba8unorm","cube",t)}function j(e,t,n,r,s){return e.createTexture({size:[1,1,t],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:n,label:s}).createView({dimension:r})}var J=n(858),Y=n(204);class X{id;textureView;light;camera;get lightPosition(){return this.light.position}light_mat=s.pB.identity();view_mat=s.pB.identity();proj_mat=s.pB.identity();constructor(e,t,n){this.id=e,this.textureView=t,this.light=n,this.camera=new Z(this)}}class Z{map;constructor(e){this.map=e}get view(){return this.map.view_mat}get projectionMatrix(){return this.map.proj_mat}get position(){return new Float32Array([...this.map.lightPosition,1])}}class W extends X{boundingBox;constructor(e,t,n,r){super(e,t,n),this.boundingBox=r}createViewMat(){const e=this.boundingBox,t=(0,Y.Fc)(e),n=s.eR.distance(e.min,e.max),r=s.eR.normalize(this.light.direction),i=s.eR.addScaled(t,r,-n);let a=s.eR.cross(this.light.direction,[0,1,0]);a=s.eR.equalsApproximately(a,[0,0,0])?[0,0,1]:[0,1,0],s.pB.lookAt(i,t,a,this.view_mat);const o=(0,Y.YT)(e,this.view_mat),u=o.min[0],l=o.max[0],c=o.min[1],h=o.max[1],d=-o.min[2];s.pB.ortho(u,l,c,h,0,d,this.proj_mat),s.pB.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class K extends X{constructor(e,t,n){super(e,t,n)}createViewMat(){const e=this.light.position,t=s.eR.add(e,this.light.direction);let n=s.eR.cross(this.light.direction,[0,1,0]);n=s.eR.equalsApproximately(n,[0,0,0])?[0,0,1]:[0,1,0],s.pB.lookAt(e,t,n,this.view_mat);const r=this.light.coneAngleDeg/180*Math.PI;s.pB.perspective(r,1,.1,1e5,this.proj_mat),s.pB.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class Q{scene;canvas;currentFps=0;currentFrameTime=0;lastTimestamp=0;useMSAA=!0;shadowMapSize=2048;sceneRenderer;shadowRenderer;shadowBuilder;useShadowMaps=!1;textureViewer;_currentTexture2dView=void 0;lightViewRenderers=[];lightSourceRenderer;device;context;canvasFormat;depthTexture;depthTextureView;intermediateTarget;inputHandler;currentViewPort;constructor(e,t){this.scene=e,this.canvas=t,this.inputHandler=function(e,t){const n={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},r={x:0,y:0,zoom:0};let s=!1;const i=(e,t)=>{switch(e.code){case"KeyW":n.forward=t,e.preventDefault(),e.stopPropagation();break;case"KeyS":n.backward=t,e.preventDefault(),e.stopPropagation();break;case"KeyA":n.left=t,e.preventDefault(),e.stopPropagation();break;case"KeyD":n.right=t,e.preventDefault(),e.stopPropagation();break;case"Space":n.up=t,e.preventDefault(),e.stopPropagation();break;case"KeyC":n.down=t,e.preventDefault(),e.stopPropagation()}};return e.addEventListener("keydown",(e=>i(e,!0))),e.addEventListener("keyup",(e=>i(e,!1))),t.addEventListener("mousedown",(()=>{s=!0})),t.addEventListener("mouseup",(()=>{s=!1})),t.addEventListener("mousemove",(e=>{s=!!(1&e.buttons),s&&(r.x+=e.movementX,r.y+=e.movementY)})),t.addEventListener("wheel",(e=>{s=!!(1&e.buttons),s&&(r.zoom+=Math.sign(e.deltaY),e.preventDefault(),e.stopPropagation())}),{passive:!1}),()=>{const e={digital:n,analog:{x:r.x,y:r.y,zoom:r.zoom,touching:s}};return r.x=0,r.y=0,r.zoom=0,e}}(window,t),this.currentViewPort=[0,0,t.width,t.height]}async runAsync(){if(this.device)throw new Error("Engine is already running.");await this.initAsync(),this.render()}async initAsync(){({device:this.device,context:this.context,canvasFormat:this.canvasFormat}=await async function(e){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");let n=await t.requestDevice(),r=e.getContext("webgpu"),s=navigator.gpu.getPreferredCanvasFormat();return r.configure({device:n,format:s,alphaMode:"premultiplied"}),{device:n,context:r,canvasFormat:s}}(this.canvas)),this._currentTexture2dView=void 0,await this.buildShadowMap(),await(this.scene.environmentMap?.buildAsync(this.device)),this.sceneRenderer=await async function(e,t,n){return await new H(t.camera,t.lights,t.models,t.environmentMap,n).buildAsync(e)}(this.device,this.scene,this.shadowBuilder),this.lightViewRenderers=(await async function(e,t,n){return await Promise.all(t.lights.filter((e=>!!e.shadowMap)).map((n=>new H(n.shadowMap.camera,t.lights,t.models,t.environmentMap,undefined).buildAsync(e))))}(this.device,this.scene)).map((e=>({renderer:e,selected:!1}))),this.textureViewer=await async function(e,t){return new x(t).buildAsync(e)}(this.device,(()=>[this.canvas.width,this.canvas.height])),this.lightSourceRenderer=await async function(e,t,n){return await new g(t,n).buildAsync(e)}(this.device,this.scene.lights,this.scene.camera),new ResizeObserver((()=>{this.onCanvasSizeChanged()})).observe(this.canvas),this.onCanvasSizeChanged()}async buildShadowMap(){this.shadowBuilder=void 0,this.shadowRenderer=void 0,this.useShadowMaps=this.scene.lights.filter((e=>e.useShadowMap)).length>0,this.useShadowMaps&&(this.shadowBuilder=function(e,t,n,r=1024){let s=n.filter((e=>e.useShadowMap));if(s.length<1)throw new Error("Can't create shadow map with no applicable lighs.");let i=[],a=t.map((e=>e.getBoundingBox())),o=(0,Y.bU)(a),u=e.createTexture({size:[r,r,s.length],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});return s.forEach(((e,t)=>{const n=u.createView({label:`shadow map view ${t}`,dimension:"2d",aspect:"all",baseMipLevel:0,baseArrayLayer:t,arrayLayerCount:1});let r;switch(e.type){case J.z.Direct:r=new W(t,n,e,o);break;case J.z.Target:r=new K(t,n,e);break;default:throw new Error(`Can't create a shadow map for type ${J.z[e.type]}`)}r.createViewMat(),i.push(r),e.shadowMap=r})),{textureArray:u,maps:i,textureSize:r}}(this.device,this.scene.models,this.scene.lights,this.shadowMapSize),this.shadowRenderer=await async function(e,t,n){return await new p(t.models,n.maps).buildAsync(e)}(this.device,this.scene,this.shadowBuilder))}render(){requestAnimationFrame((e=>{const t=e-this.lastTimestamp,n=.001*t;this.currentFrameTime=.8*t+.2*this.currentFrameTime,this.lastTimestamp=e,this.currentFps=1e3/this.currentFrameTime,this.scene.update(n),this.scene.camera.update(n,this.inputHandler());const r=this.device.createCommandEncoder();this.shadowRenderer?.addPass(r);const s=r.beginRenderPass(this.createDefaultPassDescriptor());this._currentTexture2dView?this.textureViewer.render(s,this._currentTexture2dView[0],this._currentTexture2dView[1]):this.lightViewRenderers.some((e=>e.selected))?this.lightViewRenderers.find((e=>e.selected)).renderer.render(s):(s.setViewport(this.currentViewPort[0],this.currentViewPort[1],this.currentViewPort[2],this.currentViewPort[3],0,1),this.sceneRenderer.render(s),this.lightSourceRenderer.render(this.device,s)),s.end(),this.device.queue.submit([r.finish()]),this.render()}))}createDefaultPassDescriptor(){const e=this.context.getCurrentTexture().createView(),t=this.intermediateTarget?.createView()??e;return{colorAttachments:[{view:t??e,resolveTarget:t?e:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}}}onCanvasSizeChanged(){requestAnimationFrame((()=>{const e=window.devicePixelRatio;this.canvas.width=this.canvas.clientWidth*e,this.canvas.height=this.canvas.clientHeight*e,this.createRenderTargets(),this.setViewport()}))}createRenderTargets(){const e=this.useMSAA?4:1,t=[this.canvas.width,this.canvas.height];this.intermediateTarget?.destroy(),this.intermediateTarget=this.useMSAA?this.device.createTexture({size:t,sampleCount:e,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT}):void 0,this.depthTexture?.destroy(),this.depthTexture=this.device.createTexture({size:t,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:e}),this.depthTextureView=this.depthTexture.createView()}setViewport(){if("auto"==this.scene.aspectRatio)return this.scene.camera.aspect=this.canvas.width/this.canvas.height,void(this.currentViewPort=[0,0,this.canvas.width,this.canvas.height]);const e=this.scene.camera.aspect;let t=this.canvas.width,n=t/e,r=0,s=(this.canvas.height-n)/2;n>this.canvas.height&&(n=this.canvas.height,t=n*e,r=(this.canvas.width-t)/2,s=0),this.currentViewPort=[r,s,t,n]}destroy(){this.device.destroy()}set showBackground(e){this.sceneRenderer.renderBackground=e}showScene(){this._currentTexture2dView=void 0,this.lightViewRenderers.forEach((e=>e.selected=!1))}showEnvironmentMap(){this.scene.environmentMap&&(this._currentTexture2dView=[this.scene.environmentMap.cubeMap.createView(),"2d-array-l6"])}showShadowMap(e){this.shadowBuilder&&e<this.shadowBuilder.maps.length&&(this._currentTexture2dView=[this.shadowBuilder.maps[e].textureView,"depth"])}showIrradianceMap(){this.scene.environmentMap&&(this._currentTexture2dView=[this.scene.environmentMap.irradianceMap.createView(),"2d-array-l6"])}showEnvSpecularMap(e){this.scene.environmentMap&&e<this.scene.environmentMap.specularMap.mipLevelCount&&(this._currentTexture2dView=[this.scene.environmentMap.specularMap.createView({mipLevelCount:1,baseMipLevel:e}),"2d-array-l6"])}showBrdfMap(){this.scene.environmentMap&&(this._currentTexture2dView=[this.scene.environmentMap.brdfMap.createView(),"2d"])}showLightView(e){this.lightViewRenderers.forEach((e=>e.selected=!1)),e<this.lightViewRenderers.length&&(this.lightViewRenderers[e].selected=!0)}}class ee{html;getText;constructor(e){this.getText="string"==typeof e?()=>e:e,this.html=document.createElement("span"),te(this.html,{whiteSpace:"pre"}),this.html.innerHTML=this.getText()}update(){const e=this.getText();this.html.innerText!=e&&(this.html.innerText=e)}}function te(e,t){for(const n in t)t.hasOwnProperty(n)&&(e.style[n]=t[n])}const ne=new class{children=[];parent;container;constructor(e){this.parent=e??document.body,this.container=document.createElement("div"),te(this.container,{position:"absolute",padding:"4px",backgroundColor:"#0008",color:"#FFF",fontFamily:"'Roboto', sans-serif",fontSize:"12px",fontWeight:"400",lineHeight:"1.4",letterSpacing:"0.5px",display:"flex",flexDirection:"column"}),this.parent.appendChild(this.container)}clear(){this.container.innerHTML="",this.children=[]}on=!0;setRefreshLoop(){this.on=!0;const e=()=>{this.on&&requestAnimationFrame((()=>{this.update(),e()}))};e()}update(){this.children.forEach((e=>e.update()))}add(e){this.children.push(e),this.container.appendChild(e.html)}addText(e){this.add(new ee(e))}};class re{canvas;scenes;engine;currentScene;get uiContainer(){return this._uiContainer||(this._uiContainer=(0,r.Rv)("ui-container"),document.body.insertBefore(this._uiContainer,this.canvas.nextSibling)),this._uiContainer}_uiContainer;constructor(e,t){this.canvas=e,this.scenes=t}async loadSceneAsync(e){this.engine?.destroy(),this.currentScene=e;let t=await Promise.resolve(e.build());this.engine=new Q(t,this.canvas),await this.engine.runAsync(),ne.clear(),ne.addText((()=>`Fps\t\t${this.engine.currentFps.toFixed(0)}`)),ne.addText((()=>`Frame\t${this.engine.currentFrameTime.toFixed(0)} ms`)),ne.setRefreshLoop(),function(e){let t=e.uiContainer;t&&(t.innerHTML="");const n=t.appendChild((0,r.HA)());!function(e,t,n){n&&(0,r.GH)(e,n);let s=(0,r.HA)();e.appendChild(s),e=s;const i=(0,r.Rv)();s.appendChild(i);for(let[e,n]of t.lights.entries())(0,r.JA)(i,`${J.z[n.type]}Light_${e.toString().padStart(2,"0")}`,(e=>{n.isOn=e.checked}),n.isOn);(0,r.JA)(i,"isAnimated",(e=>{t.isAnimated=e.checked}),t.isAnimated);const a=(0,r.Rv)();s.appendChild(a),(0,r.JA)(a,"ambient",(e=>{for(let n of t.lights.values())n.disableAmbientColor=!e.checked})),(0,r.JA)(a,"diffuse",(e=>{for(let n of t.lights.values())n.disableDiffuseColor=!e.checked})),(0,r.JA)(a,"specular",(e=>{for(let n of t.lights.values())n.disableSpecularColor=!e.checked})),(0,r.JA)(a,"normal_mapping",(e=>{for(let n of t.models)n.material.disableNormalMap=!e.checked}))}(n.appendChild((0,r.HA)()),e.engine.scene,"Options"),function(e,t,n){if(!t.scene.lights.some((e=>e.useShadowMap))&&!t.scene.environmentMap)return;n&&(0,r.GH)(e,n);let s,i,a,o,u,l,c=new Array,h=new Array;const d=e=>{s&&s!=e&&(s.checked=!1),s=e,t.showScene(),s?.checked&&(c.forEach(((e,n)=>{e==s&&t.showShadowMap(n)})),h.forEach(((e,n)=>{e==s&&t.showLightView(n)})),i==s&&t.showEnvironmentMap(),a==s&&t.showIrradianceMap(),o==s&&t.showEnvSpecularMap(l.value),u==s&&t.showBrdfMap())};if(t.scene.lights.filter((e=>e.useShadowMap)).forEach(((t,n)=>{const s=(0,r.Rv)();e.appendChild(s),(0,r.JA)(s,`ShadowMap${n}`,(e=>{t.showShadows=e.checked})),c.push((0,r.JA)(s,"map",d,!1)),h.push((0,r.JA)(s,"view",d,!1))})),t.scene.environmentMap){const n=(0,r.Rv)();e.appendChild(n),(0,r.JA)(n,"Environment",(e=>{t.showBackground=e.checked})),i=(0,r.JA)(n,"map",d,!1),a=(0,r.JA)(n,"irradiance",d,!1),o=(0,r.JA)(n,"prefilter",d,!1),l=(0,r.CJ)(n,0,t.scene.environmentMap.specularMipsCount-1,0,1,(e=>t.showEnvSpecularMap(e))),u=(0,r.JA)(n,"brdf",d,!1)}}(n.appendChild((0,r.HA)()),e.engine,"Renderer"),function(e,t,n){n&&(0,r.GH)(e,n),(0,r.SG)(e,t.scenes,(e=>e.name),(async e=>{await t.loadSceneAsync(t.scenes[e])}),t.currentScene)}(t.appendChild((0,r.HA)({margin:"0px 200px 0px auto"})),e,"Scenes")}(this),this.canvas.height=10,this.canvas.width=10,document.body.offsetWidth}}},741:(e,t,n)=>{n.d(t,{CJ:()=>l,GH:()=>a,HA:()=>s,JA:()=>o,JF:()=>r,Rv:()=>i,SG:()=>u});const r=window.location.pathname;function s(e){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t.style.margin=e?.margin??"",t}function i(e){const t=document.createElement("div");return e&&(t.id=e),t.style.display="flex",t.style.gap="10px",t}function a(e,t){e.innerHTML=`<h4 style="margin:5px">${t}</h4>`}function o(e,t,n,r=!0){let[s,i]=function(e,t=!0){const n=document.createElement("input");n.type="checkbox",n.id=e,n.name=n.id,n.checked=t;const r=document.createElement("label");return r.htmlFor=n.id,r.textContent=n.id,[n,r]}(t,r);return e.appendChild(s),e.appendChild(i),s.addEventListener("change",(()=>n(s))),s}function u(e,t,n,r,s=0){let i,a=document.createElement("select");a.setAttribute("size","7"),i="number"==typeof s?s:Math.max(0,[...t].indexOf(s));for(const[e,r]of[...t].entries()){const t=document.createElement("option");t.value=e.toString(),t.text=n(r)??e.toString(),a.appendChild(t)}a.value=i.toString(),a.addEventListener("change",(()=>{const e=parseInt(a.value);i!==e&&(i=e,r(i))})),e.appendChild(a)}function l(e,t=0,n=100,r,s=1,i){const a=new c(t,n,r,s,i);return e.appendChild(a.element),a}class c{el;_value;min;max;step;callbacks=[];constructor(e=0,t=100,n,r=1,s){this.el=document.createElement("input"),this.el.type="number",this.el.style.width="50px",this._value=n,this.min=e,this.max=t,this.step=r,this.el.value=this.value.toString(),this.callbacks.push(s),this.el.addEventListener("change",(()=>{const e=parseInt(this.el.value);e>=this.min&&e<=this.max?(this._value=e,this.executeCallbacks()):this.el.value=this.value.toString()})),this.el.addEventListener("keydown",(e=>{"ArrowUp"===e.key&&this.value<this.max?(this._value+=this.step,this.el.value=this.value.toString(),this.executeCallbacks()):"ArrowDown"===e.key&&this.value>this.min&&(this._value-=this.step,this.el.value=this.value.toString(),this.executeCallbacks())}))}executeCallbacks(){this.callbacks.forEach((e=>e(this._value)))}get element(){return this.el}get value(){return this._value}}},993:(e,t,n)=>{n.d(t,{sZ:()=>i,w:()=>s});var r=n(273);function s(e,t,n=1,r=1,s="rgba8unorm"){const i=n*r,a=new Uint8Array(4*i),[o,u,l,c]=t;for(let e=0;e<i;++e){const t=4*e;a[t]=255*o,a[t+1]=255*u,a[t+2]=255*l,a[t+3]=255*c}const h=e.createTexture({size:{width:n,height:r},format:s,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return e.queue.writeTexture({texture:h},a,{bytesPerRow:4*n,rowsPerImage:r},{width:n,height:r}),h}async function i(e,t,n=!0,i="rgba8unorm"){return"string"==typeof t?await(0,r.$L)(e,t,{mips:n,format:i}):s(e,"number"==typeof t?[t,t,t,1]:t,1,1,i)}},156:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(615),s=n(823),i=n(327),a=n(157),o=n(98),u=n(775),l=n(682),c=n(407),h=n(127);const e=[{name:"Obj Test",build:n(81).y},{name:"Pbr Samples",build:()=>new a.g},{name:"Pbr",build:()=>new o.R},{name:"Benchmark",build:()=>new h.G},{name:"Environment Map",build:()=>new s.M},{name:"Target Light",build:()=>new c.s},{name:"Shadow Map",build:()=>new u.P},{name:"Normal Map",build:()=>new i.Y},{name:"Simple",build:()=>new l.V}],d=document.querySelector("canvas");await new r.F(d,e).loadSceneAsync(e[0]),t()}catch(e){t(e)}}),1)},499:(e,t,n)=>{n.d(t,{Z:()=>r,p:()=>s});const r=36,s=new Float32Array([1,-1,1,1,0,1,0,-1,0,1,-1,-1,1,1,1,1,0,-1,0,1,-1,-1,-1,1,1,0,0,-1,0,1,1,-1,-1,1,0,0,0,-1,0,1,1,-1,1,1,0,1,0,-1,0,1,-1,-1,-1,1,1,0,0,-1,0,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,1,0,0,1,1,1,-1,1,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,1,0,0,1,-1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,0,0,1,0,1,-1,1,-1,1,0,0,0,1,0,1,-1,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,0,0,1,0,1,-1,-1,1,1,0,1,-1,0,0,1,-1,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,-1,0,0,1,-1,-1,1,1,0,1,-1,0,0,1,-1,1,-1,1,1,0,-1,0,0,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,1,1,0,0,1,1,-1,-1,1,1,1,0,0,0,1,1,-1,-1,1,1,1,0,0,0,1,1,1,-1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,0,1,0,0,-1,1,-1,-1,-1,1,1,1,0,0,-1,1,-1,1,-1,1,1,0,0,0,-1,1,1,1,-1,1,0,0,0,0,-1,1,1,-1,-1,1,0,1,0,0,-1,1,-1,1,-1,1,1,0,0,0,-1,1])},431:(e,t,n)=>{n.d(t,{I7:()=>a,IH:()=>u,Vg:()=>i,pG:()=>s,uo:()=>r,wh:()=>o});const r="triangle-list",s=40,i={arrayStride:40,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x2",offset:16,shaderLocation:1},{format:"float32x4",offset:24,shaderLocation:2}]},a=10,o=0,u=4},967:(e,t,n)=>{n.d(t,{Y5:()=>k,T8:()=>M,wh:()=>f,P2:()=>b,Hh:()=>p});var r=n(300),s=n(204);class i{name;vertexBuffer;material;boundingBox;normalBuffer;get hasNormals(){return null!=this.normalBuffer}get transform(){return this._transform}_transform=r.pB.identity();constructor(e,t,n,s,i=void 0,a=r.pB.identity()){this.name=e,this.vertexBuffer=t,this.material=n,this.boundingBox=s,this.normalBuffer=i,this._transform=a}getBoundingBox(){return(0,s.YT)(this.boundingBox,this._transform)}translate(e,t,n){return r.pB.translate(this._transform,[e,t,n],this._transform),this}rotateDeg(e,t,n){return r.pB.rotateX(this._transform,e/180*Math.PI,this._transform),r.pB.rotateY(this._transform,t/180*Math.PI,this._transform),r.pB.rotateZ(this._transform,n/180*Math.PI,this._transform),this}scale(e,t,n){return t&&n||(n=t=e),r.pB.scale(this._transform,[e,t,n],this._transform),this}get position(){return[...this._transform].slice(12,15)}lerp(e,t){let n=this.position;const s=r.eR.lerp(n,e,t);r.eR.sub(s,n,n),this.translate(...n)}}var a=n(410),o=n(431),u=n(844);function l(e){return e.split(" ").map(parseFloat).filter((e=>!isNaN(e)))}function c(e,t,n,r){const s=e=>Number(e.split("/")[0])-1,i=e=>Number(e.split("/")[1])-1,a=e=>Number(e.split("/")[2])-1,o=e.trim().split(" ").splice(1);if(o.length>3)throw new Error("Not implemented yet. The Obj file seems to use quads not triangles.");return o.map((e=>({position:t[s(e)],normal:n[a(e)],uv:r[i(e)]})))}var h=n(499);function d(e,t,n,s=[0,0,0]){let i=Math.sin(t*Math.PI/180),a=Math.cos(t*Math.PI/180);return r.eR.fromValues(e*a+s[0],n+s[1],-e*i+s[2])}async function p(e,t,n,r){if(!e.toLowerCase().endsWith(".obj"))throw new Error("Only Obj files are supported.");const h="boolean"==typeof n?n:"boolean"==typeof r&&r,{vBuffer:d,bb:p,tBuffer:f}=await async function(e,t=!1){const n=await async function(e){const t=await(await fetch(e)).text(),n=[],r=[],s=[],i=[];for(const e of t.split("\n"))e.startsWith("v ")?n.push(l(e)):e.startsWith("vn ")?r.push(l(e)):e.startsWith("vt ")?s.push(l(e)):e.startsWith("f ")&&i.push(...c(e,n,r,s));return i}(e),r=t?e=>[e[0],1-e[1]]:e=>e.slice(0,2);let i=n.flatMap((e=>[...e.position,1,...r(e.uv),...e.normal,1])),h=new Float32Array(i),d=new a.y(h,n.length,o.Vg,"triangle-list"),p=(0,u.fY)(n.map((e=>e.position)),n.map((e=>r(e.uv)))),f=new a.y(p,n.length,u.x2,"triangle-list");return{vBuffer:d,bb:(0,s.Gx)(n.map((e=>e.position))),tBuffer:f}}(e,h);return new i(("string"==typeof n?n:"string"==typeof r?r:void 0)??e.split("/").slice(-1)[0],d,t,p,f)}function f(e,t,n,r,s){n=n??!0,s=s??!0;let a=r?_(r,s,n):m??(m=_());return new i(e,a.vBuffer,t,a.bb,n?a.tBuffer:void 0)}let m;function _(e=128,t=!0,n=!0){const s=6*e**2,i=function(e,t=!0,n=1){const s=function(e,t=!0,n=1){const s=[],i=[],a=[];for(let o=0;o<e;o++){const u=o/e*2*Math.PI,l=(o+1)/e*2*Math.PI;for(let c=0;c<e;c++){const h=c/e*Math.PI,d=(c+1)/e*Math.PI,p=[n*Math.sin(h)*Math.cos(u),n*Math.cos(h),-n*Math.sin(h)*Math.sin(u)],f=[n*Math.sin(h)*Math.cos(l),n*Math.cos(h),-n*Math.sin(h)*Math.sin(l)],m=[n*Math.sin(d)*Math.cos(l),n*Math.cos(d),-n*Math.sin(d)*Math.sin(l)],_=[n*Math.sin(d)*Math.cos(u),n*Math.cos(d),-n*Math.sin(d)*Math.sin(u)];s.push(m,f,p),s.push(p,_,m);const g=r.eR.normalize;if(t)i.push(g(m),g(f),g(p)),i.push(g(p),g(_),g(m));else{let e=g(r.eR.mulScalar(r.eR.add(r.eR.add(m,f),p),1/3)),t=g(r.eR.mulScalar(r.eR.add(r.eR.add(p,_),m),1/3));i.push(e,e,e),i.push(t,t,t)}const w=o/e,v=(o+1)/e,y=c/e,x=(c+1)/e;a.push([v,x],[v,y],[w,y]),a.push([w,y],[w,x],[v,x])}}return{positions:s,normals:i,uvs:a}}(e,t,n),i=function(...e){const t=e.filter((e=>"number"!=typeof e)).map((e=>e));if(!t.every((e=>e.length==t[0].length)))throw new Error("The datasets arrays don't have the same length.");let n=[];for(let r=0;r<t[0].length;r++)for(let t=0;t<e.length;t++){let s=e[t];"number"==typeof s?n.push(s):n.push(...s[r])}return n}(s.positions,1,s.uvs,s.normals,1);return new Float32Array(i)}(e,t),l=new a.y(i,s,o.Vg,o.uo,"Sphere Vertex Data (default)");let c;if(n){const e=(0,u.ew)(i,s);c=new a.y(e,s,u.x2,o.uo,"Sphere Normal Data (default)")}return{vBuffer:l,bb:{min:[-1,-1,-1],max:[1,1,1]},tBuffer:c}}const g={min:[-1,-1,-1],max:[1,1,1]},w=new a.y(h.p,h.Z,o.Vg,o.uo,"Cube Vertex Data (default)"),v=(0,u.ew)(h.p,h.Z),y=new a.y(v,h.Z,u.x2,o.uo,"Cube Normal Data (default)"),x={vBuffer:w,bb:g,tBuffer:void 0};function b(){return x}function k(e,t,n=!0){return new i(e,w,t,g,n?y:void 0)}function M(e,t,n,r,s){s=s??!0,r=r??!0;let a=n?T(n,r,s):S??(S=T());return new i(e,a.vBuffer,t,a.bb,s?a.tBuffer:void 0)}let S;function T(e=100,t=!0,n=!0){const[s,i,l]=[.7,1.5,3],c=24*e,h=function(e=30,t=!1,n=.7,s=1.5,i=3){if(e<3||n>=s)throw new RangeError("arguments not valid");e+=1;let a=[],o=i/2;const u=[0,0,0];for(let t=0;t<e;t++)a.push([d(s,360*t/(e-1),o,u),d(s,360*t/(e-1),-o,u),d(n,360*t/(e-1),-o,u),d(n,360*t/(e-1),o,u)]);let l,c,h,p,f,m,_,g,w=[],v=[],y=[];for(let o=0;o<e-1;o++){l=a[o][0],c=a[o][1],h=a[o][2],p=a[o][3],f=a[o+1][0],m=a[o+1][1],_=a[o+1][2],g=a[o+1][3],w.push(l[0],l[1],l[2],f[0],f[1],f[2],g[0],g[1],g[2],g[0],g[1],g[2],p[0],p[1],p[2],l[0],l[1],l[2],c[0],c[1],c[2],h[0],h[1],h[2],_[0],_[1],_[2],_[0],_[1],_[2],m[0],m[1],m[2],c[0],c[1],c[2],l[0],l[1],l[2],c[0],c[1],c[2],m[0],m[1],m[2],m[0],m[1],m[2],f[0],f[1],f[2],l[0],l[1],l[2],h[0],h[1],h[2],p[0],p[1],p[2],g[0],g[1],g[2],g[0],g[1],g[2],_[0],_[1],_[2],h[0],h[1],h[2]);let u=[l,f,g,g,p,l];for(let e of u){let t=[e[0],e[2]];t=r.Zc.divScalar(t,s),t=r.Zc.addScaled(r.Zc.create(.5,.5),t,.5),y.push(t)}u=[c,h,_,_,m,c];for(let e of u){let t=[e[2],e[0]];t=r.Zc.divScalar(t,s),t=r.Zc.addScaled(r.Zc.create(.5,.5),t,.5),y.push(t)}const d=t=>Math.sqrt(2*t*t*(1-Math.cos(2*Math.PI/e))),x=1*d(s)/i;let b=o*x,k=(o+1)*x;y.push([b,0]),y.push([b,1]),y.push([k,1]),y.push([k,1]),y.push([k,0]),y.push([b,0]);const M=1*d(n)/i;if(k=-o*M,b=-(o+1)*M,y.push([k,1]),y.push([k,0]),y.push([b,0]),y.push([b,0]),y.push([b,1]),y.push([k,1]),v.push(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0),t){let e=r.eR.normalize([l[0],0,l[2]]),t=r.eR.normalize([m[0],0,m[2]]),n=r.eR.mulScalar(e,-1),s=r.eR.mulScalar(t,-1);v.push(...e),v.push(...e),v.push(...t),v.push(...t),v.push(...t),v.push(...e),v.push(...n),v.push(...n),v.push(...s),v.push(...s),v.push(...s),v.push(...n)}else{let e=[l[0]-f[0],0,l[2]-f[2]],t=r.eR.normalize([e[2],0,-e[0]]),n=r.eR.mulScalar(t,-1);for(let e=0;e<6;e++)v.push(...t);for(let e=0;e<6;e++)v.push(...n)}}let x=[];for(let e=0;e<w.length;e+=3)x.push(...w.slice(e,e+3),1),x.push(...y[e/3]),x.push(...v.slice(e,e+3),1);return new Float32Array(x)}(e,t,s,i,l),p=new a.y(h,c,o.Vg,o.uo,"Cylinder Vertex Data (default)");let f;if(n){const e=(0,u.ew)(h,c);f=new a.y(e,c,u.x2,o.uo,"Cylinder Normal Data (default)")}return{vBuffer:p,bb:{min:[-1,-1,-1],max:[1,1,1]},tBuffer:f}}},844:(e,t,n)=>{n.d(t,{ew:()=>o,fY:()=>a,x2:()=>i});var r=n(300),s=n(431);const i={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:3},{format:"float32x3",offset:12,shaderLocation:4}]};function a(e,t){if(e.length!=t.length)throw new Error("positions and uvs length doesn't match.");let n=[];for(let r=0;r<e.length;r+=3){const[s,i]=u(e[r],e[r+1],e[r+2],t[r],t[r+1],t[r+2]);n.push(...s,...i),n.push(...s,...i),n.push(...s,...i)}return new Float32Array(n)}function o(e,t,n=s.I7,r=s.wh,i=s.IH){let[o,u]=function(e,t,n,r,s){if(e.length!=n*t)throw new Error("the parameters don't fit together");let i=[],a=[];for(let t=0;t<e.length;t+=n){let o=e.slice(t,t+n);i.push(o.slice(r,r+3)),a.push(o.slice(s,s+2))}return[i,a]}(e,t,n,r,i),l=a(o,u);return new Float32Array(l)}function u(e,t,n,s,i,a,o=!0){const u=r.eR.subtract(t,e),l=r.eR.subtract(n,e),c=r.Zc.subtract(i,s),h=r.Zc.subtract(a,s),d=1/(c[0]*h[1]-c[1]*h[0]);return[r.eR.mulScalar(r.eR.add(r.eR.mulScalar(u,h[1]),r.eR.mulScalar(l,-c[1])),d),r.eR.mulScalar(r.eR.add(r.eR.mulScalar(u,-h[0]),r.eR.mulScalar(l,c[0])),o?-d:d)]}},823:(e,t,n)=>{n.d(t,{M:()=>c});var r=n(446),s=n(858),i=n(611),a=n(275),o=n(741),u=n(606),l=n(967);class c extends u.Z{constructor(){super(),this.isAnimated=!1,o.JF,o.JF,o.JF,o.JF,o.JF,o.JF;const e=[`../${o.JF}/assets/hdr/vestibule_1k.png`];this.environmentMap=new a.q(e),this.camera=new r.l({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new s.v({type:s.z.Direct,direction:[-1,-1,0],intensity:.7})),this.lights.push(new s.v({type:s.z.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.forEach((e=>{e.intensity/=this.lights.length}));let t=new i.L({diffuseColor:[20,20,20,1]}),n=(0,l.Y5)("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(n);let u=new i.L({diffuseColor:[1,1,0,0],reflectivness:.2}),c=(0,l.wh)("Sphere01",u).translate(0,15,0).scale(10);this.models.push(c);let h=new i.L({diffuseColor:[235/255,201/255,52/255,1],reflectivness:.51}),d=(0,l.Y5)("Cube01",h).rotateDeg(0,30,0).translate(25,8,0).scale(8);this.models.push(d)}}},127:(e,t,n)=>{n.d(t,{G:()=>u});var r=n(275),s=n(930),i=n(606),a=n(741),o=n(967);class u extends i.Z{constructor(){super(),this.environmentMap=new r.q(`../${a.JF}/assets/hdr/brown_photostudio_02_1k.hdr`);let e=(0,s.K)(`../${a.JF}/assets/pbr/light-gold/`);for(let t=0;t<9;t++)for(let n=0;n<9;n++)for(let r=0;r<9;r++)this.models.push((0,o.wh)(`[${t}, ${n}]`,e).translate(4*t,4*n,4*r))}}},327:(e,t,n)=>{n.d(t,{Y:()=>l});var r=n(446),s=n(858),i=n(611),a=n(741),o=n(606),u=n(967);class l extends o.Z{constructor(){super(),this.camera=new r.l({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new s.v({type:s.z.Point,position:[-30,5,0]}),this.lights[1]=new s.v({type:s.z.Point,position:[30,5,0]}),this.lights[2]=new s.v({type:s.z.Direct,direction:[-1,-1,-1]}),this.lights.forEach((e=>e.intensity=.4));let e=new i.L({diffuseMapPath:`../${a.JF}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${a.JF}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`}),t=(0,u.Y5)("Cube01",e).translate(-30,0,0).scale(10,10,10);this.models.push(t);let n=new i.L({diffuseMapPath:`../${a.JF}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${a.JF}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`,tiling:{u:2.25,v:2}}),o=(0,u.T8)("Cube01",n).translate(30,0,0).scale(10,10/1.125,10);this.models.push(o)}currentTime=0;startPositions=[];update(e){if(this.isAnimated){0==this.startPositions.length&&this.lights.forEach((e=>this.startPositions.push(e.position))),this.currentTime+=e;for(let e=0;e<this.lights.length-1;e++)this.lights[e].position=[this.startPositions[e][0]+25*Math.sin(this.currentTime),this.startPositions[e][1],this.startPositions[e][2]+25*Math.cos(this.currentTime)]}}}},81:(e,t,n)=>{n.d(t,{y:()=>l});var r=n(446),s=n(275),i=n(930),a=n(606),o=n(741),u=n(967);async function l(){let e=new a.Z;e.camera=new r.l({position:[0,0,100],movementSpeed:100,target:[0,0,0]}),e.environmentMap=new s.q(`../${o.JF}/assets/hdr/brown_photostudio_02_1k.hdr`,Math.PI);let t=new i._({albedo:[.7,0,.3,1],roughness:.8,metal:.9}),n=(0,u.wh)("",t).translate(50,0,0).scale(10);e.models.push(n);let l=new i._({albedo:[.7,0,.3,1],roughness:.3}),c=(await(0,u.Hh)(`../${o.JF}/assets/models/stanford-bunny.obj`,l)).scale(20);e.models.push(c);let h=(0,i.K)(`../${o.JF}/assets/pbr/light-gold/`),d=(await(0,u.Hh)(`../${o.JF}/assets/models/pyramid.obj`,h)).translate(-50,0,0).scale(20);return e.models.push(d),e}},157:(e,t,n)=>{n.d(t,{g:()=>c});var r=n(446),s=n(858),i=n(930),a=n(606),o=n(741),u=n(275),l=n(967);class c extends a.Z{constructor(){super(),this.isAnimated=!1,this.aspectRatio="camera",this.environmentMap=new u.q(`../${o.JF}/assets/hdr/brown_photostudio_02_2k.hdr`,Math.PI),this.camera=new r.l({position:[0,100,100],movementSpeed:100,target:[0,100,0]}),this.lights=[];let e=(0,i.K)(`../${o.JF}/assets/pbr/light-gold/`),t=(0,i.K)(`../${o.JF}/assets/pbr/streaked-metal1/`,!0),n=(0,i.K)(`../${o.JF}/assets/pbr/oxidized-copper/`),a=(0,i.K)(`../${o.JF}/assets/pbr/dirty-flat-stonework/`,!0),c=(0,i.K)(`../${o.JF}/assets/pbr/dull-copper/`,!0),h=((0,i.K)(`../${o.JF}/assets/pbr/gold-scuffed/`),(0,i.K)(`../${o.JF}/assets/pbr/dull-brass/`,!0),(0,i.K)(`../${o.JF}/assets/pbr/wood-floor/`,!0,"jpg")),d=(0,i.K)(`../${o.JF}/assets/pbr/Sci-fi_Metal_Plate_003_SD/`,!0,"jpg"),p=(0,i.K)(`../${o.JF}/assets/pbr/Sci-fi_Metal_Plate_003_SD/`,!0,"jpg");p.tiling={u:2.25,v:2};let f=new i._({albedo:.1,metal:.9,roughness:.1}),m=!0;this.lights.push(new s.v({type:s.z.Direct,direction:[0,-1,0],diffuseColor:[1,1,1,1],intensity:1,useFalloff:!1})),this.lights.push(new s.v({type:s.z.Point,position:[0,100,100],diffuseColor:[1,1,1,1],intensity:2e4,useFalloff:m})),this.lights.push(new s.v({type:s.z.Target,position:[0,130,0],direction:[.5,-1,0],diffuseColor:[1,1,1,1],intensity:1,useFalloff:m}));let _=(0,l.Y5)("Floor",h).translate(0,-1,0).scale(100,1,100);this.models.push(_);let g=(0,l.Y5)("Back",f).translate(0,98,-100).scale(100,100,1);this.models.push(g);let w=-2;const v=100;let y=(0,l.wh)("Sample01",a).translate(25*w++,v,0).scale(10);this.models.push(y);let x=(0,l.wh)("Sample02",t).translate(25*w++,v,0).scale(10);this.models.push(x);let b=(0,l.wh)("Sample03",c).translate(25*w++,v,0).scale(10);this.models.push(b);let k=(0,l.wh)("Sample04",e).translate(25*w++,v,0).scale(10);this.models.push(k);let M=(0,l.wh)("Sample05",n).translate(25*w++,v,0).scale(10);this.models.push(M);let S=(0,l.Y5)("Cube01",d).translate(-25,50,0).scale(10);this.models.push(S),this.rotatingBoxLight=new s.v({type:s.z.Point,position:[-25,50,0],diffuseColor:[1,0,0,1],intensity:10,useFalloff:!1}),this.rotatingBoxLight.isOn=!1,this.lights.push(this.rotatingBoxLight);let T=(0,l.T8)("Cylinder01",p).translate(25,50,0).scale(10,10/1.125,10);this.models.push(T),this.rotatingBoxLight2=new s.v({type:s.z.Point,position:[25,50,0],diffuseColor:[0,1,1,1],intensity:10,useFalloff:!1}),this.rotatingBoxLight2.isOn=!1,this.lights.push(this.rotatingBoxLight2)}rotatingBoxLight;rotatingBoxLight2;currentTime=0;startPositions=[];update(e){if(this.isAnimated){0==this.startPositions.length&&(this.startPositions=this.lights.map((e=>e.position)),this.rotatingBoxLight.isOn=this.rotatingBoxLight2.isOn=!0),this.currentTime+=e;for(let e=0;e<this.lights.length;e++)this.lights[e].position=[this.startPositions[e][0]+25*Math.sin(this.currentTime),this.startPositions[e][1],this.startPositions[e][2]+25*Math.cos(this.currentTime)]}}}},98:(e,t,n)=>{n.d(t,{R:()=>c});var r=n(446),s=n(858),i=n(930),a=n(606),o=n(741),u=n(275),l=n(967);class c extends a.Z{constructor(){super();let e=[`../${o.JF}/assets/cubemap/posx.jpg`,`../${o.JF}/assets/cubemap/negx.jpg`,`../${o.JF}/assets/cubemap/posy.jpg`,`../${o.JF}/assets/cubemap/negy.jpg`,`../${o.JF}/assets/cubemap/posz.jpg`,`../${o.JF}/assets/cubemap/negz.jpg`];e=`../${o.JF}/assets/hdr/vestibule_1k.png`,e=`../${o.JF}/assets/hdr/brown_photostudio_02_1k.hdr`,this.environmentMap=new u.q(e,Math.PI),this.camera=new r.l({position:[0,100,150],movementSpeed:100,target:[0,100,0]}),this.lights=[];let t=6e3;this.lights.push(new s.v({type:s.z.Point,position:[100,200,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new s.v({type:s.z.Point,position:[-100,200,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new s.v({type:s.z.Point,position:[-100,0,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new s.v({type:s.z.Point,position:[100,0,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0}));let n=new i._({albedo:.3,metal:.2,roughness:.3}),a=(0,l.Y5)("Floor",n).translate(0,-1,0).scale(200,1,100);this.models.push(a);let c=new i._({albedo:.3,metal:.2,roughness:.3}),h=(0,l.Y5)("Back",c).translate(0,98,-100).scale(200,150,1);this.models.push(h);let d=.8/7;for(let e=0;e<7;e++)for(let t=0;t<7;t++){let n=new i._({ambientOcclussion:1,albedo:[.8,0,0,1],metal:.1+e*d,roughness:.1+t*d}),r=(0,l.wh)("Sphere01",n).translate(25*(t-3.5),25*(e-3.5)+100,0).scale(10);this.models.push(r)}}}},775:(e,t,n)=>{n.d(t,{P:()=>c});var r=n(300),s=n(446),i=n(858),a=n(611),o=n(741),u=n(606),l=n(967);class c extends u.Z{constructor(){super(),this.isAnimated=!1,this.camera=new s.l({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i.v({type:i.z.Direct,direction:[-2,-1,0]})),this.lights.push(new i.v({type:i.z.Direct,direction:[0,-1,1]})),this.lights.push(new i.v({type:i.z.Point,position:[50,16,0]})),this.lights.forEach((e=>{e.intensity=1/this.lights.length}));let e=new a.L({diffuseColor:[20,20,20,1]}),t=(0,l.Y5)("Floor",e).translate(0,-1,0).scale(100,1,100);this.models.push(t);let n=new a.L({diffuseColor:[235/255,201/255,52/255,1]}),r=(0,l.Y5)("Cube01",n).rotateDeg(0,45,0).translate(0,10,0).scale(10);this.models.push(r);let u=new a.L({diffuseColor:[0,0,.8,1]}),c=(0,l.T8)("Cylinder01",u,5,!1).translate(0,10,-30).scale(20/3);this.models.push(c);let h=new a.L({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${o.JF}/assets/spiral_normal.png`}),d=(0,l.Y5)("Cube01",h).rotateDeg(0,30,0).translate(25,8,0).scale(8);this.models.push(d);let p=(0,l.Y5)("Cube01",n).translate(50,7,0).scale(7);this.models.push(p)}update(e){this.isAnimated&&(this.lights[0].direction=r.eR.lerp(this.lights[0].direction,[0,-1,2],.2*e))}}},682:(e,t,n)=>{n.d(t,{V:()=>l});var r=n(446),s=n(858),i=n(611),a=n(741),o=n(606),u=n(967);class l extends o.Z{isAnimated;constructor(e=!0){super(),this.isAnimated=e,this.camera=new r.l({position:[0,60,10],movementSpeed:100,target:[0,40,0]}),this.lights[0]=new s.v({type:s.z.Point,position:[0,20,-25],useShadowMap:!1}),this.lights[1]=new s.v({type:s.z.Direct,direction:[-1,-1,0],useShadowMap:!1}),this.lights.forEach((e=>e.intensity=.7));let t=new i.L({diffuseColor:[0,1,0,1],specularColor:[1,0,0,1]}),n=new i.L({diffuseMapPath:`../${a.JF}/assets/uv_dist.jpg`,shininess:50}),o=new i.L({diffuseColor:[0,0,.8,1]}),l=(0,u.Y5)("Cube01",t).translate(0,0,-50).rotateDeg(0,30,0).scale(10,10,10);this.models.push(l);let c=(0,u.Y5)("Floor",t).translate(0,-25,0).scale(100,1,100);this.models.push(c);let h=(0,u.T8)("Cylinder01",n).translate(20,0,-20).rotateDeg(0,0,45).scale(10,10,10);this.models.push(h);let d=(0,u.T8)("Cylinder02",o,5,!1).translate(-20,0,-20).scale(10,10,10);this.models.push(d)}currentTime=0;centerPos;update(e){this.isAnimated&&(this.centerPos=this.centerPos??this.lights[0].position,this.currentTime+=e,this.lights[0].position=[this.centerPos[0]+25*Math.sin(this.currentTime),this.centerPos[1],this.centerPos[2]+25*Math.cos(this.currentTime)])}}},407:(e,t,n)=>{n.d(t,{s:()=>c});var r=n(300),s=n(446),i=n(858),a=n(611),o=n(741),u=n(606),l=n(967);class c extends u.Z{constructor(){super(),this.isAnimated=!1,this.camera=new s.l({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i.v({type:i.z.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.push(new i.v({type:i.z.Target,position:[-50,30,-180],target:[-50,0,0],coneAngleDeg:40})),this.lights.forEach((e=>{e.intensity=1/this.lights.length}));let e=new a.L({diffuseColor:[20,20,20,1]}),t=(0,l.Y5)("Floor",e).translate(0,-1,0).scale(100,1,100);this.models.push(t);let n=new a.L({diffuseColor:[235/255,201/255,52/255,1]}),r=(0,l.Y5)("Cube01",n).rotateDeg(0,45,0).translate(-50,10,0).scale(10);this.models.push(r);let u=new a.L({diffuseColor:[0,0,.8,1]}),c=(0,l.T8)("Cylinder01",u,5,!1).translate(-50,10,-30).scale(20/3);this.models.push(c);let h=new a.L({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${o.JF}/assets/spiral_normal.png`}),d=(0,l.Y5)("Cube01",h).rotateDeg(0,30,0).translate(25,18,0).scale(8);this.models.push(d);let p=(0,l.Y5)("Cube02",n).translate(50,7,0).scale(7);this.models.push(p)}update(e){this.isAnimated&&(this.lights[0].position=r.eR.lerp(this.lights[0].position,[50,40,-70],.2*e),this.lights[1].coneAngleDeg=r.Zc.lerp(r.Zc.fromValues(this.lights[1].coneAngleDeg,0),r.Zc.fromValues(22,0),.1*e)[0])}}},379:e=>{e.exports="const PI = 3.14159265359;\n\nfn fresnelSchlickRoughness(cosTheta : f32, F0 : vec3f, roughness : f32) -> vec3f\n{\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n}\n\nfn fresnelSchlick(cosTheta : f32, F0 : vec3f) -> vec3f\n{\n    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n}\n\nfn DistributionGGX(N : vec3f, H : vec3f, roughness : f32) -> f32\n{\n    let a = roughness * roughness;\n    let a2 = a * a;\n    let NdotH = max(dot(N, H), 0.0);\n    let NdotH2 = NdotH * NdotH;\n\n    let nom = a2;\n    var denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfn GeometrySchlickGGX(NdotV : f32, roughness : f32) -> f32\n{\n    let r = (roughness + 1.0);\n    let k = (r * r) / 8.0;\n\n    let num = NdotV;\n    let denom = NdotV * (1.0 - k) + k;\n\n    return num / denom;\n}\n\nfn GeometrySmith(N : vec3f, V : vec3f, L : vec3f, roughness : f32) -> f32\n{\n    let NdotV = max(dot(N, V), 0.0);\n    let NdotL = max(dot(N, L), 0.0);\n    let ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    let ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\n\n//http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n//efficient VanDerCorpus calculation.\nfn RadicalInverse_VdC(bits_in : u32) -> f32\n{\n    var bits = (bits_in << 16u) | (bits_in >> 16u);\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n    return f32(bits) / 0x100000000;\n}\n\nfn Hammersley(i : u32, N : u32) -> vec2f\n{\n    return vec2(f32(i) / f32(N), RadicalInverse_VdC(i));\n}\n\nfn ImportanceSampleGGX(Xi : vec2f, N : vec3f, roughness : f32) -> vec3f\n{\n    let a = roughness * roughness;\n\n    let phi = 2.0 * PI * Xi.x;\n    let cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n    let sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\n    //from spherical coordinates to cartesian coordinates - halfway vector\n    var H : vec3f = vec3f();\n    H.x = cos(phi) * sinTheta;\n    H.y = sin(phi) * sinTheta;\n    H.z = cosTheta;\n\n    //from tangent-space H vector to world-space sample vector\n    let up = select(vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), abs(N.z) < 0.999);\n    let tangent = normalize(cross(up, N));\n    let bitangent = cross(N, tangent);\n\n    let sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n    return normalize(sampleVec);\n}\n"},273:(e,t,n)=>{n.d(t,{$L:()=>He,an:()=>Ve,cy:()=>Oe});const r=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,s={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},i={...s,"atomic<i32>":s.i32,"atomic<u32>":s.u32,"vec2<i32>":s.vec2i,"vec2<u32>":s.vec2u,"vec2<f32>":s.vec2f,"vec2<f16>":s.vec2h,"vec3<i32>":s.vec3i,"vec3<u32>":s.vec3u,"vec3<f32>":s.vec3f,"vec3<f16>":s.vec3h,"vec4<i32>":s.vec4i,"vec4<u32>":s.vec4u,"vec4<f32>":s.vec4f,"vec4<f16>":s.vec4h,"mat2x2<f32>":s.mat2x2f,"mat2x2<f16>":s.mat2x2h,"mat3x2<f32>":s.mat3x2f,"mat3x2<f16>":s.mat3x2h,"mat4x2<f32>":s.mat4x2f,"mat4x2<f16>":s.mat4x2h,"mat2x3<f32>":s.mat2x3f,"mat2x3<f16>":s.mat2x3h,"mat3x3<f32>":s.mat3x3f,"mat3x3<f16>":s.mat3x3h,"mat4x3<f32>":s.mat4x3f,"mat4x3<f16>":s.mat4x3h,"mat2x4<f32>":s.mat2x4f,"mat2x4<f16>":s.mat2x4h,"mat3x4<f32>":s.mat3x4f,"mat3x4<f16>":s.mat3x4h,"mat4x4<f32>":s.mat4x4f,"mat4x4<f16>":s.mat4x4h},a=(o=i,Object.keys(o));var o,u,l,c,h,d;!function(e=[],t){const n=new Set;for(const r of a){const s=i[r];n.has(s)||(n.add(s),s.flatten=e.includes(r)?t:!t)}}(),new WeakMap;class p{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class f{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(m.instance);for(const n of e)n instanceof Array?this.searchBlock(n,t):n.search(t);t(_.instance)}}}class m extends f{}m.instance=new m;class _ extends f{}_.instance=new _;class g extends f{constructor(){super()}}class w extends g{constructor(e,t,n,r,s,i){super(),this.calls=new Set,this.name=e,this.args=t,this.returnType=n,this.body=r,this.startLine=s,this.endLine=i}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class v extends g{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class y extends g{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class x extends g{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class b extends g{constructor(e,t,n,r){super(),this.init=e,this.condition=t,this.increment=n,this.body=r}get astNodeType(){return"for"}search(e){var t,n,r;null===(t=this.init)||void 0===t||t.search(e),null===(n=this.condition)||void 0===n||n.search(e),null===(r=this.increment)||void 0===r||r.search(e),this.searchBlock(this.body,e)}}class k extends g{constructor(e,t,n,r,s){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=s}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class M extends g{constructor(e,t,n){super(),this.name=e,this.type=t,this.value=n}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class S extends g{constructor(e,t,n,r,s){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=s}get astNodeType(){return"let"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class T extends g{constructor(e,t,n,r,s){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=s}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(u||(u={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for IncrementOperator");return e[n]}}(u||(u={}));class A extends g{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(l||(l={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(l||(l={}));class P extends g{constructor(e,t,n){super(),this.operator=e,this.variable=t,this.value=n}get astNodeType(){return"assign"}search(e){this.variable.search(e),this.value.search(e)}}class E extends g{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}search(e){for(const t of this.args)t.search(e);e(this)}}class B extends g{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class C extends g{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class z extends g{constructor(e,t,n,r){super(),this.condition=e,this.body=t,this.elseif=n,this.else=r}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class N extends g{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class V extends g{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class F extends g{constructor(e,t){super(),this.severity=e,this.rule=t}get astNodeType(){return"diagnostic"}}class R extends g{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class L extends g{constructor(){super()}get astNodeType(){return"discard"}}class U extends g{constructor(){super()}get astNodeType(){return"break"}}class G extends g{constructor(){super()}get astNodeType(){return"continue"}}class I extends g{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class q extends I{constructor(e,t,n,r){super(e),this.members=t,this.startLine=n,this.endLine=r}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class D extends I{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"template"}}class O extends I{constructor(e,t,n,r){super(e),this.storage=t,this.type=n,this.access=r}get astNodeType(){return"pointer"}}class H extends I{constructor(e,t,n,r){super(e),this.attributes=t,this.format=n,this.count=r}get astNodeType(){return"array"}get isArray(){return!0}}class $ extends I{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"sampler"}}class j extends f{constructor(){super()}}class J extends j{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class Y extends j{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}search(e){e(this);for(const t of this.args)t.search(e)}}class X extends j{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class Z extends j{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}evaluate(e){const t=e.constants.get(this.name);if(!t)throw new Error("Cannot evaluate node");return t.evaluate(e)}}class W extends j{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,n;if(this.initializer instanceof Y){const r=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),s=null===(n=this.initializer.type)||void 0===n?void 0:n.name,i=e.structs.get(s),a=null==i?void 0:i.getMemberIndex(r);if(-1!=a)return this.initializer.args[a].evaluate(e);console.log(a)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class K extends j{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class Q extends j{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class ee extends j{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class te extends j{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class ne extends j{constructor(){super()}}class re extends ne{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class se extends ne{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class ie extends f{constructor(){super()}}class ae extends ie{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class oe extends ie{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class ue extends f{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"argument"}}class le extends f{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class ce extends f{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"member"}}class he extends f{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(h||(h={}));class de{constructor(e,t,n){this.name=e,this.type=t,this.rule=n}toString(){return this.name}}class pe{}c=pe,pe.none=new de("",h.reserved,""),pe.eof=new de("EOF",h.token,""),pe.reserved={asm:new de("asm",h.reserved,"asm"),bf16:new de("bf16",h.reserved,"bf16"),do:new de("do",h.reserved,"do"),enum:new de("enum",h.reserved,"enum"),f16:new de("f16",h.reserved,"f16"),f64:new de("f64",h.reserved,"f64"),handle:new de("handle",h.reserved,"handle"),i8:new de("i8",h.reserved,"i8"),i16:new de("i16",h.reserved,"i16"),i64:new de("i64",h.reserved,"i64"),mat:new de("mat",h.reserved,"mat"),premerge:new de("premerge",h.reserved,"premerge"),regardless:new de("regardless",h.reserved,"regardless"),typedef:new de("typedef",h.reserved,"typedef"),u8:new de("u8",h.reserved,"u8"),u16:new de("u16",h.reserved,"u16"),u64:new de("u64",h.reserved,"u64"),unless:new de("unless",h.reserved,"unless"),using:new de("using",h.reserved,"using"),vec:new de("vec",h.reserved,"vec"),void:new de("void",h.reserved,"void")},pe.keywords={array:new de("array",h.keyword,"array"),atomic:new de("atomic",h.keyword,"atomic"),bool:new de("bool",h.keyword,"bool"),f32:new de("f32",h.keyword,"f32"),i32:new de("i32",h.keyword,"i32"),mat2x2:new de("mat2x2",h.keyword,"mat2x2"),mat2x3:new de("mat2x3",h.keyword,"mat2x3"),mat2x4:new de("mat2x4",h.keyword,"mat2x4"),mat3x2:new de("mat3x2",h.keyword,"mat3x2"),mat3x3:new de("mat3x3",h.keyword,"mat3x3"),mat3x4:new de("mat3x4",h.keyword,"mat3x4"),mat4x2:new de("mat4x2",h.keyword,"mat4x2"),mat4x3:new de("mat4x3",h.keyword,"mat4x3"),mat4x4:new de("mat4x4",h.keyword,"mat4x4"),ptr:new de("ptr",h.keyword,"ptr"),sampler:new de("sampler",h.keyword,"sampler"),sampler_comparison:new de("sampler_comparison",h.keyword,"sampler_comparison"),struct:new de("struct",h.keyword,"struct"),texture_1d:new de("texture_1d",h.keyword,"texture_1d"),texture_2d:new de("texture_2d",h.keyword,"texture_2d"),texture_2d_array:new de("texture_2d_array",h.keyword,"texture_2d_array"),texture_3d:new de("texture_3d",h.keyword,"texture_3d"),texture_cube:new de("texture_cube",h.keyword,"texture_cube"),texture_cube_array:new de("texture_cube_array",h.keyword,"texture_cube_array"),texture_multisampled_2d:new de("texture_multisampled_2d",h.keyword,"texture_multisampled_2d"),texture_storage_1d:new de("texture_storage_1d",h.keyword,"texture_storage_1d"),texture_storage_2d:new de("texture_storage_2d",h.keyword,"texture_storage_2d"),texture_storage_2d_array:new de("texture_storage_2d_array",h.keyword,"texture_storage_2d_array"),texture_storage_3d:new de("texture_storage_3d",h.keyword,"texture_storage_3d"),texture_depth_2d:new de("texture_depth_2d",h.keyword,"texture_depth_2d"),texture_depth_2d_array:new de("texture_depth_2d_array",h.keyword,"texture_depth_2d_array"),texture_depth_cube:new de("texture_depth_cube",h.keyword,"texture_depth_cube"),texture_depth_cube_array:new de("texture_depth_cube_array",h.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new de("texture_depth_multisampled_2d",h.keyword,"texture_depth_multisampled_2d"),texture_external:new de("texture_external",h.keyword,"texture_external"),u32:new de("u32",h.keyword,"u32"),vec2:new de("vec2",h.keyword,"vec2"),vec3:new de("vec3",h.keyword,"vec3"),vec4:new de("vec4",h.keyword,"vec4"),bitcast:new de("bitcast",h.keyword,"bitcast"),block:new de("block",h.keyword,"block"),break:new de("break",h.keyword,"break"),case:new de("case",h.keyword,"case"),continue:new de("continue",h.keyword,"continue"),continuing:new de("continuing",h.keyword,"continuing"),default:new de("default",h.keyword,"default"),discard:new de("discard",h.keyword,"discard"),else:new de("else",h.keyword,"else"),enable:new de("enable",h.keyword,"enable"),diagnostic:new de("diagnostic",h.keyword,"diagnostic"),fallthrough:new de("fallthrough",h.keyword,"fallthrough"),false:new de("false",h.keyword,"false"),fn:new de("fn",h.keyword,"fn"),for:new de("for",h.keyword,"for"),function:new de("function",h.keyword,"function"),if:new de("if",h.keyword,"if"),let:new de("let",h.keyword,"let"),const:new de("const",h.keyword,"const"),loop:new de("loop",h.keyword,"loop"),while:new de("while",h.keyword,"while"),private:new de("private",h.keyword,"private"),read:new de("read",h.keyword,"read"),read_write:new de("read_write",h.keyword,"read_write"),return:new de("return",h.keyword,"return"),storage:new de("storage",h.keyword,"storage"),switch:new de("switch",h.keyword,"switch"),true:new de("true",h.keyword,"true"),alias:new de("alias",h.keyword,"alias"),type:new de("type",h.keyword,"type"),uniform:new de("uniform",h.keyword,"uniform"),var:new de("var",h.keyword,"var"),override:new de("override",h.keyword,"override"),workgroup:new de("workgroup",h.keyword,"workgroup"),write:new de("write",h.keyword,"write"),r8unorm:new de("r8unorm",h.keyword,"r8unorm"),r8snorm:new de("r8snorm",h.keyword,"r8snorm"),r8uint:new de("r8uint",h.keyword,"r8uint"),r8sint:new de("r8sint",h.keyword,"r8sint"),r16uint:new de("r16uint",h.keyword,"r16uint"),r16sint:new de("r16sint",h.keyword,"r16sint"),r16float:new de("r16float",h.keyword,"r16float"),rg8unorm:new de("rg8unorm",h.keyword,"rg8unorm"),rg8snorm:new de("rg8snorm",h.keyword,"rg8snorm"),rg8uint:new de("rg8uint",h.keyword,"rg8uint"),rg8sint:new de("rg8sint",h.keyword,"rg8sint"),r32uint:new de("r32uint",h.keyword,"r32uint"),r32sint:new de("r32sint",h.keyword,"r32sint"),r32float:new de("r32float",h.keyword,"r32float"),rg16uint:new de("rg16uint",h.keyword,"rg16uint"),rg16sint:new de("rg16sint",h.keyword,"rg16sint"),rg16float:new de("rg16float",h.keyword,"rg16float"),rgba8unorm:new de("rgba8unorm",h.keyword,"rgba8unorm"),rgba8unorm_srgb:new de("rgba8unorm_srgb",h.keyword,"rgba8unorm_srgb"),rgba8snorm:new de("rgba8snorm",h.keyword,"rgba8snorm"),rgba8uint:new de("rgba8uint",h.keyword,"rgba8uint"),rgba8sint:new de("rgba8sint",h.keyword,"rgba8sint"),bgra8unorm:new de("bgra8unorm",h.keyword,"bgra8unorm"),bgra8unorm_srgb:new de("bgra8unorm_srgb",h.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new de("rgb10a2unorm",h.keyword,"rgb10a2unorm"),rg11b10float:new de("rg11b10float",h.keyword,"rg11b10float"),rg32uint:new de("rg32uint",h.keyword,"rg32uint"),rg32sint:new de("rg32sint",h.keyword,"rg32sint"),rg32float:new de("rg32float",h.keyword,"rg32float"),rgba16uint:new de("rgba16uint",h.keyword,"rgba16uint"),rgba16sint:new de("rgba16sint",h.keyword,"rgba16sint"),rgba16float:new de("rgba16float",h.keyword,"rgba16float"),rgba32uint:new de("rgba32uint",h.keyword,"rgba32uint"),rgba32sint:new de("rgba32sint",h.keyword,"rgba32sint"),rgba32float:new de("rgba32float",h.keyword,"rgba32float"),static_assert:new de("static_assert",h.keyword,"static_assert")},pe.tokens={decimal_float_literal:new de("decimal_float_literal",h.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new de("hex_float_literal",h.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new de("int_literal",h.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new de("uint_literal",h.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new de("ident",h.token,/[_a-zA-Z][0-9a-zA-Z_]*/),and:new de("and",h.token,"&"),and_and:new de("and_and",h.token,"&&"),arrow:new de("arrow ",h.token,"->"),attr:new de("attr",h.token,"@"),attr_left:new de("attr_left",h.token,"[["),attr_right:new de("attr_right",h.token,"]]"),forward_slash:new de("forward_slash",h.token,"/"),bang:new de("bang",h.token,"!"),bracket_left:new de("bracket_left",h.token,"["),bracket_right:new de("bracket_right",h.token,"]"),brace_left:new de("brace_left",h.token,"{"),brace_right:new de("brace_right",h.token,"}"),colon:new de("colon",h.token,":"),comma:new de("comma",h.token,","),equal:new de("equal",h.token,"="),equal_equal:new de("equal_equal",h.token,"=="),not_equal:new de("not_equal",h.token,"!="),greater_than:new de("greater_than",h.token,">"),greater_than_equal:new de("greater_than_equal",h.token,">="),shift_right:new de("shift_right",h.token,">>"),less_than:new de("less_than",h.token,"<"),less_than_equal:new de("less_than_equal",h.token,"<="),shift_left:new de("shift_left",h.token,"<<"),modulo:new de("modulo",h.token,"%"),minus:new de("minus",h.token,"-"),minus_minus:new de("minus_minus",h.token,"--"),period:new de("period",h.token,"."),plus:new de("plus",h.token,"+"),plus_plus:new de("plus_plus",h.token,"++"),or:new de("or",h.token,"|"),or_or:new de("or_or",h.token,"||"),paren_left:new de("paren_left",h.token,"("),paren_right:new de("paren_right",h.token,")"),semicolon:new de("semicolon",h.token,";"),star:new de("star",h.token,"*"),tilde:new de("tilde",h.token,"~"),underscore:new de("underscore",h.token,"_"),xor:new de("xor",h.token,"^"),plus_equal:new de("plus_equal",h.token,"+="),minus_equal:new de("minus_equal",h.token,"-="),times_equal:new de("times_equal",h.token,"*="),division_equal:new de("division_equal",h.token,"/="),modulo_equal:new de("modulo_equal",h.token,"%="),and_equal:new de("and_equal",h.token,"&="),or_equal:new de("or_equal",h.token,"|="),xor_equal:new de("xor_equal",h.token,"^="),shift_right_equal:new de("shift_right_equal",h.token,">>="),shift_left_equal:new de("shift_left_equal",h.token,"<<=")},pe.simpleTokens={"@":c.tokens.attr,"{":c.tokens.brace_left,"}":c.tokens.brace_right,":":c.tokens.colon,",":c.tokens.comma,"(":c.tokens.paren_left,")":c.tokens.paren_right,";":c.tokens.semicolon},pe.literalTokens={"&":c.tokens.and,"&&":c.tokens.and_and,"->":c.tokens.arrow,"[[":c.tokens.attr_left,"]]":c.tokens.attr_right,"/":c.tokens.forward_slash,"!":c.tokens.bang,"[":c.tokens.bracket_left,"]":c.tokens.bracket_right,"=":c.tokens.equal,"==":c.tokens.equal_equal,"!=":c.tokens.not_equal,">":c.tokens.greater_than,">=":c.tokens.greater_than_equal,">>":c.tokens.shift_right,"<":c.tokens.less_than,"<=":c.tokens.less_than_equal,"<<":c.tokens.shift_left,"%":c.tokens.modulo,"-":c.tokens.minus,"--":c.tokens.minus_minus,".":c.tokens.period,"+":c.tokens.plus,"++":c.tokens.plus_plus,"|":c.tokens.or,"||":c.tokens.or_or,"*":c.tokens.star,"~":c.tokens.tilde,_:c.tokens.underscore,"^":c.tokens.xor,"+=":c.tokens.plus_equal,"-=":c.tokens.minus_equal,"*=":c.tokens.times_equal,"/=":c.tokens.division_equal,"%=":c.tokens.modulo_equal,"&=":c.tokens.and_equal,"|=":c.tokens.or_equal,"^=":c.tokens.xor_equal,">>=":c.tokens.shift_right_equal,"<<=":c.tokens.shift_left_equal},pe.regexTokens={decimal_float_literal:c.tokens.decimal_float_literal,hex_float_literal:c.tokens.hex_float_literal,int_literal:c.tokens.int_literal,uint_literal:c.tokens.uint_literal,ident:c.tokens.ident},pe.storage_class=[c.keywords.function,c.keywords.private,c.keywords.workgroup,c.keywords.uniform,c.keywords.storage],pe.access_mode=[c.keywords.read,c.keywords.write,c.keywords.read_write],pe.sampler_type=[c.keywords.sampler,c.keywords.sampler_comparison],pe.sampled_texture_type=[c.keywords.texture_1d,c.keywords.texture_2d,c.keywords.texture_2d_array,c.keywords.texture_3d,c.keywords.texture_cube,c.keywords.texture_cube_array],pe.multisampled_texture_type=[c.keywords.texture_multisampled_2d],pe.storage_texture_type=[c.keywords.texture_storage_1d,c.keywords.texture_storage_2d,c.keywords.texture_storage_2d_array,c.keywords.texture_storage_3d],pe.depth_texture_type=[c.keywords.texture_depth_2d,c.keywords.texture_depth_2d_array,c.keywords.texture_depth_cube,c.keywords.texture_depth_cube_array,c.keywords.texture_depth_multisampled_2d],pe.texture_external_type=[c.keywords.texture_external],pe.any_texture_type=[...c.sampled_texture_type,...c.multisampled_texture_type,...c.storage_texture_type,...c.depth_texture_type,...c.texture_external_type],pe.texel_format=[c.keywords.r8unorm,c.keywords.r8snorm,c.keywords.r8uint,c.keywords.r8sint,c.keywords.r16uint,c.keywords.r16sint,c.keywords.r16float,c.keywords.rg8unorm,c.keywords.rg8snorm,c.keywords.rg8uint,c.keywords.rg8sint,c.keywords.r32uint,c.keywords.r32sint,c.keywords.r32float,c.keywords.rg16uint,c.keywords.rg16sint,c.keywords.rg16float,c.keywords.rgba8unorm,c.keywords.rgba8unorm_srgb,c.keywords.rgba8snorm,c.keywords.rgba8uint,c.keywords.rgba8sint,c.keywords.bgra8unorm,c.keywords.bgra8unorm_srgb,c.keywords.rgb10a2unorm,c.keywords.rg11b10float,c.keywords.rg32uint,c.keywords.rg32sint,c.keywords.rg32float,c.keywords.rgba16uint,c.keywords.rgba16sint,c.keywords.rgba16float,c.keywords.rgba32uint,c.keywords.rgba32sint,c.keywords.rgba32float],pe.const_literal=[c.tokens.int_literal,c.tokens.uint_literal,c.tokens.decimal_float_literal,c.tokens.hex_float_literal,c.keywords.true,c.keywords.false],pe.literal_or_ident=[c.tokens.ident,c.tokens.int_literal,c.tokens.uint_literal,c.tokens.decimal_float_literal,c.tokens.hex_float_literal],pe.element_count_expression=[c.tokens.int_literal,c.tokens.uint_literal,c.tokens.ident],pe.template_types=[c.keywords.vec2,c.keywords.vec3,c.keywords.vec4,c.keywords.mat2x2,c.keywords.mat2x3,c.keywords.mat2x4,c.keywords.mat3x2,c.keywords.mat3x3,c.keywords.mat3x4,c.keywords.mat4x2,c.keywords.mat4x3,c.keywords.mat4x4,c.keywords.atomic,c.keywords.bitcast,...c.any_texture_type],pe.attribute_name=[c.tokens.ident,c.keywords.block,c.keywords.diagnostic],pe.assignment_operators=[c.tokens.equal,c.tokens.plus_equal,c.tokens.minus_equal,c.tokens.times_equal,c.tokens.division_equal,c.tokens.modulo_equal,c.tokens.and_equal,c.tokens.or_equal,c.tokens.xor_equal,c.tokens.shift_right_equal,c.tokens.shift_left_equal],pe.increment_operators=[c.tokens.plus_plus,c.tokens.minus_minus];class fe{constructor(e,t,n){this.type=e,this.lexeme=t,this.line=n}toString(){return this.lexeme}isTemplateType(){return-1!=pe.template_types.indexOf(this.type)}isArrayType(){return this.type==pe.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class me{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new fe(pe.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}const t=pe.simpleTokens[e];if(t)return this._addToken(t),!0;let n=pe.none;const r=this._isAlpha(e),s="_"===e;if(this._isAlphaNumeric(e)){let t=this._peekAhead();for(;this._isAlphaNumeric(t);)e+=this._advance(),t=this._peekAhead()}if(r){const t=pe.keywords[e];if(t)return this._addToken(t),!0}if(r||s)return this._addToken(pe.tokens.ident),!0;for(;;){let t=this._findType(e);const r=this._peekAhead();if(">"==e&&(">"==r||"="==r)){let e=!1,n=this._tokens.length-1;for(let t=0;t<5&&n>=0;++t,--n)if(this._tokens[n].type===pe.tokens.less_than){n>0&&this._tokens[n-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(t),!0}if(t===pe.none){let r=e,s=0;const i=2;for(let e=0;e<i;++e)if(r+=this._peekAhead(e),t=this._findType(r),t!==pe.none){s=e;break}if(t===pe.none)return n!==pe.none&&(this._current--,this._addToken(n),!0);e=r,this._current+=s+1}if(n=t,this._isAtEnd())break;e+=this._advance()}return n!==pe.none&&(this._addToken(n),!0)}_findType(e){for(const t in pe.regexTokens){const n=pe.regexTokens[t];if(this._match(e,n.rule))return n}return pe.literalTokens[e]||pe.none}_match(e,t){const n=t.exec(e);return n&&0==n.index&&n[0]==e}_isAtEnd(){return this._current>=this._source.length}_isAlpha(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"}_isAlphaNumeric(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"||"_"==e||e>="0"&&e<="9"}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new fe(e,t,this._line))}}class _e{constructor(){this._tokens=[],this._current=0,this._currentLine=0,this._context=new p,this._deferArrayCountEval=[]}parse(e){this._initialize(e),this._deferArrayCountEval.length=0;const t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}if(this._deferArrayCountEval.length>0){for(const e of this._deferArrayCountEval){const t=e.arrayType,n=e.countNode;if(n instanceof Z){const e=n.name,r=this._context.constants.get(e);if(r)try{const e=r.evaluate(this._context);t.count=e}catch(e){}}}this._deferArrayCountEval.length=0}return t}_initialize(e){if(e)if("string"==typeof e){const t=new me(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==pe.eof}_match(e){if(e instanceof de)return!!this._check(e)&&(this._advance(),!0);for(let t=0,n=e.length;t<n;++t){const n=e[t];if(this._check(n))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){const n=t.type;return-1!=e.indexOf(n)}return t.type==e}_advance(){var e,t;return this._currentLine=null!==(t=null===(e=this._peek())||void 0===e?void 0:e.line)&&void 0!==t?t:-1,this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(pe.tokens.semicolon)&&!this._isAtEnd(););if(this._match(pe.keywords.alias)){const e=this._type_alias();return this._consume(pe.tokens.semicolon,"Expected ';'"),e}if(this._match(pe.keywords.diagnostic)){const e=this._diagnostic();return this._consume(pe.tokens.semicolon,"Expected ';'"),e}if(this._match(pe.keywords.enable)){const e=this._enable_directive();return this._consume(pe.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(pe.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(pe.tokens.semicolon,"Expected ';'."),t}if(this._check(pe.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(pe.tokens.semicolon,"Expected ';'."),t}if(this._check(pe.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(pe.tokens.semicolon,"Expected ';'."),t}if(this._check(pe.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(pe.tokens.semicolon,"Expected ';'."),t}if(this._check(pe.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(pe.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(pe.keywords.fn))return null;const e=this._currentLine,t=this._consume(pe.tokens.ident,"Expected function name.").toString();this._consume(pe.tokens.paren_left,"Expected '(' for function arguments.");const n=[];if(!this._check(pe.tokens.paren_right))do{if(this._check(pe.tokens.paren_right))break;const e=this._attribute(),t=this._consume(pe.tokens.ident,"Expected argument name.").toString();this._consume(pe.tokens.colon,"Expected ':' for argument type.");const r=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=r,n.push(new ue(t,s,e)))}while(this._match(pe.tokens.comma));this._consume(pe.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(pe.tokens.arrow)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}const s=this._compound_statement(),i=this._currentLine;return new w(t,n,r,s,e,i)}_compound_statement(){const e=[];for(this._consume(pe.tokens.brace_left,"Expected '{' for block.");!this._check(pe.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(pe.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(pe.tokens.semicolon)&&!this._isAtEnd(););if(this._check(pe.tokens.attr)&&this._attribute(),this._check(pe.keywords.if))return this._if_statement();if(this._check(pe.keywords.switch))return this._switch_statement();if(this._check(pe.keywords.loop))return this._loop_statement();if(this._check(pe.keywords.for))return this._for_statement();if(this._check(pe.keywords.while))return this._while_statement();if(this._check(pe.keywords.continuing))return this._continuing_statement();if(this._check(pe.keywords.static_assert))return this._static_assert_statement();if(this._check(pe.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(pe.keywords.return)?this._return_statement():this._check([pe.keywords.var,pe.keywords.let,pe.keywords.const])?this._variable_statement():this._match(pe.keywords.discard)?new L:this._match(pe.keywords.break)?new U:this._match(pe.keywords.continue)?new G:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(pe.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(pe.keywords.static_assert))return null;const e=this._optional_paren_expression();return new v(e)}_while_statement(){if(!this._match(pe.keywords.while))return null;const e=this._optional_paren_expression();this._check(pe.tokens.attr)&&this._attribute();const t=this._compound_statement();return new y(e,t)}_continuing_statement(){if(!this._match(pe.keywords.continuing))return null;const e=this._compound_statement();return new x(e)}_for_statement(){if(!this._match(pe.keywords.for))return null;this._consume(pe.tokens.paren_left,"Expected '('.");const e=this._check(pe.tokens.semicolon)?null:this._for_init();this._consume(pe.tokens.semicolon,"Expected ';'.");const t=this._check(pe.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(pe.tokens.semicolon,"Expected ';'.");const n=this._check(pe.tokens.paren_right)?null:this._for_increment();this._consume(pe.tokens.paren_right,"Expected ')'."),this._check(pe.tokens.attr)&&this._attribute();const r=this._compound_statement();return new b(e,t,n,r)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(pe.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(pe.tokens.equal)&&(t=this._short_circuit_or_expression()),new k(e.name,e.type,e.storage,e.access,t)}if(this._match(pe.keywords.let)){const e=this._consume(pe.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(pe.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(pe.tokens.equal,"Expected '=' for let.");const n=this._short_circuit_or_expression();return new S(e,t,null,null,n)}if(this._match(pe.keywords.const)){const e=this._consume(pe.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(pe.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(pe.tokens.equal,"Expected '=' for const.");const n=this._short_circuit_or_expression();return new T(e,t,null,null,n)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(pe.increment_operators))return this._current=e,null;const n=this._consume(pe.increment_operators,"Expected increment operator");return new A(n.type===pe.tokens.plus_plus?u.increment:u.decrement,t)}_assignment_statement(){let e=null;if(this._check(pe.tokens.brace_right))return null;let t=this._match(pe.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const n=this._consume(pe.assignment_operators,"Expected assignment operator."),r=this._short_circuit_or_expression();return new P(l.parse(n.lexeme),e,r)}_func_call_statement(){if(!this._check(pe.tokens.ident))return null;const e=this._current,t=this._consume(pe.tokens.ident,"Expected function name."),n=this._argument_expression_list();return null===n?(this._current=e,null):new E(t.lexeme,n)}_loop_statement(){if(!this._match(pe.keywords.loop))return null;this._check(pe.tokens.attr)&&this._attribute(),this._consume(pe.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let n of t)e.push(n);else e.push(t);t=this._statement()}let n=null;return this._match(pe.keywords.continuing)&&(n=this._compound_statement()),this._consume(pe.tokens.brace_right,"Expected '}' for loop."),new B(e,n)}_switch_statement(){if(!this._match(pe.keywords.switch))return null;const e=this._optional_paren_expression();this._check(pe.tokens.attr)&&this._attribute(),this._consume(pe.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(pe.tokens.brace_right,"Expected '}' for switch."),new C(e,t)}_switch_body(){const e=[];if(this._match(pe.keywords.case)){const t=this._case_selectors();this._match(pe.tokens.colon),this._check(pe.tokens.attr)&&this._attribute(),this._consume(pe.tokens.brace_left,"Exected '{' for switch case.");const n=this._case_body();this._consume(pe.tokens.brace_right,"Exected '}' for switch case."),e.push(new ae(t,n))}if(this._match(pe.keywords.default)){this._match(pe.tokens.colon),this._check(pe.tokens.attr)&&this._attribute(),this._consume(pe.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(pe.tokens.brace_right,"Exected '}' for switch default."),e.push(new oe(t))}if(this._check([pe.keywords.default,pe.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){const e=[this._shift_expression()];for(;this._match(pe.tokens.comma);)e.push(this._shift_expression());return e}_case_body(){if(this._match(pe.keywords.fallthrough))return this._consume(pe.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(pe.keywords.if))return null;const e=this._optional_paren_expression();this._check(pe.tokens.attr)&&this._attribute();const t=this._compound_statement();let n=[];this._match_elseif()&&(this._check(pe.tokens.attr)&&this._attribute(),n=this._elseif_statement(n));let r=null;return this._match(pe.keywords.else)&&(this._check(pe.tokens.attr)&&this._attribute(),r=this._compound_statement()),new z(e,t,n,r)}_match_elseif(){return this._tokens[this._current].type===pe.keywords.else&&this._tokens[this._current+1].type===pe.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),n=this._compound_statement();return e.push(new le(t,n)),this._match_elseif()&&(this._check(pe.tokens.attr)&&this._attribute(),this._elseif_statement(e)),e}_return_statement(){if(!this._match(pe.keywords.return))return null;const e=this._short_circuit_or_expression();return new N(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(pe.tokens.or_or);)e=new se(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(pe.tokens.and_and);)e=new se(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(pe.tokens.or);)e=new se(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(pe.tokens.xor);)e=new se(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(pe.tokens.and);)e=new se(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([pe.tokens.equal_equal,pe.tokens.not_equal])?new se(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([pe.tokens.less_than,pe.tokens.greater_than,pe.tokens.less_than_equal,pe.tokens.greater_than_equal]);)e=new se(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([pe.tokens.shift_left,pe.tokens.shift_right]);)e=new se(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([pe.tokens.plus,pe.tokens.minus]);)e=new se(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([pe.tokens.star,pe.tokens.forward_slash,pe.tokens.modulo]);)e=new se(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([pe.tokens.minus,pe.tokens.bang,pe.tokens.tilde,pe.tokens.star,pe.tokens.and])?new re(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(pe.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(pe.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(pe.tokens.period)){const e=this._consume(pe.tokens.ident,"Expected member name."),t=this._postfix_expression(),n=new J(e.lexeme);return t&&(n.postfix=t),n}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(pe.tokens.ident)){const e=this._previous().toString();if(this._check(pe.tokens.paren_left)){const t=this._argument_expression_list(),n=this._getStruct(e);return null!=n?new Y(n,t):new X(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new W(e,t.value)}return new Z(e)}if(this._match(pe.const_literal))return new K(parseFloat(this._previous().toString()));if(this._check(pe.tokens.paren_left))return this._paren_expression();if(this._match(pe.keywords.bitcast)){this._consume(pe.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(pe.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new Q(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new ee(e,t)}_argument_expression_list(){if(!this._match(pe.tokens.paren_left))return null;const e=[];do{if(this._check(pe.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(pe.tokens.comma));return this._consume(pe.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(pe.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(pe.tokens.paren_right),new te([e])}_paren_expression(){this._consume(pe.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(pe.tokens.paren_right,"Expected ')'."),new te([e])}_struct_decl(){if(!this._match(pe.keywords.struct))return null;const e=this._currentLine,t=this._consume(pe.tokens.ident,"Expected name for struct.").toString();this._consume(pe.tokens.brace_left,"Expected '{' for struct body.");const n=[];for(;!this._check(pe.tokens.brace_right);){const e=this._attribute(),t=this._consume(pe.tokens.ident,"Expected variable name.").toString();this._consume(pe.tokens.colon,"Expected ':' for struct member type.");const r=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=r),this._check(pe.tokens.brace_right)?this._match(pe.tokens.comma):this._consume(pe.tokens.comma,"Expected ',' for struct member."),n.push(new ce(t,s,e))}this._consume(pe.tokens.brace_right,"Expected '}' after struct body.");const r=this._currentLine,s=new q(t,n,e,r);return this._context.structs.set(t,s),s}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(pe.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(pe.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(pe.keywords.const))return null;const e=this._consume(pe.tokens.ident,"Expected variable name");let t=null;if(this._match(pe.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;if(this._match(pe.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof Y)n=e;else if(e instanceof W&&e.initializer instanceof Y)n=e.initializer;else try{const t=e.evaluate(this._context);n=new K(t)}catch(t){n=e}}const r=new T(e.toString(),t,"","",n);return this._context.constants.set(r.name,r),r}_global_let_decl(){if(!this._match(pe.keywords.let))return null;const e=this._consume(pe.tokens.ident,"Expected variable name");let t=null;if(this._match(pe.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;return this._match(pe.tokens.equal)&&(n=this._const_expression()),new S(e.toString(),t,"","",n)}_const_expression(){if(this._match(pe.const_literal))return new J(this._previous().toString());const e=this._type_decl();this._consume(pe.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(pe.tokens.paren_right)&&(t.push(this._const_expression()),this._check(pe.tokens.comma));)this._advance();return this._consume(pe.tokens.paren_right,"Expected ')'."),new Y(e,t)}_variable_decl(){if(!this._match(pe.keywords.var))return null;let e="",t="";this._match(pe.tokens.less_than)&&(e=this._consume(pe.storage_class,"Expected storage_class.").toString(),this._match(pe.tokens.comma)&&(t=this._consume(pe.access_mode,"Expected access_mode.").toString()),this._consume(pe.tokens.greater_than,"Expected '>'."));const n=this._consume(pe.tokens.ident,"Expected variable name");let r=null;if(this._match(pe.tokens.colon)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}return new k(n.toString(),r,e,t,null)}_override_decl(){if(!this._match(pe.keywords.override))return null;const e=this._consume(pe.tokens.ident,"Expected variable name");let t=null;if(this._match(pe.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new M(e.toString(),t,null)}_diagnostic(){this._consume(pe.tokens.paren_left,"Expected '('");const e=this._consume(pe.tokens.ident,"Expected severity control name.");this._consume(pe.tokens.comma,"Expected ','");const t=this._consume(pe.tokens.ident,"Expected diagnostic rule name.");return this._consume(pe.tokens.paren_right,"Expected ')'"),new F(e.toString(),t.toString())}_enable_directive(){const e=this._consume(pe.tokens.ident,"identity expected.");return new V(e.toString())}_type_alias(){const e=this._consume(pe.tokens.ident,"identity expected.");this._consume(pe.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const n=new R(e.toString(),t);return this._context.aliases.set(n.name,n),n}_type_decl(){if(this._check([pe.tokens.ident,...pe.texel_format,pe.keywords.bool,pe.keywords.f32,pe.keywords.i32,pe.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new I(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(pe.template_types)){let e=this._advance().toString(),t=null,n=null;return this._match(pe.tokens.less_than)&&(t=this._type_decl(),n=null,this._match(pe.tokens.comma)&&(n=this._consume(pe.access_mode,"Expected access_mode for pointer").toString()),this._consume(pe.tokens.greater_than,"Expected '>' for type.")),new D(e,t,n)}if(this._match(pe.keywords.ptr)){let e=this._previous().toString();this._consume(pe.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(pe.storage_class,"Expected storage_class for pointer");this._consume(pe.tokens.comma,"Expected ',' for pointer.");const n=this._type_decl();let r=null;return this._match(pe.tokens.comma)&&(r=this._consume(pe.access_mode,"Expected access_mode for pointer").toString()),this._consume(pe.tokens.greater_than,"Expected '>' for pointer."),new O(e,t.toString(),n,r)}const t=this._attribute();if(this._match(pe.keywords.array)){let e=null,n=-1;const r=this._previous();let s=null;if(this._match(pe.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";if(this._match(pe.tokens.comma)){s=this._shift_expression();try{t=s.evaluate(this._context).toString(),s=null}catch(e){t="1"}}this._consume(pe.tokens.greater_than,"Expected '>' for array."),n=t?parseInt(t):0}const i=new H(r.toString(),t,e,n);return s&&this._deferArrayCountEval.push({arrayType:i,countNode:s}),i}return null}_texture_sampler_types(){if(this._match(pe.sampler_type))return new $(this._previous().toString(),null,null);if(this._match(pe.depth_texture_type))return new $(this._previous().toString(),null,null);if(this._match(pe.sampled_texture_type)||this._match(pe.multisampled_texture_type)){const e=this._previous();this._consume(pe.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(pe.tokens.greater_than,"Expected '>' for sampler type."),new $(e.toString(),t,null)}if(this._match(pe.storage_texture_type)){const e=this._previous();this._consume(pe.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(pe.texel_format,"Invalid texel format.").toString();this._consume(pe.tokens.comma,"Expected ',' after texel format.");const n=this._consume(pe.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(pe.tokens.greater_than,"Expected '>' for sampler type."),new $(e.toString(),t,n)}return null}_attribute(){let e=[];for(;this._match(pe.tokens.attr);){const t=this._consume(pe.attribute_name,"Expected attribute name"),n=new he(t.toString(),null);if(this._match(pe.tokens.paren_left)){if(n.value=this._consume(pe.literal_or_ident,"Expected attribute value").toString(),this._check(pe.tokens.comma)){this._advance();do{const e=this._consume(pe.literal_or_ident,"Expected attribute value").toString();n.value instanceof Array||(n.value=[n.value]),n.value.push(e)}while(this._match(pe.tokens.comma))}this._consume(pe.tokens.paren_right,"Expected ')'")}e.push(n)}for(;this._match(pe.tokens.attr_left);){if(!this._check(pe.tokens.attr_right))do{const t=this._consume(pe.attribute_name,"Expected attribute name"),n=new he(t.toString(),null);if(this._match(pe.tokens.paren_left)){if(n.value=[this._consume(pe.literal_or_ident,"Expected attribute value").toString()],this._check(pe.tokens.comma)){this._advance();do{const e=this._consume(pe.literal_or_ident,"Expected attribute value").toString();n.value.push(e)}while(this._match(pe.tokens.comma))}this._consume(pe.tokens.paren_right,"Expected ')'")}e.push(n)}while(this._match(pe.tokens.comma));this._consume(pe.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class ge{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class we{constructor(e,t,n){this.name=e,this.type=t,this.attributes=n,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class ve extends ge{constructor(e,t){super(e,t),this.members=[],this.align=0,this.startLine=-1,this.endLine=-1,this.inUse=!1}get isStruct(){return!0}}class ye extends ge{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class xe extends ge{constructor(e,t,n,r){super(e,n),this.format=t,this.access=r}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(d||(d={}));class be{constructor(e,t,n,r,s,i,a){this.name=e,this.type=t,this.group=n,this.binding=r,this.attributes=s,this.resourceType=i,this.access=a}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class ke{constructor(e,t){this.name=e,this.type=t}}class Me{constructor(e,t){this.align=e,this.size=t}}class Se{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r,this.interpolation=null}}class Te{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r}}class Ae{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.startLine=-1,this.endLine=-1,this.inUse=!1,this.calls=new Set,this.name=e,this.stage=t}}class Pe{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Ee{constructor(e,t,n,r){this.name=e,this.type=t,this.attributes=n,this.id=r}}class Be{constructor(e){this.resources=null,this.inUse=!1,this.info=null,this.node=e}}class Ce{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Pe,this.functions=[],this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new _e).parse(e);for(const e of t)e instanceof w&&this._functions.set(e.name,new Be(e));for(const e of t)if(e instanceof q){const t=this._getTypeInfo(e,null);t instanceof ve&&this.structs.push(t)}for(const e of t)if(e instanceof R)this.aliases.push(this._getAliasInfo(e));else if(e instanceof M){const t=e,n=this._getAttributeNum(t.attributes,"id",0),r=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new Ee(t.name,r,t.attributes,n))}else if(this._isUniformVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=new be(t.name,s,n,r,t.attributes,d.Uniform,t.access);this.uniforms.push(i)}else if(this._isStorageVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=this._isStorageTexture(s),a=new be(t.name,s,n,r,t.attributes,i?d.StorageTexture:d.Storage,t.access);this.storage.push(a)}else if(this._isTextureVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=this._isStorageTexture(s),a=new be(t.name,s,n,r,t.attributes,i?d.StorageTexture:d.Texture,t.access);i?this.storage.push(a):this.textures.push(a)}else if(this._isSamplerVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=new be(t.name,s,n,r,t.attributes,d.Sampler,t.access);this.samplers.push(i)}else if(e instanceof w){const t=this._getAttribute(e,"vertex"),n=this._getAttribute(e,"fragment"),r=this._getAttribute(e,"compute"),s=t||n||r,i=new Ae(e.name,null==s?void 0:s.name);i.startLine=e.startLine,i.endLine=e.endLine,this.functions.push(i),this._functions.get(e.name).info=i,s&&(this._functions.get(e.name).inUse=!0,i.inUse=!0,i.resources=this._findResources(e,!!s),i.inputs=this._getInputs(e.args),i.outputs=this._getOutputs(e.returnType),this.entry[s.name].push(i))}for(const e of this._functions.values())e.info&&(e.info.inUse=e.inUse,this._addCalls(e.node,e.info.calls));for(const e of this.uniforms)this._markStructsInUse(e.type);for(const e of this.storage)this._markStructsInUse(e.type)}_markStructsInUse(e){if(e.isStruct){e.inUse=!0;for(const t of e.members)this._markStructsInUse(t.type)}else if(e.isArray)this._markStructsInUse(e.format);else if(e.isTemplate)this._markStructsInUse(e.format);else{const t=this._getAlias(e.name);t&&this._markStructsInUse(t)}}_addCalls(e,t){var n;for(const r of e.calls){const e=null===(n=this._functions.get(r.name))||void 0===n?void 0:n.info;e&&t.add(e)}}findResource(e,t){for(const n of this.uniforms)if(n.group==e&&n.binding==t)return n;for(const n of this.storage)if(n.group==e&&n.binding==t)return n;for(const n of this.textures)if(n.group==e&&n.binding==t)return n;for(const n of this.samplers)if(n.group==e&&n.binding==t)return n;return null}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_markStructsFromAST(e){const t=this._getTypeInfo(e,null);this._markStructsInUse(t)}_findResources(e,t){const n=[],r=this,s=[];return e.search((i=>{if(i instanceof m)s.push({});else if(i instanceof _)s.pop();else if(i instanceof k){const e=i;t&&null!==e.type&&this._markStructsFromAST(e.type),s.length>0&&(s[s.length-1][e.name]=e)}else if(i instanceof Y){const e=i;t&&null!==e.type&&this._markStructsFromAST(e.type)}else if(i instanceof S){const e=i;t&&null!==e.type&&this._markStructsFromAST(e.type),s.length>0&&(s[s.length-1][e.name]=e)}else if(i instanceof Z){const e=i;if(s.length>0&&s[s.length-1][e.name])return;const t=r._findResource(e.name);t&&n.push(t)}else if(i instanceof X){const s=i,a=r._functions.get(s.name);a&&(t&&(a.inUse=!0),e.calls.add(a.node),null===a.resources&&(a.resources=r._findResources(a.node,t)),n.push(...a.resources))}else if(i instanceof E){const s=i,a=r._functions.get(s.name);a&&(t&&(a.inUse=!0),e.calls.add(a.node),null===a.resources&&(a.resources=r._findResources(a.node,t)),n.push(...a.resources))}})),[...new Map(n.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,n){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),n>=e[t].length&&(e[t].length=n+1)}for(const n of this.uniforms)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.storage)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.textures)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.samplers)t(n.group,n.binding),e[n.group][n.binding]=n;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof q)this._getStructOutputs(e,t);else{const n=this._getOutputInfo(e);null!==n&&t.push(n)}return t}_getStructOutputs(e,t){for(const n of e.members)if(n.type instanceof q)this._getStructOutputs(n.type,t);else{const e=this._getAttribute(n,"location")||this._getAttribute(n,"builtin");if(null!==e){const r=this._getTypeInfo(n.type,n.type.attributes),s=this._parseInt(e.value),i=new Te(n.name,r,e.name,s);t.push(i)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getTypeInfo(e,e.attributes),r=this._parseInt(t.value);return new Te("",n,t.name,r)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const n of e)if(n.type instanceof q)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const n of e.members)if(n.type instanceof q)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getAttribute(e,"interpolation"),r=this._getTypeInfo(e.type,e.attributes),s=this._parseInt(t.value),i=new Se(e.name,r,t.name,s);return null!==n&&(i.interpolation=this._parseString(n.value)),i}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new ke(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof H){const n=e,r=this._getTypeInfo(n.format,n.attributes),s=new ye(n.name,t);return s.format=r,s.count=n.count,this._types.set(e,s),this._updateTypeInfo(s),s}if(e instanceof q){const n=e,r=new ve(n.name,t);r.startLine=n.startLine,r.endLine=n.endLine;for(const e of n.members){const t=this._getTypeInfo(e.type,e.attributes);r.members.push(new we(e.name,t,e.attributes))}return this._types.set(e,r),this._updateTypeInfo(r),r}if(e instanceof $){const n=e,r=n.format instanceof I,s=n.format?r?this._getTypeInfo(n.format,null):new ge(n.format,null):null,i=new xe(n.name,s,t,n.access);return this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof D){const n=e,r=n.format?this._getTypeInfo(n.format,null):null,s=new xe(n.name,r,t,n.access);return this._types.set(e,s),this._updateTypeInfo(s),s}const n=new ge(e.name,t);return this._types.set(e,n),this._updateTypeInfo(n),n}_updateTypeInfo(e){var t,n;const r=this._getTypeSize(e);if(e.size=null!==(t=null==r?void 0:r.size)&&void 0!==t?t:0,e instanceof ye){const t=this._getTypeSize(e.format);e.stride=null!==(n=null==t?void 0:t.size)&&void 0!==n?n:0,this._updateTypeInfo(e.format)}e instanceof ve&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let n=0,r=0,s=0,i=0;for(let a=0,o=e.members.length;a<o;++a){const o=e.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(t=this._getAlias(o.type.name))&&void 0!==t||o.type;const l=u.align,c=u.size;n=this._roundUp(l,n+r),r=c,s=n,i=Math.max(i,l),o.offset=n,o.size=c,this._updateTypeInfo(o.type)}e.size=this._roundUp(i,s+r),e.align=i}_getTypeSize(e){var t;if(null==e)return null;const n=this._getAttributeNum(e.attributes,"size",0),r=this._getAttributeNum(e.attributes,"align",0);if(e instanceof we&&(e=e.type),e instanceof ge){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=Ce._typeInfo[e.name];if(void 0!==t){const s="f16"===e.format?2:1;return new Me(Math.max(r,t.align/s),Math.max(n,t.size/s))}}{const t=Ce._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const s="h"===e.name[e.name.length-1]?2:1;return new Me(Math.max(r,t.align/s),Math.max(n,t.size/s))}}if(e instanceof ye){let s=e,i=8,a=8;const o=this._getTypeSize(s.format);return null!==o&&(a=o.size,i=o.align),a=s.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(i,a)),n&&(a=n),new Me(Math.max(r,i),Math.max(n,a))}if(e instanceof ve){let t=0,s=0,i=0,a=0,o=0;for(const n of e.members){const e=this._getTypeSize(n.type);null!==e&&(t=Math.max(e.align,t),i=this._roundUp(e.align,i+a),a=e.size,o=i)}return s=this._roundUp(t,o+a),new Me(Math.max(r,t),Math.max(n,s))}return null}_isUniformVar(e){return e instanceof k&&"uniform"==e.storage}_isStorageVar(e){return e instanceof k&&"storage"==e.storage}_isTextureVar(e){return e instanceof k&&null!==e.type&&-1!=Ce._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof k&&null!==e.type&&-1!=Ce._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const n=e;if(!n||!n.attributes)return null;const r=n.attributes;for(let e of r)if(e.name==t)return e;return null}_getAttributeNum(e,t,n){if(null===e)return n;for(let r of e)if(r.name==t){let e=null!==r&&null!==r.value?r.value:n;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):n}return n}_roundUp(e,t){return Math.ceil(t/e)*e}}function ze(e,t){const n=function(e){return Array.isArray(e)||r(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),s=Math.max(...n.slice(0,"3d"===t?3:2));return 1+Math.log2(s)|0}Ce._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},Ce._textureTypes=pe.any_texture_type.map((e=>e.name)),Ce._samplerTypes=pe.sampler_type.map((e=>e.name));const Ne=new WeakMap;function Ve(e,t,n){let r=Ne.get(e);r||(r={pipelineByFormatAndView:{},moduleByViewType:{}},Ne.set(e,r));let{sampler:s,uniformBuffer:i,uniformValues:a}=r;const{pipelineByFormatAndView:o,moduleByViewType:u}=r;n=n||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let l=u[n];if(!l){const t=function(e){let t,n;switch(e){case"2d":t="texture_2d<f32>",n="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${n};\n        }\n      `}(n);l=e.createShaderModule({label:`mip level generation for ${n}`,code:t}),u[n]=l}s||(s=e.createSampler({minFilter:"linear",magFilter:"linear"}),i=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),a=new Uint32Array(1),Object.assign(r,{sampler:s,uniformBuffer:i,uniformValues:a}));const c=`${t.format}.${n}`;o[c]||(o[c]=e.createRenderPipeline({label:`mip level generator pipeline for ${n}`,layout:"auto",vertex:{module:l,entryPoint:"vs"},fragment:{module:l,entryPoint:"fs",targets:[{format:t.format}]}}));const h=o[c];for(let r=1;r<t.mipLevelCount;++r)for(let o=0;o<t.depthOrArrayLayers;++o){a[0]=o,e.queue.writeBuffer(i,0,a);const u=e.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:s},{binding:1,resource:t.createView({dimension:n,baseMipLevel:r-1,mipLevelCount:1})},{binding:2,resource:{buffer:i}}]}),l={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:r,mipLevelCount:1,baseArrayLayer:o,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},c=e.createCommandEncoder({label:"mip gen encoder"}),d=c.beginRenderPass(l);d.setPipeline(h),d.setBindGroup(0,u),d.draw(3),d.end();const p=c.finish();e.queue.submit([p])}}const Fe=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Re(e){return r(e)||Array.isArray(e)||function(e){const t=e;return r(t.data)||Array.isArray(t.data)}(e)}function Le(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Fe.entries()].map((([e,{formats:[t,n]}])=>[[t,e],[n,e]])).flat());const Ue={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Ge=/([a-z]+)(\d+)([a-z]+)/;function Ie(e){const[,t,n,r]=Ge.exec(e),s=t.length,i=parseInt(n)/8;return{channels:t,numChannels:s,bytesPerChannel:i,bytesPerElement:s*i,Type:Ue[`${n}${r}`]}}function qe(e,t,n,s={}){n.forEach(((n,i)=>{const a=[0,0,i+(s.baseArrayLayer||0)];if(Re(n))!function(e,t,n,s){const i=function(e,t){if(r(e))return e;const{Type:n}=Ie(t);return new n(e)}(n.data||n,t.format),a=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=Ie(t.format),u=s.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:u},i,{bytesPerRow:o*a[0],rowsPerImage:a[1]},a)}(e,t,n,{origin:a});else{const r=n,{flipY:i,premultipliedAlpha:o,colorSpace:u}=s;e.queue.copyExternalImageToTexture({source:r,flipY:i},{texture:t,premultipliedAlpha:o,colorSpace:u,origin:a},De(r,s))}})),t.mipLevelCount>1&&Ve(e,t)}function De(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const n=e,{width:s,height:i}=n;if(s>0&&i>0&&!Re(e))return[s,i,1];const a=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:u}=Ie(a),l=r(e)||Array.isArray(e)?e:e.data;return function(e,t,n,r="2d"){if(n%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=n/t)%1)throw new Error("can't guess dimensions")}else if((t=n/e)%1)throw new Error("can't guess dimensions")}else{const s=Math.sqrt(n/("cube"===r?6:1));s%1==0?(e=s,t=s):(e=n,t=1)}const s=n/e/t;if(s%1)throw new Error("can't guess dimensions");return[e,t,s]}(s,i,(r(l)?l.byteLength:l.length*u)/o)}}async function Oe(e,t,n={}){const r=await Promise.all(t.map((e=>async function(e,t={}){const n=await fetch(e),r=await n.blob(),s={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(r,s)}(e))));return function(e,t,n={}){const r=De(t[0],n);r[2]=r[2]>1?r[2]:t.length;const s=e.createTexture({dimension:Le(n.dimension),format:n.format||"rgba8unorm",mipLevelCount:n.mipLevelCount?n.mipLevelCount:n.mips?ze(r):1,size:r,usage:(n.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return qe(e,s,t,n),s}(e,r,n)}async function He(e,t,n={}){return Oe(e,[t],n)}},300:(e,t,n)=>{n.d(t,{Zc:()=>b,eR:()=>U,ln:()=>he,pB:()=>X});let r=1e-6,s=Float32Array;function i(e=0,t=0){const n=new s(2);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t)),n}let a=Float32Array;function o(e,t,n){const r=new a(3);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t,void 0!==n&&(r[2]=n))),r}function u(e,t,n){return(n=n||new s(2))[0]=e[0]-t[0],n[1]=e[1]-t[1],n}function l(e,t,n,r){return(r=r||new s(2))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r}function c(e,t,n){return(n=n||new s(2))[0]=e[0]*t,n[1]=e[1]*t,n}function h(e,t){return(t=t||new s(2))[0]=1/e[0],t[1]=1/e[1],t}function d(e,t){return e[0]*t[0]+e[1]*t[1]}function p(e){const t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}function f(e){const t=e[0],n=e[1];return t*t+n*n}function m(e,t){const n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}function _(e,t){const n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}function g(e,t){t=t||new s(2);const n=e[0],r=e[1],i=Math.sqrt(n*n+r*r);return i>1e-5?(t[0]=n/i,t[1]=r/i):(t[0]=0,t[1]=0),t}function w(e,t){return(t=t||new s(2))[0]=e[0],t[1]=e[1],t}function v(e,t,n){return(n=n||new s(2))[0]=e[0]*t[0],n[1]=e[1]*t[1],n}function y(e,t,n){return(n=n||new s(2))[0]=e[0]/t[0],n[1]=e[1]/t[1],n}function x(e,t,n){return g(e,n=n||new s(2)),c(n,t,n)}var b={__proto__:null,add:function(e,t,n){return(n=n||new s(2))[0]=e[0]+t[0],n[1]=e[1]+t[1],n},addScaled:function(e,t,n,r){return(r=r||new s(2))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r},angle:function(e,t){const n=e[0],r=e[1],s=t[0],i=t[1],a=Math.sqrt(n*n+r*r)*Math.sqrt(s*s+i*i),o=a&&d(e,t)/a;return Math.acos(o)},ceil:function(e,t){return(t=t||new s(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},clamp:function(e,t=0,n=1,r){return(r=r||new s(2))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r},clone:w,copy:w,create:i,cross:function(e,t,n){n=n||new a(3);const r=e[0]*t[1]-e[1]*t[0];return n[0]=0,n[1]=0,n[2]=r,n},dist:m,distSq:_,distance:m,distanceSq:_,div:y,divScalar:function(e,t,n){return(n=n||new s(2))[0]=e[0]/t,n[1]=e[1]/t,n},divide:y,dot:d,equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r},floor:function(e,t){return(t=t||new s(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},fromValues:i,inverse:h,invert:h,len:p,lenSq:f,length:p,lengthSq:f,lerp:l,lerpV:function(e,t,n,r){return(r=r||new s(2))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r},max:function(e,t,n){return(n=n||new s(2))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},midpoint:function(e,t,n){return l(e,t,.5,n=n||new s(2))},min:function(e,t,n){return(n=n||new s(2))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},mul:v,mulScalar:c,multiply:v,negate:function(e,t){return(t=t||new s(2))[0]=-e[0],t[1]=-e[1],t},normalize:g,random:function(e=1,t){t=t||new s(2);const n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},rotate:function(e,t,n,r){r=r||new s(2);const i=e[0]-t[0],a=e[1]-t[1],o=Math.sin(n),u=Math.cos(n);return r[0]=i*u-a*o+t[0],r[1]=i*o+a*u+t[1],r},round:function(e,t){return(t=t||new s(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},scale:c,set:function(e,t,n){return(n=n||new s(2))[0]=e,n[1]=t,n},setDefaultType:function(e){const t=s;return s=e,t},setLength:x,sub:u,subtract:u,transformMat3:function(e,t,n){n=n||new s(2);const r=e[0],i=e[1];return n[0]=t[0]*r+t[4]*i+t[8],n[1]=t[1]*r+t[5]*i+t[9],n},transformMat4:function(e,t,n){n=n||new s(2);const r=e[0],i=e[1];return n[0]=r*t[0]+i*t[4]+t[12],n[1]=r*t[1]+i*t[5]+t[13],n},truncate:function(e,t,n){return n=n||new s(2),p(e)>t?x(e,t,n):w(e,n)},zero:function(e){return(e=e||new s(2))[0]=0,e[1]=0,e}};Float32Array;function k(e,t,n){return(n=n||new a(3))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}function M(e,t,n,r){return(r=r||new a(3))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r}function S(e,t,n){return(n=n||new a(3))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n}function T(e,t){return(t=t||new a(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function A(e,t,n){n=n||new a(3);const r=e[2]*t[0]-e[0]*t[2],s=e[0]*t[1]-e[1]*t[0];return n[0]=e[1]*t[2]-e[2]*t[1],n[1]=r,n[2]=s,n}function P(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function E(e){const t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}function B(e){const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}function C(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2];return Math.sqrt(n*n+r*r+s*s)}function z(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2];return n*n+r*r+s*s}function N(e,t){t=t||new a(3);const n=e[0],r=e[1],s=e[2],i=Math.sqrt(n*n+r*r+s*s);return i>1e-5?(t[0]=n/i,t[1]=r/i,t[2]=s/i):(t[0]=0,t[1]=0,t[2]=0),t}function V(e,t){return(t=t||new a(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}function F(e,t,n){return(n=n||new a(3))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n}function R(e,t,n){return(n=n||new a(3))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n}function L(e,t,n){return N(e,n=n||new a(3)),S(n,t,n)}new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);var U={__proto__:null,add:function(e,t,n){return(n=n||new a(3))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},addScaled:function(e,t,n,r){return(r=r||new a(3))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r},angle:function(e,t){const n=e[0],r=e[1],s=e[2],i=t[0],a=t[1],o=t[2],u=Math.sqrt(n*n+r*r+s*s)*Math.sqrt(i*i+a*a+o*o),l=u&&P(e,t)/u;return Math.acos(l)},ceil:function(e,t){return(t=t||new a(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},clamp:function(e,t=0,n=1,r){return(r=r||new a(3))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r},clone:V,copy:V,create:o,cross:A,dist:C,distSq:z,distance:C,distanceSq:z,div:R,divScalar:function(e,t,n){return(n=n||new a(3))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n},divide:R,dot:P,equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r},floor:function(e,t){return(t=t||new a(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},fromValues:o,getAxis:function(e,t,n){const r=4*t;return(n=n||new a(3))[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||new a(3);const n=e[0],r=e[1],s=e[2],i=e[4],o=e[5],u=e[6],l=e[8],c=e[9],h=e[10];return t[0]=Math.sqrt(n*n+r*r+s*s),t[1]=Math.sqrt(i*i+o*o+u*u),t[2]=Math.sqrt(l*l+c*c+h*h),t},getTranslation:function(e,t){return(t=t||new a(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},inverse:T,invert:T,len:E,lenSq:B,length:E,lengthSq:B,lerp:M,lerpV:function(e,t,n,r){return(r=r||new a(3))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r},max:function(e,t,n){return(n=n||new a(3))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},midpoint:function(e,t,n){return M(e,t,.5,n=n||new a(3))},min:function(e,t,n){return(n=n||new a(3))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},mul:F,mulScalar:S,multiply:F,negate:function(e,t){return(t=t||new a(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},normalize:N,random:function(e=1,t){t=t||new a(3);const n=2*Math.random()*Math.PI,r=2*Math.random()-1,s=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*s,t[1]=Math.sin(n)*s,t[2]=r*e,t},rotateX:function(e,t,n,r){r=r||new a(3);const s=[],i=[];return s[0]=e[0]-t[0],s[1]=e[1]-t[1],s[2]=e[2]-t[2],i[0]=s[0],i[1]=s[1]*Math.cos(n)-s[2]*Math.sin(n),i[2]=s[1]*Math.sin(n)+s[2]*Math.cos(n),r[0]=i[0]+t[0],r[1]=i[1]+t[1],r[2]=i[2]+t[2],r},rotateY:function(e,t,n,r){r=r||new a(3);const s=[],i=[];return s[0]=e[0]-t[0],s[1]=e[1]-t[1],s[2]=e[2]-t[2],i[0]=s[2]*Math.sin(n)+s[0]*Math.cos(n),i[1]=s[1],i[2]=s[2]*Math.cos(n)-s[0]*Math.sin(n),r[0]=i[0]+t[0],r[1]=i[1]+t[1],r[2]=i[2]+t[2],r},rotateZ:function(e,t,n,r){r=r||new a(3);const s=[],i=[];return s[0]=e[0]-t[0],s[1]=e[1]-t[1],s[2]=e[2]-t[2],i[0]=s[0]*Math.cos(n)-s[1]*Math.sin(n),i[1]=s[0]*Math.sin(n)+s[1]*Math.cos(n),i[2]=s[2],r[0]=i[0]+t[0],r[1]=i[1]+t[1],r[2]=i[2]+t[2],r},round:function(e,t){return(t=t||new a(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},scale:S,set:function(e,t,n,r){return(r=r||new a(3))[0]=e,r[1]=t,r[2]=n,r},setDefaultType:function(e){const t=a;return a=e,t},setLength:L,sub:k,subtract:k,transformMat3:function(e,t,n){n=n||new a(3);const r=e[0],s=e[1],i=e[2];return n[0]=r*t[0]+s*t[4]+i*t[8],n[1]=r*t[1]+s*t[5]+i*t[9],n[2]=r*t[2]+s*t[6]+i*t[10],n},transformMat4:function(e,t,n){n=n||new a(3);const r=e[0],s=e[1],i=e[2],o=t[3]*r+t[7]*s+t[11]*i+t[15]||1;return n[0]=(t[0]*r+t[4]*s+t[8]*i+t[12])/o,n[1]=(t[1]*r+t[5]*s+t[9]*i+t[13])/o,n[2]=(t[2]*r+t[6]*s+t[10]*i+t[14])/o,n},transformMat4Upper3x3:function(e,t,n){n=n||new a(3);const r=e[0],s=e[1],i=e[2];return n[0]=r*t[0]+s*t[4]+i*t[8],n[1]=r*t[1]+s*t[5]+i*t[9],n[2]=r*t[2]+s*t[6]+i*t[10],n},transformQuat:function(e,t,n){n=n||new a(3);const r=t[0],s=t[1],i=t[2],o=2*t[3],u=e[0],l=e[1],c=e[2],h=s*c-i*l,d=i*u-r*c,p=r*l-s*u;return n[0]=u+h*o+2*(s*p-i*d),n[1]=l+d*o+2*(i*h-r*p),n[2]=c+p*o+2*(r*d-s*h),n},truncate:function(e,t,n){return n=n||new a(3),E(e)>t?L(e,t,n):V(e,n)},zero:function(e){return(e=e||new a(3))[0]=0,e[1]=0,e[2]=0,e}};let G,I,q,D=Float32Array;function O(e,t){return(t=t||new D(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function H(e){return(e=e||new D(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function $(e,t){t=t||new D(16);const n=e[0],r=e[1],s=e[2],i=e[3],a=e[4],o=e[5],u=e[6],l=e[7],c=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],_=e[14],g=e[15],w=d*g,v=_*p,y=u*g,x=_*l,b=u*p,k=d*l,M=s*g,S=_*i,T=s*p,A=d*i,P=s*l,E=u*i,B=c*m,C=f*h,z=a*m,N=f*o,V=a*h,F=c*o,R=n*m,L=f*r,U=n*h,G=c*r,I=n*o,q=a*r,O=w*o+x*h+b*m-(v*o+y*h+k*m),H=v*r+M*h+A*m-(w*r+S*h+T*m),$=y*r+S*o+P*m-(x*r+M*o+E*m),j=k*r+T*o+E*h-(b*r+A*o+P*h),J=1/(n*O+a*H+c*$+f*j);return t[0]=J*O,t[1]=J*H,t[2]=J*$,t[3]=J*j,t[4]=J*(v*a+y*c+k*f-(w*a+x*c+b*f)),t[5]=J*(w*n+S*c+T*f-(v*n+M*c+A*f)),t[6]=J*(x*n+M*a+E*f-(y*n+S*a+P*f)),t[7]=J*(b*n+A*a+P*c-(k*n+T*a+E*c)),t[8]=J*(B*l+N*p+V*g-(C*l+z*p+F*g)),t[9]=J*(C*i+R*p+G*g-(B*i+L*p+U*g)),t[10]=J*(z*i+L*l+I*g-(N*i+R*l+q*g)),t[11]=J*(F*i+U*l+q*p-(V*i+G*l+I*p)),t[12]=J*(z*d+F*_+C*u-(V*_+B*u+N*d)),t[13]=J*(U*_+B*s+L*d-(R*d+G*_+C*s)),t[14]=J*(R*u+q*_+N*s-(I*_+z*s+L*u)),t[15]=J*(I*d+V*s+G*u-(U*u+q*d+F*s)),t}function j(e,t,n){n=n||new D(16);const r=e[0],s=e[1],i=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],h=e[8],d=e[9],p=e[10],f=e[11],m=e[12],_=e[13],g=e[14],w=e[15],v=t[0],y=t[1],x=t[2],b=t[3],k=t[4],M=t[5],S=t[6],T=t[7],A=t[8],P=t[9],E=t[10],B=t[11],C=t[12],z=t[13],N=t[14],V=t[15];return n[0]=r*v+o*y+h*x+m*b,n[1]=s*v+u*y+d*x+_*b,n[2]=i*v+l*y+p*x+g*b,n[3]=a*v+c*y+f*x+w*b,n[4]=r*k+o*M+h*S+m*T,n[5]=s*k+u*M+d*S+_*T,n[6]=i*k+l*M+p*S+g*T,n[7]=a*k+c*M+f*S+w*T,n[8]=r*A+o*P+h*E+m*B,n[9]=s*A+u*P+d*E+_*B,n[10]=i*A+l*P+p*E+g*B,n[11]=a*A+c*P+f*E+w*B,n[12]=r*C+o*z+h*N+m*V,n[13]=s*C+u*z+d*N+_*V,n[14]=i*C+l*z+p*N+g*V,n[15]=a*C+c*z+f*N+w*V,n}function J(e,t,n){n=n||new D(16);let r=e[0],s=e[1],i=e[2];const a=Math.sqrt(r*r+s*s+i*i);r/=a,s/=a,i/=a;const o=r*r,u=s*s,l=i*i,c=Math.cos(t),h=Math.sin(t),d=1-c;return n[0]=o+(1-o)*c,n[1]=r*s*d+i*h,n[2]=r*i*d-s*h,n[3]=0,n[4]=r*s*d-i*h,n[5]=u+(1-u)*c,n[6]=s*i*d+r*h,n[7]=0,n[8]=r*i*d+s*h,n[9]=s*i*d-r*h,n[10]=l+(1-l)*c,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Y(e,t,n,r){r=r||new D(16);let s=t[0],i=t[1],a=t[2];const o=Math.sqrt(s*s+i*i+a*a);s/=o,i/=o,a/=o;const u=s*s,l=i*i,c=a*a,h=Math.cos(n),d=Math.sin(n),p=1-h,f=u+(1-u)*h,m=s*i*p+a*d,_=s*a*p-i*d,g=s*i*p-a*d,w=l+(1-l)*h,v=i*a*p+s*d,y=s*a*p+i*d,x=i*a*p-s*d,b=c+(1-c)*h,k=e[0],M=e[1],S=e[2],T=e[3],A=e[4],P=e[5],E=e[6],B=e[7],C=e[8],z=e[9],N=e[10],V=e[11];return r[0]=f*k+m*A+_*C,r[1]=f*M+m*P+_*z,r[2]=f*S+m*E+_*N,r[3]=f*T+m*B+_*V,r[4]=g*k+w*A+v*C,r[5]=g*M+w*P+v*z,r[6]=g*S+w*E+v*N,r[7]=g*T+w*B+v*V,r[8]=y*k+x*A+b*C,r[9]=y*M+x*P+b*z,r[10]=y*S+x*E+b*N,r[11]=y*T+x*B+b*V,e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}var X={__proto__:null,aim:function(e,t,n,r){return r=r||new D(16),G=G||o(),I=I||o(),q=q||o(),N(k(t,e,q),q),N(A(n,q,G),G),N(A(q,G,I),I),r[0]=G[0],r[1]=G[1],r[2]=G[2],r[3]=0,r[4]=I[0],r[5]=I[1],r[6]=I[2],r[7]=0,r[8]=q[0],r[9]=q[1],r[10]=q[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},axisRotate:Y,axisRotation:J,cameraAim:function(e,t,n,r){return r=r||new D(16),G=G||o(),I=I||o(),q=q||o(),N(k(e,t,q),q),N(A(n,q,G),G),N(A(q,G,I),I),r[0]=G[0],r[1]=G[1],r[2]=G[2],r[3]=0,r[4]=I[0],r[5]=I[1],r[6]=I[2],r[7]=0,r[8]=q[0],r[9]=q[1],r[10]=q[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},clone:O,copy:O,create:function(e,t,n,r,s,i,a,o,u,l,c,h,d,p,f,m){const _=new D(16);return void 0!==e&&(_[0]=e,void 0!==t&&(_[1]=t,void 0!==n&&(_[2]=n,void 0!==r&&(_[3]=r,void 0!==s&&(_[4]=s,void 0!==i&&(_[5]=i,void 0!==a&&(_[6]=a,void 0!==o&&(_[7]=o,void 0!==u&&(_[8]=u,void 0!==l&&(_[9]=l,void 0!==c&&(_[10]=c,void 0!==h&&(_[11]=h,void 0!==d&&(_[12]=d,void 0!==p&&(_[13]=p,void 0!==f&&(_[14]=f,void 0!==m&&(_[15]=m)))))))))))))))),_},determinant:function(e){const t=e[0],n=e[1],r=e[2],s=e[3],i=e[4],a=e[5],o=e[6],u=e[7],l=e[8],c=e[9],h=e[10],d=e[11],p=e[12],f=e[13],m=e[14],_=e[15],g=h*_,w=m*d,v=o*_,y=m*u,x=o*d,b=h*u,k=r*_,M=m*s,S=r*d,T=h*s,A=r*u,P=o*s;return t*(g*a+y*c+x*f-(w*a+v*c+b*f))+i*(w*n+k*c+T*f-(g*n+M*c+S*f))+l*(v*n+M*a+A*f-(y*n+k*a+P*f))+p*(b*n+S*a+P*c-(x*n+T*a+A*c))},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r&&Math.abs(e[4]-t[4])<r&&Math.abs(e[5]-t[5])<r&&Math.abs(e[6]-t[6])<r&&Math.abs(e[7]-t[7])<r&&Math.abs(e[8]-t[8])<r&&Math.abs(e[9]-t[9])<r&&Math.abs(e[10]-t[10])<r&&Math.abs(e[11]-t[11])<r&&Math.abs(e[12]-t[12])<r&&Math.abs(e[13]-t[13])<r&&Math.abs(e[14]-t[14])<r&&Math.abs(e[15]-t[15])<r},fromMat3:function(e,t){return(t=t||new D(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new D(16);const n=e[0],r=e[1],s=e[2],i=e[3],a=n+n,o=r+r,u=s+s,l=n*a,c=r*a,h=r*o,d=s*a,p=s*o,f=s*u,m=i*a,_=i*o,g=i*u;return t[0]=1-h-f,t[1]=c+g,t[2]=d-_,t[3]=0,t[4]=c-g,t[5]=1-l-f,t[6]=p+m,t[7]=0,t[8]=d+_,t[9]=p-m,t[10]=1-l-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},frustum:function(e,t,n,r,s,i,a){const o=t-e,u=r-n,l=s-i;return(a=a||new D(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(e+t)/o,a[9]=(r+n)/u,a[10]=i/l,a[11]=-1,a[12]=0,a[13]=0,a[14]=s*i/l,a[15]=0,a},frustumReverseZ:function(e,t,n,r,s,i=1/0,a){const o=t-e,u=r-n;if((a=a||new D(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(e+t)/o,a[9]=(r+n)/u,a[11]=-1,a[12]=0,a[13]=0,a[15]=0,i===1/0)a[10]=0,a[14]=s;else{const e=1/(i-s);a[10]=s*e,a[14]=i*s*e}return a},getAxis:function(e,t,n){const r=4*t;return(n=n||o())[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||o();const n=e[0],r=e[1],s=e[2],i=e[4],a=e[5],u=e[6],l=e[8],c=e[9],h=e[10];return t[0]=Math.sqrt(n*n+r*r+s*s),t[1]=Math.sqrt(i*i+a*a+u*u),t[2]=Math.sqrt(l*l+c*c+h*h),t},getTranslation:function(e,t){return(t=t||o())[0]=e[12],t[1]=e[13],t[2]=e[14],t},identity:H,inverse:$,invert:$,lookAt:function(e,t,n,r){return r=r||new D(16),G=G||o(),I=I||o(),q=q||o(),N(k(e,t,q),q),N(A(n,q,G),G),N(A(q,G,I),I),r[0]=G[0],r[1]=I[0],r[2]=q[0],r[3]=0,r[4]=G[1],r[5]=I[1],r[6]=q[1],r[7]=0,r[8]=G[2],r[9]=I[2],r[10]=q[2],r[11]=0,r[12]=-(G[0]*e[0]+G[1]*e[1]+G[2]*e[2]),r[13]=-(I[0]*e[0]+I[1]*e[1]+I[2]*e[2]),r[14]=-(q[0]*e[0]+q[1]*e[1]+q[2]*e[2]),r[15]=1,r},mul:j,multiply:j,negate:function(e,t){return(t=t||new D(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},ortho:function(e,t,n,r,s,i,a){return(a=a||new D(16))[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(r-n),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(s-i),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(r+n)/(n-r),a[14]=s/(s-i),a[15]=1,a},perspective:function(e,t,n,r,s){s=s||new D(16);const i=Math.tan(.5*Math.PI-.5*e);if(s[0]=i/t,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,Number.isFinite(r)){const e=1/(n-r);s[10]=r*e,s[14]=r*n*e}else s[10]=-1,s[14]=-n;return s},perspectiveReverseZ:function(e,t,n,r=1/0,s){s=s||new D(16);const i=1/Math.tan(.5*e);if(s[0]=i/t,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,r===1/0)s[10]=0,s[14]=n;else{const e=1/(r-n);s[10]=n*e,s[14]=r*n*e}return s},rotate:Y,rotateX:function(e,t,n){n=n||new D(16);const r=e[4],s=e[5],i=e[6],a=e[7],o=e[8],u=e[9],l=e[10],c=e[11],h=Math.cos(t),d=Math.sin(t);return n[4]=h*r+d*o,n[5]=h*s+d*u,n[6]=h*i+d*l,n[7]=h*a+d*c,n[8]=h*o-d*r,n[9]=h*u-d*s,n[10]=h*l-d*i,n[11]=h*c-d*a,e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotateY:function(e,t,n){n=n||new D(16);const r=e[0],s=e[1],i=e[2],a=e[3],o=e[8],u=e[9],l=e[10],c=e[11],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r-d*o,n[1]=h*s-d*u,n[2]=h*i-d*l,n[3]=h*a-d*c,n[8]=h*o+d*r,n[9]=h*u+d*s,n[10]=h*l+d*i,n[11]=h*c+d*a,e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotateZ:function(e,t,n){n=n||new D(16);const r=e[0],s=e[1],i=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r+d*o,n[1]=h*s+d*u,n[2]=h*i+d*l,n[3]=h*a+d*c,n[4]=h*o-d*r,n[5]=h*u-d*s,n[6]=h*l-d*i,n[7]=h*c-d*a,e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotation:J,rotationX:function(e,t){t=t||new D(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotationY:function(e,t){t=t||new D(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotationZ:function(e,t){t=t||new D(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,n){n=n||new D(16);const r=t[0],s=t[1],i=t[2];return n[0]=r*e[0],n[1]=r*e[1],n[2]=r*e[2],n[3]=r*e[3],n[4]=s*e[4],n[5]=s*e[5],n[6]=s*e[6],n[7]=s*e[7],n[8]=i*e[8],n[9]=i*e[9],n[10]=i*e[10],n[11]=i*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},scaling:function(e,t){return(t=t||new D(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},set:function(e,t,n,r,s,i,a,o,u,l,c,h,d,p,f,m,_){return(_=_||new D(16))[0]=e,_[1]=t,_[2]=n,_[3]=r,_[4]=s,_[5]=i,_[6]=a,_[7]=o,_[8]=u,_[9]=l,_[10]=c,_[11]=h,_[12]=d,_[13]=p,_[14]=f,_[15]=m,_},setAxis:function(e,t,n,r){r!==e&&(r=O(e,r));const s=4*n;return r[s+0]=t[0],r[s+1]=t[1],r[s+2]=t[2],r},setDefaultType:function(e){const t=D;return D=e,t},setTranslation:function(e,t,n){return e!==(n=n||H())&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},translate:function(e,t,n){n=n||new D(16);const r=t[0],s=t[1],i=t[2],a=e[0],o=e[1],u=e[2],l=e[3],c=e[4],h=e[5],d=e[6],p=e[7],f=e[8],m=e[9],_=e[10],g=e[11],w=e[12],v=e[13],y=e[14],x=e[15];return e!==n&&(n[0]=a,n[1]=o,n[2]=u,n[3]=l,n[4]=c,n[5]=h,n[6]=d,n[7]=p,n[8]=f,n[9]=m,n[10]=_,n[11]=g),n[12]=a*r+c*s+f*i+w,n[13]=o*r+h*s+m*i+v,n[14]=u*r+d*s+_*i+y,n[15]=l*r+p*s+g*i+x,n},translation:function(e,t){return(t=t||new D(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},transpose:function(e,t){if((t=t||new D(16))===e){let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,t}const n=e[0],r=e[1],s=e[2],i=e[3],a=e[4],o=e[5],u=e[6],l=e[7],c=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],_=e[14],g=e[15];return t[0]=n,t[1]=a,t[2]=c,t[3]=f,t[4]=r,t[5]=o,t[6]=h,t[7]=m,t[8]=s,t[9]=u,t[10]=d,t[11]=_,t[12]=i,t[13]=l,t[14]=p,t[15]=g,t},uniformScale:function(e,t,n){return(n=n||new D(16))[0]=t*e[0],n[1]=t*e[1],n[2]=t*e[2],n[3]=t*e[3],n[4]=t*e[4],n[5]=t*e[5],n[6]=t*e[6],n[7]=t*e[7],n[8]=t*e[8],n[9]=t*e[9],n[10]=t*e[10],n[11]=t*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},uniformScaling:function(e,t){return(t=t||new D(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}};Float32Array;let Z=Float32Array;function W(e,t,n,r){const s=new Z(4);return void 0!==e&&(s[0]=e,void 0!==t&&(s[1]=t,void 0!==n&&(s[2]=n,void 0!==r&&(s[3]=r)))),s}function K(e,t,n){return(n=n||new Z(4))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n}function Q(e,t,n,r){return(r=r||new Z(4))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r[3]=e[3]+n*(t[3]-e[3]),r}function ee(e,t,n){return(n=n||new Z(4))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n}function te(e,t){return(t=t||new Z(4))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}function ne(e){const t=e[0],n=e[1],r=e[2],s=e[3];return Math.sqrt(t*t+n*n+r*r+s*s)}function re(e){const t=e[0],n=e[1],r=e[2],s=e[3];return t*t+n*n+r*r+s*s}function se(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2],i=e[3]-t[3];return Math.sqrt(n*n+r*r+s*s+i*i)}function ie(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2],i=e[3]-t[3];return n*n+r*r+s*s+i*i}function ae(e,t){t=t||new Z(4);const n=e[0],r=e[1],s=e[2],i=e[3],a=Math.sqrt(n*n+r*r+s*s+i*i);return a>1e-5?(t[0]=n/a,t[1]=r/a,t[2]=s/a,t[3]=i/a):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function oe(e,t){return(t=t||new Z(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function ue(e,t,n){return(n=n||new Z(4))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n[3]=e[3]*t[3],n}function le(e,t,n){return(n=n||new Z(4))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n[3]=e[3]/t[3],n}function ce(e,t,n){return ae(e,n=n||new Z(4)),ee(n,t,n)}var he={__proto__:null,add:function(e,t,n){return(n=n||new Z(4))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},addScaled:function(e,t,n,r){return(r=r||new Z(4))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r[3]=e[3]+t[3]*n,r},ceil:function(e,t){return(t=t||new Z(4))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},clamp:function(e,t=0,n=1,r){return(r=r||new Z(4))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r[3]=Math.min(n,Math.max(t,e[3])),r},clone:oe,copy:oe,create:W,dist:se,distSq:ie,distance:se,distanceSq:ie,div:le,divScalar:function(e,t,n){return(n=n||new Z(4))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n[3]=e[3]/t,n},divide:le,dot:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r},floor:function(e,t){return(t=t||new Z(4))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},fromValues:W,inverse:te,invert:te,len:ne,lenSq:re,length:ne,lengthSq:re,lerp:Q,lerpV:function(e,t,n,r){return(r=r||new Z(4))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r[3]=e[3]+n[3]*(t[3]-e[3]),r},max:function(e,t,n){return(n=n||new Z(4))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n[3]=Math.max(e[3],t[3]),n},midpoint:function(e,t,n){return Q(e,t,.5,n=n||new Z(4))},min:function(e,t,n){return(n=n||new Z(4))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n[3]=Math.min(e[3],t[3]),n},mul:ue,mulScalar:ee,multiply:ue,negate:function(e,t){return(t=t||new Z(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},normalize:ae,round:function(e,t){return(t=t||new Z(4))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},scale:ee,set:function(e,t,n,r,s){return(s=s||new Z(4))[0]=e,s[1]=t,s[2]=n,s[3]=r,s},setDefaultType:function(e){const t=Z;return Z=e,t},setLength:ce,sub:K,subtract:K,transformMat4:function(e,t,n){n=n||new Z(4);const r=e[0],s=e[1],i=e[2],a=e[3];return n[0]=t[0]*r+t[4]*s+t[8]*i+t[12]*a,n[1]=t[1]*r+t[5]*s+t[9]*i+t[13]*a,n[2]=t[2]*r+t[6]*s+t[10]*i+t[14]*a,n[3]=t[3]*r+t[7]*s+t[11]*i+t[15]*a,n},truncate:function(e,t,n){return n=n||new Z(4),ne(e)>t?ce(e,t,n):oe(e,n)},zero:function(e){return(e=e||new Z(4))[0]=0,e[1]=0,e[2]=0,e[3]=0,e}}}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return s[e](n,n.exports,a),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(s,i,a)=>{var o;a&&((o=[]).d=-1);var u,l,c,h=new Set,d=s.exports,p=new Promise(((e,t)=>{c=t,l=e}));p[t]=d,p[e]=e=>(o&&e(o),h.forEach(e),p.catch((e=>{}))),s.exports=p,i((s=>{var i;u=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[e])return s;if(s.then){var i=[];i.d=0,s.then((e=>{a[t]=e,r(i)}),(e=>{a[n]=e,r(i)}));var a={};return a[e]=e=>e(i),a}}var o={};return o[e]=e=>{},o[t]=s,o})))(s);var a=()=>u.map((e=>{if(e[n])throw e[n];return e[t]})),l=new Promise((t=>{(i=()=>t(a)).r=0;var n=e=>e!==o&&!h.has(e)&&(h.add(e),e&&!e.d&&(i.r++,e.push(i)));u.map((t=>t[e](n)))}));return i.r?l:a()}),(e=>(e?c(p[n]=e):l(d),r(o)))),o&&o.d<0&&(o.d=0)},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,