(()=>{"use strict";var t,e,r,n,s={680:(t,e,r)=>{r.d(e,{QG:()=>a,dV:()=>i,k4:()=>s});var n=r(416);function s(t){let e=[0,0,0],r=[0,0,0];for(let s of t)n.R3.min(e,s.min,e),n.R3.max(r,s.max,r);return{min:e,max:r}}function i(t,e){const r=n.R3.clone(t.min),s=n.R3.clone(t.max),i=[n.R3.fromValues(r[0],r[1],r[2]),n.R3.fromValues(r[0],r[1],s[2]),n.R3.fromValues(r[0],s[1],r[2]),n.R3.fromValues(r[0],s[1],s[2]),n.R3.fromValues(s[0],r[1],r[2]),n.R3.fromValues(s[0],r[1],s[2]),n.R3.fromValues(s[0],s[1],r[2]),n.R3.fromValues(s[0],s[1],s[2])];for(const t of i)n.R3.transformMat4(t,e,t);const a=function(t){const e=n.R3.clone(t[0]),r=n.R3.clone(t[0]);for(const s of t)n.R3.min(e,s,e),n.R3.max(r,s,r);return{min:e,max:r}}(i);return a}function a(t){const e=n.R3.create();return n.R3.add(t.min,t.max,e),n.R3.scale(e,.5,e),e}},218:(t,e,r)=>{r.d(e,{t:()=>i});var n=r(416);class s{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(t){this._aspect=t,this._projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=n._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(t){n._E.copy(t,this.matrix_)}get view(){return this.view_}set view(t){n._E.copy(t,this.view_)}get right(){return this.right_}set right(t){n.R3.copy(t,this.right_)}get up(){return this.up_}set up(t){n.R3.copy(t,this.up_)}get back(){return this.back_}set back(t){n.R3.copy(t,this.back_)}get position(){return this.position_}set position(t){n.R3.copy(t,this.position_)}}class i extends s{pitch=0;yaw=0;velocity_=n.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(t){n.R3.copy(t,this.velocity_)}constructor(t){if(super(),t&&(t.position||t.target||t.movementSpeed)){const e=t.position??n.R3.create(0,0,-5),r=t.target??n.R3.create(0,0,0);this.back=n.R3.normalize(n.R3.subtract(e,r)),this.recalculateAngles(this.back),this.position=e,this.movementSpeed=t.movementSpeed??10,this.aspect=t.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(t){super.matrix=t,this.recalculateAngles(this.back)}update(t,e){const r=(t,e)=>(t?1:0)-(e?1:0);var s,i;this.yaw-=e.analog.x*t*this.rotationSpeed,this.pitch-=e.analog.y*t*this.rotationSpeed,this.yaw=(s=this.yaw,i=2*Math.PI,s-Math.floor(Math.abs(s)/i)*i*Math.sign(s)),this.pitch=function(t,e,r){return Math.min(Math.max(t,e),r)}(this.pitch,-Math.PI/2,Math.PI/2);const a=n.R3.copy(this.position);super.matrix=n._E.rotateX(n._E.rotationY(this.yaw),this.pitch);const o=e.digital,u=r(o.right,o.left),l=r(o.up,o.down),c=n.R3.create(),h=r(o.backward,o.forward);var d,p,f;n.R3.addScaled(c,this.right,u,c),n.R3.addScaled(c,this.up,l,c),n.R3.addScaled(c,this.back,h,c),n.R3.normalize(c,c),n.R3.mulScalar(c,this.movementSpeed,c),this.velocity=(d=c,p=this.velocity,f=Math.pow(1-this.frictionCoefficient,t),n.R3.addScaled(d,n.R3.sub(p,d),f)),this.position=n.R3.addScaled(a,this.velocity,t),this.view=n._E.invert(this.matrix)}recalculateAngles(t){this.yaw=Math.atan2(t[0],t[2]),this.pitch=-Math.asin(t[1])}}},242:(t,e,r)=>{r.d(e,{D:()=>P});var n=r(806),s=r(416);class i{camera;lights;viewProjectionMatrix=s._E.identity();constructor(t,e){this.camera=t,this.lights=e}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}writeToGpu(t){let e=this.lights[0].byteLength;this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"scene uniforms buffer",size:80+this.lights.length*e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})),s._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,0,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,64,this.camera.position);for(let[r,n]of this.lights.entries())t.queue.writeBuffer(this._gpuBuffer,80+r*e,n.getBytes())}}var a=r(838);class o{instances;constructor(t){this.instances=t}get length(){return this.instances.length}get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}_gpuBuffer;writeToGpu(t){this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"models uniforms buffer",size:64*this.instances.length*2,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}));for(let e=0;e<this.instances.length;e++){let r=this.instances[e].transform,n=s._E.transpose(s._E.invert(this.instances[e].transform));t.queue.writeBuffer(this._gpuBuffer,128*e,r),t.queue.writeBuffer(this._gpuBuffer,128*e+64,n)}}}var u=r(284);function l(t,e,r,n){r=r??t.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});let s={label:"shadow map binding group",layout:e.getBindGroupLayout(1),entries:[{binding:0,resource:r.createView({dimension:"2d-array"})},{binding:1,resource:n}]};return t.createBindGroup(s)}function c(t,e,r,n,s,i,a=[]){let o={label:"default binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r.gpuBuffer}},{binding:1,resource:{buffer:n.gpuBuffer}},{binding:2,resource:{buffer:s.gpuBuffer}},{binding:3,resource:i},{binding:4,resource:s.ambientTexture.createView()},{binding:5,resource:s.diffuseTexture.createView()},{binding:6,resource:s.specularTexture.createView()}]};return a&&o.entries.push(...a),t.createBindGroup(o)}async function h(t,e,r,n,s,i,a=[],o="vertexMain",u="fragmentMain"){let l=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}}];l.push(...a);let c=[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"2d-array",multisampled:!1,sampleType:"depth"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}}],h=t.createBindGroupLayout({entries:l}),d=t.createBindGroupLayout({entries:c}),p={label:"mesh pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[h,d]}),vertex:{module:e,entryPoint:o,buffers:r},fragment:{module:e,entryPoint:u,targets:[{format:n,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}],constants:{shadowMapSize:i??1024}},primitive:{topology:"triangle-list",cullMode:"back"},multisample:{count:s},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await t.createRenderPipelineAsync(p)}var d=r(149);const p="struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\noverride shadowMapSize : f32 = 1024.0;\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n@group(0) @binding(7) var normalTexture : texture_2d<f32>;\n\n@group(1) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(1) @binding(1) var shadowMapSampler : sampler_comparison;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n//remark 1\n//wgsl doesn't support forwarding matrices or arrays to the FS as function argument\n//for matrices this can be solved by forwarding the columns separatly\n//for arrays i actually don't have any solution\n//a fixed amount of array entries could be forwarded as separate arguments\n\n//remark 2\n//literature says the vertex shader isn't called as often as the fragment shader\n//reasoning is probably that the VS runs for every vertex and 3 vertices usually belong to more than 2 fragments/pixels\n//but i'm not sure if this is actually still true when using zbuffer or even when just using a high poly model\n\n//so it might be advantageous to push calculations into the VS\n//the tbn can be built in the VS and inverted by only taking the transpose because it's an orthonormal matrix\n//now instead of calculating everything in world space we can take the light position/direction and the camera position\n//into tangent space in the VS! and foward them to the FS\n\n//in case of multiple lights one has to forward every light pos/dir what is problematic because arrays can't be forwarded\n//this problem vanishes when using deferred shading as every light is calculated in a separate run\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec4f(0, 0, 0, 1);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], worldPosition, worldNormal, ambientColor, diffuseColor, specularColor);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, worldPos : vec4f, worldNormal : vec3f, ambientColor : vec3f, diffuseColor : vec3f, specularColor : vec3f) -> vec4f\n{\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let fragToLight = light.position.xyz - worldPos.xyz;\n    //set falloff to 1 or to frag to light distance squared\n    let lightSqrDist = select(1, dot(fragToLight, fragToLight), light.mode.y == 1);\n    //DirectLight=0; PointLight=1; TargetLight=2\n    let lightDirInverse = normalize(select(fragToLight, -light.direction.xyz, light.mode.x == 0));\n\n    //calc intensity, 0 if not facing light\n    var intensity = max(dot(lightDirInverse, unitNormal), 0);\n    //target light\n    if(light.mode.x==2 && intensity!=0)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        //const sharpness = 10;\n        //intensity = select(0, 1 - pow((1 - spot) / (1 - cutoff), sharpness), spot > cutoff);\n        intensity = select(0.0, 1.0, spot > cutoff);\n    }\n\n    //calc diffuse\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity / lightSqrDist;\n\n    //calc specular\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPos.xyz);\n    let H = normalize(lightDirInverse + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x) / lightSqrDist;\n\n    //shadow map\n\n    const constOffset = 0.5;\n    //let slopeFactor = 1.1 - clamp(dot(lightDirInverse, unitNormal), 0,1);\n    //correct with an z adjusted texelsize value\n    //let tmp = light.shadow_mat * worldPos;\n    //let texelSize = (2 / shadowMapSize) * tan(coneAngle/90*3.14) * abs(tmp.z/tmp.w) * 100000.0;\n    let offset = constOffset;\n    var shadowPos = light.shadow_mat * (offset * vec4f(unitNormal, 0) + worldPos);\n    //var shadowPos = light.shadow_mat * worldPos;//potentially 0 if no shadowmap exists\n    //perspective transformations alter the w coordinate and it has to be scaled back\n    //the vertex shader actually does this automatically on its output position afterwards\n    shadowPos = shadowPos / shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    let visibility = select(calcShadowVisibility(u32(light.mode.z), shadowMapSize, shadowMaps, shadowMapSampler, shadowPosUV, 0.0), 1.0, i32(light.mode.z)==-1);\n\n    //Problem: specular higlights (artefacts) on faces that aren't even hit by light\n    //Solution 1: only render specular when intensity>0 -> problem: specular highlight is cutoff\n    //Solution 2: multiply specular with difuse intensity -> problem: weak specular highlights\n    var finalColor = ambient + (diffuse + specular * intensity) * visibility;\n    //respect other rendermodes\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcShadowVisibilitySmoothed(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    var visibility = 0.0;\n    let pixelRatio = 1.0 / textureSize;\n    for (var y = -1; y <= 1; y++)\n    {\n        for (var x = -1; x <= 1; x++)\n        {\n            let offset = vec2 < f32 > (vec2(x, y)) * pixelRatio;\n            visibility += textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy + offset, shadowMapIndex, shadowPosUV.z - bias);\n        }\n    }\n    visibility /= 9;\n    //depending on the bounding box the shadow map used some fragments might be out of the shadow maps scope\n    visibility = select(visibility, 1.0, shadowPosUV.x < 0 || shadowPosUV.x > 1 || shadowPosUV.y < 0 || shadowPosUV.y > 1);\n    return visibility;\n}\n\nfn calcShadowVisibility(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    return textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy, shadowMapIndex, shadowPosUV.z - bias);\n}\n\n\n\n//no normal data/map entrypoint\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n//no normal data/map entrypoint\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n";function f(t,e){return t.reduce(((t,r)=>{let n=e(r);return t.has(n)||t.set(n,[]),t.get(n)?.push(r),t}),new Map)}var m=r(518);class _{device;camera;lights;models;canvasFormat;aaSampleCount;shadowMap;name=null;groups=[];pipeline;pipeline_NoNormals;camAndLightUniform;sampler;shadowMapSampler;constructor(t,e,r,n,s,i,a){this.device=t,this.camera=e,this.lights=r,this.models=n,this.canvasFormat=s,this.aaSampleCount=i,this.shadowMap=a}async initializeAsync(){this.sampler=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16}),this.shadowMapSampler=this.device.createSampler({compare:"less"});const t={device:this.device,canvasFormat:this.canvasFormat,aaSampleCount:this.aaSampleCount,shadowMapSize:this.shadowMap?.textureSize};this.pipeline=await async function(t){const e=t.device,r=e.createShaderModule({label:"Blinn Phong Shader",code:p}),n={binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{}};return{pipeline:await h(e,r,[u.sY,d.a],t.canvasFormat,t.aaSampleCount,t.shadowMapSize,[n]),usesNormalData:!0,createBindGroupsFunc:t=>{const e={binding:7,resource:t.material.normalTexture.createView()};return[c(t.device,t.pipeline,t.instancesBuffer,t.uniforms,t.material,t.sampler,[e]),l(t.device,t.pipeline,t.shadowMap,t.shadowMapSampler)]}}}(t),this.pipeline_NoNormals=await async function(t){const e=t.device,r=e.createShaderModule({label:"Blinn Phong Shader without Normals",code:p});return{pipeline:await h(e,r,[u.sY],t.canvasFormat,t.aaSampleCount,t.shadowMapSize,[],"vertexMain_alt","fragmentMain_alt"),usesNormalData:!1,createBindGroupsFunc:t=>[c(t.device,t.pipeline,t.instancesBuffer,t.uniforms,t.material,t.sampler),l(t.device,t.pipeline,t.shadowMap,t.shadowMapSampler)]}}(t),this.camAndLightUniform=new i(this.camera,this.lights),this.camAndLightUniform.writeToGpu(this.device),await this.createRenderGroups()}render(t){this.camAndLightUniform.writeToGpu(this.device);for(let e of this.groups){e.instancesBuffer.writeToGpu(this.device),e.material.writeToGpu(this.device),t.setPipeline(e.pipeline);for(let r=0;r<e.bindGroups.length;r++)t.setBindGroup(r,e.bindGroups[r]);t.setVertexBuffer(0,e.vertexBuffer),this.pipeline.usesNormalData&&t.setVertexBuffer(1,e.normalDataBuffer),t.draw(e.vertexCount,e.instancesCount,0,0)}}async createRenderGroups(){let t=f(this.models,(t=>{let e=null==t.asset.material.normalMapPath?this.pipeline_NoNormals:this.pipeline;return{asset:t.asset,builder:e}}));const e=(0,m.n7)(a.O.solidColor([1,1,1,0]));this.lights.length>0&&t.set({asset:e,builder:this.pipeline_NoNormals},this.lights.map(((t,r)=>new n.R(`Light ${r}`,e,(()=>s._E.uniformScale(s._E.translation([...t.position,0]),.5))))));const r={device:this.device,uniforms:this.camAndLightUniform,sampler:this.sampler,shadowMap:this.shadowMap?.textureArray,shadowMapSampler:this.shadowMapSampler};for(let e of t.entries()){const t=e[0].builder.pipeline,n=e[0].builder.createBindGroupsFunc,s=e[0].asset,i=new o(e[1]);s.writeMeshToGpu(this.device),await s.material.writeTexturesToGpuAsync(this.device,!0),s.material.writeToGpu(this.device),i.writeToGpu(this.device);const a=n({...r,pipeline:t,instancesBuffer:i,material:s.material}),u=new g(i,i.length,s.vertexBuffer,s.vertexCount,s.material,a,t,s.normalBuffer);this.groups.push(u)}}}class g{instancesBuffer;instancesCount;vertexBuffer;vertexCount;material;bindGroups;pipeline;normalDataBuffer;constructor(t,e,r,n,s,i,a,o=null){this.instancesBuffer=t,this.instancesCount=e,this.vertexBuffer=r,this.vertexCount=n,this.material=s,this.bindGroups=i,this.pipeline=a,this.normalDataBuffer=o}}class w{device;models;shadowMaps;shadowPipeline;renderGroups;lightBuffer;constructor(t,e,r){this.device=t,this.models=e,this.shadowMaps=r}async initAsync(){this.shadowPipeline=await function(t){let e=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0}}],r=t.createBindGroupLayout({entries:e}),n={label:"shadow map pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[r]}),vertex:{module:t.createShaderModule({label:"shadow shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\n@group(0) @binding(0) var<storage, read> instances : array<Instance>;\n@group(0) @binding(1) var<uniform> lightView_mat : mat4x4 < f32>;\n\n@vertex\nfn vertexMain(@builtin(instance_index) idx : u32, @location(0) position : vec3 < f32>) -> @builtin(position) vec4 < f32>\n{\n    return lightView_mat * instances[idx].transform * vec4(position, 1);\n}\n"}),entryPoint:"vertexMain",buffers:[x]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}};return t.createRenderPipelineAsync(n)}(this.device),this.renderGroups=[...f(this.models,(t=>t.asset)).values()].map((t=>new o(t))),this.renderGroups.forEach((t=>t.writeToGpu(this.device))),this.writeToGpu()}render(t){this.shadowMaps.forEach((t=>t.createViewMat())),this.writeToGpu(),this.shadowMaps.forEach(((e,r)=>{const n=this.lightBuffer,s={colorAttachments:[],depthStencilAttachment:{view:e.textureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},i=t.beginRenderPass(s);for(let t of this.renderGroups){t.writeToGpu(this.device);const e=t.instances[0].asset;i.setPipeline(this.shadowPipeline),i.setBindGroup(0,v(this.device,this.shadowPipeline,t.gpuBuffer,n),[r*y]),i.setVertexBuffer(0,e.vertexBuffer),i.draw(e.vertexCount,t.length)}i.end()}))}writeToGpu(){this.lightBuffer||(this.lightBuffer=this.device.createBuffer({label:"light view buffer",size:y*this.shadowMaps.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}));for(let t=0;t<this.shadowMaps.length;t++){let e=this.shadowMaps[t];this.device.queue.writeBuffer(this.lightBuffer,t*y,e.light_mat)}}}const y=256;function v(t,e,r,n){let s={label:"shadow map shader binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r}},{binding:1,resource:{buffer:n,size:y}}]};return t.createBindGroup(s)}const x={arrayStride:56,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]};class b{device;canvasFormat;aaSampleCount;canvasWidth;canvasHeight;fullScreenQuadVertexBuffer;pipeline;constructor(t,e,r,n,s){this.device=t,this.canvasFormat=e,this.aaSampleCount=r,this.canvasWidth=n,this.canvasHeight=s;const i=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,-1,1,0,1,1,-1,0,1,1,1,0,1]);this.fullScreenQuadVertexBuffer=t.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.fullScreenQuadVertexBuffer,0,i),this.pipeline=this.createPipeline(t)}render(t,e){e.setPipeline(this.pipeline),e.setBindGroup(0,this.createBindGroup(t)),e.setVertexBuffer(0,this.fullScreenQuadVertexBuffer),e.draw(6,1)}createBindGroup(t){let e={label:"texture renderer binding group",layout:this.pipeline.getBindGroupLayout(0),entries:[{binding:0,resource:t}]};return this.device.createBindGroup(e)}createPipeline(t){let e=[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}}],r=t.createBindGroupLayout({entries:e}),n=t.createPipelineLayout({bindGroupLayouts:[r]});const s=t.createShaderModule({label:"texture renderer",code:"override canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\n@group(0) @binding(0) var textureMap : texture_depth_2d;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    //can't use sampler_comparison as they only return 0 or 1\n    //other sampler don't seem to work\n    //got to calculate pixel indices manually\n    let dim = textureDimensions(textureMap, 0);\n    let textureScreenRatio = vec2f(f32(dim.x) / canvasWidth, f32(dim.y) / canvasHeight);\n    let depthValue = textureLoad(textureMap, vec2 < i32 > (floor(fragCoord.xy * textureScreenRatio)), 0);\n    return vec4 < f32 > (depthValue, depthValue, depthValue, 1.0);\n\n\n    //transformation to make depth values distingushable\n    //const zFar = 100.0;\n    //const zNear = 0.1;\n    //let d = (2 * zNear) / (zFar + zNear - depthValue * (zFar - zNear));\n    //return vec4 < f32 > (d, d, d, 1.0);\n}\n"});return t.createRenderPipeline({layout:n,vertex:{module:s,entryPoint:"vertexMain",buffers:[this.VERTEX_BUFFER_LAYOUT]},fragment:{module:s,entryPoint:"fragmentMain",targets:[{format:this.canvasFormat}],constants:{canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight}},primitive:{topology:"triangle-list"},multisample:{count:this.aaSampleCount},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"always"}})}VERTEX_BUFFER_LAYOUT={arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]}}var k=r(680),M=r(877);class S{id;textureView;light;camera;get lightPosition(){return this.light.position}light_mat=s._E.identity();view_mat=s._E.identity();proj_mat=s._E.identity();constructor(t,e,r){this.id=t,this.textureView=e,this.light=r,this.camera=new T(this)}}class T{map;constructor(t){this.map=t}get view(){return this.map.view_mat}get projectionMatrix(){return this.map.proj_mat}get position(){return new Float32Array([...this.map.lightPosition,1])}}class A extends S{boundingBox;constructor(t,e,r,n){super(t,e,r),this.boundingBox=n}createViewMat(){const t=this.boundingBox,e=(0,k.QG)(t),r=s.R3.distance(t.min,t.max),n=s.R3.normalize(this.light.direction),i=s.R3.addScaled(e,n,-r);s._E.lookAt(i,e,[0,1,0],this.view_mat);const a=(0,k.dV)(t,this.view_mat),o=a.min[0],u=a.max[0],l=a.min[1],c=a.max[1],h=-a.min[2];s._E.ortho(o,u,l,c,0,h,this.proj_mat),s._E.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class E extends S{constructor(t,e,r){super(t,e,r)}createViewMat(){const t=this.light.position,e=s.R3.add(t,this.light.direction);let r=s.R3.cross(this.light.direction,[0,1,0]);r=s.R3.equalsApproximately(r,[0,0,0])?[0,0,1]:[0,1,0],s._E.lookAt(t,e,r,this.view_mat);const n=this.light.coneAngleDeg/180*Math.PI;s._E.perspective(n,1,.1,1e5,this.proj_mat),s._E.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class P{scene;canvas;shadowMapSize;drawnShadowMapId=-1;get useMSAA(){return 4==this.aaSampleCount}aaSampleCount=4;device;context;canvasFormat;renderTarget;depthTexture;depthTextureView;inputHandler;lastFrameMS=Date.now();get renderer(){return this._renderer}_renderer=[];setRendererByIndex(t){if(t<0||t>=this._renderer.length)throw new RangeError("Renderer index out of range.");this.mainRenderer=this._renderer[t]}mainRenderer;shadowMapRenderer;textureRenderer;shadowMap;get shadowMaps(){return this.shadowMap?.views}currentAnimationFrameId=0;constructor(t,e,r=2048){this.scene=t,this.canvas=e,this.shadowMapSize=r,this.inputHandler=function(t,e){const r={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},n={x:0,y:0,zoom:0};let s=!1;const i=(t,e)=>{switch(t.code){case"KeyW":r.forward=e,t.preventDefault(),t.stopPropagation();break;case"KeyS":r.backward=e,t.preventDefault(),t.stopPropagation();break;case"KeyA":r.left=e,t.preventDefault(),t.stopPropagation();break;case"KeyD":r.right=e,t.preventDefault(),t.stopPropagation();break;case"Space":r.up=e,t.preventDefault(),t.stopPropagation();break;case"ShiftLeft":case"ControlLeft":case"KeyC":r.down=e,t.preventDefault(),t.stopPropagation()}};return t.addEventListener("keydown",(t=>i(t,!0))),t.addEventListener("keyup",(t=>i(t,!1))),e.addEventListener("mousedown",(()=>{s=!0})),e.addEventListener("mouseup",(()=>{s=!1})),e.addEventListener("mousemove",(t=>{s=0!=(1&t.buttons),s&&(n.x+=t.movementX,n.y+=t.movementY)})),e.addEventListener("wheel",(t=>{s=0!=(1&t.buttons),s&&(n.zoom+=Math.sign(t.deltaY),t.preventDefault(),t.stopPropagation())}),{passive:!1}),()=>{const t={digital:r,analog:{x:n.x,y:n.y,zoom:n.zoom,touching:s}};return n.x=0,n.y=0,n.zoom=0,t}}(window,e)}async run(){this.device&&(cancelAnimationFrame(this.currentAnimationFrameId),this.device.destroy()),await this.initAsync(),this.render()}async initAsync(){await this.initGpuContext(),this.scene.camera.aspect=this.canvas.width/this.canvas.height,this.scene.lights.filter((t=>t.renderShadowMap)).length>0&&(this.shadowMap=function(t,e,r=1024){let n=e.lights.filter((t=>t.renderShadowMap));if(n.length<1)throw new Error("Can't create shadow map with no applicable lighs.");let s=[],i=e.models.map((t=>t.getBoundingBox())),a=(0,k.k4)(i),o=t.createTexture({size:[r,r,n.length],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});return n.forEach(((t,e)=>{const r=o.createView({label:`shadow map view ${e}`,dimension:"2d",aspect:"all",baseMipLevel:0,baseArrayLayer:e,arrayLayerCount:1});let n;switch(t.type){case M.v.Direct:n=new A(e,r,t,a);break;case M.v.Target:n=new E(e,r,t);break;default:throw new Error(`Can't create a shadow map for type ${M.v[t.type]}`)}n.createViewMat(),s.push(n),t.shadowMap=n})),{textureArray:o,views:s,textureSize:r}}(this.device,this.scene,this.shadowMapSize)),this.mainRenderer=new _(this.device,this.scene.camera,this.scene.lights,this.scene.models,this.canvasFormat,this.aaSampleCount,this.shadowMap),await this.mainRenderer.initializeAsync(),this.mainRenderer.name="main",this._renderer.push(this.mainRenderer),this.shadowMap&&(this.shadowMapRenderer=new w(this.device,this.scene.models,this.shadowMap.views),await this.shadowMapRenderer.initAsync()),this.shadowMap&&(this.textureRenderer=new b(this.device,this.canvasFormat,this.aaSampleCount,this.canvas.width,this.canvas.height));for(let[t,e]of[...this.scene.lights.filter((t=>t.shadowMap))].entries()){let r=new _(this.device,e.shadowMap.camera,this.scene.lights,this.scene.models,this.canvasFormat,this.aaSampleCount);await r.initializeAsync(),r.name=`light view ${t}`,this._renderer.push(r)}}render(){this.currentAnimationFrameId=requestAnimationFrame((()=>{const t=this.getDeltaTime();this.scene.update(t),this.scene.camera.update(t,this.inputHandler());let e=this.context.getCurrentTexture().createView();const r={colorAttachments:[{view:this.useMSAA?this.renderTarget.createView():e,resolveTarget:this.useMSAA?e:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},n=this.device.createCommandEncoder();this.shadowMapRenderer?.render(n);const s=n.beginRenderPass(r);this.drawnShadowMapId>=0&&this.shadowMaps&&this.drawnShadowMapId<this.shadowMaps.length?this.textureRenderer.render(this.shadowMaps[this.drawnShadowMapId].textureView,s):this.mainRenderer.render(s),s.end(),this.device.queue.submit([n.finish()]),this.render()}))}getDeltaTime(){const t=Date.now(),e=(t-this.lastFrameMS)/1e3;return this.lastFrameMS=t,e}async initGpuContext(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");this.device=await t.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),this.context.configure({device:this.device,format:this.canvasFormat,alphaMode:"premultiplied"}),this.useMSAA&&(this.renderTarget=this.device.createTexture({size:[this.canvas.width,this.canvas.height],sampleCount:this.aaSampleCount,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.depthTexture=this.device.createTexture({size:[this.canvas.width,this.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:this.useMSAA?this.aaSampleCount:1}),this.depthTextureView=this.depthTexture.createView()}}},877:(t,e,r)=>{r.d(e,{_:()=>i,v:()=>n});var n,s=r(416);!function(t){t[t.Direct=0]="Direct",t[t.Point=1]="Point",t[t.Target=2]="Target"}(n||(n={}));class i{isOn=!0;intensity=1;type=n.Point;ambientColor=[.2,.2,.2,0];diffuseColor=[.5,.5,.5,0];specularColor=[.8,.8,.8,0];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;useFalloff=!1;coneAngleDeg=72;get position(){return this._position}set position(t){this._position=t,this.type==n.Target&&(this._direction=s.R3.subtract(this._target,this._position))}_position=[0,30,0];get direction(){return this._direction}set direction(t){this._direction=t,this.type==n.Target?this._target=s.R3.add(this._position,this._direction):this.type==n.Direct&&(this._position=s.R3.mulScalar(s.R3.normalize(this._direction),-100))}_direction=[0,-1,0];get target(){return this._target}set target(t){this._target=t,this.type==n.Target&&(this._direction=s.R3.sub(this._target,this.position))}_target=[0,0,0];constructor(t){if(t)switch(this.type=t.type??this.type,this._position=t.position??this._position,this._direction=t.direction??this._direction,this._target=t.target??this._target,this.ambientColor=t.ambientColor??this.ambientColor,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.intensity=t.intensity??this.intensity,this.useFalloff=t.useFalloff??this.useFalloff,this._renderShadowMap=t.renderShadowMap??!0,this.coneAngleDeg=t.coneAngleDeg??this.coneAngleDeg,this.type){case n.Direct:this.direction=this.direction;break;case n.Target:!t.target&&t.direction?this.direction=this.direction:this.target=this.target}}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}getBytes(){return new Float32Array([this.type,this.useFalloff?1:0,this.shadowMap&&this.showShadows?this.shadowMap.id:-1,Math.cos(this.coneAngleDeg/360*Math.PI),...this._position,0,...this._direction,0,...this.disableAmbientColor||!this.isOn?[0,0,0,1]:s.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor||!this.isOn?[0,0,0,1]:s.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor||!this.isOn?[0,0,0,1]:s.vh.mulScalar(this.specularColor,this.intensity),...this.shadowMap?this.shadowMap.light_mat:this.dummy])}showShadows=!0;get renderShadowMap(){return this.type!=n.Point&&this._renderShadowMap}_renderShadowMap=!0;shadowMap;dummy=s._E.create();get byteLength(){return Math.max(this.getBytes().byteLength,80)}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"direct light",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}}},838:(t,e,r)=>{r.d(e,{O:()=>Gt,J:()=>qt});const n=t=>t&&"number"==typeof t.length&&t.buffer instanceof ArrayBuffer&&"number"==typeof t.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class s{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class i{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(t){throw new Error("Cannot evaluate node")}evaluateString(t){return this.evaluate(t).toString()}}class a extends i{constructor(){super()}}class o extends a{constructor(t,e,r,n){super(),this.name=t,this.args=e,this.returnType=r,this.body=n}get astNodeType(){return"function"}}class u extends a{constructor(t){super(),this.expression=t}get astNodeType(){return"staticAssert"}}class l extends a{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"while"}}class c extends a{constructor(t){super(),this.body=t}get astNodeType(){return"continuing"}}class h extends a{constructor(t,e,r,n){super(),this.init=t,this.condition=e,this.increment=r,this.body=n}get astNodeType(){return"for"}}class d extends a{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"var"}}class p extends a{constructor(t,e,r){super(),this.name=t,this.type=e,this.value=r}get astNodeType(){return"override"}}class f extends a{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"let"}}class m extends a{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"const"}evaluate(t){return this.value.evaluate(t)}}var _,g,w,y,v;!function(t){t.increment="++",t.decrement="--"}(_||(_={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return t[r]}}(_||(_={}));class x extends a{constructor(t,e){super(),this.operator=t,this.variable=e}get astNodeType(){return"increment"}}!function(t){t.assign="=",t.addAssign="+=",t.subtractAssin="-=",t.multiplyAssign="*=",t.divideAssign="/=",t.moduloAssign="%=",t.andAssign="&=",t.orAssign="|=",t.xorAssign="^=",t.shiftLeftAssign="<<=",t.shiftRightAssign=">>="}(g||(g={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for AssignOperator");return t[r]}}(g||(g={}));class b extends a{constructor(t,e,r){super(),this.operator=t,this.variable=e,this.value=r}get astNodeType(){return"assign"}}class k extends a{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"call"}}class M extends a{constructor(t,e){super(),this.body=t,this.continuing=e}get astNodeType(){return"loop"}}class S extends a{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"body"}}class T extends a{constructor(t,e,r,n){super(),this.condition=t,this.body=e,this.elseif=r,this.else=n}get astNodeType(){return"if"}}class A extends a{constructor(t){super(),this.value=t}get astNodeType(){return"return"}}class E extends a{constructor(t){super(),this.name=t}get astNodeType(){return"enable"}}class P extends a{constructor(t,e){super(),this.name=t,this.type=e}get astNodeType(){return"alias"}}class C extends a{constructor(){super()}get astNodeType(){return"discard"}}class B extends a{constructor(){super()}get astNodeType(){return"break"}}class z extends a{constructor(){super()}get astNodeType(){return"continue"}}class R extends a{constructor(t){super(),this.name=t}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class N extends R{constructor(t,e){super(t),this.members=e}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(t){for(let e=0;e<this.members.length;e++)if(this.members[e].name==t)return e;return-1}}class U extends R{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"template"}}class q extends R{constructor(t,e,r,n){super(t),this.storage=e,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class F extends R{constructor(t,e,r,n){super(t),this.attributes=e,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class G extends R{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"sampler"}}class I extends i{constructor(){super()}}class L extends I{constructor(t){super(),this.value=t}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class V extends I{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"createExpr"}}class D extends I{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"callExpr"}evaluate(t){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(t));case"acos":return Math.acos(this.args[0].evaluate(t));case"acosh":return Math.acosh(this.args[0].evaluate(t));case"asin":return Math.asin(this.args[0].evaluate(t));case"asinh":return Math.asinh(this.args[0].evaluate(t));case"atan":return Math.atan(this.args[0].evaluate(t));case"atan2":return Math.atan2(this.args[0].evaluate(t),this.args[1].evaluate(t));case"atanh":return Math.atanh(this.args[0].evaluate(t));case"ceil":return Math.ceil(this.args[0].evaluate(t));case"clamp":return Math.min(Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t)),this.args[2].evaluate(t));case"cos":return Math.cos(this.args[0].evaluate(t));case"degrees":return 180*this.args[0].evaluate(t)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(t)-this.args[1].evaluate(t),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(t));case"exp2":return Math.pow(2,this.args[0].evaluate(t));case"floor":return Math.floor(this.args[0].evaluate(t));case"fma":return this.args[0].evaluate(t)*this.args[1].evaluate(t)+this.args[2].evaluate(t);case"fract":case"modf":return this.args[0].evaluate(t)-Math.floor(this.args[0].evaluate(t));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(t));case"log":return Math.log(this.args[0].evaluate(t));case"log2":return Math.log2(this.args[0].evaluate(t));case"max":return Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t));case"min":return Math.min(this.args[0].evaluate(t),this.args[1].evaluate(t));case"mix":return this.args[0].evaluate(t)*(1-this.args[2].evaluate(t))+this.args[1].evaluate(t)*this.args[2].evaluate(t);case"pow":return Math.pow(this.args[0].evaluate(t),this.args[1].evaluate(t));case"radians":return this.args[0].evaluate(t)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(t));case"sign":return Math.sign(this.args[0].evaluate(t));case"sin":return Math.sin(this.args[0].evaluate(t));case"sinh":return Math.sinh(this.args[0].evaluate(t));case"saturate":return Math.min(Math.max(this.args[0].evaluate(t),0),1);case"smoothstep":return this.args[0].evaluate(t)*this.args[0].evaluate(t)*(3-2*this.args[0].evaluate(t));case"sqrt":return Math.sqrt(this.args[0].evaluate(t));case"step":return this.args[0].evaluate(t)<this.args[1].evaluate(t)?0:1;case"tan":return Math.tan(this.args[0].evaluate(t));case"tanh":return Math.tanh(this.args[0].evaluate(t));case"trunc":return Math.trunc(this.args[0].evaluate(t));default:throw new Error("Non const function: "+this.name)}}}class O extends I{constructor(t){super(),this.name=t}get astNodeType(){return"varExpr"}}class j extends I{constructor(t,e){super(),this.name=t,this.initializer=e}get astNodeType(){return"constExpr"}evaluate(t){var e,r;if(this.initializer instanceof V){const n=null===(e=this.postfix)||void 0===e?void 0:e.evaluateString(t),s=null===(r=this.initializer.type)||void 0===r?void 0:r.name,i=t.structs.get(s),a=null==i?void 0:i.getMemberIndex(n);if(-1!=a)return this.initializer.args[a].evaluate(t);console.log(a)}return this.initializer.evaluate(t)}}class $ extends I{constructor(t){super(),this.value=t}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class Y extends I{constructor(t,e){super(),this.type=t,this.value=e}get astNodeType(){return"bitcastExpr"}}class H extends I{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"typecastExpr"}evaluate(t){return this.args[0].evaluate(t)}}class X extends I{constructor(t){super(),this.contents=t}get astNodeType(){return"groupExpr"}evaluate(t){return this.contents[0].evaluate(t)}}class K extends I{constructor(){super()}}class W extends K{constructor(t,e){super(),this.operator=t,this.right=e}get astNodeType(){return"unaryOp"}evaluate(t){switch(this.operator){case"+":return this.right.evaluate(t);case"-":return-this.right.evaluate(t);case"!":return this.right.evaluate(t)?0:1;case"~":return~this.right.evaluate(t);default:throw new Error("Unknown unary operator: "+this.operator)}}}class Q extends K{constructor(t,e,r){super(),this.operator=t,this.left=e,this.right=r}get astNodeType(){return"binaryOp"}evaluate(t){switch(this.operator){case"+":return this.left.evaluate(t)+this.right.evaluate(t);case"-":return this.left.evaluate(t)-this.right.evaluate(t);case"*":return this.left.evaluate(t)*this.right.evaluate(t);case"/":return this.left.evaluate(t)/this.right.evaluate(t);case"%":return this.left.evaluate(t)%this.right.evaluate(t);case"==":return this.left.evaluate(t)==this.right.evaluate(t)?1:0;case"!=":return this.left.evaluate(t)!=this.right.evaluate(t)?1:0;case"<":return this.left.evaluate(t)<this.right.evaluate(t)?1:0;case">":return this.left.evaluate(t)>this.right.evaluate(t)?1:0;case"<=":return this.left.evaluate(t)<=this.right.evaluate(t)?1:0;case">=":return this.left.evaluate(t)>=this.right.evaluate(t)?1:0;case"&&":return this.left.evaluate(t)&&this.right.evaluate(t)?1:0;case"||":return this.left.evaluate(t)||this.right.evaluate(t)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class Z extends i{constructor(){super()}}class J extends Z{constructor(t,e){super(),this.selector=t,this.body=e}get astNodeType(){return"case"}}class tt extends Z{constructor(t){super(),this.body=t}get astNodeType(){return"default"}}class et extends i{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"argument"}}class rt extends i{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"elseif"}}class nt extends i{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"member"}}class st extends i{constructor(t,e){super(),this.name=t,this.value=e}get astNodeType(){return"attribute"}}!function(t){t[t.token=0]="token",t[t.keyword=1]="keyword",t[t.reserved=2]="reserved"}(y||(y={}));class it{constructor(t,e,r){this.name=t,this.type=e,this.rule=r}toString(){return this.name}}class at{}w=at,at.none=new it("",y.reserved,""),at.eof=new it("EOF",y.token,""),at.reserved={asm:new it("asm",y.reserved,"asm"),bf16:new it("bf16",y.reserved,"bf16"),do:new it("do",y.reserved,"do"),enum:new it("enum",y.reserved,"enum"),f16:new it("f16",y.reserved,"f16"),f64:new it("f64",y.reserved,"f64"),handle:new it("handle",y.reserved,"handle"),i8:new it("i8",y.reserved,"i8"),i16:new it("i16",y.reserved,"i16"),i64:new it("i64",y.reserved,"i64"),mat:new it("mat",y.reserved,"mat"),premerge:new it("premerge",y.reserved,"premerge"),regardless:new it("regardless",y.reserved,"regardless"),typedef:new it("typedef",y.reserved,"typedef"),u8:new it("u8",y.reserved,"u8"),u16:new it("u16",y.reserved,"u16"),u64:new it("u64",y.reserved,"u64"),unless:new it("unless",y.reserved,"unless"),using:new it("using",y.reserved,"using"),vec:new it("vec",y.reserved,"vec"),void:new it("void",y.reserved,"void")},at.keywords={array:new it("array",y.keyword,"array"),atomic:new it("atomic",y.keyword,"atomic"),bool:new it("bool",y.keyword,"bool"),f32:new it("f32",y.keyword,"f32"),i32:new it("i32",y.keyword,"i32"),mat2x2:new it("mat2x2",y.keyword,"mat2x2"),mat2x3:new it("mat2x3",y.keyword,"mat2x3"),mat2x4:new it("mat2x4",y.keyword,"mat2x4"),mat3x2:new it("mat3x2",y.keyword,"mat3x2"),mat3x3:new it("mat3x3",y.keyword,"mat3x3"),mat3x4:new it("mat3x4",y.keyword,"mat3x4"),mat4x2:new it("mat4x2",y.keyword,"mat4x2"),mat4x3:new it("mat4x3",y.keyword,"mat4x3"),mat4x4:new it("mat4x4",y.keyword,"mat4x4"),ptr:new it("ptr",y.keyword,"ptr"),sampler:new it("sampler",y.keyword,"sampler"),sampler_comparison:new it("sampler_comparison",y.keyword,"sampler_comparison"),struct:new it("struct",y.keyword,"struct"),texture_1d:new it("texture_1d",y.keyword,"texture_1d"),texture_2d:new it("texture_2d",y.keyword,"texture_2d"),texture_2d_array:new it("texture_2d_array",y.keyword,"texture_2d_array"),texture_3d:new it("texture_3d",y.keyword,"texture_3d"),texture_cube:new it("texture_cube",y.keyword,"texture_cube"),texture_cube_array:new it("texture_cube_array",y.keyword,"texture_cube_array"),texture_multisampled_2d:new it("texture_multisampled_2d",y.keyword,"texture_multisampled_2d"),texture_storage_1d:new it("texture_storage_1d",y.keyword,"texture_storage_1d"),texture_storage_2d:new it("texture_storage_2d",y.keyword,"texture_storage_2d"),texture_storage_2d_array:new it("texture_storage_2d_array",y.keyword,"texture_storage_2d_array"),texture_storage_3d:new it("texture_storage_3d",y.keyword,"texture_storage_3d"),texture_depth_2d:new it("texture_depth_2d",y.keyword,"texture_depth_2d"),texture_depth_2d_array:new it("texture_depth_2d_array",y.keyword,"texture_depth_2d_array"),texture_depth_cube:new it("texture_depth_cube",y.keyword,"texture_depth_cube"),texture_depth_cube_array:new it("texture_depth_cube_array",y.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new it("texture_depth_multisampled_2d",y.keyword,"texture_depth_multisampled_2d"),texture_external:new it("texture_external",y.keyword,"texture_external"),u32:new it("u32",y.keyword,"u32"),vec2:new it("vec2",y.keyword,"vec2"),vec3:new it("vec3",y.keyword,"vec3"),vec4:new it("vec4",y.keyword,"vec4"),bitcast:new it("bitcast",y.keyword,"bitcast"),block:new it("block",y.keyword,"block"),break:new it("break",y.keyword,"break"),case:new it("case",y.keyword,"case"),continue:new it("continue",y.keyword,"continue"),continuing:new it("continuing",y.keyword,"continuing"),default:new it("default",y.keyword,"default"),discard:new it("discard",y.keyword,"discard"),else:new it("else",y.keyword,"else"),enable:new it("enable",y.keyword,"enable"),fallthrough:new it("fallthrough",y.keyword,"fallthrough"),false:new it("false",y.keyword,"false"),fn:new it("fn",y.keyword,"fn"),for:new it("for",y.keyword,"for"),function:new it("function",y.keyword,"function"),if:new it("if",y.keyword,"if"),let:new it("let",y.keyword,"let"),const:new it("const",y.keyword,"const"),loop:new it("loop",y.keyword,"loop"),while:new it("while",y.keyword,"while"),private:new it("private",y.keyword,"private"),read:new it("read",y.keyword,"read"),read_write:new it("read_write",y.keyword,"read_write"),return:new it("return",y.keyword,"return"),storage:new it("storage",y.keyword,"storage"),switch:new it("switch",y.keyword,"switch"),true:new it("true",y.keyword,"true"),alias:new it("alias",y.keyword,"alias"),type:new it("type",y.keyword,"type"),uniform:new it("uniform",y.keyword,"uniform"),var:new it("var",y.keyword,"var"),override:new it("override",y.keyword,"override"),workgroup:new it("workgroup",y.keyword,"workgroup"),write:new it("write",y.keyword,"write"),r8unorm:new it("r8unorm",y.keyword,"r8unorm"),r8snorm:new it("r8snorm",y.keyword,"r8snorm"),r8uint:new it("r8uint",y.keyword,"r8uint"),r8sint:new it("r8sint",y.keyword,"r8sint"),r16uint:new it("r16uint",y.keyword,"r16uint"),r16sint:new it("r16sint",y.keyword,"r16sint"),r16float:new it("r16float",y.keyword,"r16float"),rg8unorm:new it("rg8unorm",y.keyword,"rg8unorm"),rg8snorm:new it("rg8snorm",y.keyword,"rg8snorm"),rg8uint:new it("rg8uint",y.keyword,"rg8uint"),rg8sint:new it("rg8sint",y.keyword,"rg8sint"),r32uint:new it("r32uint",y.keyword,"r32uint"),r32sint:new it("r32sint",y.keyword,"r32sint"),r32float:new it("r32float",y.keyword,"r32float"),rg16uint:new it("rg16uint",y.keyword,"rg16uint"),rg16sint:new it("rg16sint",y.keyword,"rg16sint"),rg16float:new it("rg16float",y.keyword,"rg16float"),rgba8unorm:new it("rgba8unorm",y.keyword,"rgba8unorm"),rgba8unorm_srgb:new it("rgba8unorm_srgb",y.keyword,"rgba8unorm_srgb"),rgba8snorm:new it("rgba8snorm",y.keyword,"rgba8snorm"),rgba8uint:new it("rgba8uint",y.keyword,"rgba8uint"),rgba8sint:new it("rgba8sint",y.keyword,"rgba8sint"),bgra8unorm:new it("bgra8unorm",y.keyword,"bgra8unorm"),bgra8unorm_srgb:new it("bgra8unorm_srgb",y.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new it("rgb10a2unorm",y.keyword,"rgb10a2unorm"),rg11b10float:new it("rg11b10float",y.keyword,"rg11b10float"),rg32uint:new it("rg32uint",y.keyword,"rg32uint"),rg32sint:new it("rg32sint",y.keyword,"rg32sint"),rg32float:new it("rg32float",y.keyword,"rg32float"),rgba16uint:new it("rgba16uint",y.keyword,"rgba16uint"),rgba16sint:new it("rgba16sint",y.keyword,"rgba16sint"),rgba16float:new it("rgba16float",y.keyword,"rgba16float"),rgba32uint:new it("rgba32uint",y.keyword,"rgba32uint"),rgba32sint:new it("rgba32sint",y.keyword,"rgba32sint"),rgba32float:new it("rgba32float",y.keyword,"rgba32float"),static_assert:new it("static_assert",y.keyword,"static_assert")},at.tokens={decimal_float_literal:new it("decimal_float_literal",y.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new it("hex_float_literal",y.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new it("int_literal",y.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new it("uint_literal",y.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new it("ident",y.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new it("and",y.token,"&"),and_and:new it("and_and",y.token,"&&"),arrow:new it("arrow ",y.token,"->"),attr:new it("attr",y.token,"@"),attr_left:new it("attr_left",y.token,"[["),attr_right:new it("attr_right",y.token,"]]"),forward_slash:new it("forward_slash",y.token,"/"),bang:new it("bang",y.token,"!"),bracket_left:new it("bracket_left",y.token,"["),bracket_right:new it("bracket_right",y.token,"]"),brace_left:new it("brace_left",y.token,"{"),brace_right:new it("brace_right",y.token,"}"),colon:new it("colon",y.token,":"),comma:new it("comma",y.token,","),equal:new it("equal",y.token,"="),equal_equal:new it("equal_equal",y.token,"=="),not_equal:new it("not_equal",y.token,"!="),greater_than:new it("greater_than",y.token,">"),greater_than_equal:new it("greater_than_equal",y.token,">="),shift_right:new it("shift_right",y.token,">>"),less_than:new it("less_than",y.token,"<"),less_than_equal:new it("less_than_equal",y.token,"<="),shift_left:new it("shift_left",y.token,"<<"),modulo:new it("modulo",y.token,"%"),minus:new it("minus",y.token,"-"),minus_minus:new it("minus_minus",y.token,"--"),period:new it("period",y.token,"."),plus:new it("plus",y.token,"+"),plus_plus:new it("plus_plus",y.token,"++"),or:new it("or",y.token,"|"),or_or:new it("or_or",y.token,"||"),paren_left:new it("paren_left",y.token,"("),paren_right:new it("paren_right",y.token,")"),semicolon:new it("semicolon",y.token,";"),star:new it("star",y.token,"*"),tilde:new it("tilde",y.token,"~"),underscore:new it("underscore",y.token,"_"),xor:new it("xor",y.token,"^"),plus_equal:new it("plus_equal",y.token,"+="),minus_equal:new it("minus_equal",y.token,"-="),times_equal:new it("times_equal",y.token,"*="),division_equal:new it("division_equal",y.token,"/="),modulo_equal:new it("modulo_equal",y.token,"%="),and_equal:new it("and_equal",y.token,"&="),or_equal:new it("or_equal",y.token,"|="),xor_equal:new it("xor_equal",y.token,"^="),shift_right_equal:new it("shift_right_equal",y.token,">>="),shift_left_equal:new it("shift_left_equal",y.token,"<<=")},at.storage_class=[w.keywords.function,w.keywords.private,w.keywords.workgroup,w.keywords.uniform,w.keywords.storage],at.access_mode=[w.keywords.read,w.keywords.write,w.keywords.read_write],at.sampler_type=[w.keywords.sampler,w.keywords.sampler_comparison],at.sampled_texture_type=[w.keywords.texture_1d,w.keywords.texture_2d,w.keywords.texture_2d_array,w.keywords.texture_3d,w.keywords.texture_cube,w.keywords.texture_cube_array],at.multisampled_texture_type=[w.keywords.texture_multisampled_2d],at.storage_texture_type=[w.keywords.texture_storage_1d,w.keywords.texture_storage_2d,w.keywords.texture_storage_2d_array,w.keywords.texture_storage_3d],at.depth_texture_type=[w.keywords.texture_depth_2d,w.keywords.texture_depth_2d_array,w.keywords.texture_depth_cube,w.keywords.texture_depth_cube_array,w.keywords.texture_depth_multisampled_2d],at.texture_external_type=[w.keywords.texture_external],at.any_texture_type=[...w.sampled_texture_type,...w.multisampled_texture_type,...w.storage_texture_type,...w.depth_texture_type,...w.texture_external_type],at.texel_format=[w.keywords.r8unorm,w.keywords.r8snorm,w.keywords.r8uint,w.keywords.r8sint,w.keywords.r16uint,w.keywords.r16sint,w.keywords.r16float,w.keywords.rg8unorm,w.keywords.rg8snorm,w.keywords.rg8uint,w.keywords.rg8sint,w.keywords.r32uint,w.keywords.r32sint,w.keywords.r32float,w.keywords.rg16uint,w.keywords.rg16sint,w.keywords.rg16float,w.keywords.rgba8unorm,w.keywords.rgba8unorm_srgb,w.keywords.rgba8snorm,w.keywords.rgba8uint,w.keywords.rgba8sint,w.keywords.bgra8unorm,w.keywords.bgra8unorm_srgb,w.keywords.rgb10a2unorm,w.keywords.rg11b10float,w.keywords.rg32uint,w.keywords.rg32sint,w.keywords.rg32float,w.keywords.rgba16uint,w.keywords.rgba16sint,w.keywords.rgba16float,w.keywords.rgba32uint,w.keywords.rgba32sint,w.keywords.rgba32float],at.const_literal=[w.tokens.int_literal,w.tokens.uint_literal,w.tokens.decimal_float_literal,w.tokens.hex_float_literal,w.keywords.true,w.keywords.false],at.literal_or_ident=[w.tokens.ident,w.tokens.int_literal,w.tokens.uint_literal,w.tokens.decimal_float_literal,w.tokens.hex_float_literal],at.element_count_expression=[w.tokens.int_literal,w.tokens.uint_literal,w.tokens.ident],at.template_types=[w.keywords.vec2,w.keywords.vec3,w.keywords.vec4,w.keywords.mat2x2,w.keywords.mat2x3,w.keywords.mat2x4,w.keywords.mat3x2,w.keywords.mat3x3,w.keywords.mat3x4,w.keywords.mat4x2,w.keywords.mat4x3,w.keywords.mat4x4,w.keywords.atomic,w.keywords.bitcast,...w.any_texture_type],at.attribute_name=[w.tokens.ident,w.keywords.block],at.assignment_operators=[w.tokens.equal,w.tokens.plus_equal,w.tokens.minus_equal,w.tokens.times_equal,w.tokens.division_equal,w.tokens.modulo_equal,w.tokens.and_equal,w.tokens.or_equal,w.tokens.xor_equal,w.tokens.shift_right_equal,w.tokens.shift_left_equal],at.increment_operators=[w.tokens.plus_plus,w.tokens.minus_minus];class ot{constructor(t,e,r){this.type=t,this.lexeme=e,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=at.template_types.indexOf(this.type)}isArrayType(){return this.type==at.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ut{constructor(t){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=t?t:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new ot(at.eof,"",this._line)),this._tokens}scanToken(){let t=this._advance();if("\n"==t)return this._line++,!0;if(this._isWhitespace(t))return!0;if("/"==t){if("/"==this._peekAhead()){for(;"\n"!=t;){if(this._isAtEnd())return!0;t=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let e=1;for(;e>0;){if(this._isAtEnd())return!0;if(t=this._advance(),"\n"==t)this._line++;else if("*"==t){if("/"==this._peekAhead()&&(this._advance(),e--,0==e))return!0}else"/"==t&&"*"==this._peekAhead()&&(this._advance(),e++)}return!0}}let e=at.none;for(;;){let r=this._findType(t);const n=this._peekAhead();if(">"==t&&(">"==n||"="==n)){let t=!1,e=this._tokens.length-1;for(let r=0;r<4&&e>=0;++r,--e)if(this._tokens[e].type===at.tokens.less_than){e>0&&this._tokens[e-1].isArrayOrTemplateType()&&(t=!0);break}if(t)return this._addToken(r),!0}if(r===at.none){let n=t,s=0;const i=2;for(let t=0;t<i;++t)if(n+=this._peekAhead(t),r=this._findType(n),r!==at.none){s=t;break}if(r===at.none)return e!==at.none&&(this._current--,this._addToken(e),!0);t=n,this._current+=s+1}if(e=r,this._isAtEnd())break;t+=this._advance()}return e!==at.none&&(this._addToken(e),!0)}_findType(t){for(const e in at.keywords){const r=at.keywords[e];if(this._match(t,r.rule))return r}for(const e in at.tokens){const r=at.tokens[e];if(this._match(t,r.rule))return r}return at.none}_match(t,e){if("string"==typeof e){if(e==t)return!0}else{const r=e.exec(t);if(r&&0==r.index&&r[0]==t)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(t){return" "==t||"\t"==t||"\r"==t}_advance(t=0){let e=this._source[this._current];return t=t||0,t++,this._current+=t,e}_peekAhead(t=0){return t=t||0,this._current+t>=this._source.length?"\0":this._source[this._current+t]}_addToken(t){const e=this._source.substring(this._start,this._current);this._tokens.push(new ot(t,e,this._line))}}class lt{constructor(){this._tokens=[],this._current=0,this._context=new s}parse(t){this._initialize(t);let e=[];for(;!this._isAtEnd();){const t=this._global_decl_or_directive();if(!t)break;e.push(t)}return e}_initialize(t){if(t)if("string"==typeof t){const e=new ut(t);this._tokens=e.scanTokens()}else this._tokens=t;else this._tokens=[];this._current=0}_error(t,e){return console.error(t,e),{token:t,message:e,toString:function(){return`${e}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==at.eof}_match(t){if(t instanceof it)return!!this._check(t)&&(this._advance(),!0);for(let e=0,r=t.length;e<r;++e){const r=t[e];if(this._check(r))return this._advance(),!0}return!1}_consume(t,e){if(this._check(t))return this._advance();throw this._error(this._peek(),e)}_check(t){if(this._isAtEnd())return!1;const e=this._peek();if(t instanceof Array){let r=e.type;return-1!=t.indexOf(r)}return e.type==t}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(at.tokens.semicolon)&&!this._isAtEnd(););if(this._match(at.keywords.alias)){const t=this._type_alias();return this._consume(at.tokens.semicolon,"Expected ';'"),t}if(this._match(at.keywords.enable)){const t=this._enable_directive();return this._consume(at.tokens.semicolon,"Expected ';'"),t}const t=this._attribute();if(this._check(at.keywords.var)){const e=this._global_variable_decl();return null!=e&&(e.attributes=t),this._consume(at.tokens.semicolon,"Expected ';'."),e}if(this._check(at.keywords.override)){const e=this._override_variable_decl();return null!=e&&(e.attributes=t),this._consume(at.tokens.semicolon,"Expected ';'."),e}if(this._check(at.keywords.let)){const e=this._global_let_decl();return null!=e&&(e.attributes=t),this._consume(at.tokens.semicolon,"Expected ';'."),e}if(this._check(at.keywords.const)){const e=this._global_const_decl();return null!=e&&(e.attributes=t),this._consume(at.tokens.semicolon,"Expected ';'."),e}if(this._check(at.keywords.struct)){const e=this._struct_decl();return null!=e&&(e.attributes=t),e}if(this._check(at.keywords.fn)){const e=this._function_decl();return null!=e&&(e.attributes=t),e}return null}_function_decl(){if(!this._match(at.keywords.fn))return null;const t=this._consume(at.tokens.ident,"Expected function name.").toString();this._consume(at.tokens.paren_left,"Expected '(' for function arguments.");const e=[];if(!this._check(at.tokens.paren_right))do{if(this._check(at.tokens.paren_right))break;const t=this._attribute(),r=this._consume(at.tokens.ident,"Expected argument name.").toString();this._consume(at.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n,e.push(new et(r,s,t)))}while(this._match(at.tokens.comma));this._consume(at.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(at.tokens.arrow)){const t=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=t)}const n=this._compound_statement();return new o(t,e,r,n)}_compound_statement(){const t=[];for(this._consume(at.tokens.brace_left,"Expected '{' for block.");!this._check(at.tokens.brace_right);){const e=this._statement();null!==e&&t.push(e)}return this._consume(at.tokens.brace_right,"Expected '}' for block."),t}_statement(){for(;this._match(at.tokens.semicolon)&&!this._isAtEnd(););if(this._check(at.keywords.if))return this._if_statement();if(this._check(at.keywords.switch))return this._switch_statement();if(this._check(at.keywords.loop))return this._loop_statement();if(this._check(at.keywords.for))return this._for_statement();if(this._check(at.keywords.while))return this._while_statement();if(this._check(at.keywords.continuing))return this._continuing_statement();if(this._check(at.keywords.static_assert))return this._static_assert_statement();if(this._check(at.tokens.brace_left))return this._compound_statement();let t=null;return t=this._check(at.keywords.return)?this._return_statement():this._check([at.keywords.var,at.keywords.let,at.keywords.const])?this._variable_statement():this._match(at.keywords.discard)?new C:this._match(at.keywords.break)?new B:this._match(at.keywords.continue)?new z:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=t&&this._consume(at.tokens.semicolon,"Expected ';' after statement."),t}_static_assert_statement(){if(!this._match(at.keywords.static_assert))return null;let t=this._optional_paren_expression();return new u(t)}_while_statement(){if(!this._match(at.keywords.while))return null;let t=this._optional_paren_expression();const e=this._compound_statement();return new l(t,e)}_continuing_statement(){if(!this._match(at.keywords.continuing))return null;const t=this._compound_statement();return new c(t)}_for_statement(){if(!this._match(at.keywords.for))return null;this._consume(at.tokens.paren_left,"Expected '('.");const t=this._check(at.tokens.semicolon)?null:this._for_init();this._consume(at.tokens.semicolon,"Expected ';'.");const e=this._check(at.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(at.tokens.semicolon,"Expected ';'.");const r=this._check(at.tokens.paren_right)?null:this._for_increment();this._consume(at.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new h(t,e,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(at.keywords.var)){const t=this._variable_decl();if(null===t)throw this._error(this._peek(),"Variable declaration expected.");let e=null;return this._match(at.tokens.equal)&&(e=this._short_circuit_or_expression()),new d(t.name,t.type,t.storage,t.access,e)}if(this._match(at.keywords.let)){const t=this._consume(at.tokens.ident,"Expected name for let.").toString();let e=null;if(this._match(at.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(at.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new f(t,e,null,null,r)}if(this._match(at.keywords.const)){const t=this._consume(at.tokens.ident,"Expected name for const.").toString();let e=null;if(this._match(at.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(at.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new m(t,e,null,null,r)}return null}_increment_decrement_statement(){const t=this._current,e=this._unary_expression();if(null==e)return null;if(!this._check(at.increment_operators))return this._current=t,null;const r=this._consume(at.increment_operators,"Expected increment operator");return new x(r.type===at.tokens.plus_plus?_.increment:_.decrement,e)}_assignment_statement(){let t=null;if(this._check(at.tokens.brace_right))return null;let e=this._match(at.tokens.underscore);if(e||(t=this._unary_expression()),!e&&null==t)return null;const r=this._consume(at.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new b(g.parse(r.lexeme),t,n)}_func_call_statement(){if(!this._check(at.tokens.ident))return null;const t=this._current,e=this._consume(at.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=t,null):new k(e.lexeme,r)}_loop_statement(){if(!this._match(at.keywords.loop))return null;this._consume(at.tokens.brace_left,"Expected '{' for loop.");const t=[];let e=this._statement();for(;null!==e;){if(Array.isArray(e))for(let r of e)t.push(r);else t.push(e);e=this._statement()}let r=null;return this._match(at.keywords.continuing)&&(r=this._compound_statement()),this._consume(at.tokens.brace_right,"Expected '}' for loop."),new M(t,r)}_switch_statement(){if(!this._match(at.keywords.switch))return null;const t=this._optional_paren_expression();this._consume(at.tokens.brace_left,"Expected '{' for switch.");const e=this._switch_body();if(null==e||0==e.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(at.tokens.brace_right,"Expected '}' for switch."),new S(t,e)}_switch_body(){const t=[];if(this._match(at.keywords.case)){const e=this._case_selectors();this._match(at.tokens.colon),this._consume(at.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(at.tokens.brace_right,"Exected '}' for switch case."),t.push(new J(e,r))}if(this._match(at.keywords.default)){this._match(at.tokens.colon),this._consume(at.tokens.brace_left,"Exected '{' for switch default.");const e=this._case_body();this._consume(at.tokens.brace_right,"Exected '}' for switch default."),t.push(new tt(e))}if(this._check([at.keywords.default,at.keywords.case])){const e=this._switch_body();t.push(e[0])}return t}_case_selectors(){var t,e,r,n;const s=[null!==(e=null===(t=this._shift_expression())||void 0===t?void 0:t.evaluate(this._context).toString())&&void 0!==e?e:""];for(;this._match(at.tokens.comma);)s.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return s}_case_body(){if(this._match(at.keywords.fallthrough))return this._consume(at.tokens.semicolon,"Expected ';'"),[];let t=this._statement();if(null==t)return[];t instanceof Array||(t=[t]);const e=this._case_body();return 0==e.length?t:[...t,e[0]]}_if_statement(){if(!this._match(at.keywords.if))return null;const t=this._optional_paren_expression(),e=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(at.keywords.else)&&(n=this._compound_statement()),new T(t,e,r,n)}_match_elseif(){return this._tokens[this._current].type===at.keywords.else&&this._tokens[this._current+1].type===at.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(t=[]){const e=this._optional_paren_expression(),r=this._compound_statement();return t.push(new rt(e,r)),this._match_elseif()&&this._elseif_statement(t),t}_return_statement(){if(!this._match(at.keywords.return))return null;const t=this._short_circuit_or_expression();return new A(t)}_short_circuit_or_expression(){let t=this._short_circuit_and_expr();for(;this._match(at.tokens.or_or);)t=new Q(this._previous().toString(),t,this._short_circuit_and_expr());return t}_short_circuit_and_expr(){let t=this._inclusive_or_expression();for(;this._match(at.tokens.and_and);)t=new Q(this._previous().toString(),t,this._inclusive_or_expression());return t}_inclusive_or_expression(){let t=this._exclusive_or_expression();for(;this._match(at.tokens.or);)t=new Q(this._previous().toString(),t,this._exclusive_or_expression());return t}_exclusive_or_expression(){let t=this._and_expression();for(;this._match(at.tokens.xor);)t=new Q(this._previous().toString(),t,this._and_expression());return t}_and_expression(){let t=this._equality_expression();for(;this._match(at.tokens.and);)t=new Q(this._previous().toString(),t,this._equality_expression());return t}_equality_expression(){const t=this._relational_expression();return this._match([at.tokens.equal_equal,at.tokens.not_equal])?new Q(this._previous().toString(),t,this._relational_expression()):t}_relational_expression(){let t=this._shift_expression();for(;this._match([at.tokens.less_than,at.tokens.greater_than,at.tokens.less_than_equal,at.tokens.greater_than_equal]);)t=new Q(this._previous().toString(),t,this._shift_expression());return t}_shift_expression(){let t=this._additive_expression();for(;this._match([at.tokens.shift_left,at.tokens.shift_right]);)t=new Q(this._previous().toString(),t,this._additive_expression());return t}_additive_expression(){let t=this._multiplicative_expression();for(;this._match([at.tokens.plus,at.tokens.minus]);)t=new Q(this._previous().toString(),t,this._multiplicative_expression());return t}_multiplicative_expression(){let t=this._unary_expression();for(;this._match([at.tokens.star,at.tokens.forward_slash,at.tokens.modulo]);)t=new Q(this._previous().toString(),t,this._unary_expression());return t}_unary_expression(){return this._match([at.tokens.minus,at.tokens.bang,at.tokens.tilde,at.tokens.star,at.tokens.and])?new W(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const t=this._primary_expression(),e=this._postfix_expression();return e&&(t.postfix=e),t}_postfix_expression(){if(this._match(at.tokens.bracket_left)){const t=this._short_circuit_or_expression();this._consume(at.tokens.bracket_right,"Expected ']'.");const e=this._postfix_expression();return e&&(t.postfix=e),t}if(this._match(at.tokens.period)){const t=this._consume(at.tokens.ident,"Expected member name."),e=this._postfix_expression(),r=new L(t.lexeme);return e&&(r.postfix=e),r}return null}_getStruct(t){return this._context.aliases.has(t)?this._context.aliases.get(t).type:this._context.structs.has(t)?this._context.structs.get(t):null}_primary_expression(){if(this._match(at.tokens.ident)){const t=this._previous().toString();if(this._check(at.tokens.paren_left)){const e=this._argument_expression_list(),r=this._getStruct(t);return null!=r?new V(r,e):new D(t,e)}if(this._context.constants.has(t)){const e=this._context.constants.get(t);return new j(t,e.value)}return new O(t)}if(this._match(at.const_literal))return new $(parseFloat(this._previous().toString()));if(this._check(at.tokens.paren_left))return this._paren_expression();if(this._match(at.keywords.bitcast)){this._consume(at.tokens.less_than,"Expected '<'.");const t=this._type_decl();this._consume(at.tokens.greater_than,"Expected '>'.");const e=this._paren_expression();return new Y(t,e)}const t=this._type_decl(),e=this._argument_expression_list();return new H(t,e)}_argument_expression_list(){if(!this._match(at.tokens.paren_left))return null;const t=[];do{if(this._check(at.tokens.paren_right))break;const e=this._short_circuit_or_expression();t.push(e)}while(this._match(at.tokens.comma));return this._consume(at.tokens.paren_right,"Expected ')' for agument list"),t}_optional_paren_expression(){this._match(at.tokens.paren_left);const t=this._short_circuit_or_expression();return this._match(at.tokens.paren_right),new X([t])}_paren_expression(){this._consume(at.tokens.paren_left,"Expected '('.");const t=this._short_circuit_or_expression();return this._consume(at.tokens.paren_right,"Expected ')'."),new X([t])}_struct_decl(){if(!this._match(at.keywords.struct))return null;const t=this._consume(at.tokens.ident,"Expected name for struct.").toString();this._consume(at.tokens.brace_left,"Expected '{' for struct body.");const e=[];for(;!this._check(at.tokens.brace_right);){const t=this._attribute(),r=this._consume(at.tokens.ident,"Expected variable name.").toString();this._consume(at.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n),this._check(at.tokens.brace_right)?this._match(at.tokens.comma):this._consume(at.tokens.comma,"Expected ',' for struct member."),e.push(new nt(r,s,t))}this._consume(at.tokens.brace_right,"Expected '}' after struct body.");const r=new N(t,e);return this._context.structs.set(t,r),r}_global_variable_decl(){const t=this._variable_decl();return t&&this._match(at.tokens.equal)&&(t.value=this._const_expression()),t}_override_variable_decl(){const t=this._override_decl();return t&&this._match(at.tokens.equal)&&(t.value=this._const_expression()),t}_global_const_decl(){if(!this._match(at.keywords.const))return null;const t=this._consume(at.tokens.ident,"Expected variable name");let e=null;if(this._match(at.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;if(this._match(at.tokens.equal)){const t=this._short_circuit_or_expression();if(t instanceof V)r=t;else if(t instanceof j&&t.initializer instanceof V)r=t.initializer;else try{const e=t.evaluate(this._context);r=new $(e)}catch(e){r=t}}const n=new m(t.toString(),e,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(at.keywords.let))return null;const t=this._consume(at.tokens.ident,"Expected variable name");let e=null;if(this._match(at.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;return this._match(at.tokens.equal)&&(r=this._const_expression()),new f(t.toString(),e,"","",r)}_const_expression(){if(this._match(at.const_literal))return new L(this._previous().toString());const t=this._type_decl();this._consume(at.tokens.paren_left,"Expected '('.");let e=[];for(;!this._check(at.tokens.paren_right)&&(e.push(this._const_expression()),this._check(at.tokens.comma));)this._advance();return this._consume(at.tokens.paren_right,"Expected ')'."),new V(t,e)}_variable_decl(){if(!this._match(at.keywords.var))return null;let t="",e="";this._match(at.tokens.less_than)&&(t=this._consume(at.storage_class,"Expected storage_class.").toString(),this._match(at.tokens.comma)&&(e=this._consume(at.access_mode,"Expected access_mode.").toString()),this._consume(at.tokens.greater_than,"Expected '>'."));const r=this._consume(at.tokens.ident,"Expected variable name");let n=null;if(this._match(at.tokens.colon)){const t=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=t)}return new d(r.toString(),n,t,e,null)}_override_decl(){if(!this._match(at.keywords.override))return null;const t=this._consume(at.tokens.ident,"Expected variable name");let e=null;if(this._match(at.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}return new p(t.toString(),e,null)}_enable_directive(){const t=this._consume(at.tokens.ident,"identity expected.");return new E(t.toString())}_type_alias(){const t=this._consume(at.tokens.ident,"identity expected.");this._consume(at.tokens.equal,"Expected '=' for type alias.");let e=this._type_decl();if(null===e)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);const r=new P(t.toString(),e);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([at.tokens.ident,...at.texel_format,at.keywords.bool,at.keywords.f32,at.keywords.i32,at.keywords.u32])){const t=this._advance(),e=t.toString();return this._context.structs.has(e)?this._context.structs.get(e):this._context.aliases.has(e)?this._context.aliases.get(e).type:new R(t.toString())}if(this._check(at.template_types)){let t=this._advance().toString(),e=null,r=null;return this._match(at.tokens.less_than)&&(e=this._type_decl(),r=null,this._match(at.tokens.comma)&&(r=this._consume(at.access_mode,"Expected access_mode for pointer").toString()),this._consume(at.tokens.greater_than,"Expected '>' for type.")),new U(t,e,r)}if(this._match(at.keywords.ptr)){let t=this._previous().toString();this._consume(at.tokens.less_than,"Expected '<' for pointer.");const e=this._consume(at.storage_class,"Expected storage_class for pointer");this._consume(at.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(at.tokens.comma)&&(n=this._consume(at.access_mode,"Expected access_mode for pointer").toString()),this._consume(at.tokens.greater_than,"Expected '>' for pointer."),new q(t,e.toString(),r,n)}let t=this._texture_sampler_types();if(t)return t;const e=this._attribute();if(this._match(at.keywords.array)){let t=null,r=-1;const n=this._previous();if(this._match(at.tokens.less_than)){t=this._type_decl(),this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);let e="";this._match(at.tokens.comma)&&(e=this._shift_expression().evaluate(this._context).toString()),this._consume(at.tokens.greater_than,"Expected '>' for array."),r=e?parseInt(e):0}return new F(n.toString(),e,t,r)}return null}_texture_sampler_types(){if(this._match(at.sampler_type))return new G(this._previous().toString(),null,null);if(this._match(at.depth_texture_type))return new G(this._previous().toString(),null,null);if(this._match(at.sampled_texture_type)||this._match(at.multisampled_texture_type)){const t=this._previous();this._consume(at.tokens.less_than,"Expected '<' for sampler type.");const e=this._type_decl();return this._consume(at.tokens.greater_than,"Expected '>' for sampler type."),new G(t.toString(),e,null)}if(this._match(at.storage_texture_type)){const t=this._previous();this._consume(at.tokens.less_than,"Expected '<' for sampler type.");const e=this._consume(at.texel_format,"Invalid texel format.").toString();this._consume(at.tokens.comma,"Expected ',' after texel format.");const r=this._consume(at.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(at.tokens.greater_than,"Expected '>' for sampler type."),new G(t.toString(),e,r)}return null}_attribute(){let t=[];for(;this._match(at.tokens.attr);){const e=this._consume(at.attribute_name,"Expected attribute name"),r=new st(e.toString(),null);if(this._match(at.tokens.paren_left)){if(r.value=this._consume(at.literal_or_ident,"Expected attribute value").toString(),this._check(at.tokens.comma)){this._advance();do{const t=this._consume(at.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(t)}while(this._match(at.tokens.comma))}this._consume(at.tokens.paren_right,"Expected ')'")}t.push(r)}for(;this._match(at.tokens.attr_left);){if(!this._check(at.tokens.attr_right))do{const e=this._consume(at.attribute_name,"Expected attribute name"),r=new st(e.toString(),null);if(this._match(at.tokens.paren_left)){if(r.value=[this._consume(at.literal_or_ident,"Expected attribute value").toString()],this._check(at.tokens.comma)){this._advance();do{const t=this._consume(at.literal_or_ident,"Expected attribute value").toString();r.value.push(t)}while(this._match(at.tokens.comma))}this._consume(at.tokens.paren_right,"Expected ')'")}t.push(r)}while(this._match(at.tokens.comma));this._consume(at.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==t.length?null:t}}class ct{constructor(t,e){this.name=t,this.attributes=e,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class ht{constructor(t,e,r){this.name=t,this.type=e,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class dt extends ct{constructor(t,e){super(t,e),this.members=[],this.align=0}get isStruct(){return!0}}class pt extends ct{constructor(t,e){super(t,e),this.count=0,this.stride=0}get isArray(){return!0}}class ft extends ct{constructor(t,e,r){super(t,r),this.format=e}get isTemplate(){return!0}}!function(t){t[t.Uniform=0]="Uniform",t[t.Storage=1]="Storage",t[t.Texture=2]="Texture",t[t.Sampler=3]="Sampler"}(v||(v={}));class mt{constructor(t,e,r,n,s,i){this.name=t,this.type=e,this.group=r,this.binding=n,this.attributes=s,this.resourceType=i}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class _t{constructor(t,e){this.name=t,this.type=e}}class gt{constructor(t,e){this.align=t,this.size=e}}class wt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n,this.interpolation=null}}class yt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n}}class vt{constructor(t,e=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=t,this.stage=e}}class xt{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class bt{constructor(t,e,r,n){this.name=t,this.type=e,this.attributes=r,this.id=n}}class kt{constructor(t){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new xt,this._types=new Map,t&&this.update(t)}update(t){const e=(new lt).parse(t);for(const t of e){if(t instanceof N){const e=this._getTypeInfo(t,null);e instanceof dt&&this.structs.push(e)}if(t instanceof P&&this.aliases.push(this._getAliasInfo(t)),t instanceof p){const e=t,r=this._getAttributeNum(e.attributes,"id",0),n=null!=e.type?this._getTypeInfo(e.type,e.attributes):null;this.overrides.push(new bt(e.name,n,e.attributes,r))}if(this._isUniformVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new mt(e.name,s,r,n,e.attributes,v.Uniform);this.uniforms.push(i)}if(this._isStorageVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new mt(e.name,s,r,n,e.attributes,v.Storage);this.storage.push(i)}if(this._isTextureVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new mt(e.name,s,r,n,e.attributes,v.Texture);this.textures.push(i)}if(this._isSamplerVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new mt(e.name,s,r,n,e.attributes,v.Sampler);this.samplers.push(i)}if(t instanceof o){const e=this._getAttribute(t,"vertex"),r=this._getAttribute(t,"fragment"),n=this._getAttribute(t,"compute"),s=e||r||n;if(s){const e=new vt(t.name,s.name);e.inputs=this._getInputs(t.args),e.outputs=this._getOutputs(t.returnType),this.entry[s.name].push(e)}}}}getBindGroups(){const t=[];function e(e,r){e>=t.length&&(t.length=e+1),void 0===t[e]&&(t[e]=[]),r>=t[e].length&&(t[e].length=r+1)}for(const r of this.uniforms)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.storage)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.textures)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.samplers)e(r.group,r.binding),t[r.group][r.binding]=r;return t}_getOutputs(t,e=void 0){if(void 0===e&&(e=[]),t instanceof N)this._getStructOutputs(t,e);else{const r=this._getOutputInfo(t);null!==r&&e.push(r)}return e}_getStructOutputs(t,e){for(const r of t.members)if(r.type instanceof N)this._getStructOutputs(r.type,e);else{const t=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==t){const n=this._getTypeInfo(r.type,r.type.attributes),s=this._parseInt(t.value),i=new yt(r.name,n,t.name,s);e.push(i)}}}_getOutputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getTypeInfo(t,t.attributes),n=this._parseInt(e.value);return new yt("",r,e.name,n)}return null}_getInputs(t,e=void 0){void 0===e&&(e=[]);for(const r of t)if(r.type instanceof N)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}return e}_getStructInputs(t,e){for(const r of t.members)if(r.type instanceof N)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}}_getInputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getAttribute(t,"interpolation"),n=this._getTypeInfo(t.type,t.attributes),s=this._parseInt(e.value),i=new wt(t.name,n,e.name,s);return null!==r&&(i.interpolation=this._parseString(r.value)),i}return null}_parseString(t){return t instanceof Array&&(t=t[0]),t}_parseInt(t){t instanceof Array&&(t=t[0]);const e=parseInt(t);return isNaN(e)?t:e}_getAlias(t){for(const e of this.aliases)if(e.name==t)return e.type;return null}_getAliasInfo(t){return new _t(t.name,this._getTypeInfo(t.type,null))}_getTypeInfo(t,e){if(this._types.has(t))return this._types.get(t);if(t instanceof F){const r=t,n=this._getTypeInfo(r.format,r.attributes),s=new pt(r.name,e);return s.format=n,s.count=r.count,this._types.set(t,s),this._updateTypeInfo(s),s}if(t instanceof N){const r=t,n=new dt(r.name,e);for(const t of r.members){const e=this._getTypeInfo(t.type,t.attributes);n.members.push(new ht(t.name,e,t.attributes))}return this._types.set(t,n),this._updateTypeInfo(n),n}if(t instanceof U){const r=t,n=r.format?this._getTypeInfo(r.format,null):null,s=new ft(r.name,n,e);return this._types.set(t,s),this._updateTypeInfo(s),s}const r=new ct(t.name,e);return this._types.set(t,r),this._updateTypeInfo(r),r}_updateTypeInfo(t){var e,r;const n=this._getTypeSize(t);if(t.size=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:0,t instanceof pt){const e=this._getTypeSize(t.format);t.stride=null!==(r=null==e?void 0:e.size)&&void 0!==r?r:0,this._updateTypeInfo(t.format)}t instanceof dt&&this._updateStructInfo(t)}_updateStructInfo(t){var e;let r=0,n=0,s=0,i=0;for(let a=0,o=t.members.length;a<o;++a){const o=t.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(e=this._getAlias(o.type.name))&&void 0!==e||o.type;const l=u.align,c=u.size;r=this._roundUp(l,r+n),n=c,s=r,i=Math.max(i,l),o.offset=r,o.size=c,this._updateTypeInfo(o.type)}t.size=this._roundUp(i,s+n),t.align=i}_getTypeSize(t){var e;if(null==t)return null;const r=this._getAttributeNum(t.attributes,"size",0),n=this._getAttributeNum(t.attributes,"align",0);if(t instanceof ht&&(t=t.type),t instanceof ct){const e=this._getAlias(t.name);null!==e&&(t=e)}{const e=kt._typeInfo[t.name];if(void 0!==e){const s="f16"===t.format?2:1;return new gt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}{const e=kt._typeInfo[t.name.substring(0,t.name.length-1)];if(e){const s="h"===t.name[t.name.length-1]?2:1;return new gt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}if(t instanceof pt){let s=t,i=8,a=8;const o=this._getTypeSize(s.format);return null!==o&&(a=o.size,i=o.align),a=s.count*this._getAttributeNum(null!==(e=null==t?void 0:t.attributes)&&void 0!==e?e:null,"stride",this._roundUp(i,a)),r&&(a=r),new gt(Math.max(n,i),Math.max(r,a))}if(t instanceof dt){let e=0,s=0,i=0,a=0,o=0;for(const r of t.members){const t=this._getTypeSize(r.type);null!==t&&(e=Math.max(t.align,e),i=this._roundUp(t.align,i+a),a=t.size,o=i)}return s=this._roundUp(e,o+a),new gt(Math.max(n,e),Math.max(r,s))}return null}_isUniformVar(t){return t instanceof d&&"uniform"==t.storage}_isStorageVar(t){return t instanceof d&&"storage"==t.storage}_isTextureVar(t){return t instanceof d&&null!==t.type&&-1!=kt._textureTypes.indexOf(t.type.name)}_isSamplerVar(t){return t instanceof d&&null!==t.type&&-1!=kt._samplerTypes.indexOf(t.type.name)}_getAttribute(t,e){const r=t;if(!r||!r.attributes)return null;const n=r.attributes;for(let t of n)if(t.name==e)return t;return null}_getAttributeNum(t,e,r){if(null===t)return r;for(let n of t)if(n.name==e){let t=null!==n&&null!==n.value?n.value:r;return t instanceof Array&&(t=t[0]),"number"==typeof t?t:"string"==typeof t?parseInt(t):r}return r}_roundUp(t,e){return Math.ceil(e/t)*t}}function Mt(t,e){const r=function(t){return Array.isArray(t)||n(t)?[...t,1,1].slice(0,3):function(t){return[t.width,t.height||1,t.depthOrArrayLayers||1]}(t)}(t),s=Math.max(...r.slice(0,"3d"===e?3:2));return 1+Math.log2(s)|0}kt._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},kt._textureTypes=at.any_texture_type.map((t=>t.name)),kt._samplerTypes=at.sampler_type.map((t=>t.name));const St=new WeakMap,Tt=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function At(t){return n(t)||Array.isArray(t)||function(t){const e=t;return n(e.data)||Array.isArray(e.data)}(t)}function Et(t){switch(t){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Tt.entries()].map((([t,{formats:[e,r]}])=>[[e,t],[r,t]])).flat());const Pt={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Ct=/([a-z]+)(\d+)([a-z]+)/;function Bt(t){const[,e,r,n]=Ct.exec(t),s=e.length,i=parseInt(r)/8;return{channels:e,numChannels:s,bytesPerChannel:i,bytesPerElement:s*i,Type:Pt[`${r}${n}`]}}function zt(t,e,r,s={}){r.forEach(((r,i)=>{const a=[0,0,i+(s.baseArrayLayer||0)];if(At(r))!function(t,e,r,s){const i=function(t,e){if(n(t))return t;const{Type:r}=Bt(e);return new r(t)}(r.data||r,e.format),a=function(t,e){return[t.width,t.height,t.depthOrArrayLayers].map((t=>Math.max(1,Math.floor(t/1))))}(e),{bytesPerElement:o}=Bt(e.format),u=s.origin||[0,0,0];t.queue.writeTexture({texture:e,origin:u},i,{bytesPerRow:o*a[0],rowsPerImage:a[1]},a)}(t,e,r,{origin:a});else{const n=r,{flipY:i,premultipliedAlpha:o,colorSpace:u}=s;t.queue.copyExternalImageToTexture({source:n,flipY:i},{texture:e,premultipliedAlpha:o,colorSpace:u,origin:a},Rt(n,s))}})),e.mipLevelCount>1&&function(t,e){let r=St.get(t);r||(r={pipelineByFormat:{},moduleByView:{}},St.set(t,r));let{sampler:n}=r;const{pipelineByFormat:s,moduleByView:i}=r,a=function(t){switch(t.dimension){case"1d":return"1d";case"3d":return"3d";default:return t.depthOrArrayLayers>1?"2d-array":"2d"}}(e);let o=i[a];o||(o=t.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),i[a]=o),n||(n=t.createSampler({minFilter:"linear"}),r.sampler=n);const u=`${e.format}`;s[u]||(s[u]=t.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:e.format}]}}));const l=s[u],c=t.createCommandEncoder({label:"mip gen encoder"});for(let r=1;r<e.mipLevelCount;++r)for(let s=0;s<e.depthOrArrayLayers;++s){const i=t.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:n},{binding:1,resource:e.createView({dimension:"2d",baseMipLevel:r-1,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:e.createView({baseMipLevel:r,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=c.beginRenderPass(a);o.setPipeline(l),o.setBindGroup(0,i),o.draw(3),o.end()}const h=c.finish();t.queue.submit([h])}(t,e)}function Rt(t,e){if(t instanceof HTMLVideoElement)return[t.videoWidth,t.videoHeight,1];{const r=t,{width:s,height:i}=r;if(s>0&&i>0&&!At(t))return[s,i,1];const a=e.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:u}=Bt(a),l=n(t)||Array.isArray(t)?t:t.data;return function(t,e,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(t||e){if(e){if(!t&&(t=r/e)%1)throw new Error("can't guess dimensions")}else if((e=r/t)%1)throw new Error("can't guess dimensions")}else{const s=Math.sqrt(r/("cube"===n?6:1));s%1==0?(t=s,e=s):(t=r,e=1)}const s=r/t/e;if(s%1)throw new Error("can't guess dimensions");return[t,e,s]}(s,i,(n(l)?l.byteLength:l.length*u)/o)}}async function Nt(t,e,r={}){const n=await Promise.all(e.map((t=>async function(t,e={}){const r=await fetch(t),n=await r.blob(),s={...e,...void 0!==e.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,s)}(t))));return function(t,e,r={}){const n=Rt(e[0],r);n[2]=n[2]>1?n[2]:e.length;const s=t.createTexture({dimension:Et(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Mt(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return zt(t,s,e,r),s}(t,n,r)}async function Ut(t,e,r={}){return Nt(t,[e],r)}var qt;function Ft(t,e,r=1,n=1){const s=r*n,i=new Uint8Array(4*s),[a,o,u,l]=e;for(let t=0;t<s;++t){const e=4*t;i[e]=255*a,i[e+1]=255*o,i[e+2]=255*u,i[e+3]=255*l}const c=t.createTexture({size:{width:r,height:n},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return t.queue.writeTexture({texture:c},i,{bytesPerRow:4*r,rowsPerImage:n},{width:r,height:n}),c}!function(t){t[t.Default=0]="Default",t[t.SolidColor=1]="SolidColor",t[t.VertexNormal=2]="VertexNormal"}(qt||(qt={}));class Gt{mode=qt.Default;tiling={u:1,v:1};ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(t){t&&(this.mode=t.mode??this.mode,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.shininess=t.shininess??this.shininess,this.diffuseMapPath=t.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=t.specularMapPath??this.specularMapPath,this.normalMapPath=t.normalMapPath??this.normalMapPath,this.tiling=t.tiling??this.tiling,this.disableNormalMap=t.disableNormalMap??this.disableNormalMap)}static solidColor(t){return new Gt({mode:qt.SolidColor,diffuseColor:t})}getBytes(){return new Float32Array([this.mode,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v,...this.ambientColor,...this.specularColor,this.shininess,0,0,0])}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"material",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}async writeTexturesToGpuAsync(t,e){this.ambientMapPath?this._ambientTexture=await Ut(t,this.ambientMapPath,{mips:e}):this._ambientTexture=Ft(t,this.ambientColor),this.diffuseMapPath?this._diffuseTexture=await Ut(t,this.diffuseMapPath,{mips:e}):this._diffuseTexture=Ft(t,this.diffuseColor),this.specularMapPath?this._specularTexture=await Ut(t,this.specularMapPath,{mips:e}):this._specularTexture=Ft(t,this.specularColor),this.normalMapPath?this._normalTexture=await Ut(t,this.normalMapPath,{mips:e}):this._normalTexture=Ft(t,[0,0,1,1])}}},806:(t,e,r)=>{r.d(e,{R:()=>a,S:()=>i});var n=r(416),s=r(680);class i{name;asset;transform;constructor(t,e,r=n._E.identity()){this.name=t,this.asset=e,this.transform=r}getBoundingBox(){return(0,s.dV)(this.asset.boundingBox,this.transform)}translate(t,e,r){return n._E.translate(this.transform,[t,e,r],this.transform),this}rotate(t,e,r){return n._E.rotateX(this.transform,t/180*Math.PI,this.transform),n._E.rotateY(this.transform,e/180*Math.PI,this.transform),n._E.rotateZ(this.transform,r/180*Math.PI,this.transform),this}scale(t,e,r){return n._E.scale(this.transform,[t,e,r],this.transform),this}scaleBy(t){return this.scale(t,t,t)}get position(){return[...this.transform].slice(12,15)}lerp(t,e){let r=this.position;const s=n.R3.lerp(r,t,e);n.R3.sub(s,r,r),this.translate(...r)}}class a{name;asset;get transform(){return this._getTransform()}_getTransform;constructor(t,e,r){this.name=t,this.asset=e,this._getTransform=r}}},54:(t,e,r)=>{r.d(e,{Fw:()=>o,GL:()=>n,ug:()=>a,v:()=>i,wy:()=>s});const n=window.location.pathname;function s(t){const e=document.createElement("div");return e.style.display="flex",e.style.flexDirection="column",e.style.margin=t??"",e}function i(t){const e=document.createElement("div");return t&&(e.id=t),e.style.display="flex",e.style.gap="10px",e}function a(t,e,r,n=!0){let[s,i]=function(t,e=!0){const r=document.createElement("input");r.type="checkbox",r.id=t,r.name=r.id,r.checked=e;const n=document.createElement("label");return n.htmlFor=r.id,n.textContent=r.id,[r,n]}(e,n);return t.appendChild(s),t.appendChild(i),s.addEventListener("change",(()=>r(s))),s}function o(t,e,r,n,s=0){let i="number"==typeof s?s:Math.max(0,[...e].indexOf(s)),o=new Array,u=i;for(const[s,l]of[...e].entries()){let e=a(t,r(l)??"",(t=>{u!=s?(o[u].checked=!1,u=s,n(s)):(o[i].checked=!0,u!=i&&(u=i,n(u)))}),i==s);o.push(e)}}},607:(t,e,r)=>{r.a(t,(async(t,e)=>{try{var n=r(242),s=r(54),i=r(90),a=r(941),o=r(865),u=r(145),l=r(540);const c=[{name:"Simple",build:()=>new o.O},{name:"NormaMap",build:()=>new i.N},{name:"ShadowMap",build:()=>new a.R},{name:"TargetLight",build:()=>new l.m},{name:"Sphere",build:()=>new u.y}],h=document.querySelector("canvas"),d=new n.D(c[0].build(),h);async function p(t){d.scene=t.build(),await d.run(),f(t)}function f(t){const e="uiContainer";let r=document.querySelector(`#${e}`);r?r.innerHTML="":(r=(0,s.v)(e),document.body.insertBefore(r,h.nextSibling));const n=r.appendChild((0,s.wy)()),i=n.appendChild((0,s.wy)()),a=n.appendChild((0,s.wy)());d.scene.attachUi(i),_(a);const o=r.appendChild((0,s.wy)("0px 0px 0px 200px"));o.innerHTML='<h4 style="margin:5px">Scenes</h4>',m(o.appendChild((0,s.wy)()),t)}function m(t,e){const r=(0,s.v)();t.appendChild(r),(0,s.Fw)(r,c,(t=>t.name),(async t=>{await p(c[t])}),e)}function _(t){let e=new Array;if(d.scene.lights.filter((t=>t.renderShadowMap)).forEach(((r,n)=>{const i=(0,s.v)();t.appendChild(i),(0,s.ug)(i,`ShadowMap${n}`,(t=>{r.showShadows=t.checked}));let a=(0,s.ug)(i,"show",(t=>{e.filter((e=>e!=t)).forEach((t=>t.checked=!1)),d.drawnShadowMapId=t.checked?n:-1}),!1);e.push(a)})),d.renderer.length<2)return;const r=(0,s.v)();t.appendChild(r),(0,s.Fw)(r,d.renderer,(t=>t.name),(t=>{d.setRendererByIndex(t)}))}await p(c[c.length-1]),e()}catch(g){e(g)}}),1)},518:(t,e,r)=>{r.d(e,{n7:()=>p,CG:()=>d,qy:()=>_,vG:()=>m,xE:()=>f});var n=r(838);class s{name;vertices;vertexCount;vertexBufferLayout;topology;material;boundingBox;normalData;normalBufferLayout;vertexBuffer=null;normalBuffer=null;constructor(t,e,r,s,i,a=new n.O,o,u=null,l=null){this.name=t,this.vertices=e,this.vertexCount=r,this.vertexBufferLayout=s,this.topology=i,this.material=a,this.boundingBox=o,this.normalData=u,this.normalBufferLayout=l}writeMeshToGpu(t){if(null!=this.vertexBuffer)return;const e={label:`${this.name} vertex buffer`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};if(this.vertexBuffer=t.createBuffer(e),t.queue.writeBuffer(this.vertexBuffer,0,this.vertices,0),null==this.normalData)return;const r={label:`${this.name} normal buffer`,size:this.normalData.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this.normalBuffer=t.createBuffer(r),t.queue.writeBuffer(this.normalBuffer,0,this.normalData,0)}}var i=r(284),a=r(416);const o="triangle-list",u={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]};function l(t=30,e=!1,r=.7,n=1.5,s=3){if(t<3||r>=n)throw new RangeError("arguments not valid");t+=1;let i=[],o=s/2;const u=[0,0,0];for(let e=0;e<t;e++)i.push([c(n,360*e/(t-1),o,u),c(n,360*e/(t-1),-o,u),c(r,360*e/(t-1),-o,u),c(r,360*e/(t-1),o,u)]);let l,h,d,p,f,m,_,g,w=[],y=[],v=[];for(let o=0;o<t-1;o++){l=i[o][0],h=i[o][1],d=i[o][2],p=i[o][3],f=i[o+1][0],m=i[o+1][1],_=i[o+1][2],g=i[o+1][3],w.push(l[0],l[1],l[2],f[0],f[1],f[2],g[0],g[1],g[2],g[0],g[1],g[2],p[0],p[1],p[2],l[0],l[1],l[2],h[0],h[1],h[2],d[0],d[1],d[2],_[0],_[1],_[2],_[0],_[1],_[2],m[0],m[1],m[2],h[0],h[1],h[2],l[0],l[1],l[2],h[0],h[1],h[2],m[0],m[1],m[2],m[0],m[1],m[2],f[0],f[1],f[2],l[0],l[1],l[2],d[0],d[1],d[2],p[0],p[1],p[2],g[0],g[1],g[2],g[0],g[1],g[2],_[0],_[1],_[2],d[0],d[1],d[2]);let u=[l,f,g,g,p,l];for(let t of u){let e=[t[0],t[2]];e=a.K4.divScalar(e,n),e=a.K4.addScaled(a.K4.create(.5,.5),e,.5),v.push(e)}u=[h,d,_,_,m,h];for(let t of u){let e=[t[2],t[0]];e=a.K4.divScalar(e,n),e=a.K4.addScaled(a.K4.create(.5,.5),e,.5),v.push(e)}const c=e=>Math.sqrt(2*e*e*(1-Math.cos(2*Math.PI/t))),x=1*c(n)/s;let b=o*x,k=(o+1)*x;v.push([b,0]),v.push([b,1]),v.push([k,1]),v.push([k,1]),v.push([k,0]),v.push([b,0]);const M=1*c(r)/s;if(k=-o*M,b=-(o+1)*M,v.push([k,1]),v.push([k,0]),v.push([b,0]),v.push([b,0]),v.push([b,1]),v.push([k,1]),y.push(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0),e){let t=a.R3.normalize([l[0],0,l[2]]),e=a.R3.normalize([m[0],0,m[2]]),r=a.R3.mulScalar(t,-1),n=a.R3.mulScalar(e,-1);y.push(...t),y.push(...t),y.push(...e),y.push(...e),y.push(...e),y.push(...t),y.push(...r),y.push(...r),y.push(...n),y.push(...n),y.push(...n),y.push(...r)}else{let t=[l[0]-f[0],0,l[2]-f[2]],e=a.R3.normalize([t[2],0,-t[0]]),r=a.R3.mulScalar(e,-1);for(let t=0;t<6;t++)y.push(...e);for(let t=0;t<6;t++)y.push(...r)}}let x=[];for(let t=0;t<w.length;t+=3)x.push(...w.slice(t,t+3)),x.push(1,1,0,0,1),x.push(...v[t/3]),x.push(...y.slice(t,t+3)),x.push(1);return new Float32Array(x)}function c(t,e,r,n=[0,0,0]){let s=Math.sin(e*Math.PI/180),i=Math.cos(e*Math.PI/180);return a.R3.fromValues(t*i+n[0],r+n[1],-t*s+n[2])}var h=r(149);function d(t){const e=i.Vk,r=i.qw,a=(0,h.P)(e,r);return new s("cube_asset",e,r,i.sY,i.nk,t??new n.O,{min:[-1,-1,-1],max:[1,1,1]},a,h.a)}function p(t){return new s("cube_asset",i.Vk,i.qw,i.sY,i.nk,t??new n.O,{min:[-1,-1,-1],max:[1,1,1]})}function f(t,e=!0,r){return new s("sphere_asset",function(t,e=!0,r=1,n=[50,50,50,0]){const s=function(t,e=!0,r=1){const n=[],s=[],i=[];for(let o=0;o<t;o++){const u=o/t*2*Math.PI,l=(o+1)/t*2*Math.PI;for(let c=0;c<t;c++){const h=c/t*Math.PI,d=(c+1)/t*Math.PI,p=[r*Math.sin(h)*Math.cos(u),r*Math.cos(h),-r*Math.sin(h)*Math.sin(u)],f=[r*Math.sin(h)*Math.cos(l),r*Math.cos(h),-r*Math.sin(h)*Math.sin(l)],m=[r*Math.sin(d)*Math.cos(l),r*Math.cos(d),-r*Math.sin(d)*Math.sin(l)],_=[r*Math.sin(d)*Math.cos(u),r*Math.cos(d),-r*Math.sin(d)*Math.sin(u)];n.push(...m,1,...f,1,...p,1),n.push(...p,1,..._,1,...m,1);const g=a.R3.normalize;if(e)s.push(...g(m),0,...g(f),0,...g(p),0),s.push(...g(p),0,...g(_),0,...g(m),0);else{let t=g(a.R3.mulScalar(a.R3.add(a.R3.add(m,f),p),1/3)),e=g(a.R3.mulScalar(a.R3.add(a.R3.add(p,_),m),1/3));s.push(...t,0,...t,0,...t,0),s.push(...e,0,...e,0,...e,0)}const w=o/t,y=(o+1)/t,v=c/t,x=(c+1)/t;i.push(w,v,y,v,y,x),i.push(y,x,w,x,w,v)}}return{vertices:n,normals:s,uvs:i}}(t,e,r);let i=s.vertices.length/4;const o=Array(i).fill([...n]).flat(),u=function(t,...e){if(t.length!=e.length)throw new RangeError("strides lenght has to equal the amount of datasets");let r=e[0].length/t[0];e.forEach(((e,n)=>{if(e.length!=r*t[n])throw new Error(`dataset ${n} has size ${e.length} but should have ${r*t[n]}`)}));const n=[];for(let s=0;s<r;s++)t.forEach(((t,r)=>{n.push(...e[r].slice(s*t,s*t+t))}));return n}([4,4,2,4],s.vertices,o,s.uvs,s.normals);return new Float32Array(u)}(t,e),6*t**2,i.sY,i.nk,r??new n.O,{min:[-1,-1,-1],max:[1,1,1]})}function m(t=5,e=!1,r){const[a,o,c]=[.7,1.5,3],d=l(t,e,a,o,c),p=24*t,f=(0,h.P)(d,p);return new s("cylinder_asset",d,p,u,i.nk,r??new n.O,{min:[-1,-1,-1],max:[1,1,1]},f,h.a)}function _(t=5,e=!1,r){const[i,a,c]=[.7,1.5,3];return new s("cylinder_asset",l(t,e,i,a,c),24*t,u,o,r??new n.O,{min:[-a,-c/2,-a],max:[a,c/2,a]})}},284:(t,e,r)=>{r.d(e,{Vk:()=>a,nk:()=>n,qw:()=>s,sY:()=>i});const n="triangle-list",s=36,i={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1])},149:(t,e,r)=>{r.d(e,{P:()=>i,a:()=>s});var n=r(416);const s={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:4},{format:"float32x3",offset:12,shaderLocation:5}]};function i(t,e){const r=[],n=14,s=t=>[t.slice(0,3),t.slice(8,10)];for(let i=0;i<e;i++){const[e,o]=s(t.slice(i*n,(i+1)*n));i++;const[u,l]=s(t.slice(i*n,(i+1)*n));i++;const[c,h]=s(t.slice(i*n,(i+1)*n)),[d,p]=a(e,u,c,o,l,h);for(let t=0;t<3;t++)r.push(...d),r.push(...p)}return new Float32Array(r)}function a(t,e,r,s,i,a,o=!0){const u=n.R3.subtract(e,t),l=n.R3.subtract(r,t),c=n.K4.subtract(i,s),h=n.K4.subtract(a,s),d=1/(c[0]*h[1]-c[1]*h[0]);return[n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,h[1]),n.R3.mulScalar(l,-c[1])),d),n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,-h[0]),n.R3.mulScalar(l,c[0])),o?-d:d)]}},90:(t,e,r)=>{r.d(e,{N:()=>c});var n=r(218),s=r(877),i=r(838),a=r(806),o=r(54),u=r(518),l=r(684);class c extends l.D{constructor(){super(),this.camera=new n.t({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new s._({type:s.v.Point,position:[-30,5,0]}),this.lights[1]=new s._({type:s.v.Point,position:[30,5,0]}),this.lights[2]=new s._({type:s.v.Direct,direction:[-1,-1,-1]}),this.lights.forEach((t=>t.intensity=.4));let t=(0,u.CG)(new i.O({diffuseMapPath:`../${o.GL}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${o.GL}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`})),e=new a.S("Cube01",t).translate(-30,0,0).scale(10,10,10);this.models.push(e);let r=(0,u.vG)(100,!0,new i.O({diffuseMapPath:`../${o.GL}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${o.GL}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`,tiling:{u:2.25,v:2}})),l=new a.S("Cube01",r).translate(30,0,0).scale(10,10/1.125,10);this.models.push(l)}currentTime=0;startPositions=[];update(t){if(this.isAnimated){0==this.startPositions.length&&this.lights.forEach((t=>this.startPositions.push(t.position))),this.currentTime+=t;for(let t=0;t<this.lights.length-1;t++)this.lights[t].position=[this.startPositions[t][0]+25*Math.sin(this.currentTime),this.startPositions[t][1],this.startPositions[t][2]+25*Math.cos(this.currentTime)]}}}},941:(t,e,r)=>{r.d(e,{R:()=>h});var n=r(416),s=r(218),i=r(877),a=r(838),o=r(806),u=r(54),l=r(518),c=r(684);class h extends c.D{constructor(){super(),this.isAnimated=!1,this.camera=new s.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i._({type:i.v.Direct,direction:[-2,-1,0]})),this.lights.push(new i._({type:i.v.Direct,direction:[0,-1,1]})),this.lights.push(new i._({type:i.v.Point,position:[50,16,0]})),this.lights.forEach((t=>{t.intensity=1/this.lights.length}));let t=(0,l.n7)(new a.O({diffuseColor:[20,20,20,1]})),e=new o.S("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(e);let r=(0,l.n7)(new a.O({diffuseColor:[235/255,201/255,52/255,1]})),n=new o.S("Cube01",r).rotate(0,45,0).translate(0,10,0).scaleBy(10);this.models.push(n);let c=(0,l.qy)(5,!1,new a.O({diffuseColor:[0,0,.8,1]})),h=new o.S("Cylinder01",c).translate(0,10,-30).scaleBy(20/3);this.models.push(h);let d=(0,l.CG)(new a.O({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${u.GL}/assets/spiral_normal.png`})),p=new o.S("Cube01",d).rotate(0,30,0).translate(25,8,0).scaleBy(8);this.models.push(p);let f=new o.S("Cube01",r).translate(50,7,0).scaleBy(7);this.models.push(f)}update(t){this.isAnimated&&(this.lights[0].direction=n.R3.lerp(this.lights[0].direction,[0,-1,2],.2*t))}}},865:(t,e,r)=>{r.d(e,{O:()=>c});var n=r(806),s=r(218),i=r(877),a=r(518),o=r(838),u=r(54),l=r(684);class c extends l.D{isAnimated;constructor(t=!0){super(),this.isAnimated=t,this.camera=new s.t({position:[0,60,10],movementSpeed:100,target:[0,40,0]}),this.lights[0]=new i._({type:i.v.Point,position:[0,20,-25]}),this.lights[1]=new i._({type:i.v.Direct,direction:[-1,-1,0]}),this.lights.forEach((t=>t.intensity=.7));let e=(0,a.n7)(new o.O({diffuseColor:[0,1,0,1],specularColor:[1,0,0,1]})),r=(0,a.qy)(100,!0,new o.O({diffuseMapPath:`../${u.GL}/assets/uv_dist.jpg`,shininess:50})),l=(0,a.qy)(5,!1,new o.O({diffuseColor:[0,0,.8,1]})),c=new n.S("Cube01",e).translate(0,0,-50).rotate(0,30,0).scale(10,10,10);this.models.push(c);let h=new n.S("Floor",e).translate(0,-25,0).scale(100,1,100);this.models.push(h);let d=new n.S("Cylinder01",r).translate(20,0,-20).rotate(0,0,45).scale(10,10,10);this.models.push(d);let p=new n.S("Cylinder02",l).translate(-20,0,-20).scale(10,10,10);this.models.push(p)}currentTime=0;centerPos;update(t){this.isAnimated&&(this.centerPos=this.centerPos??this.lights[0].position,this.currentTime+=t,this.lights[0].position=[this.centerPos[0]+25*Math.sin(this.currentTime),this.centerPos[1],this.centerPos[2]+25*Math.cos(this.currentTime)])}}},145:(t,e,r)=>{r.d(e,{y:()=>l});var n=r(218),s=r(877),i=r(838),a=r(806),o=r(518),u=r(684);class l extends u.D{constructor(){super(),this.isAnimated=!1,this.camera=new n.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new s._({type:s.v.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.push(new s._({type:s.v.Target,position:[-50,30,-180],target:[-50,0,0],coneAngleDeg:40})),this.lights.push(new s._({type:s.v.Direct,direction:[1,-1,0]})),this.lights.forEach((t=>{t.intensity=1/this.lights.length}));let t=(0,o.n7)(new i.O({diffuseColor:[20,20,20,1]})),e=new a.S("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(e);let r=(0,o.xE)(128,!0,new i.O({mode:i.J.Default,diffuseColor:[1,1,0,0]})),u=new a.S("Sphere01",r).translate(0,15,0).scaleBy(10);this.models.push(u)}start=[0,15,0];throttle=0;update(t){this.isAnimated&&this.models[1].lerp([80,15,0],.05*t)}}},540:(t,e,r)=>{r.d(e,{m:()=>h});var n=r(416),s=r(218),i=r(877),a=r(838),o=r(806),u=r(54),l=r(518),c=r(684);class h extends c.D{constructor(){super(),this.isAnimated=!1,this.camera=new s.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i._({type:i.v.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.push(new i._({type:i.v.Target,position:[-50,30,-180],target:[-50,0,0],coneAngleDeg:40})),this.lights.forEach((t=>{t.intensity=1/this.lights.length}));let t=(0,l.n7)(new a.O({diffuseColor:[20,20,20,1]})),e=new o.S("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(e);let r=(0,l.n7)(new a.O({diffuseColor:[235/255,201/255,52/255,1]})),n=new o.S("Cube01",r).rotate(0,45,0).translate(-50,10,0).scaleBy(10);this.models.push(n);let c=(0,l.qy)(5,!1,new a.O({diffuseColor:[0,0,.8,1]})),h=new o.S("Cylinder01",c).translate(-50,10,-30).scaleBy(20/3);this.models.push(h);let d=(0,l.CG)(new a.O({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${u.GL}/assets/spiral_normal.png`})),p=new o.S("Cube01",d).rotate(0,30,0).translate(25,18,0).scaleBy(8);this.models.push(p);let f=new o.S("Cube01",r).translate(50,7,0).scaleBy(7);this.models.push(f)}update(t){this.isAnimated&&(this.lights[0].position=n.R3.lerp(this.lights[0].position,[50,40,-70],.2*t),this.lights[1].coneAngleDeg=n.K4.lerp(n.K4.fromValues(this.lights[1].coneAngleDeg,0),n.K4.fromValues(22,0),.1*t)[0])}}},684:(t,e,r)=>{r.d(e,{D:()=>o});var n=r(218),s=r(877);class i{isAnimated=!0;camera=new n.t;lights=[new s._];models=[];constructor(t){t&&(this.isAnimated=t.isAnimated??!0,this.camera=t.camera??this.camera)}update(t){}attachUi(t){}}var a=r(54);class o extends i{uiContainer;attachUi(t){let e=(0,a.wy)();t.appendChild(e),this.uiContainer=e;const r=(0,a.v)();e.appendChild(r);for(let[t,e]of this.lights.entries())(0,a.ug)(r,`${s.v[e.type]}Light_${t.toString().padStart(2,"0")}`,(t=>{e.isOn=t.checked}));(0,a.ug)(r,"isAnimated",(t=>{this.isAnimated=t.checked}),this.isAnimated);const n=(0,a.v)();e.appendChild(n),(0,a.ug)(n,"ambient",(t=>{for(let e of this.lights.values())e.disableAmbientColor=!t.checked})),(0,a.ug)(n,"diffuse",(t=>{for(let e of this.lights.values())e.disableDiffuseColor=!t.checked})),(0,a.ug)(n,"specular",(t=>{for(let e of this.lights.values())e.disableSpecularColor=!t.checked}));const i=(0,a.v)();this.uiContainer.appendChild(i),(0,a.ug)(i,"normal_mapping",(t=>{for(let e of this.models)e.asset.material.disableNormalMap=!t.checked}))}}},416:(t,e,r)=>{r.d(e,{K4:()=>E,R3:()=>et,_E:()=>gt,vh:()=>Vt});let n=1e-6,s=Float32Array;function i(t=0,e=0){const r=new s(2);return void 0!==t&&(r[0]=t,void 0!==e&&(r[1]=e)),r}const a=i;function o(t,e,r){return(r=r||new s(2))[0]=t[0]-e[0],r[1]=t[1]-e[1],r}const u=o;function l(t,e,r){return(r=r||new s(2))[0]=t[0]*e,r[1]=t[1]*e,r}const c=l;function h(t,e){return(e=e||new s(2))[0]=1/t[0],e[1]=1/t[1],e}const d=h;function p(t,e){return t[0]*e[0]+t[1]*e[1]}function f(t){const e=t[0],r=t[1];return Math.sqrt(e*e+r*r)}const m=f;function _(t){const e=t[0],r=t[1];return e*e+r*r}const g=_;function w(t,e){const r=t[0]-e[0],n=t[1]-e[1];return Math.sqrt(r*r+n*n)}const y=w;function v(t,e){const r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n}const x=v;function b(t,e){return(e=e||new s(2))[0]=t[0],e[1]=t[1],e}const k=b;function M(t,e,r){return(r=r||new s(2))[0]=t[0]*e[0],r[1]=t[1]*e[1],r}const S=M;function T(t,e,r){return(r=r||new s(2))[0]=t[0]/e[0],r[1]=t[1]/e[1],r}const A=T;var E=Object.freeze({__proto__:null,create:i,setDefaultType:function(t){const e=s;return s=t,e},fromValues:a,set:function(t,e,r){return(r=r||new s(2))[0]=t,r[1]=e,r},ceil:function(t,e){return(e=e||new s(2))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e},floor:function(t,e){return(e=e||new s(2))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e},round:function(t,e){return(e=e||new s(2))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e},clamp:function(t,e=0,r=1,n){return(n=n||new s(2))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n},add:function(t,e,r){return(r=r||new s(2))[0]=t[0]+e[0],r[1]=t[1]+e[1],r},addScaled:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[0],i=t[1],a=Math.sqrt(r*r+n*n)*Math.sqrt(s*s+i*i),o=a&&p(t,e)/a;return Math.acos(o)},subtract:o,sub:u,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},lerp:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n},lerpV:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n},max:function(t,e,r){return(r=r||new s(2))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r},min:function(t,e,r){return(r=r||new s(2))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r},mulScalar:l,scale:c,divScalar:function(t,e,r){return(r=r||new s(2))[0]=t[0]/e,r[1]=t[1]/e,r},inverse:h,invert:d,cross:function(t,e,r){r=r||new s(3);const n=t[0]*e[1]-t[1]*e[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:p,length:f,len:m,lengthSq:_,lenSq:g,distance:w,dist:y,distanceSq:v,distSq:x,normalize:function(t,e){e=e||new s(2);const r=t[0],n=t[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(e[0]=r/i,e[1]=n/i):(e[0]=0,e[1]=0),e},negate:function(t,e){return(e=e||new s(2))[0]=-t[0],e[1]=-t[1],e},copy:b,clone:k,multiply:M,mul:S,divide:T,div:A,random:function(t=1,e){e=e||new s(2);const r=2*Math.random()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e},zero:function(t){return(t=t||new s(2))[0]=0,t[1]=0,t},transformMat4:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=n*e[0]+i*e[4]+e[12],r[1]=n*e[1]+i*e[5]+e[13],r},transformMat3:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=e[0]*n+e[4]*i+e[8],r[1]=e[1]*n+e[5]*i+e[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let P=Float32Array;function C(t,e,r){const n=new P(3);return void 0!==t&&(n[0]=t,void 0!==e&&(n[1]=e,void 0!==r&&(n[2]=r))),n}const B=C;function z(t,e,r){return(r=r||new P(3))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r}const R=z;function N(t,e,r){return(r=r||new P(3))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r}const U=N;function q(t,e){return(e=e||new P(3))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}const F=q;function G(t,e,r){r=r||new P(3);const n=t[2]*e[0]-t[0]*e[2],s=t[0]*e[1]-t[1]*e[0];return r[0]=t[1]*e[2]-t[2]*e[1],r[1]=n,r[2]=s,r}function I(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function L(t){const e=t[0],r=t[1],n=t[2];return Math.sqrt(e*e+r*r+n*n)}const V=L;function D(t){const e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}const O=D;function j(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}const $=j;function Y(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}const H=Y;function X(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=Math.sqrt(r*r+n*n+s*s);return i>1e-5?(e[0]=r/i,e[1]=n/i,e[2]=s/i):(e[0]=0,e[1]=0,e[2]=0),e}function K(t,e){return(e=e||new P(3))[0]=t[0],e[1]=t[1],e[2]=t[2],e}const W=K;function Q(t,e,r){return(r=r||new P(3))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r}const Z=Q;function J(t,e,r){return(r=r||new P(3))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r}const tt=J;var et=Object.freeze({__proto__:null,create:C,setDefaultType:function(t){const e=P;return P=t,e},fromValues:B,set:function(t,e,r,n){return(n=n||new P(3))[0]=t,n[1]=e,n[2]=r,n},ceil:function(t,e){return(e=e||new P(3))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e},floor:function(t,e){return(e=e||new P(3))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e},round:function(t,e){return(e=e||new P(3))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e},clamp:function(t,e=0,r=1,n){return(n=n||new P(3))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n},add:function(t,e,r){return(r=r||new P(3))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r},addScaled:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[2],i=t[0],a=t[1],o=t[2],u=Math.sqrt(r*r+n*n+s*s)*Math.sqrt(i*i+a*a+o*o),l=u&&I(t,e)/u;return Math.acos(l)},subtract:z,sub:R,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},lerp:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n},lerpV:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n},max:function(t,e,r){return(r=r||new P(3))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r},min:function(t,e,r){return(r=r||new P(3))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r},mulScalar:N,scale:U,divScalar:function(t,e,r){return(r=r||new P(3))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r},inverse:q,invert:F,cross:G,dot:I,length:L,len:V,lengthSq:D,lenSq:O,distance:j,dist:$,distanceSq:Y,distSq:H,normalize:X,negate:function(t,e){return(e=e||new P(3))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},copy:K,clone:W,multiply:Q,mul:Z,divide:J,div:tt,random:function(t=1,e){e=e||new P(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,s=Math.sqrt(1-n*n)*t;return e[0]=Math.cos(r)*s,e[1]=Math.sin(r)*s,e[2]=n*t,e},zero:function(t){return(t=t||new P(3))[0]=0,t[1]=0,t[2]=0,t},transformMat4:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2],a=e[3]*n+e[7]*s+e[11]*i+e[15]||1;return r[0]=(e[0]*n+e[4]*s+e[8]*i+e[12])/a,r[1]=(e[1]*n+e[5]*s+e[9]*i+e[13])/a,r[2]=(e[2]*n+e[6]*s+e[10]*i+e[14])/a,r},transformMat4Upper3x3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformMat3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformQuat:function(t,e,r){r=r||new P(3);const n=e[0],s=e[1],i=e[2],a=2*e[3],o=t[0],u=t[1],l=t[2],c=s*l-i*u,h=i*o-n*l,d=n*u-s*o;return r[0]=o+c*a+2*(s*d-i*h),r[1]=u+h*a+2*(i*c-n*d),r[2]=l+d*a+2*(n*h-s*c),r},getTranslation:function(t,e){return(e=e||new P(3))[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||new P(3))[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},getScaling:function(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+l*l+c*c),e}});let rt=Float32Array;function nt(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}const st=nt;function it(t){return(t=t||new rt(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function at(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],l=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],m=t[13],_=t[14],g=t[15],w=d*g,y=_*p,v=u*g,x=_*l,b=u*p,k=d*l,M=s*g,S=_*i,T=s*p,A=d*i,E=s*l,P=u*i,C=c*m,B=f*h,z=a*m,R=f*o,N=a*h,U=c*o,q=r*m,F=f*n,G=r*h,I=c*n,L=r*o,V=a*n,D=w*o+x*h+b*m-(y*o+v*h+k*m),O=y*n+M*h+A*m-(w*n+S*h+T*m),j=v*n+S*o+E*m-(x*n+M*o+P*m),$=k*n+T*o+P*h-(b*n+A*o+E*h),Y=1/(r*D+a*O+c*j+f*$);return e[0]=Y*D,e[1]=Y*O,e[2]=Y*j,e[3]=Y*$,e[4]=Y*(y*a+v*c+k*f-(w*a+x*c+b*f)),e[5]=Y*(w*r+S*c+T*f-(y*r+M*c+A*f)),e[6]=Y*(x*r+M*a+P*f-(v*r+S*a+E*f)),e[7]=Y*(b*r+A*a+E*c-(k*r+T*a+P*c)),e[8]=Y*(C*l+R*p+N*g-(B*l+z*p+U*g)),e[9]=Y*(B*i+q*p+I*g-(C*i+F*p+G*g)),e[10]=Y*(z*i+F*l+L*g-(R*i+q*l+V*g)),e[11]=Y*(U*i+G*l+V*p-(N*i+I*l+L*p)),e[12]=Y*(z*d+U*_+B*u-(N*_+C*u+R*d)),e[13]=Y*(G*_+C*s+F*d-(q*d+I*_+B*s)),e[14]=Y*(q*u+V*_+R*s-(L*_+z*s+F*u)),e[15]=Y*(L*d+N*s+I*u-(G*u+V*d+U*s)),e}const ot=at;function ut(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],l=t[6],c=t[7],h=t[8],d=t[9],p=t[10],f=t[11],m=t[12],_=t[13],g=t[14],w=t[15],y=e[0],v=e[1],x=e[2],b=e[3],k=e[4],M=e[5],S=e[6],T=e[7],A=e[8],E=e[9],P=e[10],C=e[11],B=e[12],z=e[13],R=e[14],N=e[15];return r[0]=n*y+o*v+h*x+m*b,r[1]=s*y+u*v+d*x+_*b,r[2]=i*y+l*v+p*x+g*b,r[3]=a*y+c*v+f*x+w*b,r[4]=n*k+o*M+h*S+m*T,r[5]=s*k+u*M+d*S+_*T,r[6]=i*k+l*M+p*S+g*T,r[7]=a*k+c*M+f*S+w*T,r[8]=n*A+o*E+h*P+m*C,r[9]=s*A+u*E+d*P+_*C,r[10]=i*A+l*E+p*P+g*C,r[11]=a*A+c*E+f*P+w*C,r[12]=n*B+o*z+h*R+m*N,r[13]=s*B+u*z+d*R+_*N,r[14]=i*B+l*z+p*R+g*N,r[15]=a*B+c*z+f*R+w*N,r}const lt=ut;let ct,ht,dt;function pt(t,e,r){r=r||new rt(16);let n=t[0],s=t[1],i=t[2];const a=Math.sqrt(n*n+s*s+i*i);n/=a,s/=a,i/=a;const o=n*n,u=s*s,l=i*i,c=Math.cos(e),h=Math.sin(e),d=1-c;return r[0]=o+(1-o)*c,r[1]=n*s*d+i*h,r[2]=n*i*d-s*h,r[3]=0,r[4]=n*s*d-i*h,r[5]=u+(1-u)*c,r[6]=s*i*d+n*h,r[7]=0,r[8]=n*i*d+s*h,r[9]=s*i*d-n*h,r[10]=l+(1-l)*c,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const ft=pt;function mt(t,e,r,n){n=n||new rt(16);let s=e[0],i=e[1],a=e[2];const o=Math.sqrt(s*s+i*i+a*a);s/=o,i/=o,a/=o;const u=s*s,l=i*i,c=a*a,h=Math.cos(r),d=Math.sin(r),p=1-h,f=u+(1-u)*h,m=s*i*p+a*d,_=s*a*p-i*d,g=s*i*p-a*d,w=l+(1-l)*h,y=i*a*p+s*d,v=s*a*p+i*d,x=i*a*p-s*d,b=c+(1-c)*h,k=t[0],M=t[1],S=t[2],T=t[3],A=t[4],E=t[5],P=t[6],C=t[7],B=t[8],z=t[9],R=t[10],N=t[11];return n[0]=f*k+m*A+_*B,n[1]=f*M+m*E+_*z,n[2]=f*S+m*P+_*R,n[3]=f*T+m*C+_*N,n[4]=g*k+w*A+y*B,n[5]=g*M+w*E+y*z,n[6]=g*S+w*P+y*R,n[7]=g*T+w*C+y*N,n[8]=v*k+x*A+b*B,n[9]=v*M+x*E+b*z,n[10]=v*S+x*P+b*R,n[11]=v*T+x*C+b*N,t!==n&&(n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n}const _t=mt;var gt=Object.freeze({__proto__:null,setDefaultType:function(t){const e=rt;return rt=t,e},create:function(t,e,r,n,s,i,a,o,u,l,c,h,d,p,f,m){const _=new rt(16);return void 0!==t&&(_[0]=t,void 0!==e&&(_[1]=e,void 0!==r&&(_[2]=r,void 0!==n&&(_[3]=n,void 0!==s&&(_[4]=s,void 0!==i&&(_[5]=i,void 0!==a&&(_[6]=a,void 0!==o&&(_[7]=o,void 0!==u&&(_[8]=u,void 0!==l&&(_[9]=l,void 0!==c&&(_[10]=c,void 0!==h&&(_[11]=h,void 0!==d&&(_[12]=d,void 0!==p&&(_[13]=p,void 0!==f&&(_[14]=f,void 0!==m&&(_[15]=m)))))))))))))))),_},set:function(t,e,r,n,s,i,a,o,u,l,c,h,d,p,f,m,_){return(_=_||new rt(16))[0]=t,_[1]=e,_[2]=r,_[3]=n,_[4]=s,_[5]=i,_[6]=a,_[7]=o,_[8]=u,_[9]=l,_[10]=c,_[11]=h,_[12]=d,_[13]=p,_[14]=f,_[15]=m,_},fromMat3:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=0,e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=0,e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},fromQuat:function(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=r+r,o=n+n,u=s+s,l=r*a,c=n*a,h=n*o,d=s*a,p=s*o,f=s*u,m=i*a,_=i*o,g=i*u;return e[0]=1-h-f,e[1]=c+g,e[2]=d-_,e[3]=0,e[4]=c-g,e[5]=1-l-f,e[6]=p+m,e[7]=0,e[8]=d+_,e[9]=p-m,e[10]=1-l-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},negate:function(t,e){return(e=e||new rt(16))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=-t[7],e[8]=-t[8],e[9]=-t[9],e[10]=-t[10],e[11]=-t[11],e[12]=-t[12],e[13]=-t[13],e[14]=-t[14],e[15]=-t[15],e},copy:nt,clone:st,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n&&Math.abs(t[4]-e[4])<n&&Math.abs(t[5]-e[5])<n&&Math.abs(t[6]-e[6])<n&&Math.abs(t[7]-e[7])<n&&Math.abs(t[8]-e[8])<n&&Math.abs(t[9]-e[9])<n&&Math.abs(t[10]-e[10])<n&&Math.abs(t[11]-e[11])<n&&Math.abs(t[12]-e[12])<n&&Math.abs(t[13]-e[13])<n&&Math.abs(t[14]-e[14])<n&&Math.abs(t[15]-e[15])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},identity:it,transpose:function(t,e){if((e=e||new rt(16))===t){let r;return r=t[1],t[1]=t[4],t[4]=r,r=t[2],t[2]=t[8],t[8]=r,r=t[3],t[3]=t[12],t[12]=r,r=t[6],t[6]=t[9],t[9]=r,r=t[7],t[7]=t[13],t[13]=r,r=t[11],t[11]=t[14],t[14]=r,e}const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],l=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],m=t[13],_=t[14],g=t[15];return e[0]=r,e[1]=a,e[2]=c,e[3]=f,e[4]=n,e[5]=o,e[6]=h,e[7]=m,e[8]=s,e[9]=u,e[10]=d,e[11]=_,e[12]=i,e[13]=l,e[14]=p,e[15]=g,e},inverse:at,determinant:function(t){const e=t[0],r=t[1],n=t[2],s=t[3],i=t[4],a=t[5],o=t[6],u=t[7],l=t[8],c=t[9],h=t[10],d=t[11],p=t[12],f=t[13],m=t[14],_=t[15],g=h*_,w=m*d,y=o*_,v=m*u,x=o*d,b=h*u,k=n*_,M=m*s,S=n*d,T=h*s,A=n*u,E=o*s;return e*(g*a+v*c+x*f-(w*a+y*c+b*f))+i*(w*r+k*c+T*f-(g*r+M*c+S*f))+l*(y*r+M*a+A*f-(v*r+k*a+E*f))+p*(b*r+S*a+E*c-(x*r+T*a+A*c))},invert:ot,multiply:ut,mul:lt,setTranslation:function(t,e,r){return t!==(r=r||it())&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11]),r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},getTranslation:function(t,e){return(e=e||C())[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||C())[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},setAxis:function(t,e,r,n){n!==t&&(n=nt(t,n));const s=4*r;return n[s+0]=e[0],n[s+1]=e[1],n[s+2]=e[2],n},getScaling:function(t,e){e=e||C();const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+l*l+c*c),e},perspective:function(t,e,r,n,s){s=s||new rt(16);const i=Math.tan(.5*Math.PI-.5*t);if(s[0]=i/e,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,n===1/0)s[10]=-1,s[14]=-r;else{const t=1/(r-n);s[10]=n*t,s[14]=n*r*t}return s},ortho:function(t,e,r,n,s,i,a){return(a=a||new rt(16))[0]=2/(e-t),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(n-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(s-i),a[11]=0,a[12]=(e+t)/(t-e),a[13]=(n+r)/(r-n),a[14]=s/(s-i),a[15]=1,a},frustum:function(t,e,r,n,s,i,a){const o=e-t,u=n-r,l=s-i;return(a=a||new rt(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(t+e)/o,a[9]=(n+r)/u,a[10]=i/l,a[11]=-1,a[12]=0,a[13]=0,a[14]=s*i/l,a[15]=0,a},aim:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),X(z(e,t,dt),dt),X(G(r,dt,ct),ct),X(G(dt,ct,ht),ht),n[0]=ct[0],n[1]=ct[1],n[2]=ct[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},cameraAim:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),X(z(t,e,dt),dt),X(G(r,dt,ct),ct),X(G(dt,ct,ht),ht),n[0]=ct[0],n[1]=ct[1],n[2]=ct[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},lookAt:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),X(z(t,e,dt),dt),X(G(r,dt,ct),ct),X(G(dt,ct,ht),ht),n[0]=ct[0],n[1]=ht[0],n[2]=dt[0],n[3]=0,n[4]=ct[1],n[5]=ht[1],n[6]=dt[1],n[7]=0,n[8]=ct[2],n[9]=ht[2],n[10]=dt[2],n[11]=0,n[12]=-(ct[0]*t[0]+ct[1]*t[1]+ct[2]*t[2]),n[13]=-(ht[0]*t[0]+ht[1]*t[1]+ht[2]*t[2]),n[14]=-(dt[0]*t[0]+dt[1]*t[1]+dt[2]*t[2]),n[15]=1,n},translation:function(t,e){return(e=e||new rt(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},translate:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2],a=t[0],o=t[1],u=t[2],l=t[3],c=t[4],h=t[5],d=t[6],p=t[7],f=t[8],m=t[9],_=t[10],g=t[11],w=t[12],y=t[13],v=t[14],x=t[15];return t!==r&&(r[0]=a,r[1]=o,r[2]=u,r[3]=l,r[4]=c,r[5]=h,r[6]=d,r[7]=p,r[8]=f,r[9]=m,r[10]=_,r[11]=g),r[12]=a*n+c*s+f*i+w,r[13]=o*n+h*s+m*i+y,r[14]=u*n+d*s+_*i+v,r[15]=l*n+p*s+g*i+x,r},rotationX:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateX:function(t,e,r){r=r||new rt(16);const n=t[4],s=t[5],i=t[6],a=t[7],o=t[8],u=t[9],l=t[10],c=t[11],h=Math.cos(e),d=Math.sin(e);return r[4]=h*n+d*o,r[5]=h*s+d*u,r[6]=h*i+d*l,r[7]=h*a+d*c,r[8]=h*o-d*n,r[9]=h*u-d*s,r[10]=h*l-d*i,r[11]=h*c-d*a,t!==r&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationY:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateY:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[8],u=t[9],l=t[10],c=t[11],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n-d*o,r[1]=h*s-d*u,r[2]=h*i-d*l,r[3]=h*a-d*c,r[8]=h*o+d*n,r[9]=h*u+d*s,r[10]=h*l+d*i,r[11]=h*c+d*a,t!==r&&(r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationZ:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateZ:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],l=t[6],c=t[7],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n+d*o,r[1]=h*s+d*u,r[2]=h*i+d*l,r[3]=h*a+d*c,r[4]=h*o-d*n,r[5]=h*u-d*s,r[6]=h*l-d*i,r[7]=h*c-d*a,t!==r&&(r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},axisRotation:pt,rotation:ft,axisRotate:mt,rotate:_t,scaling:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},scale:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2];return r[0]=n*t[0],r[1]=n*t[1],r[2]=n*t[2],r[3]=n*t[3],r[4]=s*t[4],r[5]=s*t[5],r[6]=s*t[6],r[7]=s*t[7],r[8]=i*t[8],r[9]=i*t[9],r[10]=i*t[10],r[11]=i*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},uniformScaling:function(t,e){return(e=e||new rt(16))[0]=t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},uniformScale:function(t,e,r){return(r=r||new rt(16))[0]=e*t[0],r[1]=e*t[1],r[2]=e*t[2],r[3]=e*t[3],r[4]=e*t[4],r[5]=e*t[5],r[6]=e*t[6],r[7]=e*t[7],r[8]=e*t[8],r[9]=e*t[9],r[10]=e*t[10],r[11]=e*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r}});Float32Array;let wt=Float32Array;function yt(t,e,r,n){const s=new wt(4);return void 0!==t&&(s[0]=t,void 0!==e&&(s[1]=e,void 0!==r&&(s[2]=r,void 0!==n&&(s[3]=n)))),s}const vt=yt;function xt(t,e,r){return(r=r||new wt(4))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r[3]=t[3]-e[3],r}const bt=xt;function kt(t,e,r){return(r=r||new wt(4))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r[3]=t[3]*e,r}const Mt=kt;function St(t,e){return(e=e||new wt(4))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}const Tt=St;function At(t){const e=t[0],r=t[1],n=t[2],s=t[3];return Math.sqrt(e*e+r*r+n*n+s*s)}const Et=At;function Pt(t){const e=t[0],r=t[1],n=t[2],s=t[3];return e*e+r*r+n*n+s*s}const Ct=Pt;function Bt(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return Math.sqrt(r*r+n*n+s*s+i*i)}const zt=Bt;function Rt(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return r*r+n*n+s*s+i*i}const Nt=Rt;function Ut(t,e){return(e=e||new wt(4))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}const qt=Ut;function Ft(t,e,r){return(r=r||new wt(4))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r[3]=t[3]*e[3],r}const Gt=Ft;function It(t,e,r){return(r=r||new wt(4))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r[3]=t[3]/e[3],r}const Lt=It;var Vt=Object.freeze({__proto__:null,create:yt,setDefaultType:function(t){const e=wt;return wt=t,e},fromValues:vt,set:function(t,e,r,n,s){return(s=s||new wt(4))[0]=t,s[1]=e,s[2]=r,s[3]=n,s},ceil:function(t,e){return(e=e||new wt(4))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e},floor:function(t,e){return(e=e||new wt(4))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e},round:function(t,e){return(e=e||new wt(4))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e},clamp:function(t,e=0,r=1,n){return(n=n||new wt(4))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n[3]=Math.min(r,Math.max(e,t[3])),n},add:function(t,e,r){return(r=r||new wt(4))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r[3]=t[3]+e[3],r},addScaled:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n},subtract:xt,sub:bt,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},lerp:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n[3]=t[3]+r*(e[3]-t[3]),n},lerpV:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n[3]=t[3]+r[3]*(e[3]-t[3]),n},max:function(t,e,r){return(r=r||new wt(4))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r[3]=Math.max(t[3],e[3]),r},min:function(t,e,r){return(r=r||new wt(4))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r[3]=Math.min(t[3],e[3]),r},mulScalar:kt,scale:Mt,divScalar:function(t,e,r){return(r=r||new wt(4))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r[3]=t[3]/e,r},inverse:St,invert:Tt,dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},length:At,len:Et,lengthSq:Pt,lenSq:Ct,distance:Bt,dist:zt,distanceSq:Rt,distSq:Nt,normalize:function(t,e){e=e||new wt(4);const r=t[0],n=t[1],s=t[2],i=t[3],a=Math.sqrt(r*r+n*n+s*s+i*i);return a>1e-5?(e[0]=r/a,e[1]=n/a,e[2]=s/a,e[3]=i/a):(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e},negate:function(t,e){return(e=e||new wt(4))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},copy:Ut,clone:qt,multiply:Ft,mul:Gt,divide:It,div:Lt,zero:function(t){return(t=t||new wt(4))[0]=0,t[1]=0,t[2]=0,t[3]=0,t},transformMat4:function(t,e,r){r=r||new wt(4);const n=t[0],s=t[1],i=t[2],a=t[3];return r[0]=e[0]*n+e[4]*s+e[8]*i+e[12]*a,r[1]=e[1]*n+e[5]*s+e[9]*i+e[13]*a,r[2]=e[2]*n+e[6]*s+e[10]*i+e[14]*a,r[3]=e[3]*n+e[7]*s+e[11]*i+e[15]*a,r}})}},i={};function a(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return s[t](r,r.exports,a),r.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(s,i,a)=>{var o;a&&((o=[]).d=-1);var u,l,c,h=new Set,d=s.exports,p=new Promise(((t,e)=>{c=e,l=t}));p[e]=d,p[t]=t=>(o&&t(o),h.forEach(t),p.catch((t=>{}))),s.exports=p,i((s=>{var i;u=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[t])return s;if(s.then){var i=[];i.d=0,s.then((t=>{a[e]=t,n(i)}),(t=>{a[r]=t,n(i)}));var a={};return a[t]=t=>t(i),a}}var o={};return o[t]=t=>{},o[e]=s,o})))(s);var a=()=>u.map((t=>{if(t[r])throw t[r];return t[e]})),l=new Promise((e=>{(i=()=>e(a)).r=0;var r=t=>t!==o&&!h.has(t)&&(h.add(t),t&&!t.d&&(i.r++,t.push(i)));u.map((e=>e[t](r)))}));return i.r?l:a()}),(t=>(t?c(p[r]=t):l(d),n(o)))),o&&o.d<0&&(o.d=0)},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,