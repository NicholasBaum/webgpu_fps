(()=>{"use strict";var t,e,r,n,s={675:(t,e,r)=>{r.d(e,{D:()=>d});var n=r(416);class s{camera;lights;viewProjectionMatrix=n._E.identity();constructor(t,e){this.camera=t,this.lights=e}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}writeToGpu(t){let e=this.lights[0].size;this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"scene uniforms buffer",size:80+this.lights.length*e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})),n._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,0,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,64,this.camera.position);for(let[r,n]of this.lights.entries())t.queue.writeBuffer(this._gpuBuffer,80+r*e,n.getBytes())}}class i{instances;constructor(t){this.instances=t}get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}_gpuBuffer;writeToGpu(t){this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"models uniforms buffer",size:64*this.instances.length*2,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}));for(let e=0;e<this.instances.length;e++){let r=this.instances[e].transform,s=n._E.transpose(n._E.invert(this.instances[e].transform));t.queue.writeBuffer(this._gpuBuffer,128*e,r),t.queue.writeBuffer(this._gpuBuffer,128*e+64,s)}}}var a,o=r(582),u=r(284);function c(t,e,r,n,s,i){let a={label:"binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r.gpuBuffer}},{binding:1,resource:{buffer:n.gpuBuffer}},{binding:2,resource:{buffer:s.gpuBuffer}},{binding:3,resource:i},{binding:4,resource:s.ambientTexture.createView()},{binding:5,resource:s.diffuseTexture.createView()},{binding:6,resource:s.specularTexture.createView()}]};return t.createBindGroup(a)}!function(t){t[t.BlinnPhong=0]="BlinnPhong",t[t.NormalMap=1]="NormalMap"}(a||(a={}));class l{device;canvasFormat;aaSampleCount;sceneMap;lights;camera;groups=[];blinnPhongPipeline;normalPipeline;camAndLightUniform;constructor(t,e,r,n){this.device=t,this.canvasFormat=r,this.aaSampleCount=n,this.sceneMap=this.groupByAsset(e.models),this.lights=e.lights,this.camera=e.camera}render(t){this.camAndLightUniform.writeToGpu(this.device);for(let e of this.groups)e.writeToGpu(this.device),t.setPipeline(e.pipeline),t.setBindGroup(0,e.bindGroup),t.setVertexBuffer(0,e.vertexBuffer),this.normalPipeline==e.pipeline&&t.setVertexBuffer(1,e.normalDataBuffer),t.draw(e.vertexCount,e.instancesCount,0,0)}async initializeAsync(){let t=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16});this.blinnPhongPipeline=await async function(t,e,r){const n=t.createShaderModule({label:"Blinn Phong Shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    lightType : vec4f,\n    positionOrDirection : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n\nstruct VertexOut\n{\n    @builtin(position) position : vec4f,\n    @location(0) vColor : vec4f,\n    @location(1) uv : vec2f,\n    @location(2) normal : vec4f,\n    @location(3) worldPosition : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    return VertexOut(uni.viewProjectionMatrix * worldPos, color, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) vColor : vec4f,\n@location(1) uv : vec2f,\n@location(2) worldPosition : vec4f,\n@location(3) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let lightsCount = i32(arrayLength(&uni.lights));\n    var finalColor = vec4f(0, 0, 0, 1);\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], uv, worldPosition, worldNormal);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let lightDir = normalize(select(-light.positionOrDirection.xyz, light.positionOrDirection.xyz - worldPosition.xyz, light.lightType.x == 1));\n    let intensity = max(dot(lightDir, unitNormal), 0);\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity;\n\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    let H = normalize(lightDir + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x);\n\n    //Blinn-Phong seems to have some artefacts\n    //first of specular should only be rendered on surfaces that are hit by the light aka diffuse intensity>0\n    //by doing this you get some strange cutoffs\n    //that why an alternative ist to multiply the specular with the difusse intensity but this lead to specular highlights with weak intensity\n    //var finalColor = select(ambient + diffuse, ambient + diffuse + specular, intensity > 0);\n    var finalColor = ambient + diffuse + specular * intensity;\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n    return vec4f(finalColor, 1);\n}\n"});return async function(t,e,r,n,s){let i=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}}],a=t.createBindGroupLayout({entries:i}),o={label:"mesh pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[a]}),vertex:{module:e,entryPoint:"vertexMain",buffers:[r]},fragment:{module:e,entryPoint:"fragmentMain",targets:[{format:n,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]},primitive:{topology:"triangle-list",cullMode:"back"},multisample:s?{count:s}:void 0,depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await t.createRenderPipelineAsync(o)}(t,n,u.sY,e,r)}(this.device,this.canvasFormat,this.aaSampleCount),this.normalPipeline=await(0,o.ms)(this.device,this.canvasFormat,this.aaSampleCount),this.camAndLightUniform=new s(this.camera,this.lights),this.camAndLightUniform.writeToGpu(this.device);for(let e of this.sceneMap.entries()){let r=e[1],n=e[0].mode==a.BlinnPhong?this.blinnPhongPipeline:this.normalPipeline,s=r[0].asset;s.writeMeshToGpu(this.device),await s.material.writeTexturesToGpuAsync(this.device,!0),s.material.writeToGpu(this.device);const u=new i(r);let l;u.writeToGpu(this.device),l=this.blinnPhongPipeline==n?c(this.device,n,u,this.camAndLightUniform,s.material,t):(0,o.vW)(this.device,n,u,this.camAndLightUniform,s.material,t);let d=new h(u,r.length,s.vertexBuffer,s.vertexCount,s.material,l,n,s.normalBuffer);this.groups.push(d)}}groupByAsset(t){return t.reduce(((t,e)=>{let r=(t=>{let e=null!=t.asset.material.normalMapPath?a.NormalMap:a.BlinnPhong;return{asset:t.asset,mode:e}})(e);return t.has(r)||t.set(r,[]),t.get(r)?.push(e),t}),new Map)}}class h{instancesBuffer;instancesCount;vertexBuffer;vertexCount;material;bindGroup;pipeline;normalDataBuffer;constructor(t,e,r,n,s,i,a,o=null){this.instancesBuffer=t,this.instancesCount=e,this.vertexBuffer=r,this.vertexCount=n,this.material=s,this.bindGroup=i,this.pipeline=a,this.normalDataBuffer=o}writeToGpu(t){this.instancesBuffer.writeToGpu(t),this.material.writeToGpu(t)}}class d{scene;canvas;useMSAA=!0;aaSampleCount=4;device;context;canvasFormat;renderTarget;depthTexture;depthTextureView;inputHandler;lastFrameMS=Date.now();renderer=null;constructor(t,e){this.scene=t,this.canvas=e,this.inputHandler=function(t,e){const r={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},n={x:0,y:0,zoom:0};let s=!1;const i=(t,e)=>{switch(t.code){case"KeyW":r.forward=e,t.preventDefault(),t.stopPropagation();break;case"KeyS":r.backward=e,t.preventDefault(),t.stopPropagation();break;case"KeyA":r.left=e,t.preventDefault(),t.stopPropagation();break;case"KeyD":r.right=e,t.preventDefault(),t.stopPropagation();break;case"Space":r.up=e,t.preventDefault(),t.stopPropagation();break;case"ShiftLeft":case"ControlLeft":case"KeyC":r.down=e,t.preventDefault(),t.stopPropagation()}};return t.addEventListener("keydown",(t=>i(t,!0))),t.addEventListener("keyup",(t=>i(t,!1))),e.addEventListener("mousedown",(()=>{s=!0})),e.addEventListener("mouseup",(()=>{s=!1})),e.addEventListener("mousemove",(t=>{s=0!=(1&t.buttons),s&&(n.x+=t.movementX,n.y+=t.movementY)})),e.addEventListener("wheel",(t=>{s=0!=(1&t.buttons),s&&(n.zoom+=Math.sign(t.deltaY),t.preventDefault(),t.stopPropagation())}),{passive:!1}),()=>{const t={digital:r,analog:{x:n.x,y:n.y,zoom:n.zoom,touching:s}};return n.x=0,n.y=0,n.zoom=0,t}}(window,e)}async run(){await this.initAsync(),this.render()}async initAsync(){await this.initGpuContext(),this.scene.camera.aspect=this.canvas.width/this.canvas.height,this.renderer=new l(this.device,this.scene,this.canvasFormat,this.aaSampleCount),await this.renderer.initializeAsync()}render(){requestAnimationFrame((()=>{const t=this.getDeltaTime();this.scene.update(t),this.scene.camera.update(t,this.inputHandler());let e=this.context.getCurrentTexture().createView();const r={colorAttachments:[{view:this.useMSAA?this.renderTarget.createView():e,resolveTarget:e,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},n=this.device.createCommandEncoder(),s=n.beginRenderPass(r);this.renderer.render(s),s.end(),this.device.queue.submit([n.finish()]),this.render()}))}getDeltaTime(){const t=Date.now(),e=(t-this.lastFrameMS)/1e3;return this.lastFrameMS=t,e}async initGpuContext(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");this.device=await t.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),this.context.configure({device:this.device,format:this.canvasFormat,alphaMode:"premultiplied"}),this.useMSAA&&(this.renderTarget=this.device.createTexture({size:[this.canvas.width,this.canvas.height],sampleCount:this.aaSampleCount,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.depthTexture=this.device.createTexture({size:[this.canvas.width,this.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:this.useMSAA?this.aaSampleCount:1}),this.depthTextureView=this.depthTexture.createView()}}},582:(t,e,r)=>{r.d(e,{aH:()=>a,vW:()=>o,ms:()=>i});var n=r(284);const s="struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    lightType : vec4f,\n    positionOrDirection : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n@group(0) @binding(7) var normalTexture : texture_2d<f32>;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n\n\n\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let lightsCount = i32(arrayLength(&uni.lights));\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    //transform normal from normal map from its tangent space into worldspace\n    var normal = normalize(t2w * (textureSample(normalTexture, textureSampler, uv).xyz * 2-1));\n    normal = select(normal, worldNormal, material.mode.y==1);\n    var finalColor = vec4f(0, 0, 0, 1);\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], uv, worldPosition, normal);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let lightDir = normalize(select(-light.positionOrDirection.xyz, light.positionOrDirection.xyz - worldPosition.xyz, light.lightType.x == 1));\n    let intensity = max(dot(lightDir, unitNormal), 0);\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity;\n\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    let H = normalize(lightDir + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x);\n\n    var finalColor = ambient + diffuse + specular * intensity;\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n    return vec4f(finalColor, 1);\n}\n";async function i(t,e,r){const i=t.createShaderModule({label:"Normal Shader",code:s});return async function(t,e,r,s){let i=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{}}],o=t.createBindGroupLayout({entries:i}),u={label:"mesh pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[o]}),vertex:{module:e,entryPoint:"vertexMain",buffers:[n.sY,a]},fragment:{module:e,entryPoint:"fragmentMain",targets:[{format:r,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]},primitive:{topology:"triangle-list",cullMode:"back"},multisample:s?{count:s}:void 0,depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await t.createRenderPipelineAsync(u)}(t,i,e,r)}const a={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:4},{format:"float32x3",offset:12,shaderLocation:5}]};function o(t,e,r,n,s,i){let a={label:"binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r.gpuBuffer}},{binding:1,resource:{buffer:n.gpuBuffer}},{binding:2,resource:{buffer:s.gpuBuffer}},{binding:3,resource:i},{binding:4,resource:s.ambientTexture.createView()},{binding:5,resource:s.diffuseTexture.createView()},{binding:6,resource:s.specularTexture.createView()},{binding:7,resource:s.normalTexture.createView()}]};return t.createBindGroup(a)}},607:(t,e,r)=>{r.a(t,(async(t,e)=>{try{var n=r(675),s=r(186);const t=document.querySelector("canvas"),i=new n.D(new s.N,t);i.scene.attachUi(t),await i.run(),e()}catch(t){e(t)}}),1)},284:(t,e,r)=>{r.d(e,{Vk:()=>a,nk:()=>n,qw:()=>s,sY:()=>i});const n="triangle-list",s=36,i={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1])},186:(t,e,r)=>{r.d(e,{N:()=>ee});var n=r(416);class s{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(t){this._aspect=t,this._projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=n._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(t){n._E.copy(t,this.matrix_)}get view(){return this.view_}set view(t){n._E.copy(t,this.view_)}get right(){return this.right_}set right(t){n.R3.copy(t,this.right_)}get up(){return this.up_}set up(t){n.R3.copy(t,this.up_)}get back(){return this.back_}set back(t){n.R3.copy(t,this.back_)}get position(){return this.position_}set position(t){n.R3.copy(t,this.position_)}}class i extends s{pitch=0;yaw=0;velocity_=n.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(t){n.R3.copy(t,this.velocity_)}constructor(t){if(super(),t&&(t.position||t.target||t.movementSpeed)){const e=t.position??n.R3.create(0,0,-5),r=t.target??n.R3.create(0,0,0);this.back=n.R3.normalize(n.R3.subtract(e,r)),this.recalculateAngles(this.back),this.position=e,this.movementSpeed=t.movementSpeed??10,this.aspect=t.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(t){super.matrix=t,this.recalculateAngles(this.back)}update(t,e){const r=(t,e)=>(t?1:0)-(e?1:0);var s,i;this.yaw-=e.analog.x*t*this.rotationSpeed,this.pitch-=e.analog.y*t*this.rotationSpeed,this.yaw=(s=this.yaw,i=2*Math.PI,s-Math.floor(Math.abs(s)/i)*i*Math.sign(s)),this.pitch=function(t,e,r){return Math.min(Math.max(t,e),r)}(this.pitch,-Math.PI/2,Math.PI/2);const a=n.R3.copy(this.position);super.matrix=n._E.rotateX(n._E.rotationY(this.yaw),this.pitch);const o=e.digital,u=r(o.right,o.left),c=r(o.up,o.down),l=n.R3.create(),h=r(o.backward,o.forward);n.R3.addScaled(l,this.right,u,l),n.R3.addScaled(l,this.up,c,l),n.R3.addScaled(l,this.back,h,l),n.R3.normalize(l,l),n.R3.mulScalar(l,this.movementSpeed,l),this.velocity=function(t,e,r){return n.R3.addScaled(t,n.R3.sub(e,t),r)}(l,this.velocity,Math.pow(1-this.frictionCoefficient,t)),this.position=n.R3.addScaled(a,this.velocity,t),this.view=n._E.invert(this.matrix)}recalculateAngles(t){this.yaw=Math.atan2(t[0],t[2]),this.pitch=-Math.asin(t[1])}}class a{name;asset;transform;constructor(t,e,r=n._E.identity()){this.name=t,this.asset=e,this.transform=r}translate(t,e,r){return n._E.translate(this.transform,[t,e,r],this.transform),this}rotate(t,e,r){return n._E.rotateX(this.transform,t/180*Math.PI,this.transform),n._E.rotateY(this.transform,e/180*Math.PI,this.transform),n._E.rotateZ(this.transform,r/180*Math.PI,this.transform),this}scale(t,e,r){return n._E.scale(this.transform,[t,e,r],this.transform),this}}const o=t=>t&&"number"==typeof t.length&&t.buffer instanceof ArrayBuffer&&"number"==typeof t.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class u{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class c{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(t){throw new Error("Cannot evaluate node")}evaluateString(t){return this.evaluate(t).toString()}}class l extends c{constructor(){super()}}class h extends l{constructor(t,e,r,n){super(),this.name=t,this.args=e,this.returnType=r,this.body=n}get astNodeType(){return"function"}}class d extends l{constructor(t){super(),this.expression=t}get astNodeType(){return"staticAssert"}}class _ extends l{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"while"}}class f extends l{constructor(t){super(),this.body=t}get astNodeType(){return"continuing"}}class p extends l{constructor(t,e,r,n){super(),this.init=t,this.condition=e,this.increment=r,this.body=n}get astNodeType(){return"for"}}class m extends l{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"var"}}class g extends l{constructor(t,e,r){super(),this.name=t,this.type=e,this.value=r}get astNodeType(){return"override"}}class y extends l{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"let"}}class w extends l{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"const"}evaluate(t){return this.value.evaluate(t)}}var x,v,b,k,M;!function(t){t.increment="++",t.decrement="--"}(x||(x={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return t[r]}}(x||(x={}));class T extends l{constructor(t,e){super(),this.operator=t,this.variable=e}get astNodeType(){return"increment"}}!function(t){t.assign="=",t.addAssign="+=",t.subtractAssin="-=",t.multiplyAssign="*=",t.divideAssign="/=",t.moduloAssign="%=",t.andAssign="&=",t.orAssign="|=",t.xorAssign="^=",t.shiftLeftAssign="<<=",t.shiftRightAssign=">>="}(v||(v={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for AssignOperator");return t[r]}}(v||(v={}));class S extends l{constructor(t,e,r){super(),this.operator=t,this.variable=e,this.value=r}get astNodeType(){return"assign"}}class A extends l{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"call"}}class E extends l{constructor(t,e){super(),this.body=t,this.continuing=e}get astNodeType(){return"loop"}}class P extends l{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"body"}}class C extends l{constructor(t,e,r,n){super(),this.condition=t,this.body=e,this.elseif=r,this.else=n}get astNodeType(){return"if"}}class z extends l{constructor(t){super(),this.value=t}get astNodeType(){return"return"}}class B extends l{constructor(t){super(),this.name=t}get astNodeType(){return"enable"}}class q extends l{constructor(t,e){super(),this.name=t,this.type=e}get astNodeType(){return"alias"}}class N extends l{constructor(){super()}get astNodeType(){return"discard"}}class U extends l{constructor(){super()}get astNodeType(){return"break"}}class I extends l{constructor(){super()}get astNodeType(){return"continue"}}class F extends l{constructor(t){super(),this.name=t}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class G extends F{constructor(t,e){super(t),this.members=e}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(t){for(let e=0;e<this.members.length;e++)if(this.members[e].name==t)return e;return-1}}class D extends F{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"template"}}class O extends F{constructor(t,e,r,n){super(t),this.storage=e,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class L extends F{constructor(t,e,r,n){super(t),this.attributes=e,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class R extends F{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"sampler"}}class V extends c{constructor(){super()}}class j extends V{constructor(t){super(),this.value=t}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class Y extends V{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"createExpr"}}class H extends V{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"callExpr"}evaluate(t){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(t));case"acos":return Math.acos(this.args[0].evaluate(t));case"acosh":return Math.acosh(this.args[0].evaluate(t));case"asin":return Math.asin(this.args[0].evaluate(t));case"asinh":return Math.asinh(this.args[0].evaluate(t));case"atan":return Math.atan(this.args[0].evaluate(t));case"atan2":return Math.atan2(this.args[0].evaluate(t),this.args[1].evaluate(t));case"atanh":return Math.atanh(this.args[0].evaluate(t));case"ceil":return Math.ceil(this.args[0].evaluate(t));case"clamp":return Math.min(Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t)),this.args[2].evaluate(t));case"cos":return Math.cos(this.args[0].evaluate(t));case"degrees":return 180*this.args[0].evaluate(t)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(t)-this.args[1].evaluate(t),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(t));case"exp2":return Math.pow(2,this.args[0].evaluate(t));case"floor":return Math.floor(this.args[0].evaluate(t));case"fma":return this.args[0].evaluate(t)*this.args[1].evaluate(t)+this.args[2].evaluate(t);case"fract":case"modf":return this.args[0].evaluate(t)-Math.floor(this.args[0].evaluate(t));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(t));case"log":return Math.log(this.args[0].evaluate(t));case"log2":return Math.log2(this.args[0].evaluate(t));case"max":return Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t));case"min":return Math.min(this.args[0].evaluate(t),this.args[1].evaluate(t));case"mix":return this.args[0].evaluate(t)*(1-this.args[2].evaluate(t))+this.args[1].evaluate(t)*this.args[2].evaluate(t);case"pow":return Math.pow(this.args[0].evaluate(t),this.args[1].evaluate(t));case"radians":return this.args[0].evaluate(t)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(t));case"sign":return Math.sign(this.args[0].evaluate(t));case"sin":return Math.sin(this.args[0].evaluate(t));case"sinh":return Math.sinh(this.args[0].evaluate(t));case"saturate":return Math.min(Math.max(this.args[0].evaluate(t),0),1);case"smoothstep":return this.args[0].evaluate(t)*this.args[0].evaluate(t)*(3-2*this.args[0].evaluate(t));case"sqrt":return Math.sqrt(this.args[0].evaluate(t));case"step":return this.args[0].evaluate(t)<this.args[1].evaluate(t)?0:1;case"tan":return Math.tan(this.args[0].evaluate(t));case"tanh":return Math.tanh(this.args[0].evaluate(t));case"trunc":return Math.trunc(this.args[0].evaluate(t));default:throw new Error("Non const function: "+this.name)}}}class $ extends V{constructor(t){super(),this.name=t}get astNodeType(){return"varExpr"}}class X extends V{constructor(t,e){super(),this.name=t,this.initializer=e}get astNodeType(){return"constExpr"}evaluate(t){var e,r;if(this.initializer instanceof Y){const n=null===(e=this.postfix)||void 0===e?void 0:e.evaluateString(t),s=null===(r=this.initializer.type)||void 0===r?void 0:r.name,i=t.structs.get(s),a=null==i?void 0:i.getMemberIndex(n);if(-1!=a)return this.initializer.args[a].evaluate(t);console.log(a)}return this.initializer.evaluate(t)}}class W extends V{constructor(t){super(),this.value=t}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class K extends V{constructor(t,e){super(),this.type=t,this.value=e}get astNodeType(){return"bitcastExpr"}}class Z extends V{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"typecastExpr"}evaluate(t){return this.args[0].evaluate(t)}}class Q extends V{constructor(t){super(),this.contents=t}get astNodeType(){return"groupExpr"}evaluate(t){return this.contents[0].evaluate(t)}}class J extends V{constructor(){super()}}class tt extends J{constructor(t,e){super(),this.operator=t,this.right=e}get astNodeType(){return"unaryOp"}evaluate(t){switch(this.operator){case"+":return this.right.evaluate(t);case"-":return-this.right.evaluate(t);case"!":return this.right.evaluate(t)?0:1;case"~":return~this.right.evaluate(t);default:throw new Error("Unknown unary operator: "+this.operator)}}}class et extends J{constructor(t,e,r){super(),this.operator=t,this.left=e,this.right=r}get astNodeType(){return"binaryOp"}evaluate(t){switch(this.operator){case"+":return this.left.evaluate(t)+this.right.evaluate(t);case"-":return this.left.evaluate(t)-this.right.evaluate(t);case"*":return this.left.evaluate(t)*this.right.evaluate(t);case"/":return this.left.evaluate(t)/this.right.evaluate(t);case"%":return this.left.evaluate(t)%this.right.evaluate(t);case"==":return this.left.evaluate(t)==this.right.evaluate(t)?1:0;case"!=":return this.left.evaluate(t)!=this.right.evaluate(t)?1:0;case"<":return this.left.evaluate(t)<this.right.evaluate(t)?1:0;case">":return this.left.evaluate(t)>this.right.evaluate(t)?1:0;case"<=":return this.left.evaluate(t)<=this.right.evaluate(t)?1:0;case">=":return this.left.evaluate(t)>=this.right.evaluate(t)?1:0;case"&&":return this.left.evaluate(t)&&this.right.evaluate(t)?1:0;case"||":return this.left.evaluate(t)||this.right.evaluate(t)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class rt extends c{constructor(){super()}}class nt extends rt{constructor(t,e){super(),this.selector=t,this.body=e}get astNodeType(){return"case"}}class st extends rt{constructor(t){super(),this.body=t}get astNodeType(){return"default"}}class it extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"argument"}}class at extends c{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"elseif"}}class ot extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"member"}}class ut extends c{constructor(t,e){super(),this.name=t,this.value=e}get astNodeType(){return"attribute"}}!function(t){t[t.token=0]="token",t[t.keyword=1]="keyword",t[t.reserved=2]="reserved"}(k||(k={}));class ct{constructor(t,e,r){this.name=t,this.type=e,this.rule=r}toString(){return this.name}}class lt{}b=lt,lt.none=new ct("",k.reserved,""),lt.eof=new ct("EOF",k.token,""),lt.reserved={asm:new ct("asm",k.reserved,"asm"),bf16:new ct("bf16",k.reserved,"bf16"),do:new ct("do",k.reserved,"do"),enum:new ct("enum",k.reserved,"enum"),f16:new ct("f16",k.reserved,"f16"),f64:new ct("f64",k.reserved,"f64"),handle:new ct("handle",k.reserved,"handle"),i8:new ct("i8",k.reserved,"i8"),i16:new ct("i16",k.reserved,"i16"),i64:new ct("i64",k.reserved,"i64"),mat:new ct("mat",k.reserved,"mat"),premerge:new ct("premerge",k.reserved,"premerge"),regardless:new ct("regardless",k.reserved,"regardless"),typedef:new ct("typedef",k.reserved,"typedef"),u8:new ct("u8",k.reserved,"u8"),u16:new ct("u16",k.reserved,"u16"),u64:new ct("u64",k.reserved,"u64"),unless:new ct("unless",k.reserved,"unless"),using:new ct("using",k.reserved,"using"),vec:new ct("vec",k.reserved,"vec"),void:new ct("void",k.reserved,"void")},lt.keywords={array:new ct("array",k.keyword,"array"),atomic:new ct("atomic",k.keyword,"atomic"),bool:new ct("bool",k.keyword,"bool"),f32:new ct("f32",k.keyword,"f32"),i32:new ct("i32",k.keyword,"i32"),mat2x2:new ct("mat2x2",k.keyword,"mat2x2"),mat2x3:new ct("mat2x3",k.keyword,"mat2x3"),mat2x4:new ct("mat2x4",k.keyword,"mat2x4"),mat3x2:new ct("mat3x2",k.keyword,"mat3x2"),mat3x3:new ct("mat3x3",k.keyword,"mat3x3"),mat3x4:new ct("mat3x4",k.keyword,"mat3x4"),mat4x2:new ct("mat4x2",k.keyword,"mat4x2"),mat4x3:new ct("mat4x3",k.keyword,"mat4x3"),mat4x4:new ct("mat4x4",k.keyword,"mat4x4"),ptr:new ct("ptr",k.keyword,"ptr"),sampler:new ct("sampler",k.keyword,"sampler"),sampler_comparison:new ct("sampler_comparison",k.keyword,"sampler_comparison"),struct:new ct("struct",k.keyword,"struct"),texture_1d:new ct("texture_1d",k.keyword,"texture_1d"),texture_2d:new ct("texture_2d",k.keyword,"texture_2d"),texture_2d_array:new ct("texture_2d_array",k.keyword,"texture_2d_array"),texture_3d:new ct("texture_3d",k.keyword,"texture_3d"),texture_cube:new ct("texture_cube",k.keyword,"texture_cube"),texture_cube_array:new ct("texture_cube_array",k.keyword,"texture_cube_array"),texture_multisampled_2d:new ct("texture_multisampled_2d",k.keyword,"texture_multisampled_2d"),texture_storage_1d:new ct("texture_storage_1d",k.keyword,"texture_storage_1d"),texture_storage_2d:new ct("texture_storage_2d",k.keyword,"texture_storage_2d"),texture_storage_2d_array:new ct("texture_storage_2d_array",k.keyword,"texture_storage_2d_array"),texture_storage_3d:new ct("texture_storage_3d",k.keyword,"texture_storage_3d"),texture_depth_2d:new ct("texture_depth_2d",k.keyword,"texture_depth_2d"),texture_depth_2d_array:new ct("texture_depth_2d_array",k.keyword,"texture_depth_2d_array"),texture_depth_cube:new ct("texture_depth_cube",k.keyword,"texture_depth_cube"),texture_depth_cube_array:new ct("texture_depth_cube_array",k.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new ct("texture_depth_multisampled_2d",k.keyword,"texture_depth_multisampled_2d"),texture_external:new ct("texture_external",k.keyword,"texture_external"),u32:new ct("u32",k.keyword,"u32"),vec2:new ct("vec2",k.keyword,"vec2"),vec3:new ct("vec3",k.keyword,"vec3"),vec4:new ct("vec4",k.keyword,"vec4"),bitcast:new ct("bitcast",k.keyword,"bitcast"),block:new ct("block",k.keyword,"block"),break:new ct("break",k.keyword,"break"),case:new ct("case",k.keyword,"case"),continue:new ct("continue",k.keyword,"continue"),continuing:new ct("continuing",k.keyword,"continuing"),default:new ct("default",k.keyword,"default"),discard:new ct("discard",k.keyword,"discard"),else:new ct("else",k.keyword,"else"),enable:new ct("enable",k.keyword,"enable"),fallthrough:new ct("fallthrough",k.keyword,"fallthrough"),false:new ct("false",k.keyword,"false"),fn:new ct("fn",k.keyword,"fn"),for:new ct("for",k.keyword,"for"),function:new ct("function",k.keyword,"function"),if:new ct("if",k.keyword,"if"),let:new ct("let",k.keyword,"let"),const:new ct("const",k.keyword,"const"),loop:new ct("loop",k.keyword,"loop"),while:new ct("while",k.keyword,"while"),private:new ct("private",k.keyword,"private"),read:new ct("read",k.keyword,"read"),read_write:new ct("read_write",k.keyword,"read_write"),return:new ct("return",k.keyword,"return"),storage:new ct("storage",k.keyword,"storage"),switch:new ct("switch",k.keyword,"switch"),true:new ct("true",k.keyword,"true"),alias:new ct("alias",k.keyword,"alias"),type:new ct("type",k.keyword,"type"),uniform:new ct("uniform",k.keyword,"uniform"),var:new ct("var",k.keyword,"var"),override:new ct("override",k.keyword,"override"),workgroup:new ct("workgroup",k.keyword,"workgroup"),write:new ct("write",k.keyword,"write"),r8unorm:new ct("r8unorm",k.keyword,"r8unorm"),r8snorm:new ct("r8snorm",k.keyword,"r8snorm"),r8uint:new ct("r8uint",k.keyword,"r8uint"),r8sint:new ct("r8sint",k.keyword,"r8sint"),r16uint:new ct("r16uint",k.keyword,"r16uint"),r16sint:new ct("r16sint",k.keyword,"r16sint"),r16float:new ct("r16float",k.keyword,"r16float"),rg8unorm:new ct("rg8unorm",k.keyword,"rg8unorm"),rg8snorm:new ct("rg8snorm",k.keyword,"rg8snorm"),rg8uint:new ct("rg8uint",k.keyword,"rg8uint"),rg8sint:new ct("rg8sint",k.keyword,"rg8sint"),r32uint:new ct("r32uint",k.keyword,"r32uint"),r32sint:new ct("r32sint",k.keyword,"r32sint"),r32float:new ct("r32float",k.keyword,"r32float"),rg16uint:new ct("rg16uint",k.keyword,"rg16uint"),rg16sint:new ct("rg16sint",k.keyword,"rg16sint"),rg16float:new ct("rg16float",k.keyword,"rg16float"),rgba8unorm:new ct("rgba8unorm",k.keyword,"rgba8unorm"),rgba8unorm_srgb:new ct("rgba8unorm_srgb",k.keyword,"rgba8unorm_srgb"),rgba8snorm:new ct("rgba8snorm",k.keyword,"rgba8snorm"),rgba8uint:new ct("rgba8uint",k.keyword,"rgba8uint"),rgba8sint:new ct("rgba8sint",k.keyword,"rgba8sint"),bgra8unorm:new ct("bgra8unorm",k.keyword,"bgra8unorm"),bgra8unorm_srgb:new ct("bgra8unorm_srgb",k.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new ct("rgb10a2unorm",k.keyword,"rgb10a2unorm"),rg11b10float:new ct("rg11b10float",k.keyword,"rg11b10float"),rg32uint:new ct("rg32uint",k.keyword,"rg32uint"),rg32sint:new ct("rg32sint",k.keyword,"rg32sint"),rg32float:new ct("rg32float",k.keyword,"rg32float"),rgba16uint:new ct("rgba16uint",k.keyword,"rgba16uint"),rgba16sint:new ct("rgba16sint",k.keyword,"rgba16sint"),rgba16float:new ct("rgba16float",k.keyword,"rgba16float"),rgba32uint:new ct("rgba32uint",k.keyword,"rgba32uint"),rgba32sint:new ct("rgba32sint",k.keyword,"rgba32sint"),rgba32float:new ct("rgba32float",k.keyword,"rgba32float"),static_assert:new ct("static_assert",k.keyword,"static_assert")},lt.tokens={decimal_float_literal:new ct("decimal_float_literal",k.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new ct("hex_float_literal",k.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new ct("int_literal",k.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new ct("uint_literal",k.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new ct("ident",k.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new ct("and",k.token,"&"),and_and:new ct("and_and",k.token,"&&"),arrow:new ct("arrow ",k.token,"->"),attr:new ct("attr",k.token,"@"),attr_left:new ct("attr_left",k.token,"[["),attr_right:new ct("attr_right",k.token,"]]"),forward_slash:new ct("forward_slash",k.token,"/"),bang:new ct("bang",k.token,"!"),bracket_left:new ct("bracket_left",k.token,"["),bracket_right:new ct("bracket_right",k.token,"]"),brace_left:new ct("brace_left",k.token,"{"),brace_right:new ct("brace_right",k.token,"}"),colon:new ct("colon",k.token,":"),comma:new ct("comma",k.token,","),equal:new ct("equal",k.token,"="),equal_equal:new ct("equal_equal",k.token,"=="),not_equal:new ct("not_equal",k.token,"!="),greater_than:new ct("greater_than",k.token,">"),greater_than_equal:new ct("greater_than_equal",k.token,">="),shift_right:new ct("shift_right",k.token,">>"),less_than:new ct("less_than",k.token,"<"),less_than_equal:new ct("less_than_equal",k.token,"<="),shift_left:new ct("shift_left",k.token,"<<"),modulo:new ct("modulo",k.token,"%"),minus:new ct("minus",k.token,"-"),minus_minus:new ct("minus_minus",k.token,"--"),period:new ct("period",k.token,"."),plus:new ct("plus",k.token,"+"),plus_plus:new ct("plus_plus",k.token,"++"),or:new ct("or",k.token,"|"),or_or:new ct("or_or",k.token,"||"),paren_left:new ct("paren_left",k.token,"("),paren_right:new ct("paren_right",k.token,")"),semicolon:new ct("semicolon",k.token,";"),star:new ct("star",k.token,"*"),tilde:new ct("tilde",k.token,"~"),underscore:new ct("underscore",k.token,"_"),xor:new ct("xor",k.token,"^"),plus_equal:new ct("plus_equal",k.token,"+="),minus_equal:new ct("minus_equal",k.token,"-="),times_equal:new ct("times_equal",k.token,"*="),division_equal:new ct("division_equal",k.token,"/="),modulo_equal:new ct("modulo_equal",k.token,"%="),and_equal:new ct("and_equal",k.token,"&="),or_equal:new ct("or_equal",k.token,"|="),xor_equal:new ct("xor_equal",k.token,"^="),shift_right_equal:new ct("shift_right_equal",k.token,">>="),shift_left_equal:new ct("shift_left_equal",k.token,"<<=")},lt.storage_class=[b.keywords.function,b.keywords.private,b.keywords.workgroup,b.keywords.uniform,b.keywords.storage],lt.access_mode=[b.keywords.read,b.keywords.write,b.keywords.read_write],lt.sampler_type=[b.keywords.sampler,b.keywords.sampler_comparison],lt.sampled_texture_type=[b.keywords.texture_1d,b.keywords.texture_2d,b.keywords.texture_2d_array,b.keywords.texture_3d,b.keywords.texture_cube,b.keywords.texture_cube_array],lt.multisampled_texture_type=[b.keywords.texture_multisampled_2d],lt.storage_texture_type=[b.keywords.texture_storage_1d,b.keywords.texture_storage_2d,b.keywords.texture_storage_2d_array,b.keywords.texture_storage_3d],lt.depth_texture_type=[b.keywords.texture_depth_2d,b.keywords.texture_depth_2d_array,b.keywords.texture_depth_cube,b.keywords.texture_depth_cube_array,b.keywords.texture_depth_multisampled_2d],lt.texture_external_type=[b.keywords.texture_external],lt.any_texture_type=[...b.sampled_texture_type,...b.multisampled_texture_type,...b.storage_texture_type,...b.depth_texture_type,...b.texture_external_type],lt.texel_format=[b.keywords.r8unorm,b.keywords.r8snorm,b.keywords.r8uint,b.keywords.r8sint,b.keywords.r16uint,b.keywords.r16sint,b.keywords.r16float,b.keywords.rg8unorm,b.keywords.rg8snorm,b.keywords.rg8uint,b.keywords.rg8sint,b.keywords.r32uint,b.keywords.r32sint,b.keywords.r32float,b.keywords.rg16uint,b.keywords.rg16sint,b.keywords.rg16float,b.keywords.rgba8unorm,b.keywords.rgba8unorm_srgb,b.keywords.rgba8snorm,b.keywords.rgba8uint,b.keywords.rgba8sint,b.keywords.bgra8unorm,b.keywords.bgra8unorm_srgb,b.keywords.rgb10a2unorm,b.keywords.rg11b10float,b.keywords.rg32uint,b.keywords.rg32sint,b.keywords.rg32float,b.keywords.rgba16uint,b.keywords.rgba16sint,b.keywords.rgba16float,b.keywords.rgba32uint,b.keywords.rgba32sint,b.keywords.rgba32float],lt.const_literal=[b.tokens.int_literal,b.tokens.uint_literal,b.tokens.decimal_float_literal,b.tokens.hex_float_literal,b.keywords.true,b.keywords.false],lt.literal_or_ident=[b.tokens.ident,b.tokens.int_literal,b.tokens.uint_literal,b.tokens.decimal_float_literal,b.tokens.hex_float_literal],lt.element_count_expression=[b.tokens.int_literal,b.tokens.uint_literal,b.tokens.ident],lt.template_types=[b.keywords.vec2,b.keywords.vec3,b.keywords.vec4,b.keywords.mat2x2,b.keywords.mat2x3,b.keywords.mat2x4,b.keywords.mat3x2,b.keywords.mat3x3,b.keywords.mat3x4,b.keywords.mat4x2,b.keywords.mat4x3,b.keywords.mat4x4,b.keywords.atomic,b.keywords.bitcast,...b.any_texture_type],lt.attribute_name=[b.tokens.ident,b.keywords.block],lt.assignment_operators=[b.tokens.equal,b.tokens.plus_equal,b.tokens.minus_equal,b.tokens.times_equal,b.tokens.division_equal,b.tokens.modulo_equal,b.tokens.and_equal,b.tokens.or_equal,b.tokens.xor_equal,b.tokens.shift_right_equal,b.tokens.shift_left_equal],lt.increment_operators=[b.tokens.plus_plus,b.tokens.minus_minus];class ht{constructor(t,e,r){this.type=t,this.lexeme=e,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=lt.template_types.indexOf(this.type)}isArrayType(){return this.type==lt.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class dt{constructor(t){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=t?t:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new ht(lt.eof,"",this._line)),this._tokens}scanToken(){let t=this._advance();if("\n"==t)return this._line++,!0;if(this._isWhitespace(t))return!0;if("/"==t){if("/"==this._peekAhead()){for(;"\n"!=t;){if(this._isAtEnd())return!0;t=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let e=1;for(;e>0;){if(this._isAtEnd())return!0;if(t=this._advance(),"\n"==t)this._line++;else if("*"==t){if("/"==this._peekAhead()&&(this._advance(),e--,0==e))return!0}else"/"==t&&"*"==this._peekAhead()&&(this._advance(),e++)}return!0}}let e=lt.none;for(;;){let r=this._findType(t);const n=this._peekAhead();if(">"==t&&(">"==n||"="==n)){let t=!1,e=this._tokens.length-1;for(let r=0;r<4&&e>=0;++r,--e)if(this._tokens[e].type===lt.tokens.less_than){e>0&&this._tokens[e-1].isArrayOrTemplateType()&&(t=!0);break}if(t)return this._addToken(r),!0}if(r===lt.none){let n=t,s=0;const i=2;for(let t=0;t<i;++t)if(n+=this._peekAhead(t),r=this._findType(n),r!==lt.none){s=t;break}if(r===lt.none)return e!==lt.none&&(this._current--,this._addToken(e),!0);t=n,this._current+=s+1}if(e=r,this._isAtEnd())break;t+=this._advance()}return e!==lt.none&&(this._addToken(e),!0)}_findType(t){for(const e in lt.keywords){const r=lt.keywords[e];if(this._match(t,r.rule))return r}for(const e in lt.tokens){const r=lt.tokens[e];if(this._match(t,r.rule))return r}return lt.none}_match(t,e){if("string"==typeof e){if(e==t)return!0}else{const r=e.exec(t);if(r&&0==r.index&&r[0]==t)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(t){return" "==t||"\t"==t||"\r"==t}_advance(t=0){let e=this._source[this._current];return t=t||0,t++,this._current+=t,e}_peekAhead(t=0){return t=t||0,this._current+t>=this._source.length?"\0":this._source[this._current+t]}_addToken(t){const e=this._source.substring(this._start,this._current);this._tokens.push(new ht(t,e,this._line))}}class _t{constructor(){this._tokens=[],this._current=0,this._context=new u}parse(t){this._initialize(t);let e=[];for(;!this._isAtEnd();){const t=this._global_decl_or_directive();if(!t)break;e.push(t)}return e}_initialize(t){if(t)if("string"==typeof t){const e=new dt(t);this._tokens=e.scanTokens()}else this._tokens=t;else this._tokens=[];this._current=0}_error(t,e){return console.error(t,e),{token:t,message:e,toString:function(){return`${e}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==lt.eof}_match(t){if(t instanceof ct)return!!this._check(t)&&(this._advance(),!0);for(let e=0,r=t.length;e<r;++e){const r=t[e];if(this._check(r))return this._advance(),!0}return!1}_consume(t,e){if(this._check(t))return this._advance();throw this._error(this._peek(),e)}_check(t){if(this._isAtEnd())return!1;const e=this._peek();if(t instanceof Array){let r=e.type;return-1!=t.indexOf(r)}return e.type==t}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(lt.tokens.semicolon)&&!this._isAtEnd(););if(this._match(lt.keywords.alias)){const t=this._type_alias();return this._consume(lt.tokens.semicolon,"Expected ';'"),t}if(this._match(lt.keywords.enable)){const t=this._enable_directive();return this._consume(lt.tokens.semicolon,"Expected ';'"),t}const t=this._attribute();if(this._check(lt.keywords.var)){const e=this._global_variable_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.override)){const e=this._override_variable_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.let)){const e=this._global_let_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.const)){const e=this._global_const_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.struct)){const e=this._struct_decl();return null!=e&&(e.attributes=t),e}if(this._check(lt.keywords.fn)){const e=this._function_decl();return null!=e&&(e.attributes=t),e}return null}_function_decl(){if(!this._match(lt.keywords.fn))return null;const t=this._consume(lt.tokens.ident,"Expected function name.").toString();this._consume(lt.tokens.paren_left,"Expected '(' for function arguments.");const e=[];if(!this._check(lt.tokens.paren_right))do{if(this._check(lt.tokens.paren_right))break;const t=this._attribute(),r=this._consume(lt.tokens.ident,"Expected argument name.").toString();this._consume(lt.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n,e.push(new it(r,s,t)))}while(this._match(lt.tokens.comma));this._consume(lt.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(lt.tokens.arrow)){const t=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=t)}const n=this._compound_statement();return new h(t,e,r,n)}_compound_statement(){const t=[];for(this._consume(lt.tokens.brace_left,"Expected '{' for block.");!this._check(lt.tokens.brace_right);){const e=this._statement();null!==e&&t.push(e)}return this._consume(lt.tokens.brace_right,"Expected '}' for block."),t}_statement(){for(;this._match(lt.tokens.semicolon)&&!this._isAtEnd(););if(this._check(lt.keywords.if))return this._if_statement();if(this._check(lt.keywords.switch))return this._switch_statement();if(this._check(lt.keywords.loop))return this._loop_statement();if(this._check(lt.keywords.for))return this._for_statement();if(this._check(lt.keywords.while))return this._while_statement();if(this._check(lt.keywords.continuing))return this._continuing_statement();if(this._check(lt.keywords.static_assert))return this._static_assert_statement();if(this._check(lt.tokens.brace_left))return this._compound_statement();let t=null;return t=this._check(lt.keywords.return)?this._return_statement():this._check([lt.keywords.var,lt.keywords.let,lt.keywords.const])?this._variable_statement():this._match(lt.keywords.discard)?new N:this._match(lt.keywords.break)?new U:this._match(lt.keywords.continue)?new I:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=t&&this._consume(lt.tokens.semicolon,"Expected ';' after statement."),t}_static_assert_statement(){if(!this._match(lt.keywords.static_assert))return null;let t=this._optional_paren_expression();return new d(t)}_while_statement(){if(!this._match(lt.keywords.while))return null;let t=this._optional_paren_expression();const e=this._compound_statement();return new _(t,e)}_continuing_statement(){if(!this._match(lt.keywords.continuing))return null;const t=this._compound_statement();return new f(t)}_for_statement(){if(!this._match(lt.keywords.for))return null;this._consume(lt.tokens.paren_left,"Expected '('.");const t=this._check(lt.tokens.semicolon)?null:this._for_init();this._consume(lt.tokens.semicolon,"Expected ';'.");const e=this._check(lt.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(lt.tokens.semicolon,"Expected ';'.");const r=this._check(lt.tokens.paren_right)?null:this._for_increment();this._consume(lt.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new p(t,e,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(lt.keywords.var)){const t=this._variable_decl();if(null===t)throw this._error(this._peek(),"Variable declaration expected.");let e=null;return this._match(lt.tokens.equal)&&(e=this._short_circuit_or_expression()),new m(t.name,t.type,t.storage,t.access,e)}if(this._match(lt.keywords.let)){const t=this._consume(lt.tokens.ident,"Expected name for let.").toString();let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(lt.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new y(t,e,null,null,r)}if(this._match(lt.keywords.const)){const t=this._consume(lt.tokens.ident,"Expected name for const.").toString();let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(lt.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new w(t,e,null,null,r)}return null}_increment_decrement_statement(){const t=this._current,e=this._unary_expression();if(null==e)return null;if(!this._check(lt.increment_operators))return this._current=t,null;const r=this._consume(lt.increment_operators,"Expected increment operator");return new T(r.type===lt.tokens.plus_plus?x.increment:x.decrement,e)}_assignment_statement(){let t=null;if(this._check(lt.tokens.brace_right))return null;let e=this._match(lt.tokens.underscore);if(e||(t=this._unary_expression()),!e&&null==t)return null;const r=this._consume(lt.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new S(v.parse(r.lexeme),t,n)}_func_call_statement(){if(!this._check(lt.tokens.ident))return null;const t=this._current,e=this._consume(lt.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=t,null):new A(e.lexeme,r)}_loop_statement(){if(!this._match(lt.keywords.loop))return null;this._consume(lt.tokens.brace_left,"Expected '{' for loop.");const t=[];let e=this._statement();for(;null!==e;){if(Array.isArray(e))for(let r of e)t.push(r);else t.push(e);e=this._statement()}let r=null;return this._match(lt.keywords.continuing)&&(r=this._compound_statement()),this._consume(lt.tokens.brace_right,"Expected '}' for loop."),new E(t,r)}_switch_statement(){if(!this._match(lt.keywords.switch))return null;const t=this._optional_paren_expression();this._consume(lt.tokens.brace_left,"Expected '{' for switch.");const e=this._switch_body();if(null==e||0==e.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(lt.tokens.brace_right,"Expected '}' for switch."),new P(t,e)}_switch_body(){const t=[];if(this._match(lt.keywords.case)){const e=this._case_selectors();this._match(lt.tokens.colon),this._consume(lt.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(lt.tokens.brace_right,"Exected '}' for switch case."),t.push(new nt(e,r))}if(this._match(lt.keywords.default)){this._match(lt.tokens.colon),this._consume(lt.tokens.brace_left,"Exected '{' for switch default.");const e=this._case_body();this._consume(lt.tokens.brace_right,"Exected '}' for switch default."),t.push(new st(e))}if(this._check([lt.keywords.default,lt.keywords.case])){const e=this._switch_body();t.push(e[0])}return t}_case_selectors(){var t,e,r,n;const s=[null!==(e=null===(t=this._shift_expression())||void 0===t?void 0:t.evaluate(this._context).toString())&&void 0!==e?e:""];for(;this._match(lt.tokens.comma);)s.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return s}_case_body(){if(this._match(lt.keywords.fallthrough))return this._consume(lt.tokens.semicolon,"Expected ';'"),[];let t=this._statement();if(null==t)return[];t instanceof Array||(t=[t]);const e=this._case_body();return 0==e.length?t:[...t,e[0]]}_if_statement(){if(!this._match(lt.keywords.if))return null;const t=this._optional_paren_expression(),e=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(lt.keywords.else)&&(n=this._compound_statement()),new C(t,e,r,n)}_match_elseif(){return this._tokens[this._current].type===lt.keywords.else&&this._tokens[this._current+1].type===lt.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(t=[]){const e=this._optional_paren_expression(),r=this._compound_statement();return t.push(new at(e,r)),this._match_elseif()&&this._elseif_statement(t),t}_return_statement(){if(!this._match(lt.keywords.return))return null;const t=this._short_circuit_or_expression();return new z(t)}_short_circuit_or_expression(){let t=this._short_circuit_and_expr();for(;this._match(lt.tokens.or_or);)t=new et(this._previous().toString(),t,this._short_circuit_and_expr());return t}_short_circuit_and_expr(){let t=this._inclusive_or_expression();for(;this._match(lt.tokens.and_and);)t=new et(this._previous().toString(),t,this._inclusive_or_expression());return t}_inclusive_or_expression(){let t=this._exclusive_or_expression();for(;this._match(lt.tokens.or);)t=new et(this._previous().toString(),t,this._exclusive_or_expression());return t}_exclusive_or_expression(){let t=this._and_expression();for(;this._match(lt.tokens.xor);)t=new et(this._previous().toString(),t,this._and_expression());return t}_and_expression(){let t=this._equality_expression();for(;this._match(lt.tokens.and);)t=new et(this._previous().toString(),t,this._equality_expression());return t}_equality_expression(){const t=this._relational_expression();return this._match([lt.tokens.equal_equal,lt.tokens.not_equal])?new et(this._previous().toString(),t,this._relational_expression()):t}_relational_expression(){let t=this._shift_expression();for(;this._match([lt.tokens.less_than,lt.tokens.greater_than,lt.tokens.less_than_equal,lt.tokens.greater_than_equal]);)t=new et(this._previous().toString(),t,this._shift_expression());return t}_shift_expression(){let t=this._additive_expression();for(;this._match([lt.tokens.shift_left,lt.tokens.shift_right]);)t=new et(this._previous().toString(),t,this._additive_expression());return t}_additive_expression(){let t=this._multiplicative_expression();for(;this._match([lt.tokens.plus,lt.tokens.minus]);)t=new et(this._previous().toString(),t,this._multiplicative_expression());return t}_multiplicative_expression(){let t=this._unary_expression();for(;this._match([lt.tokens.star,lt.tokens.forward_slash,lt.tokens.modulo]);)t=new et(this._previous().toString(),t,this._unary_expression());return t}_unary_expression(){return this._match([lt.tokens.minus,lt.tokens.bang,lt.tokens.tilde,lt.tokens.star,lt.tokens.and])?new tt(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const t=this._primary_expression(),e=this._postfix_expression();return e&&(t.postfix=e),t}_postfix_expression(){if(this._match(lt.tokens.bracket_left)){const t=this._short_circuit_or_expression();this._consume(lt.tokens.bracket_right,"Expected ']'.");const e=this._postfix_expression();return e&&(t.postfix=e),t}if(this._match(lt.tokens.period)){const t=this._consume(lt.tokens.ident,"Expected member name."),e=this._postfix_expression(),r=new j(t.lexeme);return e&&(r.postfix=e),r}return null}_getStruct(t){return this._context.aliases.has(t)?this._context.aliases.get(t).type:this._context.structs.has(t)?this._context.structs.get(t):null}_primary_expression(){if(this._match(lt.tokens.ident)){const t=this._previous().toString();if(this._check(lt.tokens.paren_left)){const e=this._argument_expression_list(),r=this._getStruct(t);return null!=r?new Y(r,e):new H(t,e)}if(this._context.constants.has(t)){const e=this._context.constants.get(t);return new X(t,e.value)}return new $(t)}if(this._match(lt.const_literal))return new W(parseFloat(this._previous().toString()));if(this._check(lt.tokens.paren_left))return this._paren_expression();if(this._match(lt.keywords.bitcast)){this._consume(lt.tokens.less_than,"Expected '<'.");const t=this._type_decl();this._consume(lt.tokens.greater_than,"Expected '>'.");const e=this._paren_expression();return new K(t,e)}const t=this._type_decl(),e=this._argument_expression_list();return new Z(t,e)}_argument_expression_list(){if(!this._match(lt.tokens.paren_left))return null;const t=[];do{if(this._check(lt.tokens.paren_right))break;const e=this._short_circuit_or_expression();t.push(e)}while(this._match(lt.tokens.comma));return this._consume(lt.tokens.paren_right,"Expected ')' for agument list"),t}_optional_paren_expression(){this._match(lt.tokens.paren_left);const t=this._short_circuit_or_expression();return this._match(lt.tokens.paren_right),new Q([t])}_paren_expression(){this._consume(lt.tokens.paren_left,"Expected '('.");const t=this._short_circuit_or_expression();return this._consume(lt.tokens.paren_right,"Expected ')'."),new Q([t])}_struct_decl(){if(!this._match(lt.keywords.struct))return null;const t=this._consume(lt.tokens.ident,"Expected name for struct.").toString();this._consume(lt.tokens.brace_left,"Expected '{' for struct body.");const e=[];for(;!this._check(lt.tokens.brace_right);){const t=this._attribute(),r=this._consume(lt.tokens.ident,"Expected variable name.").toString();this._consume(lt.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n),this._check(lt.tokens.brace_right)?this._match(lt.tokens.comma):this._consume(lt.tokens.comma,"Expected ',' for struct member."),e.push(new ot(r,s,t))}this._consume(lt.tokens.brace_right,"Expected '}' after struct body.");const r=new G(t,e);return this._context.structs.set(t,r),r}_global_variable_decl(){const t=this._variable_decl();return t&&this._match(lt.tokens.equal)&&(t.value=this._const_expression()),t}_override_variable_decl(){const t=this._override_decl();return t&&this._match(lt.tokens.equal)&&(t.value=this._const_expression()),t}_global_const_decl(){if(!this._match(lt.keywords.const))return null;const t=this._consume(lt.tokens.ident,"Expected variable name");let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;if(this._match(lt.tokens.equal)){const t=this._short_circuit_or_expression();if(t instanceof Y)r=t;else if(t instanceof X&&t.initializer instanceof Y)r=t.initializer;else try{const e=t.evaluate(this._context);r=new W(e)}catch(e){r=t}}const n=new w(t.toString(),e,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(lt.keywords.let))return null;const t=this._consume(lt.tokens.ident,"Expected variable name");let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;return this._match(lt.tokens.equal)&&(r=this._const_expression()),new y(t.toString(),e,"","",r)}_const_expression(){if(this._match(lt.const_literal))return new j(this._previous().toString());const t=this._type_decl();this._consume(lt.tokens.paren_left,"Expected '('.");let e=[];for(;!this._check(lt.tokens.paren_right)&&(e.push(this._const_expression()),this._check(lt.tokens.comma));)this._advance();return this._consume(lt.tokens.paren_right,"Expected ')'."),new Y(t,e)}_variable_decl(){if(!this._match(lt.keywords.var))return null;let t="",e="";this._match(lt.tokens.less_than)&&(t=this._consume(lt.storage_class,"Expected storage_class.").toString(),this._match(lt.tokens.comma)&&(e=this._consume(lt.access_mode,"Expected access_mode.").toString()),this._consume(lt.tokens.greater_than,"Expected '>'."));const r=this._consume(lt.tokens.ident,"Expected variable name");let n=null;if(this._match(lt.tokens.colon)){const t=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=t)}return new m(r.toString(),n,t,e,null)}_override_decl(){if(!this._match(lt.keywords.override))return null;const t=this._consume(lt.tokens.ident,"Expected variable name");let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}return new g(t.toString(),e,null)}_enable_directive(){const t=this._consume(lt.tokens.ident,"identity expected.");return new B(t.toString())}_type_alias(){const t=this._consume(lt.tokens.ident,"identity expected.");this._consume(lt.tokens.equal,"Expected '=' for type alias.");let e=this._type_decl();if(null===e)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);const r=new q(t.toString(),e);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([lt.tokens.ident,...lt.texel_format,lt.keywords.bool,lt.keywords.f32,lt.keywords.i32,lt.keywords.u32])){const t=this._advance(),e=t.toString();return this._context.structs.has(e)?this._context.structs.get(e):this._context.aliases.has(e)?this._context.aliases.get(e).type:new F(t.toString())}if(this._check(lt.template_types)){let t=this._advance().toString(),e=null,r=null;return this._match(lt.tokens.less_than)&&(e=this._type_decl(),r=null,this._match(lt.tokens.comma)&&(r=this._consume(lt.access_mode,"Expected access_mode for pointer").toString()),this._consume(lt.tokens.greater_than,"Expected '>' for type.")),new D(t,e,r)}if(this._match(lt.keywords.ptr)){let t=this._previous().toString();this._consume(lt.tokens.less_than,"Expected '<' for pointer.");const e=this._consume(lt.storage_class,"Expected storage_class for pointer");this._consume(lt.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(lt.tokens.comma)&&(n=this._consume(lt.access_mode,"Expected access_mode for pointer").toString()),this._consume(lt.tokens.greater_than,"Expected '>' for pointer."),new O(t,e.toString(),r,n)}let t=this._texture_sampler_types();if(t)return t;const e=this._attribute();if(this._match(lt.keywords.array)){let t=null,r=-1;const n=this._previous();if(this._match(lt.tokens.less_than)){t=this._type_decl(),this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);let e="";this._match(lt.tokens.comma)&&(e=this._shift_expression().evaluate(this._context).toString()),this._consume(lt.tokens.greater_than,"Expected '>' for array."),r=e?parseInt(e):0}return new L(n.toString(),e,t,r)}return null}_texture_sampler_types(){if(this._match(lt.sampler_type))return new R(this._previous().toString(),null,null);if(this._match(lt.depth_texture_type))return new R(this._previous().toString(),null,null);if(this._match(lt.sampled_texture_type)||this._match(lt.multisampled_texture_type)){const t=this._previous();this._consume(lt.tokens.less_than,"Expected '<' for sampler type.");const e=this._type_decl();return this._consume(lt.tokens.greater_than,"Expected '>' for sampler type."),new R(t.toString(),e,null)}if(this._match(lt.storage_texture_type)){const t=this._previous();this._consume(lt.tokens.less_than,"Expected '<' for sampler type.");const e=this._consume(lt.texel_format,"Invalid texel format.").toString();this._consume(lt.tokens.comma,"Expected ',' after texel format.");const r=this._consume(lt.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(lt.tokens.greater_than,"Expected '>' for sampler type."),new R(t.toString(),e,r)}return null}_attribute(){let t=[];for(;this._match(lt.tokens.attr);){const e=this._consume(lt.attribute_name,"Expected attribute name"),r=new ut(e.toString(),null);if(this._match(lt.tokens.paren_left)){if(r.value=this._consume(lt.literal_or_ident,"Expected attribute value").toString(),this._check(lt.tokens.comma)){this._advance();do{const t=this._consume(lt.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(t)}while(this._match(lt.tokens.comma))}this._consume(lt.tokens.paren_right,"Expected ')'")}t.push(r)}for(;this._match(lt.tokens.attr_left);){if(!this._check(lt.tokens.attr_right))do{const e=this._consume(lt.attribute_name,"Expected attribute name"),r=new ut(e.toString(),null);if(this._match(lt.tokens.paren_left)){if(r.value=[this._consume(lt.literal_or_ident,"Expected attribute value").toString()],this._check(lt.tokens.comma)){this._advance();do{const t=this._consume(lt.literal_or_ident,"Expected attribute value").toString();r.value.push(t)}while(this._match(lt.tokens.comma))}this._consume(lt.tokens.paren_right,"Expected ')'")}t.push(r)}while(this._match(lt.tokens.comma));this._consume(lt.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==t.length?null:t}}class ft{constructor(t,e){this.name=t,this.attributes=e,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class pt{constructor(t,e,r){this.name=t,this.type=e,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class mt extends ft{constructor(t,e){super(t,e),this.members=[],this.align=0}get isStruct(){return!0}}class gt extends ft{constructor(t,e){super(t,e),this.count=0,this.stride=0}get isArray(){return!0}}class yt extends ft{constructor(t,e,r){super(t,r),this.format=e}get isTemplate(){return!0}}!function(t){t[t.Uniform=0]="Uniform",t[t.Storage=1]="Storage",t[t.Texture=2]="Texture",t[t.Sampler=3]="Sampler"}(M||(M={}));class wt{constructor(t,e,r,n,s,i){this.name=t,this.type=e,this.group=r,this.binding=n,this.attributes=s,this.resourceType=i}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class xt{constructor(t,e){this.name=t,this.type=e}}class vt{constructor(t,e){this.align=t,this.size=e}}class bt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n,this.interpolation=null}}class kt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n}}class Mt{constructor(t,e=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=t,this.stage=e}}class Tt{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class St{constructor(t,e,r,n){this.name=t,this.type=e,this.attributes=r,this.id=n}}class At{constructor(t){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Tt,this._types=new Map,t&&this.update(t)}update(t){const e=(new _t).parse(t);for(const t of e){if(t instanceof G){const e=this._getTypeInfo(t,null);e instanceof mt&&this.structs.push(e)}if(t instanceof q&&this.aliases.push(this._getAliasInfo(t)),t instanceof g){const e=t,r=this._getAttributeNum(e.attributes,"id",0),n=null!=e.type?this._getTypeInfo(e.type,e.attributes):null;this.overrides.push(new St(e.name,n,e.attributes,r))}if(this._isUniformVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,s,r,n,e.attributes,M.Uniform);this.uniforms.push(i)}if(this._isStorageVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,s,r,n,e.attributes,M.Storage);this.storage.push(i)}if(this._isTextureVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,s,r,n,e.attributes,M.Texture);this.textures.push(i)}if(this._isSamplerVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,s,r,n,e.attributes,M.Sampler);this.samplers.push(i)}if(t instanceof h){const e=this._getAttribute(t,"vertex"),r=this._getAttribute(t,"fragment"),n=this._getAttribute(t,"compute"),s=e||r||n;if(s){const e=new Mt(t.name,s.name);e.inputs=this._getInputs(t.args),e.outputs=this._getOutputs(t.returnType),this.entry[s.name].push(e)}}}}getBindGroups(){const t=[];function e(e,r){e>=t.length&&(t.length=e+1),void 0===t[e]&&(t[e]=[]),r>=t[e].length&&(t[e].length=r+1)}for(const r of this.uniforms)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.storage)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.textures)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.samplers)e(r.group,r.binding),t[r.group][r.binding]=r;return t}_getOutputs(t,e=void 0){if(void 0===e&&(e=[]),t instanceof G)this._getStructOutputs(t,e);else{const r=this._getOutputInfo(t);null!==r&&e.push(r)}return e}_getStructOutputs(t,e){for(const r of t.members)if(r.type instanceof G)this._getStructOutputs(r.type,e);else{const t=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==t){const n=this._getTypeInfo(r.type,r.type.attributes),s=this._parseInt(t.value),i=new kt(r.name,n,t.name,s);e.push(i)}}}_getOutputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getTypeInfo(t,t.attributes),n=this._parseInt(e.value);return new kt("",r,e.name,n)}return null}_getInputs(t,e=void 0){void 0===e&&(e=[]);for(const r of t)if(r.type instanceof G)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}return e}_getStructInputs(t,e){for(const r of t.members)if(r.type instanceof G)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}}_getInputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getAttribute(t,"interpolation"),n=this._getTypeInfo(t.type,t.attributes),s=this._parseInt(e.value),i=new bt(t.name,n,e.name,s);return null!==r&&(i.interpolation=this._parseString(r.value)),i}return null}_parseString(t){return t instanceof Array&&(t=t[0]),t}_parseInt(t){t instanceof Array&&(t=t[0]);const e=parseInt(t);return isNaN(e)?t:e}_getAlias(t){for(const e of this.aliases)if(e.name==t)return e.type;return null}_getAliasInfo(t){return new xt(t.name,this._getTypeInfo(t.type,null))}_getTypeInfo(t,e){if(this._types.has(t))return this._types.get(t);if(t instanceof L){const r=t,n=this._getTypeInfo(r.format,r.attributes),s=new gt(r.name,e);return s.format=n,s.count=r.count,this._types.set(t,s),this._updateTypeInfo(s),s}if(t instanceof G){const r=t,n=new mt(r.name,e);for(const t of r.members){const e=this._getTypeInfo(t.type,t.attributes);n.members.push(new pt(t.name,e,t.attributes))}return this._types.set(t,n),this._updateTypeInfo(n),n}if(t instanceof D){const r=t,n=r.format?this._getTypeInfo(r.format,null):null,s=new yt(r.name,n,e);return this._types.set(t,s),this._updateTypeInfo(s),s}const r=new ft(t.name,e);return this._types.set(t,r),this._updateTypeInfo(r),r}_updateTypeInfo(t){var e,r;const n=this._getTypeSize(t);if(t.size=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:0,t instanceof gt){const e=this._getTypeSize(t.format);t.stride=null!==(r=null==e?void 0:e.size)&&void 0!==r?r:0,this._updateTypeInfo(t.format)}t instanceof mt&&this._updateStructInfo(t)}_updateStructInfo(t){var e;let r=0,n=0,s=0,i=0;for(let a=0,o=t.members.length;a<o;++a){const o=t.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(e=this._getAlias(o.type.name))&&void 0!==e||o.type;const c=u.align,l=u.size;r=this._roundUp(c,r+n),n=l,s=r,i=Math.max(i,c),o.offset=r,o.size=l,this._updateTypeInfo(o.type)}t.size=this._roundUp(i,s+n),t.align=i}_getTypeSize(t){var e;if(null==t)return null;const r=this._getAttributeNum(t.attributes,"size",0),n=this._getAttributeNum(t.attributes,"align",0);if(t instanceof pt&&(t=t.type),t instanceof ft){const e=this._getAlias(t.name);null!==e&&(t=e)}{const e=At._typeInfo[t.name];if(void 0!==e){const s="f16"===t.format?2:1;return new vt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}{const e=At._typeInfo[t.name.substring(0,t.name.length-1)];if(e){const s="h"===t.name[t.name.length-1]?2:1;return new vt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}if(t instanceof gt){let s=t,i=8,a=8;const o=this._getTypeSize(s.format);return null!==o&&(a=o.size,i=o.align),a=s.count*this._getAttributeNum(null!==(e=null==t?void 0:t.attributes)&&void 0!==e?e:null,"stride",this._roundUp(i,a)),r&&(a=r),new vt(Math.max(n,i),Math.max(r,a))}if(t instanceof mt){let e=0,s=0,i=0,a=0,o=0;for(const r of t.members){const t=this._getTypeSize(r.type);null!==t&&(e=Math.max(t.align,e),i=this._roundUp(t.align,i+a),a=t.size,o=i)}return s=this._roundUp(e,o+a),new vt(Math.max(n,e),Math.max(r,s))}return null}_isUniformVar(t){return t instanceof m&&"uniform"==t.storage}_isStorageVar(t){return t instanceof m&&"storage"==t.storage}_isTextureVar(t){return t instanceof m&&null!==t.type&&-1!=At._textureTypes.indexOf(t.type.name)}_isSamplerVar(t){return t instanceof m&&null!==t.type&&-1!=At._samplerTypes.indexOf(t.type.name)}_getAttribute(t,e){const r=t;if(!r||!r.attributes)return null;const n=r.attributes;for(let t of n)if(t.name==e)return t;return null}_getAttributeNum(t,e,r){if(null===t)return r;for(let n of t)if(n.name==e){let t=null!==n&&null!==n.value?n.value:r;return t instanceof Array&&(t=t[0]),"number"==typeof t?t:"string"==typeof t?parseInt(t):r}return r}_roundUp(t,e){return Math.ceil(e/t)*t}}function Et(t,e){const r=function(t){return Array.isArray(t)||o(t)?[...t,1,1].slice(0,3):function(t){return[t.width,t.height||1,t.depthOrArrayLayers||1]}(t)}(t),n=Math.max(...r.slice(0,"3d"===e?3:2));return 1+Math.log2(n)|0}At._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},At._textureTypes=lt.any_texture_type.map((t=>t.name)),At._samplerTypes=lt.sampler_type.map((t=>t.name));const Pt=new WeakMap,Ct=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function zt(t){return o(t)||Array.isArray(t)||function(t){const e=t;return o(e.data)||Array.isArray(e.data)}(t)}function Bt(t){switch(t){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Ct.entries()].map((([t,{formats:[e,r]}])=>[[e,t],[r,t]])).flat());const qt={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Nt=/([a-z]+)(\d+)([a-z]+)/;function Ut(t){const[,e,r,n]=Nt.exec(t),s=e.length,i=parseInt(r)/8;return{channels:e,numChannels:s,bytesPerChannel:i,bytesPerElement:s*i,Type:qt[`${r}${n}`]}}function It(t,e,r,n={}){r.forEach(((r,s)=>{const i=[0,0,s+(n.baseArrayLayer||0)];if(zt(r))!function(t,e,r,n){const s=function(t,e){if(o(t))return t;const{Type:r}=Ut(e);return new r(t)}(r.data||r,e.format),i=function(t,e){return[t.width,t.height,t.depthOrArrayLayers].map((t=>Math.max(1,Math.floor(t/1))))}(e),{bytesPerElement:a}=Ut(e.format),u=n.origin||[0,0,0];t.queue.writeTexture({texture:e,origin:u},s,{bytesPerRow:a*i[0],rowsPerImage:i[1]},i)}(t,e,r,{origin:i});else{const s=r,{flipY:a,premultipliedAlpha:o,colorSpace:u}=n;t.queue.copyExternalImageToTexture({source:s,flipY:a},{texture:e,premultipliedAlpha:o,colorSpace:u,origin:i},Ft(s,n))}})),e.mipLevelCount>1&&function(t,e){let r=Pt.get(t);r||(r={pipelineByFormat:{},moduleByView:{}},Pt.set(t,r));let{sampler:n}=r;const{pipelineByFormat:s,moduleByView:i}=r,a=function(t){switch(t.dimension){case"1d":return"1d";case"3d":return"3d";default:return t.depthOrArrayLayers>1?"2d-array":"2d"}}(e);let o=i[a];o||(o=t.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),i[a]=o),n||(n=t.createSampler({minFilter:"linear"}),r.sampler=n);const u=`${e.format}`;s[u]||(s[u]=t.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:e.format}]}}));const c=s[u],l=t.createCommandEncoder({label:"mip gen encoder"});for(let r=1;r<e.mipLevelCount;++r)for(let s=0;s<e.depthOrArrayLayers;++s){const i=t.createBindGroup({layout:c.getBindGroupLayout(0),entries:[{binding:0,resource:n},{binding:1,resource:e.createView({dimension:"2d",baseMipLevel:r-1,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:e.createView({baseMipLevel:r,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=l.beginRenderPass(a);o.setPipeline(c),o.setBindGroup(0,i),o.draw(3),o.end()}const h=l.finish();t.queue.submit([h])}(t,e)}function Ft(t,e){if(t instanceof HTMLVideoElement)return[t.videoWidth,t.videoHeight,1];{const r=t,{width:n,height:s}=r;if(n>0&&s>0&&!zt(t))return[n,s,1];const i=e.format||"rgba8unorm",{bytesPerElement:a,bytesPerChannel:u}=Ut(i),c=o(t)||Array.isArray(t)?t:t.data;return function(t,e,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(t||e){if(e){if(!t&&(t=r/e)%1)throw new Error("can't guess dimensions")}else if((e=r/t)%1)throw new Error("can't guess dimensions")}else{const s=Math.sqrt(r/("cube"===n?6:1));s%1==0?(t=s,e=s):(t=r,e=1)}const s=r/t/e;if(s%1)throw new Error("can't guess dimensions");return[t,e,s]}(n,s,(o(c)?c.byteLength:c.length*u)/a)}}async function Gt(t,e,r={}){const n=await Promise.all(e.map((t=>async function(t,e={}){const r=await fetch(t),n=await r.blob(),s={...e,...void 0!==e.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,s)}(t))));return function(t,e,r={}){const n=Ft(e[0],r);n[2]=n[2]>1?n[2]:e.length;const s=t.createTexture({dimension:Bt(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Et(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return It(t,s,e,r),s}(t,n,r)}async function Dt(t,e,r={}){return Gt(t,[e],r)}var Ot;function Lt(t,e,r=1,n=1){const s=r*n,i=new Uint8Array(4*s),[a,o,u,c]=e;for(let t=0;t<s;++t){const e=4*t;i[e]=255*a,i[e+1]=255*o,i[e+2]=255*u,i[e+3]=255*c}const l=t.createTexture({size:{width:r,height:n},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return t.queue.writeTexture({texture:l},i,{bytesPerRow:4*r,rowsPerImage:n},{width:r,height:n}),l}!function(t){t[t.Default=0]="Default",t[t.SolidColor=1]="SolidColor",t[t.VertexNormal=2]="VertexNormal",t[t.NormalMap=3]="NormalMap"}(Ot||(Ot={}));class Rt{mode=Ot.Default;ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(t){t&&(this.mode=t.mode??this.mode,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.shininess=t.shininess??this.shininess,this.diffuseMapPath=t.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=t.specularMapPath??this.specularMapPath,this.normalMapPath=t.normalMapPath??this.normalMapPath,this.disableNormalMap=t.disableNormalMap??this.disableNormalMap)}static solidColor(t){return new Rt({mode:Ot.SolidColor,diffuseColor:t})}getBytes(){return new Float32Array([this.mode,this.disableNormalMap?1:0,0,0,...this.ambientColor,...this.specularColor,this.shininess,0,0,0])}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"material",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}async writeTexturesToGpuAsync(t,e){this.ambientMapPath?this._ambientTexture=await Dt(t,this.ambientMapPath,{mips:e}):this._ambientTexture=Lt(t,this.ambientColor),this.diffuseMapPath?this._diffuseTexture=await Dt(t,this.diffuseMapPath,{mips:e}):this._diffuseTexture=Lt(t,this.diffuseColor),this.specularMapPath?this._specularTexture=await Dt(t,this.specularMapPath,{mips:e}):this._specularTexture=Lt(t,this.specularColor),this.normalMapPath?this._normalTexture=await Dt(t,this.normalMapPath,{mips:e}):this._normalTexture=Lt(t,[0,0,1,1])}}class Vt{name;vertices;vertexCount;vertexBufferLayout;topology;material;normalData;normalBufferLayout;vertexBuffer=null;normalBuffer=null;constructor(t,e,r,n,s,i=new Rt,a=null,o=null){this.name=t,this.vertices=e,this.vertexCount=r,this.vertexBufferLayout=n,this.topology=s,this.material=i,this.normalData=a,this.normalBufferLayout=o}writeMeshToGpu(t){if(null!=this.vertexBuffer)return;const e={label:`${this.name} vertex buffer`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};if(this.vertexBuffer=t.createBuffer(e),t.queue.writeBuffer(this.vertexBuffer,0,this.vertices,0),null==this.normalData)return;const r={label:`${this.name} normal buffer`,size:this.normalData.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this.normalBuffer=t.createBuffer(r),t.queue.writeBuffer(this.normalBuffer,0,this.normalData,0)}}var jt,Yt=r(582),Ht=r(284);function $t(t,e,r,s,i,a,o=!0){const u=n.R3.subtract(e,t),c=n.R3.subtract(r,t),l=n.K4.subtract(i,s),h=n.K4.subtract(a,s),d=1/(l[0]*h[1]-l[1]*h[0]);return[n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,h[1]),n.R3.mulScalar(c,-l[1])),d),n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,-h[0]),n.R3.mulScalar(c,l[0])),o?-d:d)]}function Xt(t){const e=Ht.Vk,r=Ht.qw,n=function(t,e){const r=[],n=14,s=t=>[t.slice(0,3),t.slice(8,10)];for(let i=0;i<e;i++){const[e,a]=s(t.slice(i*n,(i+1)*n));i++;const[o,u]=s(t.slice(i*n,(i+1)*n));i++;const[c,l]=s(t.slice(i*n,(i+1)*n)),[h,d]=$t(e,o,c,a,u,l);for(let t=0;t<3;t++)r.push(...h),r.push(...d)}return new Float32Array(r)}(e,r);return new Vt("cube_asset",e,r,Ht.sY,Ht.nk,t??new Rt,n,Yt.aH)}!function(t){t[t.Direct=0]="Direct",t[t.Point=1]="Point"}(jt||(jt={}));class Wt{static _CUBEASSET=Xt(new Rt({mode:Ot.SolidColor,diffuseColor:[1,1,1,0]}));_model=new a("light",Wt._CUBEASSET);get model(){return this._model}intensity=1;type=jt.Point;ambientColor=[.2,.2,.2,0];diffuseColor=[.5,.5,.5,0];specularColor=[.8,.8,.8,0];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;_positionOrDirection=[0,30,0];get positionOrDirection(){return this._positionOrDirection}set positionOrDirection(t){this._positionOrDirection=t;let e=this.type==jt.Point?this._positionOrDirection:n.R3.mulScalar(n.R3.normalize(this._positionOrDirection),-100);this._model.transform=n._E.uniformScale(n._E.translation([...e,0],this._model.transform),.5,this._model.transform)}constructor(t){this._model=new a("light",Wt._CUBEASSET).translate(...this.positionOrDirection).scale(.5,.5,.5),t&&(this.type=t.type??this.type,this.positionOrDirection=t.positionOrDirection??this.positionOrDirection,this.ambientColor=t.ambientColor??this.ambientColor,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.specularColor=t.specularColor??this.specularColor),this.positionOrDirection=this._positionOrDirection}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}getBytes(){return new Float32Array([this.type,0,0,0,...this.positionOrDirection,0,...this.disableAmbientColor?[0,0,0,1]:n.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor?[0,0,0,1]:n.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor?[0,0,0,1]:n.vh.mulScalar(this.specularColor,this.intensity)])}get size(){return Math.max(this.getBytes().byteLength,80)}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"direct light",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}}const Kt=window.location.pathname;function Zt(){const t=document.createElement("div");return t.style.display="flex",t.style.gap="10px",t}function Qt(t,e,r,n=!0){let[s,i]=function(t,e=!0){const r=document.createElement("input");r.type="checkbox",r.id=t,r.name=r.id,r.checked=e;const n=document.createElement("label");return n.htmlFor=r.id,n.textContent=r.id,[r,n]}(e,n);t.appendChild(s),t.appendChild(i),s.addEventListener("change",(()=>r(s)))}class Jt{isAnimated=!0;camera=new i;lights=[new Wt];models=[];constructor(t){t&&(this.isAnimated=t.isAnimated??!0,this.camera=t.camera??this.camera)}update(t){}attachUi(t){}}class te extends Jt{uiContainer;attachUi(t){let e=function(){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t}();this.uiContainer=e;const r=Zt();e.appendChild(r);for(let[t,e]of this.lights.entries())Qt(r,`${jt[e.type]}Light_${t.toString().padStart(2,"0")}`,(t=>{e.intensity=t.checked?1:0}));Qt(r,"isAnimated",(t=>{this.isAnimated=t.checked}),this.isAnimated);const n=Zt();e.appendChild(n),Qt(n,"ambient",(t=>{for(let e of this.lights.values())e.disableAmbientColor=!t.checked})),Qt(n,"diffuse",(t=>{for(let e of this.lights.values())e.disableDiffuseColor=!t.checked})),Qt(n,"specular",(t=>{for(let e of this.lights.values())e.disableSpecularColor=!t.checked})),document.body.insertBefore(e,t.nextSibling)}}class ee extends te{constructor(){super(),this.camera=new i({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new Wt({positionOrDirection:[0,5,0]}),this.lights[1]=new Wt({type:jt.Direct,positionOrDirection:[-1,-1,-1]}),this.lights.forEach((t=>t.intensity=.7));let t=Xt(new Rt({mode:Ot.NormalMap,diffuseMapPath:`../${Kt}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${Kt}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`})),e=new a("Cube01",t).scale(10,10,10);this.models.push(e),this.lights.forEach((t=>{this.models.push(t.model)}))}currentTime=0;centerPos;update(t){this.isAnimated&&(this.centerPos=this.centerPos??this.lights[0].positionOrDirection,this.currentTime+=t,this.lights[0].positionOrDirection=[this.centerPos[0]+25*Math.sin(this.currentTime),this.centerPos[1],this.centerPos[2]+25*Math.cos(this.currentTime)])}attachUi(t){super.attachUi(t);const e=Zt();this.uiContainer.appendChild(e),Qt(e,"normal_mapping",(t=>{for(let e of this.models.filter((t=>!t.asset.name.includes("light"))))e.asset.material.disableNormalMap=!t.checked}))}}},416:(t,e,r)=>{r.d(e,{K4:()=>E,R3:()=>et,_E:()=>gt,vh:()=>Lt});let n=1e-6,s=Float32Array;function i(t=0,e=0){const r=new s(2);return void 0!==t&&(r[0]=t,void 0!==e&&(r[1]=e)),r}const a=i;function o(t,e,r){return(r=r||new s(2))[0]=t[0]-e[0],r[1]=t[1]-e[1],r}const u=o;function c(t,e,r){return(r=r||new s(2))[0]=t[0]*e,r[1]=t[1]*e,r}const l=c;function h(t,e){return(e=e||new s(2))[0]=1/t[0],e[1]=1/t[1],e}const d=h;function _(t,e){return t[0]*e[0]+t[1]*e[1]}function f(t){const e=t[0],r=t[1];return Math.sqrt(e*e+r*r)}const p=f;function m(t){const e=t[0],r=t[1];return e*e+r*r}const g=m;function y(t,e){const r=t[0]-e[0],n=t[1]-e[1];return Math.sqrt(r*r+n*n)}const w=y;function x(t,e){const r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n}const v=x;function b(t,e){return(e=e||new s(2))[0]=t[0],e[1]=t[1],e}const k=b;function M(t,e,r){return(r=r||new s(2))[0]=t[0]*e[0],r[1]=t[1]*e[1],r}const T=M;function S(t,e,r){return(r=r||new s(2))[0]=t[0]/e[0],r[1]=t[1]/e[1],r}const A=S;var E=Object.freeze({__proto__:null,create:i,setDefaultType:function(t){const e=s;return s=t,e},fromValues:a,set:function(t,e,r){return(r=r||new s(2))[0]=t,r[1]=e,r},ceil:function(t,e){return(e=e||new s(2))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e},floor:function(t,e){return(e=e||new s(2))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e},round:function(t,e){return(e=e||new s(2))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e},clamp:function(t,e=0,r=1,n){return(n=n||new s(2))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n},add:function(t,e,r){return(r=r||new s(2))[0]=t[0]+e[0],r[1]=t[1]+e[1],r},addScaled:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[0],i=t[1],a=Math.sqrt(r*r+n*n)*Math.sqrt(s*s+i*i),o=a&&_(t,e)/a;return Math.acos(o)},subtract:o,sub:u,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},lerp:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n},lerpV:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n},max:function(t,e,r){return(r=r||new s(2))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r},min:function(t,e,r){return(r=r||new s(2))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r},mulScalar:c,scale:l,divScalar:function(t,e,r){return(r=r||new s(2))[0]=t[0]/e,r[1]=t[1]/e,r},inverse:h,invert:d,cross:function(t,e,r){r=r||new s(3);const n=t[0]*e[1]-t[1]*e[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:_,length:f,len:p,lengthSq:m,lenSq:g,distance:y,dist:w,distanceSq:x,distSq:v,normalize:function(t,e){e=e||new s(2);const r=t[0],n=t[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(e[0]=r/i,e[1]=n/i):(e[0]=0,e[1]=0),e},negate:function(t,e){return(e=e||new s(2))[0]=-t[0],e[1]=-t[1],e},copy:b,clone:k,multiply:M,mul:T,divide:S,div:A,random:function(t=1,e){e=e||new s(2);const r=2*Math.random()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e},zero:function(t){return(t=t||new s(2))[0]=0,t[1]=0,t},transformMat4:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=n*e[0]+i*e[4]+e[12],r[1]=n*e[1]+i*e[5]+e[13],r},transformMat3:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=e[0]*n+e[4]*i+e[8],r[1]=e[1]*n+e[5]*i+e[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let P=Float32Array;function C(t,e,r){const n=new P(3);return void 0!==t&&(n[0]=t,void 0!==e&&(n[1]=e,void 0!==r&&(n[2]=r))),n}const z=C;function B(t,e,r){return(r=r||new P(3))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r}const q=B;function N(t,e,r){return(r=r||new P(3))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r}const U=N;function I(t,e){return(e=e||new P(3))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}const F=I;function G(t,e,r){r=r||new P(3);const n=t[2]*e[0]-t[0]*e[2],s=t[0]*e[1]-t[1]*e[0];return r[0]=t[1]*e[2]-t[2]*e[1],r[1]=n,r[2]=s,r}function D(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function O(t){const e=t[0],r=t[1],n=t[2];return Math.sqrt(e*e+r*r+n*n)}const L=O;function R(t){const e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}const V=R;function j(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}const Y=j;function H(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}const $=H;function X(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=Math.sqrt(r*r+n*n+s*s);return i>1e-5?(e[0]=r/i,e[1]=n/i,e[2]=s/i):(e[0]=0,e[1]=0,e[2]=0),e}function W(t,e){return(e=e||new P(3))[0]=t[0],e[1]=t[1],e[2]=t[2],e}const K=W;function Z(t,e,r){return(r=r||new P(3))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r}const Q=Z;function J(t,e,r){return(r=r||new P(3))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r}const tt=J;var et=Object.freeze({__proto__:null,create:C,setDefaultType:function(t){const e=P;return P=t,e},fromValues:z,set:function(t,e,r,n){return(n=n||new P(3))[0]=t,n[1]=e,n[2]=r,n},ceil:function(t,e){return(e=e||new P(3))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e},floor:function(t,e){return(e=e||new P(3))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e},round:function(t,e){return(e=e||new P(3))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e},clamp:function(t,e=0,r=1,n){return(n=n||new P(3))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n},add:function(t,e,r){return(r=r||new P(3))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r},addScaled:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[2],i=t[0],a=t[1],o=t[2],u=Math.sqrt(r*r+n*n+s*s)*Math.sqrt(i*i+a*a+o*o),c=u&&D(t,e)/u;return Math.acos(c)},subtract:B,sub:q,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},lerp:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n},lerpV:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n},max:function(t,e,r){return(r=r||new P(3))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r},min:function(t,e,r){return(r=r||new P(3))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r},mulScalar:N,scale:U,divScalar:function(t,e,r){return(r=r||new P(3))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r},inverse:I,invert:F,cross:G,dot:D,length:O,len:L,lengthSq:R,lenSq:V,distance:j,dist:Y,distanceSq:H,distSq:$,normalize:X,negate:function(t,e){return(e=e||new P(3))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},copy:W,clone:K,multiply:Z,mul:Q,divide:J,div:tt,random:function(t=1,e){e=e||new P(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,s=Math.sqrt(1-n*n)*t;return e[0]=Math.cos(r)*s,e[1]=Math.sin(r)*s,e[2]=n*t,e},zero:function(t){return(t=t||new P(3))[0]=0,t[1]=0,t[2]=0,t},transformMat4:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2],a=e[3]*n+e[7]*s+e[11]*i+e[15]||1;return r[0]=(e[0]*n+e[4]*s+e[8]*i+e[12])/a,r[1]=(e[1]*n+e[5]*s+e[9]*i+e[13])/a,r[2]=(e[2]*n+e[6]*s+e[10]*i+e[14])/a,r},transformMat4Upper3x3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformMat3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformQuat:function(t,e,r){r=r||new P(3);const n=e[0],s=e[1],i=e[2],a=2*e[3],o=t[0],u=t[1],c=t[2],l=s*c-i*u,h=i*o-n*c,d=n*u-s*o;return r[0]=o+l*a+2*(s*d-i*h),r[1]=u+h*a+2*(i*l-n*d),r[2]=c+d*a+2*(n*h-s*l),r},getTranslation:function(t,e){return(e=e||new P(3))[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||new P(3))[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},getScaling:function(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],c=t[9],l=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+c*c+l*l),e}});let rt=Float32Array;function nt(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}const st=nt;function it(t){return(t=t||new rt(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function at(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],c=t[7],l=t[8],h=t[9],d=t[10],_=t[11],f=t[12],p=t[13],m=t[14],g=t[15],y=d*g,w=m*_,x=u*g,v=m*c,b=u*_,k=d*c,M=s*g,T=m*i,S=s*_,A=d*i,E=s*c,P=u*i,C=l*p,z=f*h,B=a*p,q=f*o,N=a*h,U=l*o,I=r*p,F=f*n,G=r*h,D=l*n,O=r*o,L=a*n,R=y*o+v*h+b*p-(w*o+x*h+k*p),V=w*n+M*h+A*p-(y*n+T*h+S*p),j=x*n+T*o+E*p-(v*n+M*o+P*p),Y=k*n+S*o+P*h-(b*n+A*o+E*h),H=1/(r*R+a*V+l*j+f*Y);return e[0]=H*R,e[1]=H*V,e[2]=H*j,e[3]=H*Y,e[4]=H*(w*a+x*l+k*f-(y*a+v*l+b*f)),e[5]=H*(y*r+T*l+S*f-(w*r+M*l+A*f)),e[6]=H*(v*r+M*a+P*f-(x*r+T*a+E*f)),e[7]=H*(b*r+A*a+E*l-(k*r+S*a+P*l)),e[8]=H*(C*c+q*_+N*g-(z*c+B*_+U*g)),e[9]=H*(z*i+I*_+D*g-(C*i+F*_+G*g)),e[10]=H*(B*i+F*c+O*g-(q*i+I*c+L*g)),e[11]=H*(U*i+G*c+L*_-(N*i+D*c+O*_)),e[12]=H*(B*d+U*m+z*u-(N*m+C*u+q*d)),e[13]=H*(G*m+C*s+F*d-(I*d+D*m+z*s)),e[14]=H*(I*u+L*m+q*s-(O*m+B*s+F*u)),e[15]=H*(O*d+N*s+D*u-(G*u+L*d+U*s)),e}const ot=at;function ut(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],c=t[6],l=t[7],h=t[8],d=t[9],_=t[10],f=t[11],p=t[12],m=t[13],g=t[14],y=t[15],w=e[0],x=e[1],v=e[2],b=e[3],k=e[4],M=e[5],T=e[6],S=e[7],A=e[8],E=e[9],P=e[10],C=e[11],z=e[12],B=e[13],q=e[14],N=e[15];return r[0]=n*w+o*x+h*v+p*b,r[1]=s*w+u*x+d*v+m*b,r[2]=i*w+c*x+_*v+g*b,r[3]=a*w+l*x+f*v+y*b,r[4]=n*k+o*M+h*T+p*S,r[5]=s*k+u*M+d*T+m*S,r[6]=i*k+c*M+_*T+g*S,r[7]=a*k+l*M+f*T+y*S,r[8]=n*A+o*E+h*P+p*C,r[9]=s*A+u*E+d*P+m*C,r[10]=i*A+c*E+_*P+g*C,r[11]=a*A+l*E+f*P+y*C,r[12]=n*z+o*B+h*q+p*N,r[13]=s*z+u*B+d*q+m*N,r[14]=i*z+c*B+_*q+g*N,r[15]=a*z+l*B+f*q+y*N,r}const ct=ut;let lt,ht,dt;function _t(t,e,r){r=r||new rt(16);let n=t[0],s=t[1],i=t[2];const a=Math.sqrt(n*n+s*s+i*i);n/=a,s/=a,i/=a;const o=n*n,u=s*s,c=i*i,l=Math.cos(e),h=Math.sin(e),d=1-l;return r[0]=o+(1-o)*l,r[1]=n*s*d+i*h,r[2]=n*i*d-s*h,r[3]=0,r[4]=n*s*d-i*h,r[5]=u+(1-u)*l,r[6]=s*i*d+n*h,r[7]=0,r[8]=n*i*d+s*h,r[9]=s*i*d-n*h,r[10]=c+(1-c)*l,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const ft=_t;function pt(t,e,r,n){n=n||new rt(16);let s=e[0],i=e[1],a=e[2];const o=Math.sqrt(s*s+i*i+a*a);s/=o,i/=o,a/=o;const u=s*s,c=i*i,l=a*a,h=Math.cos(r),d=Math.sin(r),_=1-h,f=u+(1-u)*h,p=s*i*_+a*d,m=s*a*_-i*d,g=s*i*_-a*d,y=c+(1-c)*h,w=i*a*_+s*d,x=s*a*_+i*d,v=i*a*_-s*d,b=l+(1-l)*h,k=t[0],M=t[1],T=t[2],S=t[3],A=t[4],E=t[5],P=t[6],C=t[7],z=t[8],B=t[9],q=t[10],N=t[11];return n[0]=f*k+p*A+m*z,n[1]=f*M+p*E+m*B,n[2]=f*T+p*P+m*q,n[3]=f*S+p*C+m*N,n[4]=g*k+y*A+w*z,n[5]=g*M+y*E+w*B,n[6]=g*T+y*P+w*q,n[7]=g*S+y*C+w*N,n[8]=x*k+v*A+b*z,n[9]=x*M+v*E+b*B,n[10]=x*T+v*P+b*q,n[11]=x*S+v*C+b*N,t!==n&&(n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n}const mt=pt;var gt=Object.freeze({__proto__:null,setDefaultType:function(t){const e=rt;return rt=t,e},create:function(t,e,r,n,s,i,a,o,u,c,l,h,d,_,f,p){const m=new rt(16);return void 0!==t&&(m[0]=t,void 0!==e&&(m[1]=e,void 0!==r&&(m[2]=r,void 0!==n&&(m[3]=n,void 0!==s&&(m[4]=s,void 0!==i&&(m[5]=i,void 0!==a&&(m[6]=a,void 0!==o&&(m[7]=o,void 0!==u&&(m[8]=u,void 0!==c&&(m[9]=c,void 0!==l&&(m[10]=l,void 0!==h&&(m[11]=h,void 0!==d&&(m[12]=d,void 0!==_&&(m[13]=_,void 0!==f&&(m[14]=f,void 0!==p&&(m[15]=p)))))))))))))))),m},set:function(t,e,r,n,s,i,a,o,u,c,l,h,d,_,f,p,m){return(m=m||new rt(16))[0]=t,m[1]=e,m[2]=r,m[3]=n,m[4]=s,m[5]=i,m[6]=a,m[7]=o,m[8]=u,m[9]=c,m[10]=l,m[11]=h,m[12]=d,m[13]=_,m[14]=f,m[15]=p,m},fromMat3:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=0,e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=0,e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},fromQuat:function(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=r+r,o=n+n,u=s+s,c=r*a,l=n*a,h=n*o,d=s*a,_=s*o,f=s*u,p=i*a,m=i*o,g=i*u;return e[0]=1-h-f,e[1]=l+g,e[2]=d-m,e[3]=0,e[4]=l-g,e[5]=1-c-f,e[6]=_+p,e[7]=0,e[8]=d+m,e[9]=_-p,e[10]=1-c-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},negate:function(t,e){return(e=e||new rt(16))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=-t[7],e[8]=-t[8],e[9]=-t[9],e[10]=-t[10],e[11]=-t[11],e[12]=-t[12],e[13]=-t[13],e[14]=-t[14],e[15]=-t[15],e},copy:nt,clone:st,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n&&Math.abs(t[4]-e[4])<n&&Math.abs(t[5]-e[5])<n&&Math.abs(t[6]-e[6])<n&&Math.abs(t[7]-e[7])<n&&Math.abs(t[8]-e[8])<n&&Math.abs(t[9]-e[9])<n&&Math.abs(t[10]-e[10])<n&&Math.abs(t[11]-e[11])<n&&Math.abs(t[12]-e[12])<n&&Math.abs(t[13]-e[13])<n&&Math.abs(t[14]-e[14])<n&&Math.abs(t[15]-e[15])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},identity:it,transpose:function(t,e){if((e=e||new rt(16))===t){let r;return r=t[1],t[1]=t[4],t[4]=r,r=t[2],t[2]=t[8],t[8]=r,r=t[3],t[3]=t[12],t[12]=r,r=t[6],t[6]=t[9],t[9]=r,r=t[7],t[7]=t[13],t[13]=r,r=t[11],t[11]=t[14],t[14]=r,e}const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],c=t[7],l=t[8],h=t[9],d=t[10],_=t[11],f=t[12],p=t[13],m=t[14],g=t[15];return e[0]=r,e[1]=a,e[2]=l,e[3]=f,e[4]=n,e[5]=o,e[6]=h,e[7]=p,e[8]=s,e[9]=u,e[10]=d,e[11]=m,e[12]=i,e[13]=c,e[14]=_,e[15]=g,e},inverse:at,determinant:function(t){const e=t[0],r=t[1],n=t[2],s=t[3],i=t[4],a=t[5],o=t[6],u=t[7],c=t[8],l=t[9],h=t[10],d=t[11],_=t[12],f=t[13],p=t[14],m=t[15],g=h*m,y=p*d,w=o*m,x=p*u,v=o*d,b=h*u,k=n*m,M=p*s,T=n*d,S=h*s,A=n*u,E=o*s;return e*(g*a+x*l+v*f-(y*a+w*l+b*f))+i*(y*r+k*l+S*f-(g*r+M*l+T*f))+c*(w*r+M*a+A*f-(x*r+k*a+E*f))+_*(b*r+T*a+E*l-(v*r+S*a+A*l))},invert:ot,multiply:ut,mul:ct,setTranslation:function(t,e,r){return t!==(r=r||it())&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11]),r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},getTranslation:function(t,e){return(e=e||C())[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||C())[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},setAxis:function(t,e,r,n){n!==t&&(n=nt(t,n));const s=4*r;return n[s+0]=e[0],n[s+1]=e[1],n[s+2]=e[2],n},getScaling:function(t,e){e=e||C();const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],c=t[9],l=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+c*c+l*l),e},perspective:function(t,e,r,n,s){s=s||new rt(16);const i=Math.tan(.5*Math.PI-.5*t);if(s[0]=i/e,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,n===1/0)s[10]=-1,s[14]=-r;else{const t=1/(r-n);s[10]=n*t,s[14]=n*r*t}return s},ortho:function(t,e,r,n,s,i,a){return(a=a||new rt(16))[0]=2/(e-t),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(n-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(s-i),a[11]=0,a[12]=(e+t)/(t-e),a[13]=(n+r)/(r-n),a[14]=s/(s-i),a[15]=1,a},frustum:function(t,e,r,n,s,i,a){const o=e-t,u=n-r,c=s-i;return(a=a||new rt(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(t+e)/o,a[9]=(n+r)/u,a[10]=i/c,a[11]=-1,a[12]=0,a[13]=0,a[14]=s*i/c,a[15]=0,a},aim:function(t,e,r,n){return n=n||new rt(16),lt=lt||C(),ht=ht||C(),dt=dt||C(),X(B(e,t,dt),dt),X(G(r,dt,lt),lt),X(G(dt,lt,ht),ht),n[0]=lt[0],n[1]=lt[1],n[2]=lt[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},cameraAim:function(t,e,r,n){return n=n||new rt(16),lt=lt||C(),ht=ht||C(),dt=dt||C(),X(B(t,e,dt),dt),X(G(r,dt,lt),lt),X(G(dt,lt,ht),ht),n[0]=lt[0],n[1]=lt[1],n[2]=lt[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},lookAt:function(t,e,r,n){return n=n||new rt(16),lt=lt||C(),ht=ht||C(),dt=dt||C(),X(B(t,e,dt),dt),X(G(r,dt,lt),lt),X(G(dt,lt,ht),ht),n[0]=lt[0],n[1]=ht[0],n[2]=dt[0],n[3]=0,n[4]=lt[1],n[5]=ht[1],n[6]=dt[1],n[7]=0,n[8]=lt[2],n[9]=ht[2],n[10]=dt[2],n[11]=0,n[12]=-(lt[0]*t[0]+lt[1]*t[1]+lt[2]*t[2]),n[13]=-(ht[0]*t[0]+ht[1]*t[1]+ht[2]*t[2]),n[14]=-(dt[0]*t[0]+dt[1]*t[1]+dt[2]*t[2]),n[15]=1,n},translation:function(t,e){return(e=e||new rt(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},translate:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2],a=t[0],o=t[1],u=t[2],c=t[3],l=t[4],h=t[5],d=t[6],_=t[7],f=t[8],p=t[9],m=t[10],g=t[11],y=t[12],w=t[13],x=t[14],v=t[15];return t!==r&&(r[0]=a,r[1]=o,r[2]=u,r[3]=c,r[4]=l,r[5]=h,r[6]=d,r[7]=_,r[8]=f,r[9]=p,r[10]=m,r[11]=g),r[12]=a*n+l*s+f*i+y,r[13]=o*n+h*s+p*i+w,r[14]=u*n+d*s+m*i+x,r[15]=c*n+_*s+g*i+v,r},rotationX:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateX:function(t,e,r){r=r||new rt(16);const n=t[4],s=t[5],i=t[6],a=t[7],o=t[8],u=t[9],c=t[10],l=t[11],h=Math.cos(e),d=Math.sin(e);return r[4]=h*n+d*o,r[5]=h*s+d*u,r[6]=h*i+d*c,r[7]=h*a+d*l,r[8]=h*o-d*n,r[9]=h*u-d*s,r[10]=h*c-d*i,r[11]=h*l-d*a,t!==r&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationY:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateY:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[8],u=t[9],c=t[10],l=t[11],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n-d*o,r[1]=h*s-d*u,r[2]=h*i-d*c,r[3]=h*a-d*l,r[8]=h*o+d*n,r[9]=h*u+d*s,r[10]=h*c+d*i,r[11]=h*l+d*a,t!==r&&(r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationZ:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateZ:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],c=t[6],l=t[7],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n+d*o,r[1]=h*s+d*u,r[2]=h*i+d*c,r[3]=h*a+d*l,r[4]=h*o-d*n,r[5]=h*u-d*s,r[6]=h*c-d*i,r[7]=h*l-d*a,t!==r&&(r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},axisRotation:_t,rotation:ft,axisRotate:pt,rotate:mt,scaling:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},scale:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2];return r[0]=n*t[0],r[1]=n*t[1],r[2]=n*t[2],r[3]=n*t[3],r[4]=s*t[4],r[5]=s*t[5],r[6]=s*t[6],r[7]=s*t[7],r[8]=i*t[8],r[9]=i*t[9],r[10]=i*t[10],r[11]=i*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},uniformScaling:function(t,e){return(e=e||new rt(16))[0]=t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},uniformScale:function(t,e,r){return(r=r||new rt(16))[0]=e*t[0],r[1]=e*t[1],r[2]=e*t[2],r[3]=e*t[3],r[4]=e*t[4],r[5]=e*t[5],r[6]=e*t[6],r[7]=e*t[7],r[8]=e*t[8],r[9]=e*t[9],r[10]=e*t[10],r[11]=e*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r}});Float32Array;let yt=Float32Array;function wt(t,e,r,n){const s=new yt(4);return void 0!==t&&(s[0]=t,void 0!==e&&(s[1]=e,void 0!==r&&(s[2]=r,void 0!==n&&(s[3]=n)))),s}const xt=wt;function vt(t,e,r){return(r=r||new yt(4))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r[3]=t[3]-e[3],r}const bt=vt;function kt(t,e,r){return(r=r||new yt(4))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r[3]=t[3]*e,r}const Mt=kt;function Tt(t,e){return(e=e||new yt(4))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}const St=Tt;function At(t){const e=t[0],r=t[1],n=t[2],s=t[3];return Math.sqrt(e*e+r*r+n*n+s*s)}const Et=At;function Pt(t){const e=t[0],r=t[1],n=t[2],s=t[3];return e*e+r*r+n*n+s*s}const Ct=Pt;function zt(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return Math.sqrt(r*r+n*n+s*s+i*i)}const Bt=zt;function qt(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return r*r+n*n+s*s+i*i}const Nt=qt;function Ut(t,e){return(e=e||new yt(4))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}const It=Ut;function Ft(t,e,r){return(r=r||new yt(4))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r[3]=t[3]*e[3],r}const Gt=Ft;function Dt(t,e,r){return(r=r||new yt(4))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r[3]=t[3]/e[3],r}const Ot=Dt;var Lt=Object.freeze({__proto__:null,create:wt,setDefaultType:function(t){const e=yt;return yt=t,e},fromValues:xt,set:function(t,e,r,n,s){return(s=s||new yt(4))[0]=t,s[1]=e,s[2]=r,s[3]=n,s},ceil:function(t,e){return(e=e||new yt(4))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e},floor:function(t,e){return(e=e||new yt(4))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e},round:function(t,e){return(e=e||new yt(4))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e},clamp:function(t,e=0,r=1,n){return(n=n||new yt(4))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n[3]=Math.min(r,Math.max(e,t[3])),n},add:function(t,e,r){return(r=r||new yt(4))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r[3]=t[3]+e[3],r},addScaled:function(t,e,r,n){return(n=n||new yt(4))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n},subtract:vt,sub:bt,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},lerp:function(t,e,r,n){return(n=n||new yt(4))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n[3]=t[3]+r*(e[3]-t[3]),n},lerpV:function(t,e,r,n){return(n=n||new yt(4))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n[3]=t[3]+r[3]*(e[3]-t[3]),n},max:function(t,e,r){return(r=r||new yt(4))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r[3]=Math.max(t[3],e[3]),r},min:function(t,e,r){return(r=r||new yt(4))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r[3]=Math.min(t[3],e[3]),r},mulScalar:kt,scale:Mt,divScalar:function(t,e,r){return(r=r||new yt(4))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r[3]=t[3]/e,r},inverse:Tt,invert:St,dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},length:At,len:Et,lengthSq:Pt,lenSq:Ct,distance:zt,dist:Bt,distanceSq:qt,distSq:Nt,normalize:function(t,e){e=e||new yt(4);const r=t[0],n=t[1],s=t[2],i=t[3],a=Math.sqrt(r*r+n*n+s*s+i*i);return a>1e-5?(e[0]=r/a,e[1]=n/a,e[2]=s/a,e[3]=i/a):(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e},negate:function(t,e){return(e=e||new yt(4))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},copy:Ut,clone:It,multiply:Ft,mul:Gt,divide:Dt,div:Ot,zero:function(t){return(t=t||new yt(4))[0]=0,t[1]=0,t[2]=0,t[3]=0,t},transformMat4:function(t,e,r){r=r||new yt(4);const n=t[0],s=t[1],i=t[2],a=t[3];return r[0]=e[0]*n+e[4]*s+e[8]*i+e[12]*a,r[1]=e[1]*n+e[5]*s+e[9]*i+e[13]*a,r[2]=e[2]*n+e[6]*s+e[10]*i+e[14]*a,r[3]=e[3]*n+e[7]*s+e[11]*i+e[15]*a,r}})}},i={};function a(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return s[t](r,r.exports,a),r.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(s,i,a)=>{var o;a&&((o=[]).d=-1);var u,c,l,h=new Set,d=s.exports,_=new Promise(((t,e)=>{l=e,c=t}));_[e]=d,_[t]=t=>(o&&t(o),h.forEach(t),_.catch((t=>{}))),s.exports=_,i((s=>{var i;u=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[t])return s;if(s.then){var i=[];i.d=0,s.then((t=>{a[e]=t,n(i)}),(t=>{a[r]=t,n(i)}));var a={};return a[t]=t=>t(i),a}}var o={};return o[t]=t=>{},o[e]=s,o})))(s);var a=()=>u.map((t=>{if(t[r])throw t[r];return t[e]})),c=new Promise((e=>{(i=()=>e(a)).r=0;var r=t=>t!==o&&!h.has(t)&&(h.add(t),t&&!t.d&&(i.r++,t.push(i)));u.map((e=>e[t](r)))}));return i.r?c:a()}),(t=>(t?l(_[r]=t):c(d),n(o)))),o&&o.d<0&&(o.d=0)},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,