(()=>{"use strict";var t,e,r,n,s={680:(t,e,r)=>{r.d(e,{QG:()=>a,dV:()=>i,k4:()=>s});var n=r(416);function s(t){let e=[0,0,0],r=[0,0,0];for(let s of t)n.R3.min(e,s.min,e),n.R3.max(r,s.max,r);return{min:e,max:r}}function i(t,e){const r=n.R3.clone(t.min),s=n.R3.clone(t.max),i=[n.R3.fromValues(r[0],r[1],r[2]),n.R3.fromValues(r[0],r[1],s[2]),n.R3.fromValues(r[0],s[1],r[2]),n.R3.fromValues(r[0],s[1],s[2]),n.R3.fromValues(s[0],r[1],r[2]),n.R3.fromValues(s[0],r[1],s[2]),n.R3.fromValues(s[0],s[1],r[2]),n.R3.fromValues(s[0],s[1],s[2])];for(const t of i)n.R3.transformMat4(t,e,t);const a=function(t){const e=n.R3.clone(t[0]),r=n.R3.clone(t[0]);for(const s of t)n.R3.min(e,s,e),n.R3.max(r,s,r);return{min:e,max:r}}(i);return a}function a(t){const e=n.R3.create();return n.R3.add(t.min,t.max,e),n.R3.scale(e,.5,e),e}},841:(t,e,r)=>{r.d(e,{D:()=>y});var n=r(416);class s{camera;lights;viewProjectionMatrix=n._E.identity();constructor(t,e){this.camera=t,this.lights=e}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}writeToGpu(t){let e=this.lights[0].byteLength;this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"scene uniforms buffer",size:80+this.lights.length*e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})),n._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,0,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,64,this.camera.position);for(let[r,n]of this.lights.entries())t.queue.writeBuffer(this._gpuBuffer,80+r*e,n.getBytes())}}class i{instances;constructor(t){this.instances=t}get length(){return this.instances.length}get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}_gpuBuffer;writeToGpu(t){this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"models uniforms buffer",size:64*this.instances.length*2,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}));for(let e=0;e<this.instances.length;e++){let r=this.instances[e].transform,s=n._E.transpose(n._E.invert(this.instances[e].transform));t.queue.writeBuffer(this._gpuBuffer,128*e,r),t.queue.writeBuffer(this._gpuBuffer,128*e+64,s)}}}var a,o=r(42),u=r(270);function l(t,e){return t.reduce(((t,r)=>{let n=e(r);return t.has(n)||t.set(n,[]),t.get(n)?.push(r),t}),new Map)}!function(t){t[t.BlinnPhong=0]="BlinnPhong",t[t.NormalMap=1]="NormalMap"}(a||(a={}));class c{device;scene;canvasFormat;aaSampleCount;shadowMap;lights;camera;groups=[];blinnPhongPipeline;normalPipeline;camAndLightUniform;sampler;shadowMapSampler;constructor(t,e,r,n,s){this.device=t,this.scene=e,this.canvasFormat=r,this.aaSampleCount=n,this.shadowMap=s,this.lights=e.lights,this.camera=e.camera}async initializeAsync(){this.sampler=(0,u.bb)(this.device),this.shadowMapSampler=(0,u.c)(this.device),this.blinnPhongPipeline=await(0,u.Qf)(this.device,this.canvasFormat,this.aaSampleCount,this.shadowMap?.textureSize),this.normalPipeline=await(0,o.ux)(this.device,this.canvasFormat,this.aaSampleCount,this.shadowMap?.textureSize),this.camAndLightUniform=new s(this.camera,this.lights),this.camAndLightUniform.writeToGpu(this.device),await this.createRenderGroups()}render(t){this.camAndLightUniform.writeToGpu(this.device);for(let e of this.groups){e.instancesBuffer.writeToGpu(this.device),e.material.writeToGpu(this.device),t.setPipeline(e.pipeline);for(let r=0;r<e.bindGroups.length;r++)t.setBindGroup(r,e.bindGroups[r]);t.setVertexBuffer(0,e.vertexBuffer),this.normalPipeline==e.pipeline&&t.setVertexBuffer(1,e.normalDataBuffer),t.draw(e.vertexCount,e.instancesCount,0,0)}}async createRenderGroups(){let t=l(this.scene.models,(t=>{let e=null!=t.asset.material.normalMapPath?a.NormalMap:a.BlinnPhong;return{asset:t.asset,mode:e}}));this.lights.length>0&&t.set({asset:this.lights[0].model.asset,mode:a.BlinnPhong},this.lights.map((t=>t.model)));for(let e of t.entries()){let t=e[0].mode==a.BlinnPhong?this.blinnPhongPipeline:this.normalPipeline,r=e[0].asset;r.writeMeshToGpu(this.device),await r.material.writeTexturesToGpuAsync(this.device,!0),r.material.writeToGpu(this.device);const n=new i(e[1]);n.writeToGpu(this.device);let s={device:this.device,pipeline:t,instancesBuffer:n,uniforms:this.camAndLightUniform,material:r.material,sampler:this.sampler,shadowMap:this.shadowMap?.textureArray,shadowMapSampler:this.shadowMapSampler},l=new h(n,n.instances.length,r.vertexBuffer,r.vertexCount,r.material,this.blinnPhongPipeline==t?(0,u.Nz)(s):(0,o.ix)(s),t,r.normalBuffer);this.groups.push(l)}}}class h{instancesBuffer;instancesCount;vertexBuffer;vertexCount;material;bindGroups;pipeline;normalDataBuffer;constructor(t,e,r,n,s,i,a,o=null){this.instancesBuffer=t,this.instancesCount=e,this.vertexBuffer=r,this.vertexCount=n,this.material=s,this.bindGroups=i,this.pipeline=a,this.normalDataBuffer=o}}class d{device;models;shadowMaps;shadowPipeline;renderGroups;lightBuffer;constructor(t,e,r){this.device=t,this.models=e,this.shadowMaps=r}async initAsync(){this.shadowPipeline=await function(t){let e=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0}}],r=t.createBindGroupLayout({entries:e}),n={label:"shadow map pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[r]}),vertex:{module:t.createShaderModule({label:"shadow shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\n@group(0) @binding(0) var<storage, read> instances : array<Instance>;\n@group(0) @binding(1) var<uniform> lightView_mat : mat4x4 < f32>;\n\n@vertex\nfn vertexMain(@builtin(instance_index) idx : u32, @location(0) position : vec3 < f32>) -> @builtin(position) vec4 < f32>\n{\n    return lightView_mat * instances[idx].transform * vec4(position, 1);\n}\n"}),entryPoint:"vertexMain",buffers:[m]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}};return t.createRenderPipelineAsync(n)}(this.device),this.renderGroups=[...l(this.models,(t=>t.asset)).values()].map((t=>new i(t))),this.renderGroups.forEach((t=>t.writeToGpu(this.device))),this.writeToGpu()}render(t){this.shadowMaps.forEach((t=>t.createViewMat())),this.writeToGpu(),this.shadowMaps.forEach(((e,r)=>{const n=this.lightBuffer,s={colorAttachments:[],depthStencilAttachment:{view:e.textureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},i=t.beginRenderPass(s);for(let t of this.renderGroups){t.writeToGpu(this.device);const e=t.instances[0].asset;i.setPipeline(this.shadowPipeline),i.setBindGroup(0,f(this.device,this.shadowPipeline,t.gpuBuffer,n),[r*p]),i.setVertexBuffer(0,e.vertexBuffer),i.draw(e.vertexCount,t.length)}i.end()}))}writeToGpu(){this.lightBuffer||(this.lightBuffer=this.device.createBuffer({label:"light view buffer",size:p*this.shadowMaps.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}));for(let t=0;t<this.shadowMaps.length;t++){let e=this.shadowMaps[t];this.device.queue.writeBuffer(this.lightBuffer,t*p,e.light_mat)}}}const p=256;function f(t,e,r,n){let s={label:"shadow map shader binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r}},{binding:1,resource:{buffer:n,size:p}}]};return t.createBindGroup(s)}const m={arrayStride:56,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]};class _{device;canvasFormat;aaSampleCount;shadowMapSize;screenWidth;screenHeight;fullScreenQuadVertexBuffer;pipeline;constructor(t,e,r,n,s,i){this.device=t,this.canvasFormat=e,this.aaSampleCount=r,this.shadowMapSize=n,this.screenWidth=s,this.screenHeight=i;const a=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,-1,1,0,1,1,-1,0,1,1,1,0,1]);this.fullScreenQuadVertexBuffer=t.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.fullScreenQuadVertexBuffer,0,a),this.pipeline=this.createPipeline(t)}render(t,e){e.setPipeline(this.pipeline),e.setBindGroup(0,this.createBindGroup(t)),e.setVertexBuffer(0,this.fullScreenQuadVertexBuffer),e.draw(6,1)}createBindGroup(t){let e={label:"texture renderer binding group",layout:this.pipeline.getBindGroupLayout(0),entries:[{binding:0,resource:t}]};return this.device.createBindGroup(e)}createPipeline(t){let e=[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}}],r=t.createBindGroupLayout({entries:e}),n=t.createPipelineLayout({bindGroupLayouts:[r]});const s=t.createShaderModule({label:"texture renderer",code:"override shadowMapSize : f32 = 1024.0;\noverride screenWidth : f32 = 1920.0;\noverride screenHeight : f32 = 1080.0;\n\n@group(0) @binding(0) var textureMap : texture_depth_2d;\n\nstruct VertexOutput {\n    @builtin(position) fragCoord : vec4f,\n};\n\n@vertex\nfn vertexMain(@location(0) position : vec4f)\n-> VertexOutput {\n    return VertexOutput(position);\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    //can't use sampler_comparison as they only return 0 or 1\n    //other sampler don't seem to work\n    //got to calculate pixel indices manually\n    let textureScreenRatio = vec2f(shadowMapSize / screenWidth, shadowMapSize / screenHeight);\n    let depthValue = textureLoad(textureMap, vec2 < i32 > (floor(fragCoord.xy * textureScreenRatio)), 0);\n    return vec4 < f32 > (depthValue, depthValue, depthValue, 1.0);\n}\n"});return t.createRenderPipeline({layout:n,vertex:{module:s,entryPoint:"vertexMain",buffers:[this.VERTEX_BUFFER_LAYOUT]},fragment:{module:s,entryPoint:"fragmentMain",targets:[{format:this.canvasFormat}],constants:{shadowMapSize:this.shadowMapSize,screenWidth:this.screenWidth,screenHeight:this.screenHeight}},primitive:{topology:"triangle-list"},multisample:{count:this.aaSampleCount},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"always"}})}VERTEX_BUFFER_LAYOUT={arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]}}var g=r(680);class w{id;textureView;light;boundingBox;light_mat=n._E.identity();constructor(t,e,r,n){this.id=t,this.textureView=e,this.light=r,this.boundingBox=n}createViewMat(){const t=this.boundingBox,e=(0,g.QG)(t),r=n.R3.distance(t.min,t.max),s=n.R3.normalize(this.light.positionOrDirection),i=n.R3.addScaled(e,s,-r),a=n._E.lookAt(i,e,[0,1,0]),o=(0,g.dV)(t,a),u=n._E.create();{const t=o.min[0],e=o.max[0],r=o.min[1],s=o.max[1],i=0,a=-o.min[2];n._E.ortho(t,e,r,s,i,a,u)}const l=n._E.multiply(u,a);this.light_mat=l}}class y{scene;canvas;shadowMapSize;drawnShadowMapId=-1;get useMSAA(){return 4==this.aaSampleCount}aaSampleCount=4;device;context;canvasFormat;renderTarget;depthTexture;depthTextureView;inputHandler;lastFrameMS=Date.now();renderer;shadowMapRenderer;textureRenderer;shadowMap;get shadowMaps(){return this.shadowMap?.views}constructor(t,e,r=2048){this.scene=t,this.canvas=e,this.shadowMapSize=r,this.inputHandler=function(t,e){const r={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},n={x:0,y:0,zoom:0};let s=!1;const i=(t,e)=>{switch(t.code){case"KeyW":r.forward=e,t.preventDefault(),t.stopPropagation();break;case"KeyS":r.backward=e,t.preventDefault(),t.stopPropagation();break;case"KeyA":r.left=e,t.preventDefault(),t.stopPropagation();break;case"KeyD":r.right=e,t.preventDefault(),t.stopPropagation();break;case"Space":r.up=e,t.preventDefault(),t.stopPropagation();break;case"ShiftLeft":case"ControlLeft":case"KeyC":r.down=e,t.preventDefault(),t.stopPropagation()}};return t.addEventListener("keydown",(t=>i(t,!0))),t.addEventListener("keyup",(t=>i(t,!1))),e.addEventListener("mousedown",(()=>{s=!0})),e.addEventListener("mouseup",(()=>{s=!1})),e.addEventListener("mousemove",(t=>{s=0!=(1&t.buttons),s&&(n.x+=t.movementX,n.y+=t.movementY)})),e.addEventListener("wheel",(t=>{s=0!=(1&t.buttons),s&&(n.zoom+=Math.sign(t.deltaY),t.preventDefault(),t.stopPropagation())}),{passive:!1}),()=>{const t={digital:r,analog:{x:n.x,y:n.y,zoom:n.zoom,touching:s}};return n.x=0,n.y=0,n.zoom=0,t}}(window,e)}async run(){await this.initAsync(),this.render()}async initAsync(){await this.initGpuContext(),this.scene.camera.aspect=this.canvas.width/this.canvas.height,this.scene.lights.filter((t=>t.renderShadowMap)).length>0&&(this.shadowMap=function(t,e,r=1024){let n=e.lights.filter((t=>t.renderShadowMap));if(n.length<1)throw new Error("Can't create shadow map with no applicable lighs.");let s=[],i=e.models.map((t=>t.getBoundingBox())),a=(0,g.k4)(i),o=t.createTexture({size:[r,r,n.length],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});return n.forEach(((t,e)=>{const r=o.createView({label:`shadow map view ${e}`,dimension:"2d",aspect:"all",baseMipLevel:0,baseArrayLayer:e,arrayLayerCount:1}),n=new w(e,r,t,a);n.createViewMat(),s.push(n),t.shadowMap=n})),{textureArray:o,views:s,textureSize:r}}(this.device,this.scene,this.shadowMapSize)),this.renderer=new c(this.device,this.scene,this.canvasFormat,this.aaSampleCount,this.shadowMap),await this.renderer.initializeAsync(),this.shadowMap&&(this.shadowMapRenderer=new d(this.device,this.scene.models,this.shadowMap.views),await this.shadowMapRenderer.initAsync()),this.shadowMap&&(this.textureRenderer=new _(this.device,this.canvasFormat,this.aaSampleCount,this.shadowMap.textureSize,this.canvas.width,this.canvas.height))}render(){requestAnimationFrame((()=>{const t=this.getDeltaTime();this.scene.update(t),this.scene.camera.update(t,this.inputHandler());let e=this.context.getCurrentTexture().createView();const r={colorAttachments:[{view:this.useMSAA?this.renderTarget.createView():e,resolveTarget:this.useMSAA?e:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},n=this.device.createCommandEncoder();this.shadowMapRenderer?.render(n);const s=n.beginRenderPass(r);this.drawnShadowMapId>=0&&this.shadowMaps&&this.drawnShadowMapId<this.shadowMaps.length?this.textureRenderer.render(this.shadowMaps[this.drawnShadowMapId].textureView,s):this.renderer.render(s),s.end(),this.device.queue.submit([n.finish()]),this.render()}))}getDeltaTime(){const t=Date.now(),e=(t-this.lastFrameMS)/1e3;return this.lastFrameMS=t,e}async initGpuContext(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");this.device=await t.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),this.context.configure({device:this.device,format:this.canvasFormat,alphaMode:"premultiplied"}),this.useMSAA&&(this.renderTarget=this.device.createTexture({size:[this.canvas.width,this.canvas.height],sampleCount:this.aaSampleCount,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.depthTexture=this.device.createTexture({size:[this.canvas.width,this.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:this.useMSAA?this.aaSampleCount:1}),this.depthTextureView=this.depthTexture.createView()}}},42:(t,e,r)=>{r.d(e,{aH:()=>u,ix:()=>o,ux:()=>a});var n=r(284),s=r(255),i=r(270);async function a(t,e,r,a){const o=t.createShaderModule({label:"BlinnPhong Shader with Normals",code:s}),l={binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{}};return(0,i.Jy)(t,o,[n.sY,u],e,r,a,[l])}function o(t){const e={binding:7,resource:t.material.normalTexture.createView()};return[(0,i.J3)(t.device,t.pipeline,t.instancesBuffer,t.uniforms,t.material,t.sampler,[e]),(0,i.Lq)(t.device,t.pipeline,t.shadowMap,t.shadowMapSampler)]}const u={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:4},{format:"float32x3",offset:12,shaderLocation:5}]}},270:(t,e,r)=>{r.d(e,{J3:()=>u,Jy:()=>l,Lq:()=>o,Nz:()=>a,Qf:()=>i,bb:()=>c,c:()=>h});var n=r(284),s=r(255);async function i(t,e,r,i){const a=t.createShaderModule({label:"Blinn Phong Shader",code:s});return l(t,a,[n.sY],e,r,i,void 0,"vertexMain_alt","fragmentMain_alt")}function a(t){return[u(t.device,t.pipeline,t.instancesBuffer,t.uniforms,t.material,t.sampler),o(t.device,t.pipeline,t.shadowMap,t.shadowMapSampler)]}function o(t,e,r,n){r=r??t.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});let s={label:"shadow map binding group",layout:e.getBindGroupLayout(1),entries:[{binding:0,resource:r.createView({dimension:"2d-array"})},{binding:1,resource:n}]};return t.createBindGroup(s)}function u(t,e,r,n,s,i,a=[]){let o={label:"default binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r.gpuBuffer}},{binding:1,resource:{buffer:n.gpuBuffer}},{binding:2,resource:{buffer:s.gpuBuffer}},{binding:3,resource:i},{binding:4,resource:s.ambientTexture.createView()},{binding:5,resource:s.diffuseTexture.createView()},{binding:6,resource:s.specularTexture.createView()}]};return a&&o.entries.push(...a),t.createBindGroup(o)}async function l(t,e,r,n,s,i,a=[],o="vertexMain",u="fragmentMain"){let l=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}}];l.push(...a);let c=[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"2d-array",multisampled:!1,sampleType:"depth"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}}],h=t.createBindGroupLayout({entries:l}),d=t.createBindGroupLayout({entries:c}),p={label:"mesh pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[h,d]}),vertex:{module:e,entryPoint:o,buffers:r},fragment:{module:e,entryPoint:u,targets:[{format:n,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}],constants:{shadowMapSize:i??1024}},primitive:{topology:"triangle-list",cullMode:"back"},multisample:{count:s},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await t.createRenderPipelineAsync(p)}function c(t){return t.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16})}function h(t){return t.createSampler({compare:"less"})}},838:(t,e,r)=>{r.d(e,{GL:()=>n,fH:()=>s,ug:()=>a,v:()=>i});const n=window.location.pathname;function s(){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t}function i(){const t=document.createElement("div");return t.style.display="flex",t.style.gap="10px",t}function a(t,e,r,n=!0){let[s,i]=function(t,e=!0){const r=document.createElement("input");r.type="checkbox",r.id=t,r.name=r.id,r.checked=e;const n=document.createElement("label");return n.htmlFor=r.id,n.textContent=r.id,[r,n]}(e,n);return t.appendChild(s),t.appendChild(i),s.addEventListener("change",(()=>r(s))),s}},607:(t,e,r)=>{r.a(t,(async(t,e)=>{try{var n=r(841),s=r(838),i=r(616);const a=document.querySelector("canvas"),o=new i.R;o.attachUi(a);const u=new n.D(o,a);function l(){let t=new Array;o.lights.filter((t=>t.renderShadowMap)).forEach(((e,r)=>{const n=(0,s.v)();o.uiContainer.appendChild(n),(0,s.ug)(n,`ShadowMap${r}`,(t=>{e.showShadows=t.checked}));let i=(0,s.ug)(n,"show",(e=>{t.filter((t=>t!=e)).forEach((t=>t.checked=!1)),u.drawnShadowMapId=e.checked?r:-1}),!1);t.push(i)}))}l(),await u.run(),e()}catch(c){e(c)}}),1)},284:(t,e,r)=>{r.d(e,{Vk:()=>a,nk:()=>n,qw:()=>s,sY:()=>i});const n="triangle-list",s=36,i={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1])},616:(t,e,r)=>{r.d(e,{R:()=>re});var n=r(416);class s{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(t){this._aspect=t,this._projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=n._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=n._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(t){n._E.copy(t,this.matrix_)}get view(){return this.view_}set view(t){n._E.copy(t,this.view_)}get right(){return this.right_}set right(t){n.R3.copy(t,this.right_)}get up(){return this.up_}set up(t){n.R3.copy(t,this.up_)}get back(){return this.back_}set back(t){n.R3.copy(t,this.back_)}get position(){return this.position_}set position(t){n.R3.copy(t,this.position_)}}class i extends s{pitch=0;yaw=0;velocity_=n.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(t){n.R3.copy(t,this.velocity_)}constructor(t){if(super(),t&&(t.position||t.target||t.movementSpeed)){const e=t.position??n.R3.create(0,0,-5),r=t.target??n.R3.create(0,0,0);this.back=n.R3.normalize(n.R3.subtract(e,r)),this.recalculateAngles(this.back),this.position=e,this.movementSpeed=t.movementSpeed??10,this.aspect=t.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(t){super.matrix=t,this.recalculateAngles(this.back)}update(t,e){const r=(t,e)=>(t?1:0)-(e?1:0);var s,i;this.yaw-=e.analog.x*t*this.rotationSpeed,this.pitch-=e.analog.y*t*this.rotationSpeed,this.yaw=(s=this.yaw,i=2*Math.PI,s-Math.floor(Math.abs(s)/i)*i*Math.sign(s)),this.pitch=function(t,e,r){return Math.min(Math.max(t,e),r)}(this.pitch,-Math.PI/2,Math.PI/2);const a=n.R3.copy(this.position);super.matrix=n._E.rotateX(n._E.rotationY(this.yaw),this.pitch);const o=e.digital,u=r(o.right,o.left),l=r(o.up,o.down),c=n.R3.create(),h=r(o.backward,o.forward);n.R3.addScaled(c,this.right,u,c),n.R3.addScaled(c,this.up,l,c),n.R3.addScaled(c,this.back,h,c),n.R3.normalize(c,c),n.R3.mulScalar(c,this.movementSpeed,c),this.velocity=function(t,e,r){return n.R3.addScaled(t,n.R3.sub(e,t),r)}(c,this.velocity,Math.pow(1-this.frictionCoefficient,t)),this.position=n.R3.addScaled(a,this.velocity,t),this.view=n._E.invert(this.matrix)}recalculateAngles(t){this.yaw=Math.atan2(t[0],t[2]),this.pitch=-Math.asin(t[1])}}var a=r(680);class o{name;asset;transform;constructor(t,e,r=n._E.identity()){this.name=t,this.asset=e,this.transform=r}getBoundingBox(){return(0,a.dV)(this.asset.boundingBox,this.transform)}translate(t,e,r){return n._E.translate(this.transform,[t,e,r],this.transform),this}rotate(t,e,r){return n._E.rotateX(this.transform,t/180*Math.PI,this.transform),n._E.rotateY(this.transform,e/180*Math.PI,this.transform),n._E.rotateZ(this.transform,r/180*Math.PI,this.transform),this}scale(t,e,r){return n._E.scale(this.transform,[t,e,r],this.transform),this}scaleBy(t){return this.scale(t,t,t)}}const u=t=>t&&"number"==typeof t.length&&t.buffer instanceof ArrayBuffer&&"number"==typeof t.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class l{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class c{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(t){throw new Error("Cannot evaluate node")}evaluateString(t){return this.evaluate(t).toString()}}class h extends c{constructor(){super()}}class d extends h{constructor(t,e,r,n){super(),this.name=t,this.args=e,this.returnType=r,this.body=n}get astNodeType(){return"function"}}class p extends h{constructor(t){super(),this.expression=t}get astNodeType(){return"staticAssert"}}class f extends h{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"while"}}class m extends h{constructor(t){super(),this.body=t}get astNodeType(){return"continuing"}}class _ extends h{constructor(t,e,r,n){super(),this.init=t,this.condition=e,this.increment=r,this.body=n}get astNodeType(){return"for"}}class g extends h{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"var"}}class w extends h{constructor(t,e,r){super(),this.name=t,this.type=e,this.value=r}get astNodeType(){return"override"}}class y extends h{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"let"}}class x extends h{constructor(t,e,r,n,s){super(),this.name=t,this.type=e,this.storage=r,this.access=n,this.value=s}get astNodeType(){return"const"}evaluate(t){return this.value.evaluate(t)}}var v,b,k,M,S;!function(t){t.increment="++",t.decrement="--"}(v||(v={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return t[r]}}(v||(v={}));class T extends h{constructor(t,e){super(),this.operator=t,this.variable=e}get astNodeType(){return"increment"}}!function(t){t.assign="=",t.addAssign="+=",t.subtractAssin="-=",t.multiplyAssign="*=",t.divideAssign="/=",t.moduloAssign="%=",t.andAssign="&=",t.orAssign="|=",t.xorAssign="^=",t.shiftLeftAssign="<<=",t.shiftRightAssign=">>="}(b||(b={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for AssignOperator");return t[r]}}(b||(b={}));class A extends h{constructor(t,e,r){super(),this.operator=t,this.variable=e,this.value=r}get astNodeType(){return"assign"}}class E extends h{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"call"}}class P extends h{constructor(t,e){super(),this.body=t,this.continuing=e}get astNodeType(){return"loop"}}class C extends h{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"body"}}class B extends h{constructor(t,e,r,n){super(),this.condition=t,this.body=e,this.elseif=r,this.else=n}get astNodeType(){return"if"}}class z extends h{constructor(t){super(),this.value=t}get astNodeType(){return"return"}}class U extends h{constructor(t){super(),this.name=t}get astNodeType(){return"enable"}}class q extends h{constructor(t,e){super(),this.name=t,this.type=e}get astNodeType(){return"alias"}}class R extends h{constructor(){super()}get astNodeType(){return"discard"}}class N extends h{constructor(){super()}get astNodeType(){return"break"}}class G extends h{constructor(){super()}get astNodeType(){return"continue"}}class I extends h{constructor(t){super(),this.name=t}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class V extends I{constructor(t,e){super(t),this.members=e}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(t){for(let e=0;e<this.members.length;e++)if(this.members[e].name==t)return e;return-1}}class F extends I{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"template"}}class L extends I{constructor(t,e,r,n){super(t),this.storage=e,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class O extends I{constructor(t,e,r,n){super(t),this.attributes=e,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class D extends I{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"sampler"}}class Y extends c{constructor(){super()}}class H extends Y{constructor(t){super(),this.value=t}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class j extends Y{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"createExpr"}}class X extends Y{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"callExpr"}evaluate(t){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(t));case"acos":return Math.acos(this.args[0].evaluate(t));case"acosh":return Math.acosh(this.args[0].evaluate(t));case"asin":return Math.asin(this.args[0].evaluate(t));case"asinh":return Math.asinh(this.args[0].evaluate(t));case"atan":return Math.atan(this.args[0].evaluate(t));case"atan2":return Math.atan2(this.args[0].evaluate(t),this.args[1].evaluate(t));case"atanh":return Math.atanh(this.args[0].evaluate(t));case"ceil":return Math.ceil(this.args[0].evaluate(t));case"clamp":return Math.min(Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t)),this.args[2].evaluate(t));case"cos":return Math.cos(this.args[0].evaluate(t));case"degrees":return 180*this.args[0].evaluate(t)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(t)-this.args[1].evaluate(t),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(t));case"exp2":return Math.pow(2,this.args[0].evaluate(t));case"floor":return Math.floor(this.args[0].evaluate(t));case"fma":return this.args[0].evaluate(t)*this.args[1].evaluate(t)+this.args[2].evaluate(t);case"fract":case"modf":return this.args[0].evaluate(t)-Math.floor(this.args[0].evaluate(t));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(t));case"log":return Math.log(this.args[0].evaluate(t));case"log2":return Math.log2(this.args[0].evaluate(t));case"max":return Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t));case"min":return Math.min(this.args[0].evaluate(t),this.args[1].evaluate(t));case"mix":return this.args[0].evaluate(t)*(1-this.args[2].evaluate(t))+this.args[1].evaluate(t)*this.args[2].evaluate(t);case"pow":return Math.pow(this.args[0].evaluate(t),this.args[1].evaluate(t));case"radians":return this.args[0].evaluate(t)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(t));case"sign":return Math.sign(this.args[0].evaluate(t));case"sin":return Math.sin(this.args[0].evaluate(t));case"sinh":return Math.sinh(this.args[0].evaluate(t));case"saturate":return Math.min(Math.max(this.args[0].evaluate(t),0),1);case"smoothstep":return this.args[0].evaluate(t)*this.args[0].evaluate(t)*(3-2*this.args[0].evaluate(t));case"sqrt":return Math.sqrt(this.args[0].evaluate(t));case"step":return this.args[0].evaluate(t)<this.args[1].evaluate(t)?0:1;case"tan":return Math.tan(this.args[0].evaluate(t));case"tanh":return Math.tanh(this.args[0].evaluate(t));case"trunc":return Math.trunc(this.args[0].evaluate(t));default:throw new Error("Non const function: "+this.name)}}}class W extends Y{constructor(t){super(),this.name=t}get astNodeType(){return"varExpr"}}class $ extends Y{constructor(t,e){super(),this.name=t,this.initializer=e}get astNodeType(){return"constExpr"}evaluate(t){var e,r;if(this.initializer instanceof j){const n=null===(e=this.postfix)||void 0===e?void 0:e.evaluateString(t),s=null===(r=this.initializer.type)||void 0===r?void 0:r.name,i=t.structs.get(s),a=null==i?void 0:i.getMemberIndex(n);if(-1!=a)return this.initializer.args[a].evaluate(t);console.log(a)}return this.initializer.evaluate(t)}}class K extends Y{constructor(t){super(),this.value=t}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class Q extends Y{constructor(t,e){super(),this.type=t,this.value=e}get astNodeType(){return"bitcastExpr"}}class Z extends Y{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"typecastExpr"}evaluate(t){return this.args[0].evaluate(t)}}class J extends Y{constructor(t){super(),this.contents=t}get astNodeType(){return"groupExpr"}evaluate(t){return this.contents[0].evaluate(t)}}class tt extends Y{constructor(){super()}}class et extends tt{constructor(t,e){super(),this.operator=t,this.right=e}get astNodeType(){return"unaryOp"}evaluate(t){switch(this.operator){case"+":return this.right.evaluate(t);case"-":return-this.right.evaluate(t);case"!":return this.right.evaluate(t)?0:1;case"~":return~this.right.evaluate(t);default:throw new Error("Unknown unary operator: "+this.operator)}}}class rt extends tt{constructor(t,e,r){super(),this.operator=t,this.left=e,this.right=r}get astNodeType(){return"binaryOp"}evaluate(t){switch(this.operator){case"+":return this.left.evaluate(t)+this.right.evaluate(t);case"-":return this.left.evaluate(t)-this.right.evaluate(t);case"*":return this.left.evaluate(t)*this.right.evaluate(t);case"/":return this.left.evaluate(t)/this.right.evaluate(t);case"%":return this.left.evaluate(t)%this.right.evaluate(t);case"==":return this.left.evaluate(t)==this.right.evaluate(t)?1:0;case"!=":return this.left.evaluate(t)!=this.right.evaluate(t)?1:0;case"<":return this.left.evaluate(t)<this.right.evaluate(t)?1:0;case">":return this.left.evaluate(t)>this.right.evaluate(t)?1:0;case"<=":return this.left.evaluate(t)<=this.right.evaluate(t)?1:0;case">=":return this.left.evaluate(t)>=this.right.evaluate(t)?1:0;case"&&":return this.left.evaluate(t)&&this.right.evaluate(t)?1:0;case"||":return this.left.evaluate(t)||this.right.evaluate(t)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class nt extends c{constructor(){super()}}class st extends nt{constructor(t,e){super(),this.selector=t,this.body=e}get astNodeType(){return"case"}}class it extends nt{constructor(t){super(),this.body=t}get astNodeType(){return"default"}}class at extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"argument"}}class ot extends c{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"elseif"}}class ut extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"member"}}class lt extends c{constructor(t,e){super(),this.name=t,this.value=e}get astNodeType(){return"attribute"}}!function(t){t[t.token=0]="token",t[t.keyword=1]="keyword",t[t.reserved=2]="reserved"}(M||(M={}));class ct{constructor(t,e,r){this.name=t,this.type=e,this.rule=r}toString(){return this.name}}class ht{}k=ht,ht.none=new ct("",M.reserved,""),ht.eof=new ct("EOF",M.token,""),ht.reserved={asm:new ct("asm",M.reserved,"asm"),bf16:new ct("bf16",M.reserved,"bf16"),do:new ct("do",M.reserved,"do"),enum:new ct("enum",M.reserved,"enum"),f16:new ct("f16",M.reserved,"f16"),f64:new ct("f64",M.reserved,"f64"),handle:new ct("handle",M.reserved,"handle"),i8:new ct("i8",M.reserved,"i8"),i16:new ct("i16",M.reserved,"i16"),i64:new ct("i64",M.reserved,"i64"),mat:new ct("mat",M.reserved,"mat"),premerge:new ct("premerge",M.reserved,"premerge"),regardless:new ct("regardless",M.reserved,"regardless"),typedef:new ct("typedef",M.reserved,"typedef"),u8:new ct("u8",M.reserved,"u8"),u16:new ct("u16",M.reserved,"u16"),u64:new ct("u64",M.reserved,"u64"),unless:new ct("unless",M.reserved,"unless"),using:new ct("using",M.reserved,"using"),vec:new ct("vec",M.reserved,"vec"),void:new ct("void",M.reserved,"void")},ht.keywords={array:new ct("array",M.keyword,"array"),atomic:new ct("atomic",M.keyword,"atomic"),bool:new ct("bool",M.keyword,"bool"),f32:new ct("f32",M.keyword,"f32"),i32:new ct("i32",M.keyword,"i32"),mat2x2:new ct("mat2x2",M.keyword,"mat2x2"),mat2x3:new ct("mat2x3",M.keyword,"mat2x3"),mat2x4:new ct("mat2x4",M.keyword,"mat2x4"),mat3x2:new ct("mat3x2",M.keyword,"mat3x2"),mat3x3:new ct("mat3x3",M.keyword,"mat3x3"),mat3x4:new ct("mat3x4",M.keyword,"mat3x4"),mat4x2:new ct("mat4x2",M.keyword,"mat4x2"),mat4x3:new ct("mat4x3",M.keyword,"mat4x3"),mat4x4:new ct("mat4x4",M.keyword,"mat4x4"),ptr:new ct("ptr",M.keyword,"ptr"),sampler:new ct("sampler",M.keyword,"sampler"),sampler_comparison:new ct("sampler_comparison",M.keyword,"sampler_comparison"),struct:new ct("struct",M.keyword,"struct"),texture_1d:new ct("texture_1d",M.keyword,"texture_1d"),texture_2d:new ct("texture_2d",M.keyword,"texture_2d"),texture_2d_array:new ct("texture_2d_array",M.keyword,"texture_2d_array"),texture_3d:new ct("texture_3d",M.keyword,"texture_3d"),texture_cube:new ct("texture_cube",M.keyword,"texture_cube"),texture_cube_array:new ct("texture_cube_array",M.keyword,"texture_cube_array"),texture_multisampled_2d:new ct("texture_multisampled_2d",M.keyword,"texture_multisampled_2d"),texture_storage_1d:new ct("texture_storage_1d",M.keyword,"texture_storage_1d"),texture_storage_2d:new ct("texture_storage_2d",M.keyword,"texture_storage_2d"),texture_storage_2d_array:new ct("texture_storage_2d_array",M.keyword,"texture_storage_2d_array"),texture_storage_3d:new ct("texture_storage_3d",M.keyword,"texture_storage_3d"),texture_depth_2d:new ct("texture_depth_2d",M.keyword,"texture_depth_2d"),texture_depth_2d_array:new ct("texture_depth_2d_array",M.keyword,"texture_depth_2d_array"),texture_depth_cube:new ct("texture_depth_cube",M.keyword,"texture_depth_cube"),texture_depth_cube_array:new ct("texture_depth_cube_array",M.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new ct("texture_depth_multisampled_2d",M.keyword,"texture_depth_multisampled_2d"),texture_external:new ct("texture_external",M.keyword,"texture_external"),u32:new ct("u32",M.keyword,"u32"),vec2:new ct("vec2",M.keyword,"vec2"),vec3:new ct("vec3",M.keyword,"vec3"),vec4:new ct("vec4",M.keyword,"vec4"),bitcast:new ct("bitcast",M.keyword,"bitcast"),block:new ct("block",M.keyword,"block"),break:new ct("break",M.keyword,"break"),case:new ct("case",M.keyword,"case"),continue:new ct("continue",M.keyword,"continue"),continuing:new ct("continuing",M.keyword,"continuing"),default:new ct("default",M.keyword,"default"),discard:new ct("discard",M.keyword,"discard"),else:new ct("else",M.keyword,"else"),enable:new ct("enable",M.keyword,"enable"),fallthrough:new ct("fallthrough",M.keyword,"fallthrough"),false:new ct("false",M.keyword,"false"),fn:new ct("fn",M.keyword,"fn"),for:new ct("for",M.keyword,"for"),function:new ct("function",M.keyword,"function"),if:new ct("if",M.keyword,"if"),let:new ct("let",M.keyword,"let"),const:new ct("const",M.keyword,"const"),loop:new ct("loop",M.keyword,"loop"),while:new ct("while",M.keyword,"while"),private:new ct("private",M.keyword,"private"),read:new ct("read",M.keyword,"read"),read_write:new ct("read_write",M.keyword,"read_write"),return:new ct("return",M.keyword,"return"),storage:new ct("storage",M.keyword,"storage"),switch:new ct("switch",M.keyword,"switch"),true:new ct("true",M.keyword,"true"),alias:new ct("alias",M.keyword,"alias"),type:new ct("type",M.keyword,"type"),uniform:new ct("uniform",M.keyword,"uniform"),var:new ct("var",M.keyword,"var"),override:new ct("override",M.keyword,"override"),workgroup:new ct("workgroup",M.keyword,"workgroup"),write:new ct("write",M.keyword,"write"),r8unorm:new ct("r8unorm",M.keyword,"r8unorm"),r8snorm:new ct("r8snorm",M.keyword,"r8snorm"),r8uint:new ct("r8uint",M.keyword,"r8uint"),r8sint:new ct("r8sint",M.keyword,"r8sint"),r16uint:new ct("r16uint",M.keyword,"r16uint"),r16sint:new ct("r16sint",M.keyword,"r16sint"),r16float:new ct("r16float",M.keyword,"r16float"),rg8unorm:new ct("rg8unorm",M.keyword,"rg8unorm"),rg8snorm:new ct("rg8snorm",M.keyword,"rg8snorm"),rg8uint:new ct("rg8uint",M.keyword,"rg8uint"),rg8sint:new ct("rg8sint",M.keyword,"rg8sint"),r32uint:new ct("r32uint",M.keyword,"r32uint"),r32sint:new ct("r32sint",M.keyword,"r32sint"),r32float:new ct("r32float",M.keyword,"r32float"),rg16uint:new ct("rg16uint",M.keyword,"rg16uint"),rg16sint:new ct("rg16sint",M.keyword,"rg16sint"),rg16float:new ct("rg16float",M.keyword,"rg16float"),rgba8unorm:new ct("rgba8unorm",M.keyword,"rgba8unorm"),rgba8unorm_srgb:new ct("rgba8unorm_srgb",M.keyword,"rgba8unorm_srgb"),rgba8snorm:new ct("rgba8snorm",M.keyword,"rgba8snorm"),rgba8uint:new ct("rgba8uint",M.keyword,"rgba8uint"),rgba8sint:new ct("rgba8sint",M.keyword,"rgba8sint"),bgra8unorm:new ct("bgra8unorm",M.keyword,"bgra8unorm"),bgra8unorm_srgb:new ct("bgra8unorm_srgb",M.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new ct("rgb10a2unorm",M.keyword,"rgb10a2unorm"),rg11b10float:new ct("rg11b10float",M.keyword,"rg11b10float"),rg32uint:new ct("rg32uint",M.keyword,"rg32uint"),rg32sint:new ct("rg32sint",M.keyword,"rg32sint"),rg32float:new ct("rg32float",M.keyword,"rg32float"),rgba16uint:new ct("rgba16uint",M.keyword,"rgba16uint"),rgba16sint:new ct("rgba16sint",M.keyword,"rgba16sint"),rgba16float:new ct("rgba16float",M.keyword,"rgba16float"),rgba32uint:new ct("rgba32uint",M.keyword,"rgba32uint"),rgba32sint:new ct("rgba32sint",M.keyword,"rgba32sint"),rgba32float:new ct("rgba32float",M.keyword,"rgba32float"),static_assert:new ct("static_assert",M.keyword,"static_assert")},ht.tokens={decimal_float_literal:new ct("decimal_float_literal",M.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new ct("hex_float_literal",M.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new ct("int_literal",M.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new ct("uint_literal",M.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new ct("ident",M.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new ct("and",M.token,"&"),and_and:new ct("and_and",M.token,"&&"),arrow:new ct("arrow ",M.token,"->"),attr:new ct("attr",M.token,"@"),attr_left:new ct("attr_left",M.token,"[["),attr_right:new ct("attr_right",M.token,"]]"),forward_slash:new ct("forward_slash",M.token,"/"),bang:new ct("bang",M.token,"!"),bracket_left:new ct("bracket_left",M.token,"["),bracket_right:new ct("bracket_right",M.token,"]"),brace_left:new ct("brace_left",M.token,"{"),brace_right:new ct("brace_right",M.token,"}"),colon:new ct("colon",M.token,":"),comma:new ct("comma",M.token,","),equal:new ct("equal",M.token,"="),equal_equal:new ct("equal_equal",M.token,"=="),not_equal:new ct("not_equal",M.token,"!="),greater_than:new ct("greater_than",M.token,">"),greater_than_equal:new ct("greater_than_equal",M.token,">="),shift_right:new ct("shift_right",M.token,">>"),less_than:new ct("less_than",M.token,"<"),less_than_equal:new ct("less_than_equal",M.token,"<="),shift_left:new ct("shift_left",M.token,"<<"),modulo:new ct("modulo",M.token,"%"),minus:new ct("minus",M.token,"-"),minus_minus:new ct("minus_minus",M.token,"--"),period:new ct("period",M.token,"."),plus:new ct("plus",M.token,"+"),plus_plus:new ct("plus_plus",M.token,"++"),or:new ct("or",M.token,"|"),or_or:new ct("or_or",M.token,"||"),paren_left:new ct("paren_left",M.token,"("),paren_right:new ct("paren_right",M.token,")"),semicolon:new ct("semicolon",M.token,";"),star:new ct("star",M.token,"*"),tilde:new ct("tilde",M.token,"~"),underscore:new ct("underscore",M.token,"_"),xor:new ct("xor",M.token,"^"),plus_equal:new ct("plus_equal",M.token,"+="),minus_equal:new ct("minus_equal",M.token,"-="),times_equal:new ct("times_equal",M.token,"*="),division_equal:new ct("division_equal",M.token,"/="),modulo_equal:new ct("modulo_equal",M.token,"%="),and_equal:new ct("and_equal",M.token,"&="),or_equal:new ct("or_equal",M.token,"|="),xor_equal:new ct("xor_equal",M.token,"^="),shift_right_equal:new ct("shift_right_equal",M.token,">>="),shift_left_equal:new ct("shift_left_equal",M.token,"<<=")},ht.storage_class=[k.keywords.function,k.keywords.private,k.keywords.workgroup,k.keywords.uniform,k.keywords.storage],ht.access_mode=[k.keywords.read,k.keywords.write,k.keywords.read_write],ht.sampler_type=[k.keywords.sampler,k.keywords.sampler_comparison],ht.sampled_texture_type=[k.keywords.texture_1d,k.keywords.texture_2d,k.keywords.texture_2d_array,k.keywords.texture_3d,k.keywords.texture_cube,k.keywords.texture_cube_array],ht.multisampled_texture_type=[k.keywords.texture_multisampled_2d],ht.storage_texture_type=[k.keywords.texture_storage_1d,k.keywords.texture_storage_2d,k.keywords.texture_storage_2d_array,k.keywords.texture_storage_3d],ht.depth_texture_type=[k.keywords.texture_depth_2d,k.keywords.texture_depth_2d_array,k.keywords.texture_depth_cube,k.keywords.texture_depth_cube_array,k.keywords.texture_depth_multisampled_2d],ht.texture_external_type=[k.keywords.texture_external],ht.any_texture_type=[...k.sampled_texture_type,...k.multisampled_texture_type,...k.storage_texture_type,...k.depth_texture_type,...k.texture_external_type],ht.texel_format=[k.keywords.r8unorm,k.keywords.r8snorm,k.keywords.r8uint,k.keywords.r8sint,k.keywords.r16uint,k.keywords.r16sint,k.keywords.r16float,k.keywords.rg8unorm,k.keywords.rg8snorm,k.keywords.rg8uint,k.keywords.rg8sint,k.keywords.r32uint,k.keywords.r32sint,k.keywords.r32float,k.keywords.rg16uint,k.keywords.rg16sint,k.keywords.rg16float,k.keywords.rgba8unorm,k.keywords.rgba8unorm_srgb,k.keywords.rgba8snorm,k.keywords.rgba8uint,k.keywords.rgba8sint,k.keywords.bgra8unorm,k.keywords.bgra8unorm_srgb,k.keywords.rgb10a2unorm,k.keywords.rg11b10float,k.keywords.rg32uint,k.keywords.rg32sint,k.keywords.rg32float,k.keywords.rgba16uint,k.keywords.rgba16sint,k.keywords.rgba16float,k.keywords.rgba32uint,k.keywords.rgba32sint,k.keywords.rgba32float],ht.const_literal=[k.tokens.int_literal,k.tokens.uint_literal,k.tokens.decimal_float_literal,k.tokens.hex_float_literal,k.keywords.true,k.keywords.false],ht.literal_or_ident=[k.tokens.ident,k.tokens.int_literal,k.tokens.uint_literal,k.tokens.decimal_float_literal,k.tokens.hex_float_literal],ht.element_count_expression=[k.tokens.int_literal,k.tokens.uint_literal,k.tokens.ident],ht.template_types=[k.keywords.vec2,k.keywords.vec3,k.keywords.vec4,k.keywords.mat2x2,k.keywords.mat2x3,k.keywords.mat2x4,k.keywords.mat3x2,k.keywords.mat3x3,k.keywords.mat3x4,k.keywords.mat4x2,k.keywords.mat4x3,k.keywords.mat4x4,k.keywords.atomic,k.keywords.bitcast,...k.any_texture_type],ht.attribute_name=[k.tokens.ident,k.keywords.block],ht.assignment_operators=[k.tokens.equal,k.tokens.plus_equal,k.tokens.minus_equal,k.tokens.times_equal,k.tokens.division_equal,k.tokens.modulo_equal,k.tokens.and_equal,k.tokens.or_equal,k.tokens.xor_equal,k.tokens.shift_right_equal,k.tokens.shift_left_equal],ht.increment_operators=[k.tokens.plus_plus,k.tokens.minus_minus];class dt{constructor(t,e,r){this.type=t,this.lexeme=e,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=ht.template_types.indexOf(this.type)}isArrayType(){return this.type==ht.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class pt{constructor(t){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=t?t:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new dt(ht.eof,"",this._line)),this._tokens}scanToken(){let t=this._advance();if("\n"==t)return this._line++,!0;if(this._isWhitespace(t))return!0;if("/"==t){if("/"==this._peekAhead()){for(;"\n"!=t;){if(this._isAtEnd())return!0;t=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let e=1;for(;e>0;){if(this._isAtEnd())return!0;if(t=this._advance(),"\n"==t)this._line++;else if("*"==t){if("/"==this._peekAhead()&&(this._advance(),e--,0==e))return!0}else"/"==t&&"*"==this._peekAhead()&&(this._advance(),e++)}return!0}}let e=ht.none;for(;;){let r=this._findType(t);const n=this._peekAhead();if(">"==t&&(">"==n||"="==n)){let t=!1,e=this._tokens.length-1;for(let r=0;r<4&&e>=0;++r,--e)if(this._tokens[e].type===ht.tokens.less_than){e>0&&this._tokens[e-1].isArrayOrTemplateType()&&(t=!0);break}if(t)return this._addToken(r),!0}if(r===ht.none){let n=t,s=0;const i=2;for(let t=0;t<i;++t)if(n+=this._peekAhead(t),r=this._findType(n),r!==ht.none){s=t;break}if(r===ht.none)return e!==ht.none&&(this._current--,this._addToken(e),!0);t=n,this._current+=s+1}if(e=r,this._isAtEnd())break;t+=this._advance()}return e!==ht.none&&(this._addToken(e),!0)}_findType(t){for(const e in ht.keywords){const r=ht.keywords[e];if(this._match(t,r.rule))return r}for(const e in ht.tokens){const r=ht.tokens[e];if(this._match(t,r.rule))return r}return ht.none}_match(t,e){if("string"==typeof e){if(e==t)return!0}else{const r=e.exec(t);if(r&&0==r.index&&r[0]==t)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(t){return" "==t||"\t"==t||"\r"==t}_advance(t=0){let e=this._source[this._current];return t=t||0,t++,this._current+=t,e}_peekAhead(t=0){return t=t||0,this._current+t>=this._source.length?"\0":this._source[this._current+t]}_addToken(t){const e=this._source.substring(this._start,this._current);this._tokens.push(new dt(t,e,this._line))}}class ft{constructor(){this._tokens=[],this._current=0,this._context=new l}parse(t){this._initialize(t);let e=[];for(;!this._isAtEnd();){const t=this._global_decl_or_directive();if(!t)break;e.push(t)}return e}_initialize(t){if(t)if("string"==typeof t){const e=new pt(t);this._tokens=e.scanTokens()}else this._tokens=t;else this._tokens=[];this._current=0}_error(t,e){return console.error(t,e),{token:t,message:e,toString:function(){return`${e}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==ht.eof}_match(t){if(t instanceof ct)return!!this._check(t)&&(this._advance(),!0);for(let e=0,r=t.length;e<r;++e){const r=t[e];if(this._check(r))return this._advance(),!0}return!1}_consume(t,e){if(this._check(t))return this._advance();throw this._error(this._peek(),e)}_check(t){if(this._isAtEnd())return!1;const e=this._peek();if(t instanceof Array){let r=e.type;return-1!=t.indexOf(r)}return e.type==t}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(ht.tokens.semicolon)&&!this._isAtEnd(););if(this._match(ht.keywords.alias)){const t=this._type_alias();return this._consume(ht.tokens.semicolon,"Expected ';'"),t}if(this._match(ht.keywords.enable)){const t=this._enable_directive();return this._consume(ht.tokens.semicolon,"Expected ';'"),t}const t=this._attribute();if(this._check(ht.keywords.var)){const e=this._global_variable_decl();return null!=e&&(e.attributes=t),this._consume(ht.tokens.semicolon,"Expected ';'."),e}if(this._check(ht.keywords.override)){const e=this._override_variable_decl();return null!=e&&(e.attributes=t),this._consume(ht.tokens.semicolon,"Expected ';'."),e}if(this._check(ht.keywords.let)){const e=this._global_let_decl();return null!=e&&(e.attributes=t),this._consume(ht.tokens.semicolon,"Expected ';'."),e}if(this._check(ht.keywords.const)){const e=this._global_const_decl();return null!=e&&(e.attributes=t),this._consume(ht.tokens.semicolon,"Expected ';'."),e}if(this._check(ht.keywords.struct)){const e=this._struct_decl();return null!=e&&(e.attributes=t),e}if(this._check(ht.keywords.fn)){const e=this._function_decl();return null!=e&&(e.attributes=t),e}return null}_function_decl(){if(!this._match(ht.keywords.fn))return null;const t=this._consume(ht.tokens.ident,"Expected function name.").toString();this._consume(ht.tokens.paren_left,"Expected '(' for function arguments.");const e=[];if(!this._check(ht.tokens.paren_right))do{if(this._check(ht.tokens.paren_right))break;const t=this._attribute(),r=this._consume(ht.tokens.ident,"Expected argument name.").toString();this._consume(ht.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n,e.push(new at(r,s,t)))}while(this._match(ht.tokens.comma));this._consume(ht.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(ht.tokens.arrow)){const t=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=t)}const n=this._compound_statement();return new d(t,e,r,n)}_compound_statement(){const t=[];for(this._consume(ht.tokens.brace_left,"Expected '{' for block.");!this._check(ht.tokens.brace_right);){const e=this._statement();null!==e&&t.push(e)}return this._consume(ht.tokens.brace_right,"Expected '}' for block."),t}_statement(){for(;this._match(ht.tokens.semicolon)&&!this._isAtEnd(););if(this._check(ht.keywords.if))return this._if_statement();if(this._check(ht.keywords.switch))return this._switch_statement();if(this._check(ht.keywords.loop))return this._loop_statement();if(this._check(ht.keywords.for))return this._for_statement();if(this._check(ht.keywords.while))return this._while_statement();if(this._check(ht.keywords.continuing))return this._continuing_statement();if(this._check(ht.keywords.static_assert))return this._static_assert_statement();if(this._check(ht.tokens.brace_left))return this._compound_statement();let t=null;return t=this._check(ht.keywords.return)?this._return_statement():this._check([ht.keywords.var,ht.keywords.let,ht.keywords.const])?this._variable_statement():this._match(ht.keywords.discard)?new R:this._match(ht.keywords.break)?new N:this._match(ht.keywords.continue)?new G:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=t&&this._consume(ht.tokens.semicolon,"Expected ';' after statement."),t}_static_assert_statement(){if(!this._match(ht.keywords.static_assert))return null;let t=this._optional_paren_expression();return new p(t)}_while_statement(){if(!this._match(ht.keywords.while))return null;let t=this._optional_paren_expression();const e=this._compound_statement();return new f(t,e)}_continuing_statement(){if(!this._match(ht.keywords.continuing))return null;const t=this._compound_statement();return new m(t)}_for_statement(){if(!this._match(ht.keywords.for))return null;this._consume(ht.tokens.paren_left,"Expected '('.");const t=this._check(ht.tokens.semicolon)?null:this._for_init();this._consume(ht.tokens.semicolon,"Expected ';'.");const e=this._check(ht.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(ht.tokens.semicolon,"Expected ';'.");const r=this._check(ht.tokens.paren_right)?null:this._for_increment();this._consume(ht.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new _(t,e,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(ht.keywords.var)){const t=this._variable_decl();if(null===t)throw this._error(this._peek(),"Variable declaration expected.");let e=null;return this._match(ht.tokens.equal)&&(e=this._short_circuit_or_expression()),new g(t.name,t.type,t.storage,t.access,e)}if(this._match(ht.keywords.let)){const t=this._consume(ht.tokens.ident,"Expected name for let.").toString();let e=null;if(this._match(ht.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(ht.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new y(t,e,null,null,r)}if(this._match(ht.keywords.const)){const t=this._consume(ht.tokens.ident,"Expected name for const.").toString();let e=null;if(this._match(ht.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(ht.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new x(t,e,null,null,r)}return null}_increment_decrement_statement(){const t=this._current,e=this._unary_expression();if(null==e)return null;if(!this._check(ht.increment_operators))return this._current=t,null;const r=this._consume(ht.increment_operators,"Expected increment operator");return new T(r.type===ht.tokens.plus_plus?v.increment:v.decrement,e)}_assignment_statement(){let t=null;if(this._check(ht.tokens.brace_right))return null;let e=this._match(ht.tokens.underscore);if(e||(t=this._unary_expression()),!e&&null==t)return null;const r=this._consume(ht.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new A(b.parse(r.lexeme),t,n)}_func_call_statement(){if(!this._check(ht.tokens.ident))return null;const t=this._current,e=this._consume(ht.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=t,null):new E(e.lexeme,r)}_loop_statement(){if(!this._match(ht.keywords.loop))return null;this._consume(ht.tokens.brace_left,"Expected '{' for loop.");const t=[];let e=this._statement();for(;null!==e;){if(Array.isArray(e))for(let r of e)t.push(r);else t.push(e);e=this._statement()}let r=null;return this._match(ht.keywords.continuing)&&(r=this._compound_statement()),this._consume(ht.tokens.brace_right,"Expected '}' for loop."),new P(t,r)}_switch_statement(){if(!this._match(ht.keywords.switch))return null;const t=this._optional_paren_expression();this._consume(ht.tokens.brace_left,"Expected '{' for switch.");const e=this._switch_body();if(null==e||0==e.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(ht.tokens.brace_right,"Expected '}' for switch."),new C(t,e)}_switch_body(){const t=[];if(this._match(ht.keywords.case)){const e=this._case_selectors();this._match(ht.tokens.colon),this._consume(ht.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(ht.tokens.brace_right,"Exected '}' for switch case."),t.push(new st(e,r))}if(this._match(ht.keywords.default)){this._match(ht.tokens.colon),this._consume(ht.tokens.brace_left,"Exected '{' for switch default.");const e=this._case_body();this._consume(ht.tokens.brace_right,"Exected '}' for switch default."),t.push(new it(e))}if(this._check([ht.keywords.default,ht.keywords.case])){const e=this._switch_body();t.push(e[0])}return t}_case_selectors(){var t,e,r,n;const s=[null!==(e=null===(t=this._shift_expression())||void 0===t?void 0:t.evaluate(this._context).toString())&&void 0!==e?e:""];for(;this._match(ht.tokens.comma);)s.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return s}_case_body(){if(this._match(ht.keywords.fallthrough))return this._consume(ht.tokens.semicolon,"Expected ';'"),[];let t=this._statement();if(null==t)return[];t instanceof Array||(t=[t]);const e=this._case_body();return 0==e.length?t:[...t,e[0]]}_if_statement(){if(!this._match(ht.keywords.if))return null;const t=this._optional_paren_expression(),e=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(ht.keywords.else)&&(n=this._compound_statement()),new B(t,e,r,n)}_match_elseif(){return this._tokens[this._current].type===ht.keywords.else&&this._tokens[this._current+1].type===ht.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(t=[]){const e=this._optional_paren_expression(),r=this._compound_statement();return t.push(new ot(e,r)),this._match_elseif()&&this._elseif_statement(t),t}_return_statement(){if(!this._match(ht.keywords.return))return null;const t=this._short_circuit_or_expression();return new z(t)}_short_circuit_or_expression(){let t=this._short_circuit_and_expr();for(;this._match(ht.tokens.or_or);)t=new rt(this._previous().toString(),t,this._short_circuit_and_expr());return t}_short_circuit_and_expr(){let t=this._inclusive_or_expression();for(;this._match(ht.tokens.and_and);)t=new rt(this._previous().toString(),t,this._inclusive_or_expression());return t}_inclusive_or_expression(){let t=this._exclusive_or_expression();for(;this._match(ht.tokens.or);)t=new rt(this._previous().toString(),t,this._exclusive_or_expression());return t}_exclusive_or_expression(){let t=this._and_expression();for(;this._match(ht.tokens.xor);)t=new rt(this._previous().toString(),t,this._and_expression());return t}_and_expression(){let t=this._equality_expression();for(;this._match(ht.tokens.and);)t=new rt(this._previous().toString(),t,this._equality_expression());return t}_equality_expression(){const t=this._relational_expression();return this._match([ht.tokens.equal_equal,ht.tokens.not_equal])?new rt(this._previous().toString(),t,this._relational_expression()):t}_relational_expression(){let t=this._shift_expression();for(;this._match([ht.tokens.less_than,ht.tokens.greater_than,ht.tokens.less_than_equal,ht.tokens.greater_than_equal]);)t=new rt(this._previous().toString(),t,this._shift_expression());return t}_shift_expression(){let t=this._additive_expression();for(;this._match([ht.tokens.shift_left,ht.tokens.shift_right]);)t=new rt(this._previous().toString(),t,this._additive_expression());return t}_additive_expression(){let t=this._multiplicative_expression();for(;this._match([ht.tokens.plus,ht.tokens.minus]);)t=new rt(this._previous().toString(),t,this._multiplicative_expression());return t}_multiplicative_expression(){let t=this._unary_expression();for(;this._match([ht.tokens.star,ht.tokens.forward_slash,ht.tokens.modulo]);)t=new rt(this._previous().toString(),t,this._unary_expression());return t}_unary_expression(){return this._match([ht.tokens.minus,ht.tokens.bang,ht.tokens.tilde,ht.tokens.star,ht.tokens.and])?new et(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const t=this._primary_expression(),e=this._postfix_expression();return e&&(t.postfix=e),t}_postfix_expression(){if(this._match(ht.tokens.bracket_left)){const t=this._short_circuit_or_expression();this._consume(ht.tokens.bracket_right,"Expected ']'.");const e=this._postfix_expression();return e&&(t.postfix=e),t}if(this._match(ht.tokens.period)){const t=this._consume(ht.tokens.ident,"Expected member name."),e=this._postfix_expression(),r=new H(t.lexeme);return e&&(r.postfix=e),r}return null}_getStruct(t){return this._context.aliases.has(t)?this._context.aliases.get(t).type:this._context.structs.has(t)?this._context.structs.get(t):null}_primary_expression(){if(this._match(ht.tokens.ident)){const t=this._previous().toString();if(this._check(ht.tokens.paren_left)){const e=this._argument_expression_list(),r=this._getStruct(t);return null!=r?new j(r,e):new X(t,e)}if(this._context.constants.has(t)){const e=this._context.constants.get(t);return new $(t,e.value)}return new W(t)}if(this._match(ht.const_literal))return new K(parseFloat(this._previous().toString()));if(this._check(ht.tokens.paren_left))return this._paren_expression();if(this._match(ht.keywords.bitcast)){this._consume(ht.tokens.less_than,"Expected '<'.");const t=this._type_decl();this._consume(ht.tokens.greater_than,"Expected '>'.");const e=this._paren_expression();return new Q(t,e)}const t=this._type_decl(),e=this._argument_expression_list();return new Z(t,e)}_argument_expression_list(){if(!this._match(ht.tokens.paren_left))return null;const t=[];do{if(this._check(ht.tokens.paren_right))break;const e=this._short_circuit_or_expression();t.push(e)}while(this._match(ht.tokens.comma));return this._consume(ht.tokens.paren_right,"Expected ')' for agument list"),t}_optional_paren_expression(){this._match(ht.tokens.paren_left);const t=this._short_circuit_or_expression();return this._match(ht.tokens.paren_right),new J([t])}_paren_expression(){this._consume(ht.tokens.paren_left,"Expected '('.");const t=this._short_circuit_or_expression();return this._consume(ht.tokens.paren_right,"Expected ')'."),new J([t])}_struct_decl(){if(!this._match(ht.keywords.struct))return null;const t=this._consume(ht.tokens.ident,"Expected name for struct.").toString();this._consume(ht.tokens.brace_left,"Expected '{' for struct body.");const e=[];for(;!this._check(ht.tokens.brace_right);){const t=this._attribute(),r=this._consume(ht.tokens.ident,"Expected variable name.").toString();this._consume(ht.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=n),this._check(ht.tokens.brace_right)?this._match(ht.tokens.comma):this._consume(ht.tokens.comma,"Expected ',' for struct member."),e.push(new ut(r,s,t))}this._consume(ht.tokens.brace_right,"Expected '}' after struct body.");const r=new V(t,e);return this._context.structs.set(t,r),r}_global_variable_decl(){const t=this._variable_decl();return t&&this._match(ht.tokens.equal)&&(t.value=this._const_expression()),t}_override_variable_decl(){const t=this._override_decl();return t&&this._match(ht.tokens.equal)&&(t.value=this._const_expression()),t}_global_const_decl(){if(!this._match(ht.keywords.const))return null;const t=this._consume(ht.tokens.ident,"Expected variable name");let e=null;if(this._match(ht.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;if(this._match(ht.tokens.equal)){const t=this._short_circuit_or_expression();if(t instanceof j)r=t;else if(t instanceof $&&t.initializer instanceof j)r=t.initializer;else try{const e=t.evaluate(this._context);r=new K(e)}catch(e){r=t}}const n=new x(t.toString(),e,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(ht.keywords.let))return null;const t=this._consume(ht.tokens.ident,"Expected variable name");let e=null;if(this._match(ht.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;return this._match(ht.tokens.equal)&&(r=this._const_expression()),new y(t.toString(),e,"","",r)}_const_expression(){if(this._match(ht.const_literal))return new H(this._previous().toString());const t=this._type_decl();this._consume(ht.tokens.paren_left,"Expected '('.");let e=[];for(;!this._check(ht.tokens.paren_right)&&(e.push(this._const_expression()),this._check(ht.tokens.comma));)this._advance();return this._consume(ht.tokens.paren_right,"Expected ')'."),new j(t,e)}_variable_decl(){if(!this._match(ht.keywords.var))return null;let t="",e="";this._match(ht.tokens.less_than)&&(t=this._consume(ht.storage_class,"Expected storage_class.").toString(),this._match(ht.tokens.comma)&&(e=this._consume(ht.access_mode,"Expected access_mode.").toString()),this._consume(ht.tokens.greater_than,"Expected '>'."));const r=this._consume(ht.tokens.ident,"Expected variable name");let n=null;if(this._match(ht.tokens.colon)){const t=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=t)}return new g(r.toString(),n,t,e,null)}_override_decl(){if(!this._match(ht.keywords.override))return null;const t=this._consume(ht.tokens.ident,"Expected variable name");let e=null;if(this._match(ht.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}return new w(t.toString(),e,null)}_enable_directive(){const t=this._consume(ht.tokens.ident,"identity expected.");return new U(t.toString())}_type_alias(){const t=this._consume(ht.tokens.ident,"identity expected.");this._consume(ht.tokens.equal,"Expected '=' for type alias.");let e=this._type_decl();if(null===e)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);const r=new q(t.toString(),e);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([ht.tokens.ident,...ht.texel_format,ht.keywords.bool,ht.keywords.f32,ht.keywords.i32,ht.keywords.u32])){const t=this._advance(),e=t.toString();return this._context.structs.has(e)?this._context.structs.get(e):this._context.aliases.has(e)?this._context.aliases.get(e).type:new I(t.toString())}if(this._check(ht.template_types)){let t=this._advance().toString(),e=null,r=null;return this._match(ht.tokens.less_than)&&(e=this._type_decl(),r=null,this._match(ht.tokens.comma)&&(r=this._consume(ht.access_mode,"Expected access_mode for pointer").toString()),this._consume(ht.tokens.greater_than,"Expected '>' for type.")),new F(t,e,r)}if(this._match(ht.keywords.ptr)){let t=this._previous().toString();this._consume(ht.tokens.less_than,"Expected '<' for pointer.");const e=this._consume(ht.storage_class,"Expected storage_class for pointer");this._consume(ht.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(ht.tokens.comma)&&(n=this._consume(ht.access_mode,"Expected access_mode for pointer").toString()),this._consume(ht.tokens.greater_than,"Expected '>' for pointer."),new L(t,e.toString(),r,n)}let t=this._texture_sampler_types();if(t)return t;const e=this._attribute();if(this._match(ht.keywords.array)){let t=null,r=-1;const n=this._previous();if(this._match(ht.tokens.less_than)){t=this._type_decl(),this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);let e="";this._match(ht.tokens.comma)&&(e=this._shift_expression().evaluate(this._context).toString()),this._consume(ht.tokens.greater_than,"Expected '>' for array."),r=e?parseInt(e):0}return new O(n.toString(),e,t,r)}return null}_texture_sampler_types(){if(this._match(ht.sampler_type))return new D(this._previous().toString(),null,null);if(this._match(ht.depth_texture_type))return new D(this._previous().toString(),null,null);if(this._match(ht.sampled_texture_type)||this._match(ht.multisampled_texture_type)){const t=this._previous();this._consume(ht.tokens.less_than,"Expected '<' for sampler type.");const e=this._type_decl();return this._consume(ht.tokens.greater_than,"Expected '>' for sampler type."),new D(t.toString(),e,null)}if(this._match(ht.storage_texture_type)){const t=this._previous();this._consume(ht.tokens.less_than,"Expected '<' for sampler type.");const e=this._consume(ht.texel_format,"Invalid texel format.").toString();this._consume(ht.tokens.comma,"Expected ',' after texel format.");const r=this._consume(ht.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(ht.tokens.greater_than,"Expected '>' for sampler type."),new D(t.toString(),e,r)}return null}_attribute(){let t=[];for(;this._match(ht.tokens.attr);){const e=this._consume(ht.attribute_name,"Expected attribute name"),r=new lt(e.toString(),null);if(this._match(ht.tokens.paren_left)){if(r.value=this._consume(ht.literal_or_ident,"Expected attribute value").toString(),this._check(ht.tokens.comma)){this._advance();do{const t=this._consume(ht.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(t)}while(this._match(ht.tokens.comma))}this._consume(ht.tokens.paren_right,"Expected ')'")}t.push(r)}for(;this._match(ht.tokens.attr_left);){if(!this._check(ht.tokens.attr_right))do{const e=this._consume(ht.attribute_name,"Expected attribute name"),r=new lt(e.toString(),null);if(this._match(ht.tokens.paren_left)){if(r.value=[this._consume(ht.literal_or_ident,"Expected attribute value").toString()],this._check(ht.tokens.comma)){this._advance();do{const t=this._consume(ht.literal_or_ident,"Expected attribute value").toString();r.value.push(t)}while(this._match(ht.tokens.comma))}this._consume(ht.tokens.paren_right,"Expected ')'")}t.push(r)}while(this._match(ht.tokens.comma));this._consume(ht.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==t.length?null:t}}class mt{constructor(t,e){this.name=t,this.attributes=e,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class _t{constructor(t,e,r){this.name=t,this.type=e,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class gt extends mt{constructor(t,e){super(t,e),this.members=[],this.align=0}get isStruct(){return!0}}class wt extends mt{constructor(t,e){super(t,e),this.count=0,this.stride=0}get isArray(){return!0}}class yt extends mt{constructor(t,e,r){super(t,r),this.format=e}get isTemplate(){return!0}}!function(t){t[t.Uniform=0]="Uniform",t[t.Storage=1]="Storage",t[t.Texture=2]="Texture",t[t.Sampler=3]="Sampler"}(S||(S={}));class xt{constructor(t,e,r,n,s,i){this.name=t,this.type=e,this.group=r,this.binding=n,this.attributes=s,this.resourceType=i}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class vt{constructor(t,e){this.name=t,this.type=e}}class bt{constructor(t,e){this.align=t,this.size=e}}class kt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n,this.interpolation=null}}class Mt{constructor(t,e,r,n){this.name=t,this.type=e,this.locationType=r,this.location=n}}class St{constructor(t,e=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=t,this.stage=e}}class Tt{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class At{constructor(t,e,r,n){this.name=t,this.type=e,this.attributes=r,this.id=n}}class Et{constructor(t){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Tt,this._types=new Map,t&&this.update(t)}update(t){const e=(new ft).parse(t);for(const t of e){if(t instanceof V){const e=this._getTypeInfo(t,null);e instanceof gt&&this.structs.push(e)}if(t instanceof q&&this.aliases.push(this._getAliasInfo(t)),t instanceof w){const e=t,r=this._getAttributeNum(e.attributes,"id",0),n=null!=e.type?this._getTypeInfo(e.type,e.attributes):null;this.overrides.push(new At(e.name,n,e.attributes,r))}if(this._isUniformVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new xt(e.name,s,r,n,e.attributes,S.Uniform);this.uniforms.push(i)}if(this._isStorageVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new xt(e.name,s,r,n,e.attributes,S.Storage);this.storage.push(i)}if(this._isTextureVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new xt(e.name,s,r,n,e.attributes,S.Texture);this.textures.push(i)}if(this._isSamplerVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),n=this._getAttributeNum(e.attributes,"binding",0),s=this._getTypeInfo(e.type,e.attributes),i=new xt(e.name,s,r,n,e.attributes,S.Sampler);this.samplers.push(i)}if(t instanceof d){const e=this._getAttribute(t,"vertex"),r=this._getAttribute(t,"fragment"),n=this._getAttribute(t,"compute"),s=e||r||n;if(s){const e=new St(t.name,s.name);e.inputs=this._getInputs(t.args),e.outputs=this._getOutputs(t.returnType),this.entry[s.name].push(e)}}}}getBindGroups(){const t=[];function e(e,r){e>=t.length&&(t.length=e+1),void 0===t[e]&&(t[e]=[]),r>=t[e].length&&(t[e].length=r+1)}for(const r of this.uniforms)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.storage)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.textures)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.samplers)e(r.group,r.binding),t[r.group][r.binding]=r;return t}_getOutputs(t,e=void 0){if(void 0===e&&(e=[]),t instanceof V)this._getStructOutputs(t,e);else{const r=this._getOutputInfo(t);null!==r&&e.push(r)}return e}_getStructOutputs(t,e){for(const r of t.members)if(r.type instanceof V)this._getStructOutputs(r.type,e);else{const t=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==t){const n=this._getTypeInfo(r.type,r.type.attributes),s=this._parseInt(t.value),i=new Mt(r.name,n,t.name,s);e.push(i)}}}_getOutputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getTypeInfo(t,t.attributes),n=this._parseInt(e.value);return new Mt("",r,e.name,n)}return null}_getInputs(t,e=void 0){void 0===e&&(e=[]);for(const r of t)if(r.type instanceof V)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}return e}_getStructInputs(t,e){for(const r of t.members)if(r.type instanceof V)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}}_getInputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getAttribute(t,"interpolation"),n=this._getTypeInfo(t.type,t.attributes),s=this._parseInt(e.value),i=new kt(t.name,n,e.name,s);return null!==r&&(i.interpolation=this._parseString(r.value)),i}return null}_parseString(t){return t instanceof Array&&(t=t[0]),t}_parseInt(t){t instanceof Array&&(t=t[0]);const e=parseInt(t);return isNaN(e)?t:e}_getAlias(t){for(const e of this.aliases)if(e.name==t)return e.type;return null}_getAliasInfo(t){return new vt(t.name,this._getTypeInfo(t.type,null))}_getTypeInfo(t,e){if(this._types.has(t))return this._types.get(t);if(t instanceof O){const r=t,n=this._getTypeInfo(r.format,r.attributes),s=new wt(r.name,e);return s.format=n,s.count=r.count,this._types.set(t,s),this._updateTypeInfo(s),s}if(t instanceof V){const r=t,n=new gt(r.name,e);for(const t of r.members){const e=this._getTypeInfo(t.type,t.attributes);n.members.push(new _t(t.name,e,t.attributes))}return this._types.set(t,n),this._updateTypeInfo(n),n}if(t instanceof F){const r=t,n=r.format?this._getTypeInfo(r.format,null):null,s=new yt(r.name,n,e);return this._types.set(t,s),this._updateTypeInfo(s),s}const r=new mt(t.name,e);return this._types.set(t,r),this._updateTypeInfo(r),r}_updateTypeInfo(t){var e,r;const n=this._getTypeSize(t);if(t.size=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:0,t instanceof wt){const e=this._getTypeSize(t.format);t.stride=null!==(r=null==e?void 0:e.size)&&void 0!==r?r:0,this._updateTypeInfo(t.format)}t instanceof gt&&this._updateStructInfo(t)}_updateStructInfo(t){var e;let r=0,n=0,s=0,i=0;for(let a=0,o=t.members.length;a<o;++a){const o=t.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(e=this._getAlias(o.type.name))&&void 0!==e||o.type;const l=u.align,c=u.size;r=this._roundUp(l,r+n),n=c,s=r,i=Math.max(i,l),o.offset=r,o.size=c,this._updateTypeInfo(o.type)}t.size=this._roundUp(i,s+n),t.align=i}_getTypeSize(t){var e;if(null==t)return null;const r=this._getAttributeNum(t.attributes,"size",0),n=this._getAttributeNum(t.attributes,"align",0);if(t instanceof _t&&(t=t.type),t instanceof mt){const e=this._getAlias(t.name);null!==e&&(t=e)}{const e=Et._typeInfo[t.name];if(void 0!==e){const s="f16"===t.format?2:1;return new bt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}{const e=Et._typeInfo[t.name.substring(0,t.name.length-1)];if(e){const s="h"===t.name[t.name.length-1]?2:1;return new bt(Math.max(n,e.align/s),Math.max(r,e.size/s))}}if(t instanceof wt){let s=t,i=8,a=8;const o=this._getTypeSize(s.format);return null!==o&&(a=o.size,i=o.align),a=s.count*this._getAttributeNum(null!==(e=null==t?void 0:t.attributes)&&void 0!==e?e:null,"stride",this._roundUp(i,a)),r&&(a=r),new bt(Math.max(n,i),Math.max(r,a))}if(t instanceof gt){let e=0,s=0,i=0,a=0,o=0;for(const r of t.members){const t=this._getTypeSize(r.type);null!==t&&(e=Math.max(t.align,e),i=this._roundUp(t.align,i+a),a=t.size,o=i)}return s=this._roundUp(e,o+a),new bt(Math.max(n,e),Math.max(r,s))}return null}_isUniformVar(t){return t instanceof g&&"uniform"==t.storage}_isStorageVar(t){return t instanceof g&&"storage"==t.storage}_isTextureVar(t){return t instanceof g&&null!==t.type&&-1!=Et._textureTypes.indexOf(t.type.name)}_isSamplerVar(t){return t instanceof g&&null!==t.type&&-1!=Et._samplerTypes.indexOf(t.type.name)}_getAttribute(t,e){const r=t;if(!r||!r.attributes)return null;const n=r.attributes;for(let t of n)if(t.name==e)return t;return null}_getAttributeNum(t,e,r){if(null===t)return r;for(let n of t)if(n.name==e){let t=null!==n&&null!==n.value?n.value:r;return t instanceof Array&&(t=t[0]),"number"==typeof t?t:"string"==typeof t?parseInt(t):r}return r}_roundUp(t,e){return Math.ceil(e/t)*t}}function Pt(t,e){const r=function(t){return Array.isArray(t)||u(t)?[...t,1,1].slice(0,3):function(t){return[t.width,t.height||1,t.depthOrArrayLayers||1]}(t)}(t),n=Math.max(...r.slice(0,"3d"===e?3:2));return 1+Math.log2(n)|0}Et._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},Et._textureTypes=ht.any_texture_type.map((t=>t.name)),Et._samplerTypes=ht.sampler_type.map((t=>t.name));const Ct=new WeakMap,Bt=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function zt(t){return u(t)||Array.isArray(t)||function(t){const e=t;return u(e.data)||Array.isArray(e.data)}(t)}function Ut(t){switch(t){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Bt.entries()].map((([t,{formats:[e,r]}])=>[[e,t],[r,t]])).flat());const qt={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Rt=/([a-z]+)(\d+)([a-z]+)/;function Nt(t){const[,e,r,n]=Rt.exec(t),s=e.length,i=parseInt(r)/8;return{channels:e,numChannels:s,bytesPerChannel:i,bytesPerElement:s*i,Type:qt[`${r}${n}`]}}function Gt(t,e,r,n={}){r.forEach(((r,s)=>{const i=[0,0,s+(n.baseArrayLayer||0)];if(zt(r))!function(t,e,r,n){const s=function(t,e){if(u(t))return t;const{Type:r}=Nt(e);return new r(t)}(r.data||r,e.format),i=function(t,e){return[t.width,t.height,t.depthOrArrayLayers].map((t=>Math.max(1,Math.floor(t/1))))}(e),{bytesPerElement:a}=Nt(e.format),o=n.origin||[0,0,0];t.queue.writeTexture({texture:e,origin:o},s,{bytesPerRow:a*i[0],rowsPerImage:i[1]},i)}(t,e,r,{origin:i});else{const s=r,{flipY:a,premultipliedAlpha:o,colorSpace:u}=n;t.queue.copyExternalImageToTexture({source:s,flipY:a},{texture:e,premultipliedAlpha:o,colorSpace:u,origin:i},It(s,n))}})),e.mipLevelCount>1&&function(t,e){let r=Ct.get(t);r||(r={pipelineByFormat:{},moduleByView:{}},Ct.set(t,r));let{sampler:n}=r;const{pipelineByFormat:s,moduleByView:i}=r,a=function(t){switch(t.dimension){case"1d":return"1d";case"3d":return"3d";default:return t.depthOrArrayLayers>1?"2d-array":"2d"}}(e);let o=i[a];o||(o=t.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),i[a]=o),n||(n=t.createSampler({minFilter:"linear"}),r.sampler=n);const u=`${e.format}`;s[u]||(s[u]=t.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:e.format}]}}));const l=s[u],c=t.createCommandEncoder({label:"mip gen encoder"});for(let r=1;r<e.mipLevelCount;++r)for(let s=0;s<e.depthOrArrayLayers;++s){const i=t.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:n},{binding:1,resource:e.createView({dimension:"2d",baseMipLevel:r-1,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:e.createView({baseMipLevel:r,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=c.beginRenderPass(a);o.setPipeline(l),o.setBindGroup(0,i),o.draw(3),o.end()}const h=c.finish();t.queue.submit([h])}(t,e)}function It(t,e){if(t instanceof HTMLVideoElement)return[t.videoWidth,t.videoHeight,1];{const r=t,{width:n,height:s}=r;if(n>0&&s>0&&!zt(t))return[n,s,1];const i=e.format||"rgba8unorm",{bytesPerElement:a,bytesPerChannel:o}=Nt(i),l=u(t)||Array.isArray(t)?t:t.data;return function(t,e,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(t||e){if(e){if(!t&&(t=r/e)%1)throw new Error("can't guess dimensions")}else if((e=r/t)%1)throw new Error("can't guess dimensions")}else{const s=Math.sqrt(r/("cube"===n?6:1));s%1==0?(t=s,e=s):(t=r,e=1)}const s=r/t/e;if(s%1)throw new Error("can't guess dimensions");return[t,e,s]}(n,s,(u(l)?l.byteLength:l.length*o)/a)}}async function Vt(t,e,r={}){const n=await Promise.all(e.map((t=>async function(t,e={}){const r=await fetch(t),n=await r.blob(),s={...e,...void 0!==e.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,s)}(t))));return function(t,e,r={}){const n=It(e[0],r);n[2]=n[2]>1?n[2]:e.length;const s=t.createTexture({dimension:Ut(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Pt(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Gt(t,s,e,r),s}(t,n,r)}async function Ft(t,e,r={}){return Vt(t,[e],r)}var Lt;function Ot(t,e,r=1,n=1){const s=r*n,i=new Uint8Array(4*s),[a,o,u,l]=e;for(let t=0;t<s;++t){const e=4*t;i[e]=255*a,i[e+1]=255*o,i[e+2]=255*u,i[e+3]=255*l}const c=t.createTexture({size:{width:r,height:n},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return t.queue.writeTexture({texture:c},i,{bytesPerRow:4*r,rowsPerImage:n},{width:r,height:n}),c}!function(t){t[t.Default=0]="Default",t[t.SolidColor=1]="SolidColor",t[t.VertexNormal=2]="VertexNormal"}(Lt||(Lt={}));class Dt{mode=Lt.Default;tiling={u:1,v:1};ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(t){t&&(this.mode=t.mode??this.mode,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.shininess=t.shininess??this.shininess,this.diffuseMapPath=t.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=t.specularMapPath??this.specularMapPath,this.normalMapPath=t.normalMapPath??this.normalMapPath,this.tiling=t.tiling??this.tiling,this.disableNormalMap=t.disableNormalMap??this.disableNormalMap)}static solidColor(t){return new Dt({mode:Lt.SolidColor,diffuseColor:t})}getBytes(){return new Float32Array([this.mode,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v,...this.ambientColor,...this.specularColor,this.shininess,0,0,0])}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"material",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}async writeTexturesToGpuAsync(t,e){this.ambientMapPath?this._ambientTexture=await Ft(t,this.ambientMapPath,{mips:e}):this._ambientTexture=Ot(t,this.ambientColor),this.diffuseMapPath?this._diffuseTexture=await Ft(t,this.diffuseMapPath,{mips:e}):this._diffuseTexture=Ot(t,this.diffuseColor),this.specularMapPath?this._specularTexture=await Ft(t,this.specularMapPath,{mips:e}):this._specularTexture=Ot(t,this.specularColor),this.normalMapPath?this._normalTexture=await Ft(t,this.normalMapPath,{mips:e}):this._normalTexture=Ot(t,[0,0,1,1])}}class Yt{name;vertices;vertexCount;vertexBufferLayout;topology;material;boundingBox;normalData;normalBufferLayout;vertexBuffer=null;normalBuffer=null;constructor(t,e,r,n,s,i=new Dt,a,o=null,u=null){this.name=t,this.vertices=e,this.vertexCount=r,this.vertexBufferLayout=n,this.topology=s,this.material=i,this.boundingBox=a,this.normalData=o,this.normalBufferLayout=u}writeMeshToGpu(t){if(null!=this.vertexBuffer)return;const e={label:`${this.name} vertex buffer`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};if(this.vertexBuffer=t.createBuffer(e),t.queue.writeBuffer(this.vertexBuffer,0,this.vertices,0),null==this.normalData)return;const r={label:`${this.name} normal buffer`,size:this.normalData.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this.normalBuffer=t.createBuffer(r),t.queue.writeBuffer(this.normalBuffer,0,this.normalData,0)}}var Ht=r(42),jt=r(284);const Xt={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]};function Wt(t,e,r,s=[0,0,0]){let i=Math.sin(e*Math.PI/180),a=Math.cos(e*Math.PI/180);return n.R3.fromValues(t*a+s[0],r+s[1],-t*i+s[2])}function $t(t,e,r,s,i,a,o=!0){const u=n.R3.subtract(e,t),l=n.R3.subtract(r,t),c=n.K4.subtract(i,s),h=n.K4.subtract(a,s),d=1/(c[0]*h[1]-c[1]*h[0]);return[n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,h[1]),n.R3.mulScalar(l,-c[1])),d),n.R3.mulScalar(n.R3.add(n.R3.mulScalar(u,-h[0]),n.R3.mulScalar(l,c[0])),o?-d:d)]}function Kt(t){return new Yt("cube_asset",jt.Vk,jt.qw,jt.sY,jt.nk,t??new Dt,{min:[-1,-1,-1],max:[1,1,1]})}var Qt;!function(t){t[t.Direct=0]="Direct",t[t.Point=1]="Point"}(Qt||(Qt={}));class Zt{static _CUBEASSET=Kt(new Dt({mode:Lt.SolidColor,diffuseColor:[1,1,1,0]}));_model=new o("light",Zt._CUBEASSET);get model(){return this._model}isOn=!0;intensity=1;type=Qt.Point;ambientColor=[.2,.2,.2,0];diffuseColor=[.5,.5,.5,0];specularColor=[.8,.8,.8,0];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;useFalloff=!1;_positionOrDirection=[0,30,0];get positionOrDirection(){return this._positionOrDirection}set positionOrDirection(t){this._positionOrDirection=t;let e=this.type==Qt.Point?this._positionOrDirection:n.R3.mulScalar(n.R3.normalize(this._positionOrDirection),-100);this._model.transform=n._E.uniformScale(n._E.translation([...e,0],this._model.transform),.5,this._model.transform)}constructor(t){this._model=new o("light",Zt._CUBEASSET).translate(...this.positionOrDirection).scale(.5,.5,.5),t&&(this.type=t.type??this.type,this.positionOrDirection=t.positionOrDirection??this.positionOrDirection,this.ambientColor=t.ambientColor??this.ambientColor,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.intensity=t.intensity??this.intensity,this.useFalloff=t.useFalloff??this.useFalloff,this._renderShadowMap=t.renderShadowMap??!0),this.positionOrDirection=this._positionOrDirection}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}getBytes(){return new Float32Array([this.type,this.useFalloff?1:0,this.shadowMap&&this.showShadows?this.shadowMap.id:-1,0,...this.positionOrDirection,0,...this.disableAmbientColor||!this.isOn?[0,0,0,1]:n.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor||!this.isOn?[0,0,0,1]:n.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor||!this.isOn?[0,0,0,1]:n.vh.mulScalar(this.specularColor,this.intensity),...this.shadowMap?this.shadowMap.light_mat:this.dummy])}showShadows=!0;get renderShadowMap(){return this.type!=Qt.Point&&this._renderShadowMap}_renderShadowMap=!0;shadowMap;dummy=n._E.create();get byteLength(){return Math.max(this.getBytes().byteLength,80)}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"direct light",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}}var Jt=r(838);class te{isAnimated=!0;camera=new i;lights=[new Zt];models=[];constructor(t){t&&(this.isAnimated=t.isAnimated??!0,this.camera=t.camera??this.camera)}update(t){}attachUi(t){}}class ee extends te{uiContainer;attachUi(t){let e=(0,Jt.fH)();this.uiContainer=e;const r=(0,Jt.v)();e.appendChild(r);for(let[t,e]of this.lights.entries())(0,Jt.ug)(r,`${Qt[e.type]}Light_${t.toString().padStart(2,"0")}`,(t=>{e.isOn=t.checked}));(0,Jt.ug)(r,"isAnimated",(t=>{this.isAnimated=t.checked}),this.isAnimated);const n=(0,Jt.v)();e.appendChild(n),(0,Jt.ug)(n,"ambient",(t=>{for(let e of this.lights.values())e.disableAmbientColor=!t.checked})),(0,Jt.ug)(n,"diffuse",(t=>{for(let e of this.lights.values())e.disableDiffuseColor=!t.checked})),(0,Jt.ug)(n,"specular",(t=>{for(let e of this.lights.values())e.disableSpecularColor=!t.checked}));const s=(0,Jt.v)();this.uiContainer.appendChild(s),(0,Jt.ug)(s,"normal_mapping",(t=>{for(let e of this.models)e.asset.material.disableNormalMap=!t.checked})),document.body.insertBefore(e,t.nextSibling)}}class re extends ee{constructor(){super(),this.isAnimated=!1,this.camera=new i({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new Zt({type:Qt.Direct,positionOrDirection:[-2,-1,0]})),this.lights.push(new Zt({type:Qt.Direct,positionOrDirection:[0,-1,1]})),this.lights.push(new Zt({type:Qt.Point,positionOrDirection:[0,30,0]})),this.lights.forEach((t=>{t.intensity=1/this.lights.length}));let t=Kt(new Dt({diffuseColor:[20,20,20,1]})),e=new o("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(e);let r=Kt(new Dt({diffuseColor:[235/255,201/255,52/255,1]})),s=new o("Cube01",r).rotate(0,45,0).translate(0,10,0).scaleBy(10);this.models.push(s);let a=function(t=5,e=!1,r){const[s,i,a]=[.7,1.5,3];return new Yt("cylinder_asset",function(t=30,e=!1,r=.7,s=1.5,i=3){if(t<3||r>=s)throw new RangeError("arguments not valid");t+=1;let a=[],o=i/2;const u=[0,0,0];for(let e=0;e<t;e++)a.push([Wt(s,360*e/(t-1),o,u),Wt(s,360*e/(t-1),-o,u),Wt(r,360*e/(t-1),-o,u),Wt(r,360*e/(t-1),o,u)]);let l,c,h,d,p,f,m,_,g=[],w=[],y=[];for(let o=0;o<t-1;o++){l=a[o][0],c=a[o][1],h=a[o][2],d=a[o][3],p=a[o+1][0],f=a[o+1][1],m=a[o+1][2],_=a[o+1][3],g.push(l[0],l[1],l[2],p[0],p[1],p[2],_[0],_[1],_[2],_[0],_[1],_[2],d[0],d[1],d[2],l[0],l[1],l[2],c[0],c[1],c[2],h[0],h[1],h[2],m[0],m[1],m[2],m[0],m[1],m[2],f[0],f[1],f[2],c[0],c[1],c[2],l[0],l[1],l[2],c[0],c[1],c[2],f[0],f[1],f[2],f[0],f[1],f[2],p[0],p[1],p[2],l[0],l[1],l[2],h[0],h[1],h[2],d[0],d[1],d[2],_[0],_[1],_[2],_[0],_[1],_[2],m[0],m[1],m[2],h[0],h[1],h[2]);let u=[l,p,_,_,d,l];for(let t of u){let e=[t[0],t[2]];e=n.K4.divScalar(e,s),e=n.K4.addScaled(n.K4.create(.5,.5),e,.5),y.push(e)}u=[c,h,m,m,f,c];for(let t of u){let e=[t[2],t[0]];e=n.K4.divScalar(e,s),e=n.K4.addScaled(n.K4.create(.5,.5),e,.5),y.push(e)}const x=e=>Math.sqrt(2*e*e*(1-Math.cos(2*Math.PI/t))),v=1*x(s)/i;let b=o*v,k=(o+1)*v;y.push([b,0]),y.push([b,1]),y.push([k,1]),y.push([k,1]),y.push([k,0]),y.push([b,0]);const M=1*x(r)/i;if(k=-o*M,b=-(o+1)*M,y.push([k,1]),y.push([k,0]),y.push([b,0]),y.push([b,0]),y.push([b,1]),y.push([k,1]),w.push(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0),e){let t=n.R3.normalize([l[0],0,l[2]]),e=n.R3.normalize([f[0],0,f[2]]),r=n.R3.mulScalar(t,-1),s=n.R3.mulScalar(e,-1);w.push(...t),w.push(...t),w.push(...e),w.push(...e),w.push(...e),w.push(...t),w.push(...r),w.push(...r),w.push(...s),w.push(...s),w.push(...s),w.push(...r)}else{let t=[l[0]-p[0],0,l[2]-p[2]],e=n.R3.normalize([t[2],0,-t[0]]),r=n.R3.mulScalar(e,-1);for(let t=0;t<6;t++)w.push(...e);for(let t=0;t<6;t++)w.push(...r)}}let x=[];for(let t=0;t<g.length;t+=3)x.push(...g.slice(t,t+3)),x.push(1,1,0,0,1),x.push(...y[t/3]),x.push(...w.slice(t,t+3)),x.push(1);return new Float32Array(x)}(t,e,s,i,a),24*t,Xt,"triangle-list",r??new Dt,{min:[-i,-a/2,-i],max:[i,a/2,i]})}(5,!1,new Dt({diffuseColor:[0,0,.8,1]})),u=new o("Cylinder01",a).translate(0,10,-30).scaleBy(20/3);this.models.push(u);let l=function(t){const e=jt.Vk,r=jt.qw,n=function(t,e){const r=[],n=14,s=t=>[t.slice(0,3),t.slice(8,10)];for(let i=0;i<e;i++){const[e,a]=s(t.slice(i*n,(i+1)*n));i++;const[o,u]=s(t.slice(i*n,(i+1)*n));i++;const[l,c]=s(t.slice(i*n,(i+1)*n)),[h,d]=$t(e,o,l,a,u,c);for(let t=0;t<3;t++)r.push(...h),r.push(...d)}return new Float32Array(r)}(e,r);return new Yt("cube_asset",e,r,jt.sY,jt.nk,t??new Dt,{min:[-1,-1,-1],max:[1,1,1]},n,Ht.aH)}(new Dt({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${Jt.GL}/assets/spiral_normal.png`})),c=new o("Cube01",l).rotate(0,30,0).translate(25,8,0).scaleBy(8);this.models.push(c);let h=new o("Cube01",r).translate(50,7,0).scaleBy(7);this.models.push(h)}update(t){this.isAnimated&&(this.lights[0].positionOrDirection=n.R3.lerp(this.lights[0].positionOrDirection,[0,-1,2],.2*t))}}},255:t=>{t.exports="struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    positionOrDirection : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\noverride shadowMapSize : f32 = 1024.0;\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n@group(0) @binding(7) var normalTexture : texture_2d<f32>;\n\n@group(1) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(1) @binding(1) var shadowMapSampler : sampler_comparison;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n//remark 1\n//wgsl doesn't support forwarding matrices or arrays to the FS as function argument\n//for matrices this can be solved by forwarding the columns separatly\n//for arrays i actually don't have any solution\n//a fixed amount of array entries could be forwarded as separate arguments\n\n//remark 2\n//literature says the vertex shader isn't called as often as the fragment shader\n//reasoning is probably that the VS runs for every vertex and 3 vertices usually belong to more than 2 fragments/pixels\n//but i'm not sure if this is actually still true when using zbuffer or even when just using a high poly model\n\n//so it might be advantageous to push calculations into the VS\n//the tbn can be built in the VS and inverted by only taking the transpose because it's an orthonormal matrix\n//now instead of calculating everything in world space we can take the light position/direction and the camera position\n//into tangent space in the VS! and foward them to the FS\n\n//in case of multiple lights one has to forward every light pos/dir what is problematic because arrays can't be forwarded\n//this problem vanishes when using deferred shading as every light is calculated in a separate run\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec4f(0, 0, 0, 1);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], worldPosition, worldNormal, ambientColor, diffuseColor, specularColor);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, worldPos : vec4f, worldNormal : vec3f, ambientColor : vec3f, diffuseColor : vec3f, specularColor : vec3f) -> vec4f\n{\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let fragToLight = light.positionOrDirection.xyz - worldPos.xyz;\n    //DirectLight=0; PointLight=1\n    let lightDir = normalize(select(-light.positionOrDirection.xyz, fragToLight, light.mode.x == 1));\n    //use falloff\n    let lightSqrDist = select(1, dot(fragToLight, fragToLight), light.mode.x == 1 && light.mode.y == 1);\n    let intensity = max(dot(lightDir, unitNormal), 0);\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity / lightSqrDist;\n\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPos.xyz);\n    let H = normalize(lightDir + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x) / lightSqrDist;\n\n    let shadowPos = light.shadow_mat * worldPos;//potentially 0 if no shadowmap exists\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    //shadow map\n    var visibility = select(calcShadowVisibilitySmoothed(u32(light.mode.z), shadowMapSize, shadowMaps, shadowMapSampler, shadowPosUV), 1.0, i32(light.mode.z)==-1);\n\n    //Blinn-Phong seems to have some artefacts\n    //first of specular should only be rendered on surfaces that are hit by the light aka diffuse intensity>0\n    //by doing this you get some strange cutoffs\n    //that why an alternative ist to multiply the specular with the difusse intensity but this lead to specular highlights with weak intensity\n    //var finalColor = select(ambient + diffuse, ambient + diffuse + specular, intensity > 0);\n    var finalColor = ambient + (diffuse + specular * intensity) * visibility;\n\n    //respect other rendermodes\n    //should outs\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n    return vec4f(finalColor, 1);\n}\n\nfn calcShadowVisibilitySmoothed(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array, depthSampler : sampler_comparison, shadowPosUV : vec3f) -> f32\n{\n    const limit = 0.0025;\n    var visibility = 0.0;\n    let pixelRatio = 1.0 / textureSize;\n    for (var y = -1; y <= 1; y++)\n    {\n        for (var x = -1; x <= 1; x++)\n        {\n            let offset = vec2 < f32 > (vec2(x, y)) * pixelRatio;\n            visibility += textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy + offset, shadowMapIndex, shadowPosUV.z - limit);\n        }\n    }\n    visibility /= 9;\n    //depending on the bounding box the shadow map used some fragments might be out of the shadow maps scope\n    visibility = select(visibility, 1.0, shadowPosUV.x < 0 || shadowPosUV.x > 1 || shadowPosUV.y < 0 || shadowPosUV.y > 1);\n    return visibility;\n}\n\nfn calcShadowVisibility(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array, depthSampler : sampler_comparison, shadowPosUV : vec3f) -> f32\n{\n    const limit = 0.0005;\n    return textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy, shadowMapIndex, shadowPosUV.z - limit);\n}\n\n\n\n//no normal data/map entrypoint\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n//no normal data/map entrypoint\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n"},416:(t,e,r)=>{r.d(e,{K4:()=>E,R3:()=>et,_E:()=>gt,vh:()=>Lt});let n=1e-6,s=Float32Array;function i(t=0,e=0){const r=new s(2);return void 0!==t&&(r[0]=t,void 0!==e&&(r[1]=e)),r}const a=i;function o(t,e,r){return(r=r||new s(2))[0]=t[0]-e[0],r[1]=t[1]-e[1],r}const u=o;function l(t,e,r){return(r=r||new s(2))[0]=t[0]*e,r[1]=t[1]*e,r}const c=l;function h(t,e){return(e=e||new s(2))[0]=1/t[0],e[1]=1/t[1],e}const d=h;function p(t,e){return t[0]*e[0]+t[1]*e[1]}function f(t){const e=t[0],r=t[1];return Math.sqrt(e*e+r*r)}const m=f;function _(t){const e=t[0],r=t[1];return e*e+r*r}const g=_;function w(t,e){const r=t[0]-e[0],n=t[1]-e[1];return Math.sqrt(r*r+n*n)}const y=w;function x(t,e){const r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n}const v=x;function b(t,e){return(e=e||new s(2))[0]=t[0],e[1]=t[1],e}const k=b;function M(t,e,r){return(r=r||new s(2))[0]=t[0]*e[0],r[1]=t[1]*e[1],r}const S=M;function T(t,e,r){return(r=r||new s(2))[0]=t[0]/e[0],r[1]=t[1]/e[1],r}const A=T;var E=Object.freeze({__proto__:null,create:i,setDefaultType:function(t){const e=s;return s=t,e},fromValues:a,set:function(t,e,r){return(r=r||new s(2))[0]=t,r[1]=e,r},ceil:function(t,e){return(e=e||new s(2))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e},floor:function(t,e){return(e=e||new s(2))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e},round:function(t,e){return(e=e||new s(2))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e},clamp:function(t,e=0,r=1,n){return(n=n||new s(2))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n},add:function(t,e,r){return(r=r||new s(2))[0]=t[0]+e[0],r[1]=t[1]+e[1],r},addScaled:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[0],i=t[1],a=Math.sqrt(r*r+n*n)*Math.sqrt(s*s+i*i),o=a&&p(t,e)/a;return Math.acos(o)},subtract:o,sub:u,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},lerp:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n},lerpV:function(t,e,r,n){return(n=n||new s(2))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n},max:function(t,e,r){return(r=r||new s(2))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r},min:function(t,e,r){return(r=r||new s(2))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r},mulScalar:l,scale:c,divScalar:function(t,e,r){return(r=r||new s(2))[0]=t[0]/e,r[1]=t[1]/e,r},inverse:h,invert:d,cross:function(t,e,r){r=r||new s(3);const n=t[0]*e[1]-t[1]*e[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:p,length:f,len:m,lengthSq:_,lenSq:g,distance:w,dist:y,distanceSq:x,distSq:v,normalize:function(t,e){e=e||new s(2);const r=t[0],n=t[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(e[0]=r/i,e[1]=n/i):(e[0]=0,e[1]=0),e},negate:function(t,e){return(e=e||new s(2))[0]=-t[0],e[1]=-t[1],e},copy:b,clone:k,multiply:M,mul:S,divide:T,div:A,random:function(t=1,e){e=e||new s(2);const r=2*Math.random()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e},zero:function(t){return(t=t||new s(2))[0]=0,t[1]=0,t},transformMat4:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=n*e[0]+i*e[4]+e[12],r[1]=n*e[1]+i*e[5]+e[13],r},transformMat3:function(t,e,r){r=r||new s(2);const n=t[0],i=t[1];return r[0]=e[0]*n+e[4]*i+e[8],r[1]=e[1]*n+e[5]*i+e[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let P=Float32Array;function C(t,e,r){const n=new P(3);return void 0!==t&&(n[0]=t,void 0!==e&&(n[1]=e,void 0!==r&&(n[2]=r))),n}const B=C;function z(t,e,r){return(r=r||new P(3))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r}const U=z;function q(t,e,r){return(r=r||new P(3))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r}const R=q;function N(t,e){return(e=e||new P(3))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}const G=N;function I(t,e,r){r=r||new P(3);const n=t[2]*e[0]-t[0]*e[2],s=t[0]*e[1]-t[1]*e[0];return r[0]=t[1]*e[2]-t[2]*e[1],r[1]=n,r[2]=s,r}function V(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function F(t){const e=t[0],r=t[1],n=t[2];return Math.sqrt(e*e+r*r+n*n)}const L=F;function O(t){const e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}const D=O;function Y(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}const H=Y;function j(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}const X=j;function W(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=Math.sqrt(r*r+n*n+s*s);return i>1e-5?(e[0]=r/i,e[1]=n/i,e[2]=s/i):(e[0]=0,e[1]=0,e[2]=0),e}function $(t,e){return(e=e||new P(3))[0]=t[0],e[1]=t[1],e[2]=t[2],e}const K=$;function Q(t,e,r){return(r=r||new P(3))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r}const Z=Q;function J(t,e,r){return(r=r||new P(3))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r}const tt=J;var et=Object.freeze({__proto__:null,create:C,setDefaultType:function(t){const e=P;return P=t,e},fromValues:B,set:function(t,e,r,n){return(n=n||new P(3))[0]=t,n[1]=e,n[2]=r,n},ceil:function(t,e){return(e=e||new P(3))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e},floor:function(t,e){return(e=e||new P(3))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e},round:function(t,e){return(e=e||new P(3))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e},clamp:function(t,e=0,r=1,n){return(n=n||new P(3))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n},add:function(t,e,r){return(r=r||new P(3))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r},addScaled:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n},angle:function(t,e){const r=t[0],n=t[1],s=t[2],i=t[0],a=t[1],o=t[2],u=Math.sqrt(r*r+n*n+s*s)*Math.sqrt(i*i+a*a+o*o),l=u&&V(t,e)/u;return Math.acos(l)},subtract:z,sub:U,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},lerp:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n},lerpV:function(t,e,r,n){return(n=n||new P(3))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n},max:function(t,e,r){return(r=r||new P(3))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r},min:function(t,e,r){return(r=r||new P(3))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r},mulScalar:q,scale:R,divScalar:function(t,e,r){return(r=r||new P(3))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r},inverse:N,invert:G,cross:I,dot:V,length:F,len:L,lengthSq:O,lenSq:D,distance:Y,dist:H,distanceSq:j,distSq:X,normalize:W,negate:function(t,e){return(e=e||new P(3))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},copy:$,clone:K,multiply:Q,mul:Z,divide:J,div:tt,random:function(t=1,e){e=e||new P(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,s=Math.sqrt(1-n*n)*t;return e[0]=Math.cos(r)*s,e[1]=Math.sin(r)*s,e[2]=n*t,e},zero:function(t){return(t=t||new P(3))[0]=0,t[1]=0,t[2]=0,t},transformMat4:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2],a=e[3]*n+e[7]*s+e[11]*i+e[15]||1;return r[0]=(e[0]*n+e[4]*s+e[8]*i+e[12])/a,r[1]=(e[1]*n+e[5]*s+e[9]*i+e[13])/a,r[2]=(e[2]*n+e[6]*s+e[10]*i+e[14])/a,r},transformMat4Upper3x3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformMat3:function(t,e,r){r=r||new P(3);const n=t[0],s=t[1],i=t[2];return r[0]=n*e[0]+s*e[4]+i*e[8],r[1]=n*e[1]+s*e[5]+i*e[9],r[2]=n*e[2]+s*e[6]+i*e[10],r},transformQuat:function(t,e,r){r=r||new P(3);const n=e[0],s=e[1],i=e[2],a=2*e[3],o=t[0],u=t[1],l=t[2],c=s*l-i*u,h=i*o-n*l,d=n*u-s*o;return r[0]=o+c*a+2*(s*d-i*h),r[1]=u+h*a+2*(i*c-n*d),r[2]=l+d*a+2*(n*h-s*c),r},getTranslation:function(t,e){return(e=e||new P(3))[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||new P(3))[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},getScaling:function(t,e){e=e||new P(3);const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+l*l+c*c),e}});let rt=Float32Array;function nt(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}const st=nt;function it(t){return(t=t||new rt(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function at(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],l=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],m=t[13],_=t[14],g=t[15],w=d*g,y=_*p,x=u*g,v=_*l,b=u*p,k=d*l,M=s*g,S=_*i,T=s*p,A=d*i,E=s*l,P=u*i,C=c*m,B=f*h,z=a*m,U=f*o,q=a*h,R=c*o,N=r*m,G=f*n,I=r*h,V=c*n,F=r*o,L=a*n,O=w*o+v*h+b*m-(y*o+x*h+k*m),D=y*n+M*h+A*m-(w*n+S*h+T*m),Y=x*n+S*o+E*m-(v*n+M*o+P*m),H=k*n+T*o+P*h-(b*n+A*o+E*h),j=1/(r*O+a*D+c*Y+f*H);return e[0]=j*O,e[1]=j*D,e[2]=j*Y,e[3]=j*H,e[4]=j*(y*a+x*c+k*f-(w*a+v*c+b*f)),e[5]=j*(w*r+S*c+T*f-(y*r+M*c+A*f)),e[6]=j*(v*r+M*a+P*f-(x*r+S*a+E*f)),e[7]=j*(b*r+A*a+E*c-(k*r+T*a+P*c)),e[8]=j*(C*l+U*p+q*g-(B*l+z*p+R*g)),e[9]=j*(B*i+N*p+V*g-(C*i+G*p+I*g)),e[10]=j*(z*i+G*l+F*g-(U*i+N*l+L*g)),e[11]=j*(R*i+I*l+L*p-(q*i+V*l+F*p)),e[12]=j*(z*d+R*_+B*u-(q*_+C*u+U*d)),e[13]=j*(I*_+C*s+G*d-(N*d+V*_+B*s)),e[14]=j*(N*u+L*_+U*s-(F*_+z*s+G*u)),e[15]=j*(F*d+q*s+V*u-(I*u+L*d+R*s)),e}const ot=at;function ut(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],l=t[6],c=t[7],h=t[8],d=t[9],p=t[10],f=t[11],m=t[12],_=t[13],g=t[14],w=t[15],y=e[0],x=e[1],v=e[2],b=e[3],k=e[4],M=e[5],S=e[6],T=e[7],A=e[8],E=e[9],P=e[10],C=e[11],B=e[12],z=e[13],U=e[14],q=e[15];return r[0]=n*y+o*x+h*v+m*b,r[1]=s*y+u*x+d*v+_*b,r[2]=i*y+l*x+p*v+g*b,r[3]=a*y+c*x+f*v+w*b,r[4]=n*k+o*M+h*S+m*T,r[5]=s*k+u*M+d*S+_*T,r[6]=i*k+l*M+p*S+g*T,r[7]=a*k+c*M+f*S+w*T,r[8]=n*A+o*E+h*P+m*C,r[9]=s*A+u*E+d*P+_*C,r[10]=i*A+l*E+p*P+g*C,r[11]=a*A+c*E+f*P+w*C,r[12]=n*B+o*z+h*U+m*q,r[13]=s*B+u*z+d*U+_*q,r[14]=i*B+l*z+p*U+g*q,r[15]=a*B+c*z+f*U+w*q,r}const lt=ut;let ct,ht,dt;function pt(t,e,r){r=r||new rt(16);let n=t[0],s=t[1],i=t[2];const a=Math.sqrt(n*n+s*s+i*i);n/=a,s/=a,i/=a;const o=n*n,u=s*s,l=i*i,c=Math.cos(e),h=Math.sin(e),d=1-c;return r[0]=o+(1-o)*c,r[1]=n*s*d+i*h,r[2]=n*i*d-s*h,r[3]=0,r[4]=n*s*d-i*h,r[5]=u+(1-u)*c,r[6]=s*i*d+n*h,r[7]=0,r[8]=n*i*d+s*h,r[9]=s*i*d-n*h,r[10]=l+(1-l)*c,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const ft=pt;function mt(t,e,r,n){n=n||new rt(16);let s=e[0],i=e[1],a=e[2];const o=Math.sqrt(s*s+i*i+a*a);s/=o,i/=o,a/=o;const u=s*s,l=i*i,c=a*a,h=Math.cos(r),d=Math.sin(r),p=1-h,f=u+(1-u)*h,m=s*i*p+a*d,_=s*a*p-i*d,g=s*i*p-a*d,w=l+(1-l)*h,y=i*a*p+s*d,x=s*a*p+i*d,v=i*a*p-s*d,b=c+(1-c)*h,k=t[0],M=t[1],S=t[2],T=t[3],A=t[4],E=t[5],P=t[6],C=t[7],B=t[8],z=t[9],U=t[10],q=t[11];return n[0]=f*k+m*A+_*B,n[1]=f*M+m*E+_*z,n[2]=f*S+m*P+_*U,n[3]=f*T+m*C+_*q,n[4]=g*k+w*A+y*B,n[5]=g*M+w*E+y*z,n[6]=g*S+w*P+y*U,n[7]=g*T+w*C+y*q,n[8]=x*k+v*A+b*B,n[9]=x*M+v*E+b*z,n[10]=x*S+v*P+b*U,n[11]=x*T+v*C+b*q,t!==n&&(n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n}const _t=mt;var gt=Object.freeze({__proto__:null,setDefaultType:function(t){const e=rt;return rt=t,e},create:function(t,e,r,n,s,i,a,o,u,l,c,h,d,p,f,m){const _=new rt(16);return void 0!==t&&(_[0]=t,void 0!==e&&(_[1]=e,void 0!==r&&(_[2]=r,void 0!==n&&(_[3]=n,void 0!==s&&(_[4]=s,void 0!==i&&(_[5]=i,void 0!==a&&(_[6]=a,void 0!==o&&(_[7]=o,void 0!==u&&(_[8]=u,void 0!==l&&(_[9]=l,void 0!==c&&(_[10]=c,void 0!==h&&(_[11]=h,void 0!==d&&(_[12]=d,void 0!==p&&(_[13]=p,void 0!==f&&(_[14]=f,void 0!==m&&(_[15]=m)))))))))))))))),_},set:function(t,e,r,n,s,i,a,o,u,l,c,h,d,p,f,m,_){return(_=_||new rt(16))[0]=t,_[1]=e,_[2]=r,_[3]=n,_[4]=s,_[5]=i,_[6]=a,_[7]=o,_[8]=u,_[9]=l,_[10]=c,_[11]=h,_[12]=d,_[13]=p,_[14]=f,_[15]=m,_},fromMat3:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=0,e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=0,e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},fromQuat:function(t,e){e=e||new rt(16);const r=t[0],n=t[1],s=t[2],i=t[3],a=r+r,o=n+n,u=s+s,l=r*a,c=n*a,h=n*o,d=s*a,p=s*o,f=s*u,m=i*a,_=i*o,g=i*u;return e[0]=1-h-f,e[1]=c+g,e[2]=d-_,e[3]=0,e[4]=c-g,e[5]=1-l-f,e[6]=p+m,e[7]=0,e[8]=d+_,e[9]=p-m,e[10]=1-l-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},negate:function(t,e){return(e=e||new rt(16))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=-t[7],e[8]=-t[8],e[9]=-t[9],e[10]=-t[10],e[11]=-t[11],e[12]=-t[12],e[13]=-t[13],e[14]=-t[14],e[15]=-t[15],e},copy:nt,clone:st,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n&&Math.abs(t[4]-e[4])<n&&Math.abs(t[5]-e[5])<n&&Math.abs(t[6]-e[6])<n&&Math.abs(t[7]-e[7])<n&&Math.abs(t[8]-e[8])<n&&Math.abs(t[9]-e[9])<n&&Math.abs(t[10]-e[10])<n&&Math.abs(t[11]-e[11])<n&&Math.abs(t[12]-e[12])<n&&Math.abs(t[13]-e[13])<n&&Math.abs(t[14]-e[14])<n&&Math.abs(t[15]-e[15])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},identity:it,transpose:function(t,e){if((e=e||new rt(16))===t){let r;return r=t[1],t[1]=t[4],t[4]=r,r=t[2],t[2]=t[8],t[8]=r,r=t[3],t[3]=t[12],t[12]=r,r=t[6],t[6]=t[9],t[9]=r,r=t[7],t[7]=t[13],t[13]=r,r=t[11],t[11]=t[14],t[14]=r,e}const r=t[0],n=t[1],s=t[2],i=t[3],a=t[4],o=t[5],u=t[6],l=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],m=t[13],_=t[14],g=t[15];return e[0]=r,e[1]=a,e[2]=c,e[3]=f,e[4]=n,e[5]=o,e[6]=h,e[7]=m,e[8]=s,e[9]=u,e[10]=d,e[11]=_,e[12]=i,e[13]=l,e[14]=p,e[15]=g,e},inverse:at,determinant:function(t){const e=t[0],r=t[1],n=t[2],s=t[3],i=t[4],a=t[5],o=t[6],u=t[7],l=t[8],c=t[9],h=t[10],d=t[11],p=t[12],f=t[13],m=t[14],_=t[15],g=h*_,w=m*d,y=o*_,x=m*u,v=o*d,b=h*u,k=n*_,M=m*s,S=n*d,T=h*s,A=n*u,E=o*s;return e*(g*a+x*c+v*f-(w*a+y*c+b*f))+i*(w*r+k*c+T*f-(g*r+M*c+S*f))+l*(y*r+M*a+A*f-(x*r+k*a+E*f))+p*(b*r+S*a+E*c-(v*r+T*a+A*c))},invert:ot,multiply:ut,mul:lt,setTranslation:function(t,e,r){return t!==(r=r||it())&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11]),r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},getTranslation:function(t,e){return(e=e||C())[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const n=4*e;return(r=r||C())[0]=t[n+0],r[1]=t[n+1],r[2]=t[n+2],r},setAxis:function(t,e,r,n){n!==t&&(n=nt(t,n));const s=4*r;return n[s+0]=e[0],n[s+1]=e[1],n[s+2]=e[2],n},getScaling:function(t,e){e=e||C();const r=t[0],n=t[1],s=t[2],i=t[4],a=t[5],o=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.sqrt(r*r+n*n+s*s),e[1]=Math.sqrt(i*i+a*a+o*o),e[2]=Math.sqrt(u*u+l*l+c*c),e},perspective:function(t,e,r,n,s){s=s||new rt(16);const i=Math.tan(.5*Math.PI-.5*t);if(s[0]=i/e,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,n===1/0)s[10]=-1,s[14]=-r;else{const t=1/(r-n);s[10]=n*t,s[14]=n*r*t}return s},ortho:function(t,e,r,n,s,i,a){return(a=a||new rt(16))[0]=2/(e-t),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(n-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(s-i),a[11]=0,a[12]=(e+t)/(t-e),a[13]=(n+r)/(r-n),a[14]=s/(s-i),a[15]=1,a},frustum:function(t,e,r,n,s,i,a){const o=e-t,u=n-r,l=s-i;return(a=a||new rt(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(t+e)/o,a[9]=(n+r)/u,a[10]=i/l,a[11]=-1,a[12]=0,a[13]=0,a[14]=s*i/l,a[15]=0,a},aim:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),W(z(e,t,dt),dt),W(I(r,dt,ct),ct),W(I(dt,ct,ht),ht),n[0]=ct[0],n[1]=ct[1],n[2]=ct[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},cameraAim:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),W(z(t,e,dt),dt),W(I(r,dt,ct),ct),W(I(dt,ct,ht),ht),n[0]=ct[0],n[1]=ct[1],n[2]=ct[2],n[3]=0,n[4]=ht[0],n[5]=ht[1],n[6]=ht[2],n[7]=0,n[8]=dt[0],n[9]=dt[1],n[10]=dt[2],n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},lookAt:function(t,e,r,n){return n=n||new rt(16),ct=ct||C(),ht=ht||C(),dt=dt||C(),W(z(t,e,dt),dt),W(I(r,dt,ct),ct),W(I(dt,ct,ht),ht),n[0]=ct[0],n[1]=ht[0],n[2]=dt[0],n[3]=0,n[4]=ct[1],n[5]=ht[1],n[6]=dt[1],n[7]=0,n[8]=ct[2],n[9]=ht[2],n[10]=dt[2],n[11]=0,n[12]=-(ct[0]*t[0]+ct[1]*t[1]+ct[2]*t[2]),n[13]=-(ht[0]*t[0]+ht[1]*t[1]+ht[2]*t[2]),n[14]=-(dt[0]*t[0]+dt[1]*t[1]+dt[2]*t[2]),n[15]=1,n},translation:function(t,e){return(e=e||new rt(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},translate:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2],a=t[0],o=t[1],u=t[2],l=t[3],c=t[4],h=t[5],d=t[6],p=t[7],f=t[8],m=t[9],_=t[10],g=t[11],w=t[12],y=t[13],x=t[14],v=t[15];return t!==r&&(r[0]=a,r[1]=o,r[2]=u,r[3]=l,r[4]=c,r[5]=h,r[6]=d,r[7]=p,r[8]=f,r[9]=m,r[10]=_,r[11]=g),r[12]=a*n+c*s+f*i+w,r[13]=o*n+h*s+m*i+y,r[14]=u*n+d*s+_*i+x,r[15]=l*n+p*s+g*i+v,r},rotationX:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateX:function(t,e,r){r=r||new rt(16);const n=t[4],s=t[5],i=t[6],a=t[7],o=t[8],u=t[9],l=t[10],c=t[11],h=Math.cos(e),d=Math.sin(e);return r[4]=h*n+d*o,r[5]=h*s+d*u,r[6]=h*i+d*l,r[7]=h*a+d*c,r[8]=h*o-d*n,r[9]=h*u-d*s,r[10]=h*l-d*i,r[11]=h*c-d*a,t!==r&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationY:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateY:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[8],u=t[9],l=t[10],c=t[11],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n-d*o,r[1]=h*s-d*u,r[2]=h*i-d*l,r[3]=h*a-d*c,r[8]=h*o+d*n,r[9]=h*u+d*s,r[10]=h*l+d*i,r[11]=h*c+d*a,t!==r&&(r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationZ:function(t,e){e=e||new rt(16);const r=Math.cos(t),n=Math.sin(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateZ:function(t,e,r){r=r||new rt(16);const n=t[0],s=t[1],i=t[2],a=t[3],o=t[4],u=t[5],l=t[6],c=t[7],h=Math.cos(e),d=Math.sin(e);return r[0]=h*n+d*o,r[1]=h*s+d*u,r[2]=h*i+d*l,r[3]=h*a+d*c,r[4]=h*o-d*n,r[5]=h*u-d*s,r[6]=h*l-d*i,r[7]=h*c-d*a,t!==r&&(r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},axisRotation:pt,rotation:ft,axisRotate:mt,rotate:_t,scaling:function(t,e){return(e=e||new rt(16))[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},scale:function(t,e,r){r=r||new rt(16);const n=e[0],s=e[1],i=e[2];return r[0]=n*t[0],r[1]=n*t[1],r[2]=n*t[2],r[3]=n*t[3],r[4]=s*t[4],r[5]=s*t[5],r[6]=s*t[6],r[7]=s*t[7],r[8]=i*t[8],r[9]=i*t[9],r[10]=i*t[10],r[11]=i*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},uniformScaling:function(t,e){return(e=e||new rt(16))[0]=t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},uniformScale:function(t,e,r){return(r=r||new rt(16))[0]=e*t[0],r[1]=e*t[1],r[2]=e*t[2],r[3]=e*t[3],r[4]=e*t[4],r[5]=e*t[5],r[6]=e*t[6],r[7]=e*t[7],r[8]=e*t[8],r[9]=e*t[9],r[10]=e*t[10],r[11]=e*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r}});Float32Array;let wt=Float32Array;function yt(t,e,r,n){const s=new wt(4);return void 0!==t&&(s[0]=t,void 0!==e&&(s[1]=e,void 0!==r&&(s[2]=r,void 0!==n&&(s[3]=n)))),s}const xt=yt;function vt(t,e,r){return(r=r||new wt(4))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r[3]=t[3]-e[3],r}const bt=vt;function kt(t,e,r){return(r=r||new wt(4))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r[3]=t[3]*e,r}const Mt=kt;function St(t,e){return(e=e||new wt(4))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}const Tt=St;function At(t){const e=t[0],r=t[1],n=t[2],s=t[3];return Math.sqrt(e*e+r*r+n*n+s*s)}const Et=At;function Pt(t){const e=t[0],r=t[1],n=t[2],s=t[3];return e*e+r*r+n*n+s*s}const Ct=Pt;function Bt(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return Math.sqrt(r*r+n*n+s*s+i*i)}const zt=Bt;function Ut(t,e){const r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2],i=t[3]-e[3];return r*r+n*n+s*s+i*i}const qt=Ut;function Rt(t,e){return(e=e||new wt(4))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}const Nt=Rt;function Gt(t,e,r){return(r=r||new wt(4))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r[3]=t[3]*e[3],r}const It=Gt;function Vt(t,e,r){return(r=r||new wt(4))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r[3]=t[3]/e[3],r}const Ft=Vt;var Lt=Object.freeze({__proto__:null,create:yt,setDefaultType:function(t){const e=wt;return wt=t,e},fromValues:xt,set:function(t,e,r,n,s){return(s=s||new wt(4))[0]=t,s[1]=e,s[2]=r,s[3]=n,s},ceil:function(t,e){return(e=e||new wt(4))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e},floor:function(t,e){return(e=e||new wt(4))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e},round:function(t,e){return(e=e||new wt(4))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e},clamp:function(t,e=0,r=1,n){return(n=n||new wt(4))[0]=Math.min(r,Math.max(e,t[0])),n[1]=Math.min(r,Math.max(e,t[1])),n[2]=Math.min(r,Math.max(e,t[2])),n[3]=Math.min(r,Math.max(e,t[3])),n},add:function(t,e,r){return(r=r||new wt(4))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r[3]=t[3]+e[3],r},addScaled:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n},subtract:vt,sub:bt,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},lerp:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+r*(e[0]-t[0]),n[1]=t[1]+r*(e[1]-t[1]),n[2]=t[2]+r*(e[2]-t[2]),n[3]=t[3]+r*(e[3]-t[3]),n},lerpV:function(t,e,r,n){return(n=n||new wt(4))[0]=t[0]+r[0]*(e[0]-t[0]),n[1]=t[1]+r[1]*(e[1]-t[1]),n[2]=t[2]+r[2]*(e[2]-t[2]),n[3]=t[3]+r[3]*(e[3]-t[3]),n},max:function(t,e,r){return(r=r||new wt(4))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r[3]=Math.max(t[3],e[3]),r},min:function(t,e,r){return(r=r||new wt(4))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r[3]=Math.min(t[3],e[3]),r},mulScalar:kt,scale:Mt,divScalar:function(t,e,r){return(r=r||new wt(4))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r[3]=t[3]/e,r},inverse:St,invert:Tt,dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},length:At,len:Et,lengthSq:Pt,lenSq:Ct,distance:Bt,dist:zt,distanceSq:Ut,distSq:qt,normalize:function(t,e){e=e||new wt(4);const r=t[0],n=t[1],s=t[2],i=t[3],a=Math.sqrt(r*r+n*n+s*s+i*i);return a>1e-5?(e[0]=r/a,e[1]=n/a,e[2]=s/a,e[3]=i/a):(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e},negate:function(t,e){return(e=e||new wt(4))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},copy:Rt,clone:Nt,multiply:Gt,mul:It,divide:Vt,div:Ft,zero:function(t){return(t=t||new wt(4))[0]=0,t[1]=0,t[2]=0,t[3]=0,t},transformMat4:function(t,e,r){r=r||new wt(4);const n=t[0],s=t[1],i=t[2],a=t[3];return r[0]=e[0]*n+e[4]*s+e[8]*i+e[12]*a,r[1]=e[1]*n+e[5]*s+e[9]*i+e[13]*a,r[2]=e[2]*n+e[6]*s+e[10]*i+e[14]*a,r[3]=e[3]*n+e[7]*s+e[11]*i+e[15]*a,r}})}},i={};function a(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return s[t](r,r.exports,a),r.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(s,i,a)=>{var o;a&&((o=[]).d=-1);var u,l,c,h=new Set,d=s.exports,p=new Promise(((t,e)=>{c=e,l=t}));p[e]=d,p[t]=t=>(o&&t(o),h.forEach(t),p.catch((t=>{}))),s.exports=p,i((s=>{var i;u=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[t])return s;if(s.then){var i=[];i.d=0,s.then((t=>{a[e]=t,n(i)}),(t=>{a[r]=t,n(i)}));var a={};return a[t]=t=>t(i),a}}var o={};return o[t]=t=>{},o[e]=s,o})))(s);var a=()=>u.map((t=>{if(t[r])throw t[r];return t[e]})),l=new Promise((e=>{(i=()=>e(a)).r=0;var r=t=>t!==o&&!h.has(t)&&(h.add(t),t&&!t.d&&(i.r++,t.push(i)));u.map((e=>e[t](r)))}));return i.r?l:a()}),(t=>(t?c(p[r]=t):l(d),n(o)))),o&&o.d<0&&(o.d=0)},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,