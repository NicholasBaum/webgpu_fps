(()=>{"use strict";var e,t,n,r,i={218:(e,t,n)=>{n.d(t,{t:()=>s});var r=n(416);class i{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(e){this._aspect=e,this._projectionMatrix=r._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=r._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=r._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(e){r._E.copy(e,this.matrix_)}get view(){return this.view_}set view(e){r._E.copy(e,this.view_)}get right(){return this.right_}set right(e){r.R3.copy(e,this.right_)}get up(){return this.up_}set up(e){r.R3.copy(e,this.up_)}get back(){return this.back_}set back(e){r.R3.copy(e,this.back_)}get position(){return this.position_}set position(e){r.R3.copy(e,this.position_)}}class s extends i{pitch=0;yaw=0;velocity_=r.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(e){r.R3.copy(e,this.velocity_)}constructor(e){if(super(),e&&(e.position||e.target||e.movementSpeed)){const t=e.position??r.R3.create(0,0,-5),n=e.target??r.R3.create(0,0,0);this.back=r.R3.normalize(r.R3.subtract(t,n)),this.recalculateAngles(this.back),this.position=t,this.movementSpeed=e.movementSpeed??10,this.aspect=e.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(e){super.matrix=e,this.recalculateAngles(this.back)}update(e,t){const n=(e,t)=>(e?1:0)-(t?1:0);var i,s;this.yaw-=t.analog.x*e*this.rotationSpeed,this.pitch-=t.analog.y*e*this.rotationSpeed,this.yaw=(i=this.yaw,s=2*Math.PI,i-Math.floor(Math.abs(i)/s)*s*Math.sign(i)),this.pitch=function(e,t,n){return Math.min(Math.max(e,t),n)}(this.pitch,-Math.PI/2,Math.PI/2);const a=r.R3.copy(this.position);super.matrix=r._E.rotateX(r._E.rotationY(this.yaw),this.pitch);const o=t.digital,u=n(o.right,o.left),l=n(o.up,o.down),c=r.R3.create(),h=n(o.backward,o.forward);var d,p,f;r.R3.addScaled(c,this.right,u,c),r.R3.addScaled(c,this.up,l,c),r.R3.addScaled(c,this.back,h,c),r.R3.normalize(c,c),r.R3.mulScalar(c,this.movementSpeed,c),this.velocity=(d=c,p=this.velocity,f=Math.pow(1-this.frictionCoefficient,e),r.R3.addScaled(d,r.R3.sub(p,d),f)),this.position=r.R3.addScaled(a,this.velocity,e),this.view=r._E.invert(this.matrix)}recalculateAngles(e){this.yaw=Math.atan2(e[0],e[2]),this.pitch=-Math.asin(e[1])}}},10:(e,t,n)=>{n.d(t,{D:()=>J});var r=n(416);class i{camera;lights;environmentMap;viewProjectionMatrix=r._E.identity();settings;constructor(e,t,n){this.camera=e,this.lights=t,this.environmentMap=n,this.settings=new Float32Array(n?[1,0,0,0]:[0,0,0,0])}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}writeToGpu(e){let t=this.lights[0]?.byteLength??0;const n=this.settings.byteLength;if(!this._gpuBuffer){const r=80+n+this.lights.length*t;this._gpuBuffer=e.createBuffer({label:"scene uniforms buffer",size:Math.max(r,256),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})}r._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),e.queue.writeBuffer(this._gpuBuffer,0,this.viewProjectionMatrix),e.queue.writeBuffer(this._gpuBuffer,64,this.camera.position),e.queue.writeBuffer(this._gpuBuffer,80,this.settings);for(let[r,i]of this.lights.entries())e.queue.writeBuffer(this._gpuBuffer,80+n+r*t,i.getBytes())}}class s{instances;constructor(e){this.instances=e}get length(){return this.instances.length}get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}_gpuBuffer;writeToGpu(e){this._gpuBuffer||(this._gpuBuffer=e.createBuffer({label:"models uniforms buffer",size:64*this.instances.length*2,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}));for(let t=0;t<this.instances.length;t++){let n=this.instances[t].transform,i=r._E.transpose(r._E.invert(this.instances[t].transform));e.queue.writeBuffer(this._gpuBuffer,128*t,n),e.queue.writeBuffer(this._gpuBuffer,128*t+64,i)}}}var a=n(284),o=n(322);function u(e,t,n,r,i,s,a=[]){let u={label:"default binding group",layout:t.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:n.gpuBuffer}},{binding:1,resource:{buffer:r.gpuBuffer}},{binding:2,resource:{buffer:i.gpuBuffer}},{binding:3,resource:s},{binding:4,resource:i instanceof o.p?i.ambientOcclussionTexture.createView():i.ambientTexture.createView()},{binding:5,resource:i instanceof o.p?i.albedoTexture.createView():i.diffuseTexture.createView()},{binding:6,resource:i instanceof o.p?i.metalTexture.createView():i.specularTexture.createView()}]};return a&&u.entries.push(...a),e.createBindGroup(u)}function l(e,t,n,r){n=n??e.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});let i={label:"shadow map binding group",layout:t.getBindGroupLayout(1),entries:[{binding:0,resource:n.createView({dimension:"2d-array"})},{binding:1,resource:r}]};return e.createBindGroup(i)}async function c(e,t,n,r,i,s,a=[],o="vertexMain",u="fragmentMain",l){let c=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}}];c.push(...a);let h=[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"2d-array",multisampled:!1,sampleType:"depth"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}}];const d=l??[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}}];let p=e.createBindGroupLayout({entries:c}),f=e.createBindGroupLayout({entries:h}),m=e.createBindGroupLayout({entries:d}),g={label:"mesh pipeline",layout:e.createPipelineLayout({bindGroupLayouts:[p,f,m]}),vertex:{module:t,entryPoint:o,buffers:n},fragment:{module:t,entryPoint:u,targets:[{format:r,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}],constants:{shadowMapSize:s??1024}},primitive:{topology:"triangle-list",cullMode:"back"},multisample:{count:i},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await e.createRenderPipelineAsync(g)}function h(e){return e.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16})}var d=n(149);const p="struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    settings : vec4f,\n    lights : array<Light>,\n}\n\noverride shadowMapSize : f32 = 1024.0;\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n@group(0) @binding(7) var normalTexture : texture_2d<f32>;\n\n@group(1) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(1) @binding(1) var shadowMapSampler : sampler_comparison;\n\n@group(2) @binding(0) var environmentMap : texture_cube < f32>;\n@group(2) @binding(1) var environmentMapSampler : sampler;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n//remark 1\n//wgsl doesn't support forwarding matrices or arrays to the FS as function argument\n//for matrices this can be solved by forwarding the columns separatly\n//for arrays i actually don't have any solution\n//a fixed amount of array entries could be forwarded as separate arguments\n\n//remark 2\n//literature says the vertex shader isn't called as often as the fragment shader\n//reasoning is probably that the VS runs for every vertex and 3 vertices usually belong to more than 2 fragments/pixels\n//but i'm not sure if this is actually still true when using zbuffer or even when just using a high poly model\n\n//so it might be advantageous to push calculations into the VS\n//the tbn can be built in the VS and inverted by only taking the transpose because it's an orthonormal matrix\n//now instead of calculating everything in world space we can take the light position/direction and the camera position\n//into tangent space in the VS! and foward them to the FS\n\n//in case of multiple lights one has to forward every light pos/dir what is problematic because arrays can't be forwarded\n//this problem vanishes when using deferred shading as every light is calculated in a separate run\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec4f(0, 0, 0, 1);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], worldPosition, worldNormal, ambientColor, diffuseColor, specularColor);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, worldPos : vec4f, worldNormal : vec3f, ambientColor : vec3f, diffuseColor : vec3f, specularColor : vec3f) -> vec4f\n{\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let fragToLight = light.position.xyz - worldPos.xyz;\n    //set falloff to 1 or to frag to light distance squared\n    let lightSqrDist = select(1, dot(fragToLight, fragToLight), light.mode.y == 1);\n    //DirectLight=0; PointLight=1; TargetLight=2\n    let lightDirInverse = normalize(select(fragToLight, -light.direction.xyz, light.mode.x == 0));\n\n    //calc intensity, 0 if not facing light\n    var intensity = max(dot(lightDirInverse, unitNormal), 0);\n    //target light\n    if(light.mode.x==2 && intensity!=0)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        //const sharpness = 10;\n        //intensity = select(0, 1 - pow((1 - spot) / (1 - cutoff), sharpness), spot > cutoff);\n        intensity = select(0.0, 1.0, spot > cutoff);\n    }\n\n    //calc diffuse\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity / lightSqrDist;\n\n    //calc specular\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPos.xyz);\n    let H = normalize(lightDirInverse + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x) / lightSqrDist;\n\n    //shadow map\n\n    const constOffset = 0.5;\n    //let slopeFactor = 1.1 - clamp(dot(lightDirInverse, unitNormal), 0,1);\n    //correct with an z adjusted texelsize value\n    //let tmp = light.shadow_mat * worldPos;\n    //let texelSize = (2 / shadowMapSize) * tan(coneAngle/90*3.14) * abs(tmp.z/tmp.w) * 100000.0;\n    let offset = constOffset;\n    var shadowPos = light.shadow_mat * (offset * vec4f(unitNormal, 0) + worldPos);\n    //var shadowPos = light.shadow_mat * worldPos;//potentially 0 if no shadowmap exists\n    //perspective transformations alter the w coordinate and it has to be scaled back\n    //the vertex shader actually does this automatically on its output position afterwards\n    shadowPos = shadowPos / shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    let visibility = select(calcShadowVisibility(u32(light.mode.z), shadowMapSize, shadowMaps, shadowMapSampler, shadowPosUV, 0.0), 1.0, i32(light.mode.z)==-1);\n\n    //Problem: specular higlights (artefacts) on faces that aren't even hit by light\n    //Solution 1: only render specular when intensity>0 -> problem: specular highlight is cutoff\n    //Solution 2: multiply specular with difuse intensity -> problem: weak specular highlights\n    var finalColor = ambient + (diffuse + specular * intensity) * visibility;\n\n    //environment reflection\n    let reflV = reflect(-viewDir, unitNormal.xyz);\n    let env = textureSample(environmentMap, environmentMapSampler, reflV);\n    let reflectivness = clamp(material.shininess.y, 0, 1);\n\n    finalColor = reflectivness * env.xyz + (1 - reflectivness) * finalColor;\n\n\n    //respect other rendermodes\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, unitNormal.xyz * 0.5 + 0.5, material.mode.x == 2);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcShadowVisibilitySmoothed(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    var visibility = 0.0;\n    let pixelRatio = 1.0 / textureSize;\n    for (var y = -1; y <= 1; y++)\n    {\n        for (var x = -1; x <= 1; x++)\n        {\n            let offset = vec2 < f32 > (vec2(x, y)) * pixelRatio;\n            visibility += textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy + offset, shadowMapIndex, shadowPosUV.z - bias);\n        }\n    }\n    visibility /= 9;\n    //depending on the bounding box the shadow map used some fragments might be out of the shadow maps scope\n    visibility = select(visibility, 1.0, shadowPosUV.x < 0 || shadowPosUV.x > 1 || shadowPosUV.y < 0 || shadowPosUV.y > 1);\n    return visibility;\n}\n\nfn calcShadowVisibility(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    return textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy, shadowMapIndex, shadowPosUV.z - bias);\n}\n\n\n\n//no normal data/map entrypoint\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n//no normal data/map entrypoint\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n";function f(e,t){const n=t?[{binding:7,resource:e.material.normalTexture.createView()}]:[];return[u(e.device,e.pipeline,e.instancesBuffer,e.uniforms,e.material,e.sampler,n),l(e.device,e.pipeline,e.shadowMap,e.shadowMapSampler),function(e,t,n,r){n=n??e.createTexture({size:[1,1,6],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"rgba8unorm"});let i={label:"environment map binding group",layout:t.getBindGroupLayout(2),entries:[{binding:0,resource:n.createView({dimension:"cube"})},{binding:1,resource:r}]};return e.createBindGroup(i)}(e.device,e.pipeline,e.environmentMap?.cubeMap.gpuTexture,e.environmentMapSampler)]}var m=n(203);const g="fn ACESFilm(x : vec3f) -> vec3f{\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), vec3f(0), vec3f(1));\n}\n\nfn Reinhard(x : vec3f) -> vec3f{\n    return x / (x + vec3(1.0));\n}\n\nfn gammaEncode(x : vec3f) -> vec3f{\n    return pow(x, vec3(1.0 / 2.2));\n}\n",_="//#include ./tone_mapping.wgsl\nstruct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Material\n{\n    mode : vec4f,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    settings : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientOcclusionTexture : texture_2d<f32>;\n@group(0) @binding(5) var albedoTexture : texture_2d<f32>;\n@group(0) @binding(6) var metalTexture : texture_2d<f32>;\n@group(0) @binding(7) var roughnessTexture : texture_2d<f32>;\n@group(0) @binding(8) var normalTexture : texture_2d<f32>;\n\noverride shadowMapSize : f32 = 1024.0;\n\n@group(1) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(1) @binding(1) var shadowMapSampler : sampler_comparison;\n\n@group(2) @binding(0) var environmentMapSampler : sampler;\n@group(2) @binding(1) var irradianceMap : texture_cube < f32>;\n@group(2) @binding(2) var specularMap : texture_cube < f32>;\n@group(2) @binding(3) var brdfMap : texture_2d<f32>;\n\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let albedo = textureSample(albedoTexture, textureSampler, uv).xyz;\n    let metal = textureSample(metalTexture, textureSampler, uv).r;\n    let roughness = textureSample(roughnessTexture, textureSampler, uv).r;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec3f(0);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(worldPosition.xyz, worldNormal, uni.lights[i], albedo, metal, roughness);\n    }\n\n    if(uni.settings.x == 1)\n    {\n        let ao = textureSample(ambientOcclusionTexture, textureSampler, uv).r;\n        finalColor += calcEnvironmentLight(worldPosition, worldNormal, ao, albedo, metal, roughness);\n    }\n\n    //tone mapping\n    finalColor = ACESFilm(finalColor);\n\n    finalColor = gammaEncode(finalColor);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcEnvironmentLight(worldPosition : vec4f, worldNormal : vec3f, ao : f32, albedo : vec3f, metal : f32, roughness : f32) -> vec3f\n{\n    //can be optimize as its calculated per light again i think\n    let N = normalize(worldNormal);\n    let V = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    var F0 = vec3(0.04);\n    F0 = (1.0 - metal) * F0 + metal * albedo;\n    let F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n    let kS = F;\n    var kD = 1.0 - kS;\n    kD *= 1.0 - metal;\n\n    //not sure why the reflectance direction is N here\n    //but i think because the irradiance map is built on the normal direction because the viewing direction isnt known when building it\n    let irradiance = textureSample(irradianceMap, environmentMapSampler, N).xyz;\n    let diffuse = irradiance * albedo;\n\n    //specular\n    let maxRoughnessMipLevel = f32(textureNumLevels(specularMap)) - 1;\n    let R = reflect(-V, N);\n    let preCalcedSpecular = textureSampleLevel(specularMap, environmentMapSampler, R, roughness * maxRoughnessMipLevel).xyz;\n    let preCalcedBRDF = textureSample(brdfMap, environmentMapSampler, vec2(max(dot(N, V), 0.0), roughness)).xy;\n    let specular = preCalcedSpecular * (F * preCalcedBRDF.x + preCalcedBRDF.y);\n\n    //precalculated environment map light\n    let ambient = (kD * diffuse + specular) * ao;\n    return ambient;\n}\n\nfn calcLight(worldPos : vec3f, normal : vec3f, light : Light, albedo : vec3f, metal : f32, roughness : f32) -> vec3f\n{\n    let lightPos = light.position.xyz;\n    let lightColor = light.diffuseColor.xyz;\n    let fragToLight = select(lightPos - worldPos, -light.direction.xyz, light.mode.x==0);\n\n    //mode.x: DirectLight=0; PointLight=1; TargetLight=2\n    //mode.y: use falloff\n    var falloffFactor = select(1.0, 1.0 / dot(fragToLight, fragToLight), light.mode.x!=0 && light.mode.y == 1);\n    //spot light\n    if(light.mode.x==2)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        falloffFactor = select(0.0, 1.0, spot > cutoff);\n    }\n    let radiance : vec3f = lightColor * falloffFactor;\n\n    //cook-torrance brdf\n    var F0 = vec3(0.04);\n    F0 = (1.0 - metal) * F0 + metal * albedo;\n\n    let L = normalize(fragToLight);\n    let N = normalize(normal);\n    let V = normalize(uni.cameraPosition.xyz - worldPos);\n    let H = normalize(V + L);\n    let NDF = DistributionGGX(N, H, roughness);\n    let G = GeometrySmith(N, V, L, roughness);\n    let F : vec3f = fresnelSchlick(max(dot(H, V), 0.0), F0);\n\n    //specular\n    let numerator : vec3f = NDF * G * F;\n    let denominator : f32 = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;\n    let specular : vec3f = numerator / denominator;\n\n    //diffuse\n    let kS = F;\n    var kD : vec3f = vec3(1.0) - kS;\n    kD *= 1.0 - metal;\n    let diffuse = kD * albedo / PI;\n\n    //shadow factor\n    let visibility = getShadowFactor(light, worldPos, N);\n\n    //add to outgoing radiance Lo\n    let NdotL = max(dot(N, L), 0.0);\n    return (diffuse + specular) * radiance * NdotL * visibility;\n}\n\nfn getShadowFactor(light : Light, worldPos : vec3f, unitNormal : vec3f) -> f32\n{\n    let compileDummy = shadowMapSize;\n    const offset = 0.5;\n    var shadowPos = light.shadow_mat * vec4f((offset * unitNormal + worldPos), 1);\n    shadowPos /= shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    return select(textureSampleCompareLevel(shadowMaps, shadowMapSampler, shadowPosUV.xy, u32(light.mode.z), shadowPosUV.z), 1.0, i32(light.mode.z)==-1);\n}\n\n////////////////////////////////\n//No Normals Entrypoint Block //\n/////////////////////////////////\n\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n"+m+g;async function w(e,t=!0){const n=e.device,r=n.createShaderModule({label:t?"Pbr Shader":"Pbr Shader without normals",code:_}),i={binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{}},s={binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{}},o=[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"2d"}}];return{pipeline:await c(n,r,t?[a.sY,d.a]:[a.sY],e.canvasFormat,e.aaSampleCount,e.shadowMapSize,t?[i,s]:[i],t?"vertexMain":"vertexMain_alt",t?"fragmentMain":"fragmentMain_alt",o),usesNormalData:t,createBindGroupsFunc:e=>function(e,t){const n={binding:7,resource:e.material.roughnessTexture.createView()},r={binding:8,resource:e.material.normalTexture.createView()},i=t?[n,r]:[n],s=u(e.device,e.pipeline,e.instancesBuffer,e.uniforms,e.material,e.sampler,i),a=l(e.device,e.pipeline,e.shadowMap,e.shadowMapSampler),o=function(e){const t=e.device;let n=e.environmentMap?.irradianceMap.gpuTexture??t.createTexture({size:[1,1,6],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"rgba8unorm"}),r=e.environmentMap?.prefilteredMap.gpuTexture??t.createTexture({size:[1,1,6],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"rgba8unorm"}),i=e.environmentMap?.brdfMap.gpuTexture??t.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"rgba8unorm"}),s={label:"environment map binding group pbr",layout:e.pipeline.getBindGroupLayout(2),entries:[{binding:0,resource:e.environmentMapSampler},{binding:1,resource:n.createView({dimension:"cube"})},{binding:2,resource:r.createView({dimension:"cube"})},{binding:3,resource:i.createView()}]};return t.createBindGroup(s)}(e);return[s,a,o]}(e,t)}}function v(e,t,n){return e.reduce(((e,r)=>{let i=t(r),s=Array.from(e.keys()).find((e=>n(e,i)));return s||e.set(i,[]),e.get(s??i)?.push(r),e}),new Map)}const y=(e,t)=>{if("object"==typeof e&&"object"==typeof t){const n=Object.values(e),r=Object.values(t);if(n.length!==r.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==r[e])return!1;return!0}return!1};class x{device;camera;lights;models;canvasFormat;aaSampleCount;shadowMap;environmentMap;name=null;groups=[];pipeline;pipeline_NoNormals;camAndLightUniform;sampler;shadowMapSampler;environmentMapSampler;pbrPipeline_NoNormals;pbrPipeline;constructor(e,t,n,r,i,s,a,o){this.device=e,this.camera=t,this.lights=n,this.models=r,this.canvasFormat=i,this.aaSampleCount=s,this.shadowMap=a,this.environmentMap=o}async initializeAsync(){this.sampler=h(this.device),this.shadowMapSampler=this.device.createSampler({compare:"less"}),this.environmentMapSampler=this.device.createSampler({magFilter:"linear",minFilter:"linear"});const e={device:this.device,canvasFormat:this.canvasFormat,aaSampleCount:this.aaSampleCount,shadowMapSize:this.shadowMap?.textureSize};this.pipeline=await async function(e){const t=e.device,n=t.createShaderModule({label:"Blinn Phong Shader",code:p}),r={binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{}};return{pipeline:await c(t,n,[a.sY,d.a],e.canvasFormat,e.aaSampleCount,e.shadowMapSize,[r]),usesNormalData:!0,createBindGroupsFunc:e=>f(e,!0)}}(e),this.pipeline_NoNormals=await async function(e){const t=e.device,n=t.createShaderModule({label:"Blinn Phong Shader without Normals",code:p});return{pipeline:await c(t,n,[a.sY],e.canvasFormat,e.aaSampleCount,e.shadowMapSize,[],"vertexMain_alt","fragmentMain_alt"),usesNormalData:!1,createBindGroupsFunc:e=>f(e,!1)}}(e),this.pbrPipeline=await w(e),this.pbrPipeline_NoNormals=await w(e,!1),this.camAndLightUniform=new i(this.camera,this.lights,this.environmentMap),this.camAndLightUniform.writeToGpu(this.device),await this.createRenderGroups()}render(e){this.camAndLightUniform.writeToGpu(this.device);for(let t of this.groups){t.instancesBuffer.writeToGpu(this.device),t.material.writeToGpu(this.device),e.setPipeline(t.pipeline);for(let n=0;n<t.bindGroups.length;n++)e.setBindGroup(n,t.bindGroups[n]);e.setVertexBuffer(0,t.vertexBuffer),this.pipeline.usesNormalData&&e.setVertexBuffer(1,t.normalDataBuffer),e.draw(t.vertexCount,t.instancesCount,0,0)}}async createRenderGroups(){let e=v(this.models,(e=>{let t;return e.hasNormals&&e.material.hasNormalMap?(t=e.material instanceof o.p?this.pbrPipeline:this.pipeline,{vbo:e.vertexBuffer,nbo:e.normalBuffer,mat:e.material,builder:t}):(t=e.material instanceof o.p?this.pbrPipeline_NoNormals:this.pipeline_NoNormals,{vbo:e.vertexBuffer,nbo:void 0,mat:e.material,builder:t})}),y);const t={device:this.device,uniforms:this.camAndLightUniform,sampler:this.sampler,shadowMap:this.shadowMap?.textureArray,shadowMapSampler:this.shadowMapSampler,environmentMap:this.environmentMap,environmentMapSampler:this.environmentMapSampler};for(let n of e.entries()){const e=n[0].builder.pipeline,r=n[0].builder.createBindGroupsFunc,i=n[1][0],a=new s(n[1]);i.vertexBuffer.writeToGpu(this.device),i.normalBuffer?.writeToGpu(this.device),await i.material.writeTexturesToGpuAsync(this.device,!0),i.material.writeToGpu(this.device),a.writeToGpu(this.device);const o=r({...t,pipeline:e,instancesBuffer:a,material:i.material}),u=new b(a,a.length,i.vertexBuffer.buffer,i.vertexBuffer.vertexCount,i.material,o,e,i.normalBuffer?.buffer);this.groups.push(u)}}}class b{instancesBuffer;instancesCount;vertexBuffer;vertexCount;material;bindGroups;pipeline;normalDataBuffer;constructor(e,t,n,r,i,s,a,o=null){this.instancesBuffer=e,this.instancesCount=t,this.vertexBuffer=n,this.vertexCount=r,this.material=i,this.bindGroups=s,this.pipeline=a,this.normalDataBuffer=o}}class k{device;models;shadowMaps;shadowPipeline;renderGroups;lightBuffer;constructor(e,t,n){this.device=e,this.models=t,this.shadowMaps=n}async initAsync(){var e,t;this.shadowPipeline=await function(e){let t=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0}}],n=e.createBindGroupLayout({entries:t}),r={label:"shadow map pipeline",layout:e.createPipelineLayout({bindGroupLayouts:[n]}),vertex:{module:e.createShaderModule({label:"shadow shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\n@group(0) @binding(0) var<storage, read> instances : array<Instance>;\n@group(0) @binding(1) var<uniform> lightView_mat : mat4x4 < f32>;\n\n@vertex\nfn vertexMain(@builtin(instance_index) idx : u32, @location(0) position : vec3 < f32>) -> @builtin(position) vec4 < f32>\n{\n    return lightView_mat * instances[idx].transform * vec4(position, 1);\n}\n"}),entryPoint:"vertexMain",buffers:[T]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}};return e.createRenderPipelineAsync(r)}(this.device),this.renderGroups=[...(e=this.models,t=e=>e.vertexBuffer,v(e,t,((e,t)=>e===t))).values()].map((e=>new s(e))),this.renderGroups.forEach((e=>e.writeToGpu(this.device))),this.writeToGpu()}render(e){this.shadowMaps.forEach((e=>e.createViewMat())),this.writeToGpu(),this.shadowMaps.forEach(((t,n)=>{const r=this.lightBuffer,i={colorAttachments:[],depthStencilAttachment:{view:t.textureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},s=e.beginRenderPass(i);for(let e of this.renderGroups){e.writeToGpu(this.device);const t=e.instances[0].vertexBuffer;s.setPipeline(this.shadowPipeline),s.setBindGroup(0,S(this.device,this.shadowPipeline,e.gpuBuffer,r),[n*M]),s.setVertexBuffer(0,t.buffer),s.draw(t.vertexCount,e.length)}s.end()}))}writeToGpu(){this.lightBuffer||(this.lightBuffer=this.device.createBuffer({label:"light view buffer",size:M*this.shadowMaps.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}));for(let e=0;e<this.shadowMaps.length;e++){let t=this.shadowMaps[e];this.device.queue.writeBuffer(this.lightBuffer,e*M,t.light_mat)}}}const M=256;function S(e,t,n,r){let i={label:"shadow map shader binding group",layout:t.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:n}},{binding:1,resource:{buffer:r,size:M}}]};return e.createBindGroup(i)}const T={arrayStride:56,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]};var P=n(738),A=n(877);class E{id;textureView;light;camera;get lightPosition(){return this.light.position}light_mat=r._E.identity();view_mat=r._E.identity();proj_mat=r._E.identity();constructor(e,t,n){this.id=e,this.textureView=t,this.light=n,this.camera=new C(this)}}class C{map;constructor(e){this.map=e}get view(){return this.map.view_mat}get projectionMatrix(){return this.map.proj_mat}get position(){return new Float32Array([...this.map.lightPosition,1])}}class B extends E{boundingBox;constructor(e,t,n,r){super(e,t,n),this.boundingBox=r}createViewMat(){const e=this.boundingBox,t=(0,P.QG)(e),n=r.R3.distance(e.min,e.max),i=r.R3.normalize(this.light.direction),s=r.R3.addScaled(t,i,-n);let a=r.R3.cross(this.light.direction,[0,1,0]);a=r.R3.equalsApproximately(a,[0,0,0])?[0,0,1]:[0,1,0],r._E.lookAt(s,t,a,this.view_mat);const o=(0,P.dV)(e,this.view_mat),u=o.min[0],l=o.max[0],c=o.min[1],h=o.max[1],d=-o.min[2];r._E.ortho(u,l,c,h,0,d,this.proj_mat),r._E.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class G extends E{constructor(e,t,n){super(e,t,n)}createViewMat(){const e=this.light.position,t=r.R3.add(e,this.light.direction);let n=r.R3.cross(this.light.direction,[0,1,0]);n=r.R3.equalsApproximately(n,[0,0,0])?[0,0,1]:[0,1,0],r._E.lookAt(e,t,n,this.view_mat);const i=this.light.coneAngleDeg/180*Math.PI;r._E.perspective(i,1,.1,1e5,this.proj_mat),r._E.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class N{device;canvasFormat;aaSampleCount;camera;vertexBuffer;sampler;pipeline;textureView;constructor(e,t,n,r,i){this.device=e,this.canvasFormat=t,this.aaSampleCount=n,this.camera=r,this.vertexBuffer=e.createBuffer({size:a.zS.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.vertexBuffer,0,a.zS),this.pipeline=this.createPipeline(e,i.is16bit()),this.sampler=h(e),this.textureView=i.createGpuCubeView()}render(e){e.setPipeline(this.pipeline),e.setBindGroup(0,this.createBindGroup()),e.setVertexBuffer(0,this.vertexBuffer),e.draw(a.MO)}createBindGroup(){let e={label:"EnvironmentMapRenderer binding group",layout:this.pipeline.getBindGroupLayout(0),entries:[{binding:0,resource:this.textureView},{binding:1,resource:this.sampler},{binding:2,resource:{buffer:this.getCameraGPUBuffer(this.device)}}]};return this.device.createBindGroup(e)}_gpuBuffer=null;getCameraGPUBuffer(e){return this._gpuBuffer||(this._gpuBuffer=e.createBuffer({label:"EnvironmentMapRenderer: camera buffer",size:128,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._gpuBuffer,0,this.camera.view),e.queue.writeBuffer(this._gpuBuffer,64,this.camera.projectionMatrix),this._gpuBuffer}getBindGroupLayoutEntries(){return[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]}createPipeline(e,t){let n=this.getBindGroupLayoutEntries(),r=e.createBindGroupLayout({entries:n}),i=e.createPipelineLayout({bindGroupLayouts:[r]});const s=e.createShaderModule({label:"EnvironmentMapRenderer",code:this.getShader()});return e.createRenderPipeline({layout:i,vertex:{module:s,entryPoint:"vertexMain",buffers:[{arrayStride:a.O$,attributes:[{shaderLocation:0,offset:a.v8,format:"float32x4"},{shaderLocation:1,offset:a.Ax,format:"float32x2"}]}]},fragment:{module:s,entryPoint:"fragmentMain",constants:{isHdr:t?1:0},targets:[{format:this.canvasFormat}]},primitive:{topology:"triangle-list",cullMode:"none"},multisample:{count:this.aaSampleCount},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"less-equal"}})}getShader(){return z+g}}const z="\n\nstruct Uniforms\n{\n    view: mat4x4f,\n    proj : mat4x4f,\n}\n\n@group(0) @binding(0) var texture : texture_cube < f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n@group(0) @binding(2) var<uniform> uni :  Uniforms;\n\nstruct VertexOutput\n{\n    @builtin(position) Position : vec4f,\n    @location(0) viewDir: vec4f,\n}\n  \n@vertex\nfn vertexMain(\n@location(0) position : vec4f,\n@location(1) uv : vec2f\n) -> VertexOutput \n{\n    var out : VertexOutput;\n\n    // remove translation from view matrix\n    var tmp = mat4x4f();\n    tmp[0] = vec4f(uni.view[0].xyz,0);\n    tmp[1] = vec4f(uni.view[1].xyz,0);\n    tmp[2] = vec4f(uni.view[2].xyz,0);\n    tmp[3] = vec4f(0,0,0,1);      \n    \n    let p = uni.proj * tmp * position;    \n    // p is divided by p.w before forwarded to the fragement shader (NDC coordinates)\n    // p.z is only used as z-buffer value and if set to p.w the NDC value will be 1\n    // corresponding to the farthest away point \n    out.Position = vec4f(p.x,p.y,p.w,p.w);    \n    out.viewDir = position;\n    return out;\n}\n\noverride isHdr: f32 = 0.0;\n@fragment\nfn fragmentMain(\n  @location(0) viewDir: vec4f\n) -> @location(0) vec4f \n{    \n    var finalColor =  textureSample(texture, textureSampler, viewDir.xyz).xyz;\n\n    if(isHdr == 1.0)\n    {\n        finalColor = ACESFilm(finalColor);       \n        finalColor = gammaEncode(finalColor);\n    }\n\n    return vec4f(finalColor,1);\n}\n\n";var L=n(102),R=n(403);class U extends R.I{_data;_dataFct;isArrayData=!1;constructor(e,t,n){super(t),this._size=n??this._size,"function"==typeof e?this._dataFct=e:this._data=e}writeToGpu(e){let t=this._dataFct?this._dataFct():this._data;if(!this._buffer||this._device!=e){this._device=e,this.isArrayData=Array.isArray(t),this._usage=this.isArrayData?GPUBufferUsage.STORAGE:GPUBufferUsage.UNIFORM,this._size<=0&&(this._size=this.calcSize(t));const n={label:`${this.label}`,size:this._size,usage:this._usage|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(n)}this.isArrayData||(t=[t]),t.forEach(((t,n)=>{e.queue.writeBuffer(this._buffer,n*t.byteLength,t)}))}}class V{index=0;get bindings(){return this._bindings}_bindings=[];constructor(...e){this.addRange(...e)}createBindGroup(e,t){return e.createBindGroup(this.buildDescriptor(t))}getBindGroupLayoutdescriptor(){return{entries:this._bindings.map(((e,t)=>e.getLayout(t)))}}buildDescriptor(e){return{layout:e.getBindGroupLayout(this.index),entries:this._bindings.map(((e,t)=>e.getEntry(t)))}}add(e){this._bindings.push(e)}addRange(...e){this._bindings.push(...e)}replace(e,t){if("number"==typeof t)this._bindings[t]=e;else{let n=this._bindings.indexOf(t);if(-1==n)throw new Error("oldBinding doesn't exist in the BindGroup");this._bindings[n]=e}}writeToGpu(e){this._bindings.forEach((t=>t.writeToGpu(e)))}}function F(e){let t=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,n=new U(e);return new O(t,{type:"read-only-storage"},n)}class O{visibility;type;buffer;constructor(e,t,n){this.visibility=e,this.type=t,this.buffer=n}getLayout(e){return{binding:e,visibility:this.visibility,buffer:this.type}}getEntry(e){return{binding:e,resource:{buffer:this.buffer.buffer}}}writeToGpu(e){this.buffer.writeToGpu(e)}}class I{visibility;type;label;constructor(e,t,n,r){this.visibility=e,this.type=t,this.label=r,this._texture=n}get texture(){return this._texture}_texture=void 0;getLayout(e){return{binding:e,visibility:this.visibility,texture:this.type}}getEntry(e){if(!this._texture)throw new Error(`texture value wasn't set. (${this.label})`);return{binding:e,resource:this._texture.view}}setEntry(e){this._texture=e}writeToGpu(e){}}class D{visibility;type;sampler;_sampler;constructor(e,t,n){this.visibility=e,this.type=t,this.sampler=n}getLayout(e){return{binding:e,visibility:this.visibility,sampler:this.type}}getEntry(e){if(!this._sampler)throw new Error("a sampler wasn't created yet");return{binding:e,resource:this._sampler}}writeToGpu(e){this._sampler||(this._sampler=this.sampler instanceof GPUSampler?this.sampler:e.createSampler(this.sampler))}}class q{instanceCount;constructor(e=1){this.instanceCount=e}get vbos(){return this.pipeBuilder.vbos}get bindGroups(){return this.pipeBuilder.bindGroups}get pipeline(){return this.pipeBuilder.pipeline}render(e,t,n){if(!this.pipeBuilder.pipeline)throw new Error("Pipeline hasn't been built.");this.writeToGpu(e),t.setPipeline(this.pipeBuilder.pipeline),this.bindGroups.forEach(((n,r)=>{t.setBindGroup(r,n.createBindGroup(e,this.pipeline))})),this.vbos.forEach(((e,n)=>{t.setVertexBuffer(n,e.buffer)})),t.draw(this.pipeBuilder.vbos[0].vertexCount,n??this.instanceCount)}writeToGpu(e){this.bindGroups.forEach((t=>t.writeToGpu(e)))}}class H{get vbos(){return this._vbos}_vbos=[];get bindGroups(){return this._bindGroups}_bindGroups=[];SHADER;get pipeline(){return this._pipeline}_pipeline;options;constructor(e,t){this.SHADER=e,this.options=t}async buildAsync(e){return this._pipeline=await async function(e,t,n,r,i){let s=n.map((t=>e.createBindGroupLayout(t.getBindGroupLayoutdescriptor()))),a=e.createPipelineLayout({bindGroupLayouts:s}),o=e.createShaderModule({code:r,label:`${i?.label} Shader`}),u=t[0].topology,l={label:`${i?.label} Pipeline`,layout:a,vertex:{module:o,entryPoint:i?.vertexEntry??"vertexMain",buffers:t.map((e=>e.vertexBufferLayout)),constants:i?.vertexConstants},fragment:{module:o,entryPoint:i?.fragmentEntry??"fragmentMain",constants:i?.fragmentConstants,targets:[{format:i?.canvasFormat??"bgra8unorm",blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]},primitive:{topology:u,cullMode:"back"},multisample:{count:i?.aaSampleCount??4},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await e.createRenderPipelineAsync(l)}(e,this._vbos,this._bindGroups,this.SHADER,this.options),this._pipeline}addVertexBuffer(e){return this._vbos.push(e),this}addBindGroup(e){return e.index=this._bindGroups.length,this._bindGroups.push(e),this}}class $ extends q{get pipeBuilder(){return this._pipeBuilder}_pipeBuilder;constructor(e,t){super(e.length);const n=(0,L.xE)().vertexBuffer,i=e.map((e=>new Float32Array(e.diffuseColor))),s=new V;s.add(function(e){let n=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,i=new U((()=>r._E.multiply(t.projectionMatrix,t.view)));return new O(n,{type:"uniform"},i)}()),s.add(F(i)),s.add(F((()=>e.map((e=>r._E.uniformScale(r._E.translation([...e.position,0]),.5))))));const a=new H(j);a.addVertexBuffer(n),a.addBindGroup(s),this._pipeBuilder=a}async buildAsync(e){await this._pipeBuilder.buildAsync(e),this._pipeBuilder.vbos[0].writeToGpu(e)}}const j="\n\n@group(0) @binding(0) var<uniform> viewProjMat: mat4x4f;\n@group(0) @binding(1) var<storage, read> colors: array<vec4f>;\n@group(0) @binding(2) var<storage, read> transforms: array<mat4x4f>;\n\nstruct VertexOutput\n{\n    @builtin(position) Position : vec4f,\n    @location(0) color: vec4f,\n}\n  \n@vertex\nfn vertexMain(\n@builtin(instance_index) index: u32,\n@location(0) position: vec4f,\n@location(1) uv: vec2f\n) -> VertexOutput \n{  \n    return VertexOutput(viewProjMat*transforms[index]*position, colors[index]);\n}\n\n@fragment\nfn fragmentMain(\n  @location(0) color: vec4f\n) -> @location(0) vec4f \n{    \n    return color;\n}\n\n";var X=n(231),Y=n(914);class W{_currentPipeBuilder;_2dPipeBuilder;_cubePipeBuilder;_depthPipeBuilder;_vbo;constructor(e,t,n){let r={canvasWidth:e,canvasHeight:t};this._vbo=function(){const e=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,-1,1,0,1,1,-1,0,1,1,1,0,1]);return new X.Q(e,6,{arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]},"triangle-list","Quad VBO")}();let i=function(e){let t=GPUShaderStage.FRAGMENT;return new D(t,{},e)}(n??{addressModeU:"repeat",addressModeV:"repeat",magFilter:"nearest",minFilter:"nearest"});const s=new I(GPUShaderStage.FRAGMENT,{sampleType:"float",viewDimension:"2d"});this._2dPipeBuilder=new H(K,{fragmentConstants:r,label:"2d Texture Renderer"}).addVertexBuffer(this._vbo).addBindGroup(new V(s,i));const a=new I(GPUShaderStage.FRAGMENT,{sampleType:"float",viewDimension:"2d-array"});this._cubePipeBuilder=new H(Q,{fragmentConstants:r,label:"Cube Texture as 2d Array Renderer"}).addVertexBuffer(this._vbo).addBindGroup(new V(a,i));const o=new I(GPUShaderStage.FRAGMENT,{sampleType:"depth",viewDimension:"2d"});this._depthPipeBuilder=new H(Z,{fragmentConstants:r,label:"Depth Texture Renderer"}).addVertexBuffer(this._vbo).addBindGroup(new V(o))}render(e,t,n){if(this.selectPipeline(n),!this._currentPipeBuilder?.pipeline)throw new Error("Pipeline hasn't been built.");this._currentPipeBuilder.bindGroups.forEach((t=>t.writeToGpu(e))),t.setPipeline(this._currentPipeBuilder.pipeline),this._currentPipeBuilder.bindGroups.forEach(((n,r)=>{t.setBindGroup(r,n.createBindGroup(e,this._currentPipeBuilder?.pipeline))})),this._currentPipeBuilder.vbos.forEach(((e,n)=>{t.setVertexBuffer(n,e.buffer)})),t.draw(this._currentPipeBuilder.vbos[0].vertexCount)}async buildAsync(e){this._vbo.writeToGpu(e),await Promise.all([this._2dPipeBuilder.buildAsync(e),this._cubePipeBuilder.buildAsync(e),this._depthPipeBuilder.buildAsync(e)])}selectPipeline(e){const t=e instanceof Y.x?e.createView():e;if(t.isDepth()&&t.is2d())this._currentPipeBuilder=this._depthPipeBuilder;else if(t.is2dArray()&&6==t.layerCount)this._currentPipeBuilder=this._cubePipeBuilder;else{if(!t.is2d())throw new Error(`Texture not supported. (dim: ${t.viewDimension}, layers: ${t.layerCount}`);this._currentPipeBuilder=this._2dPipeBuilder}this._currentPipeBuilder.bindGroups[0].bindings[0].setEntry(t)}}const K="\noverride canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\n@group(0) @binding(0) var texture : texture_2d<f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    return textureSample(texture, textureSampler, fragCoord.xy  / vec2<f32>(canvasWidth, canvasHeight));\n}\n",Q="\noverride canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\nstruct VOut\n{\n    @builtin(position) pixelPos : vec4f,\n    @location(0) fragPos : vec4f,\n}\n\n@group(0) @binding(0) var texture : texture_2d_array  < f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> VOut {\n    return VOut(position, position);\n}\n\n@fragment\nfn fragmentMain(@builtin(position) pixelPos : vec4f, @location(0) f : vec4f)\n-> @location(0) vec4f {\n    let scale = vec2f(4.0/canvasWidth,3.0/canvasHeight);    \n    const h = 1.0/3.0;    \n    var layer = -1;\n\n    // layer 0 => positive x\n    // layer 1 => negative x\n    // layer 2 => positive y\n    // layer 3 => negative y\n    // layer 4 => positive z\n    // layer 5 => negative z\n\n    if(f.y > h)\n    {\n        if(f.x > -0.5 && f.x < 0)\n        {\n            layer = 2;\n        }     \n    }\n    else if(f.y < -h)\n    {\n        if(f.x > -0.5 && f.x < 0)\n        {\n            layer = 3;\n        }\n    }\n    else\n    {\n        if(f.x < -0.5)\n        {\n            layer = 1;\n        }\n        else if(f.x < 0.0)\n        {\n            layer = 4;\n        }\n        else if(f.x < 0.5)\n        {\n            layer = 0;\n        }\n        else\n        {\n            layer = 5;\n        }        \n    }\n    var uv = pixelPos.xy*scale;\n    return  select(textureSample(texture, textureSampler, uv, layer), vec4f(0,0,0,1), layer<0);\n}\n",Z="\noverride canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\n@group(0) @binding(0) var textureMap : texture_depth_2d;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    //can't use sampler_comparison as they only return 0 or 1\n    //other sampler don't seem to work\n    //got to calculate pixel indices manually\n    let dim = textureDimensions(textureMap, 0);\n    let textureScreenRatio = vec2f(f32(dim.x) / canvasWidth, f32(dim.y) / canvasHeight);\n    let depthValue = textureLoad(textureMap, vec2 < i32 > (floor(fragCoord.xy * textureScreenRatio)), 0);\n    return vec4 < f32 > (depthValue, depthValue, depthValue, 1.0);\n\n\n    //transformation to make depth values distingushable\n    //const zFar = 100.0;\n    //const zNear = 0.1;\n    //let d = (2 * zNear) / (zFar + zNear - depthValue * (zFar - zNear));\n    //return vec4 < f32 > (d, d, d, 1.0);\n}\n";class J{scene;canvas;shadowMapSize;showShadowMapView_Id=-1;renderEnvironment=!0;showEnvironmentMapView=!1;showIrradianceMapView=!1;showPrefilteredMapView=!1;showPrefEnvMapIndex=0;showBrdfMapView=!1;currentRenderer;get renderer(){return this._renderer}_renderer=[];setRendererByIndex(e){if(e<0||e>=this._renderer.length)throw new RangeError("Renderer index out of range.");this.currentRenderer=this._renderer[e]}shadowMapRenderer;shadowMap;get shadowMaps(){return this.shadowMap?.views}environmentRenderer;textureViewer;currentTexture=void 0;lightSourceRenderer;aaSampleCount=4;device;context;canvasFormat;renderTarget;depthTexture;depthTextureView;inputHandler;lastFrameMS=Date.now();currentAnimationFrameId=0;constructor(e,t,n=2048){this.scene=e,this.canvas=t,this.shadowMapSize=n,this.inputHandler=function(e,t){const n={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},r={x:0,y:0,zoom:0};let i=!1;const s=(e,t)=>{switch(e.code){case"KeyW":n.forward=t,e.preventDefault(),e.stopPropagation();break;case"KeyS":n.backward=t,e.preventDefault(),e.stopPropagation();break;case"KeyA":n.left=t,e.preventDefault(),e.stopPropagation();break;case"KeyD":n.right=t,e.preventDefault(),e.stopPropagation();break;case"Space":n.up=t,e.preventDefault(),e.stopPropagation();break;case"KeyC":n.down=t,e.preventDefault(),e.stopPropagation()}};return e.addEventListener("keydown",(e=>s(e,!0))),e.addEventListener("keyup",(e=>s(e,!1))),t.addEventListener("mousedown",(()=>{i=!0})),t.addEventListener("mouseup",(()=>{i=!1})),t.addEventListener("mousemove",(e=>{i=0!=(1&e.buttons),i&&(r.x+=e.movementX,r.y+=e.movementY)})),t.addEventListener("wheel",(e=>{i=0!=(1&e.buttons),i&&(r.zoom+=Math.sign(e.deltaY),e.preventDefault(),e.stopPropagation())}),{passive:!1}),()=>{const e={digital:n,analog:{x:r.x,y:r.y,zoom:r.zoom,touching:i}};return r.x=0,r.y=0,r.zoom=0,e}}(window,t)}async run(){this.device&&(cancelAnimationFrame(this.currentAnimationFrameId),this.device.destroy()),await this.initAsync(),this.render()}async initAsync(){await this.initGpuContext(),this.scene.camera.aspect=this.canvas.width/this.canvas.height,this.scene.lights.filter((e=>e.renderShadowMap)).length>0?this.shadowMap=function(e,t,n=1024){let r=t.lights.filter((e=>e.renderShadowMap));if(r.length<1)throw new Error("Can't create shadow map with no applicable lighs.");let i=[],s=t.models.map((e=>e.getBoundingBox())),a=(0,P.k4)(s),o=e.createTexture({size:[n,n,r.length],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});return r.forEach(((e,t)=>{const n=o.createView({label:`shadow map view ${t}`,dimension:"2d",aspect:"all",baseMipLevel:0,baseArrayLayer:t,arrayLayerCount:1});let r;switch(e.type){case A.v.Direct:r=new B(t,n,e,a);break;case A.v.Target:r=new G(t,n,e);break;default:throw new Error(`Can't create a shadow map for type ${A.v[e.type]}`)}r.createViewMat(),i.push(r),e.shadowMap=r})),{textureArray:o,views:i,textureSize:n}}(this.device,this.scene,this.shadowMapSize):(this.shadowMap=void 0,this.shadowMapRenderer=void 0),this.scene.environmentMap?(await(this.scene.environmentMap?.loadAsync(this.device)),this.environmentRenderer=new N(this.device,this.canvasFormat,this.aaSampleCount,this.scene.camera,this.scene.environmentMap.cubeMap)):this.environmentRenderer=void 0,this._renderer=[],this.currentRenderer=new x(this.device,this.scene.camera,this.scene.lights,this.scene.models,this.canvasFormat,this.aaSampleCount,this.shadowMap,this.scene.environmentMap),await this.currentRenderer.initializeAsync(),this.currentRenderer.name="main",this._renderer.push(this.currentRenderer),this.shadowMap&&(this.shadowMapRenderer=new k(this.device,this.scene.models,this.shadowMap.views),await this.shadowMapRenderer.initAsync());for(let[e,t]of[...this.scene.lights.filter((e=>e.shadowMap))].entries()){let n=new x(this.device,t.shadowMap.camera,this.scene.lights,this.scene.models,this.canvasFormat,this.aaSampleCount);await n.initializeAsync(),n.name=`light view ${e}`,this._renderer.push(n)}this.textureViewer=await async function(e,t,n,r){let i=new W(t,n,void 0);return await i.buildAsync(e),i}(this.device,this.canvas.width,this.canvas.height),this.lightSourceRenderer=await async function(e,t,n){let r=new $(t,n);return await r.buildAsync(e),r}(this.device,this.scene.lights,this.scene.camera)}render(){this.currentAnimationFrameId=requestAnimationFrame((()=>{const e=this.getDeltaTime();this.scene.update(e),this.scene.camera.update(e,this.inputHandler());const t=this.device.createCommandEncoder();this.shadowMapRenderer?.render(t);const n=t.beginRenderPass(this.createRenderPassDescriptor());this.selectTextureForTextureViewer(),this.currentTexture?this.textureViewer.render(this.device,n,this.currentTexture):(this.currentRenderer.render(n),this.lightSourceRenderer.render(this.device,n),this.renderEnvironment&&this.environmentRenderer?.render(n)),n.end(),this.device.queue.submit([t.finish()]),this.render()}))}selectTextureForTextureViewer(){this.shadowMaps&&this.showShadowMapView_Id>=0&&this.showShadowMapView_Id<this.shadowMaps.length?this.currentTexture=new Y.s(this.shadowMaps[this.showShadowMapView_Id].textureView,"depth","2d",1,"depth32float"):this.showEnvironmentMapView&&this.scene.environmentMap?this.currentTexture=this.scene.environmentMap.cubeMap:this.showIrradianceMapView&&this.scene.environmentMap?this.currentTexture=this.scene.environmentMap.irradianceMap.createView():this.showPrefilteredMapView&&this.scene.environmentMap?this.currentTexture=this.scene.environmentMap.prefilteredMap.createMipView(this.showPrefEnvMapIndex):this.showBrdfMapView&&this.scene.environmentMap?this.currentTexture=this.scene.environmentMap.brdfMap:this.currentTexture=void 0}createRenderPassDescriptor(){const e=this.aaSampleCount>1,t=this.context.getCurrentTexture().createView();return{colorAttachments:[{view:e?this.renderTarget.createView():t,resolveTarget:e?t:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}}}getDeltaTime(){const e=Date.now(),t=(e-this.lastFrameMS)/1e3;return this.lastFrameMS=e,t}async initGpuContext(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const e=await navigator.gpu.requestAdapter();if(!e)throw new Error("No appropriate GPUAdapter found.");this.device=await e.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),this.context.configure({device:this.device,format:this.canvasFormat,alphaMode:"premultiplied"}),this.aaSampleCount>1&&(this.renderTarget=this.device.createTexture({size:[this.canvas.width,this.canvas.height],sampleCount:this.aaSampleCount,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.depthTexture=this.device.createTexture({size:[this.canvas.width,this.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:this.aaSampleCount}),this.depthTextureView=this.depthTexture.createView()}}},750:(e,t,n)=>{n.d(t,{h:()=>s});var r=n(838),i=n(877);class s{engine;canvas;scenes;currentScene;constructor(e,t,n,r){this.engine=e,this.canvas=t,this.scenes=n,this.currentScene=r}async loadSceneAsync(e){this.currentScene=e,this.engine.scene=this.currentScene.build(),await this.engine.run(),this.refresh()}refresh(){const e="uiContainer";let t=document.querySelector(`#${e}`);t?t.innerHTML="":(t=(0,r.v)(e),document.body.insertBefore(t,this.canvas.nextSibling));const n=t.appendChild((0,r.wy)()),i=n.appendChild((0,r.wy)());(0,r._W)(i,"Options"),this.addOptions(i);const s=n.appendChild((0,r.wy)());(0,r._W)(s,"Renderer"),this.addRendererControls(s);const a=t.appendChild((0,r.wy)({margin:"0px 200px 0px auto"})).appendChild((0,r.wy)());(0,r._W)(a,"Scenes"),this.addScenesSelection(a,this.currentScene)}addOptions(e){let t=this.engine.scene,n=(0,r.wy)();e.appendChild(n),e=n;const s=(0,r.v)();n.appendChild(s);for(let[e,n]of t.lights.entries())(0,r.ug)(s,`${i.v[n.type]}Light_${e.toString().padStart(2,"0")}`,(e=>{n.isOn=e.checked}),n.isOn);(0,r.ug)(s,"isAnimated",(e=>{t.isAnimated=e.checked}),t.isAnimated);const a=(0,r.v)();n.appendChild(a),(0,r.ug)(a,"ambient",(e=>{for(let n of t.lights.values())n.disableAmbientColor=!e.checked})),(0,r.ug)(a,"diffuse",(e=>{for(let n of t.lights.values())n.disableDiffuseColor=!e.checked})),(0,r.ug)(a,"specular",(e=>{for(let n of t.lights.values())n.disableSpecularColor=!e.checked})),(0,r.ug)(a,"normal_mapping",(e=>{for(let n of t.models)n.material.disableNormalMap=!e.checked}))}addRendererControls(e){const t=this.engine;let n,i,s,a,o,u=new Array,l=new Array;const c=e=>{o&&o!=e&&(o.checked=!1),o=e,t.setRendererByIndex(0),t.showShadowMapView_Id=-1,t.showEnvironmentMapView=!1,t.showIrradianceMapView=!1,t.showPrefilteredMapView=!1,t.showBrdfMapView=!1,o?.checked&&(u.forEach(((e,n)=>{e==o&&(t.showShadowMapView_Id=n)})),l.forEach(((e,n)=>{e==o&&t.setRendererByIndex(n+1)})),n==o&&(t.showEnvironmentMapView=!0),i==o&&(t.showIrradianceMapView=!0),s==o&&(t.showPrefilteredMapView=!0),a==o&&(t.showBrdfMapView=!0))};if(t.scene.lights.filter((e=>e.renderShadowMap)).forEach(((t,n)=>{const i=(0,r.v)();e.appendChild(i),(0,r.ug)(i,`ShadowMap${n}`,(e=>{t.showShadows=e.checked})),u.push((0,r.ug)(i,"map",c,!1)),l.push((0,r.ug)(i,"view",c,!1))})),t.scene.environmentMap){const o=(0,r.v)();e.appendChild(o),(0,r.ug)(o,"Environment",(e=>{t.renderEnvironment=e.checked})),n=(0,r.ug)(o,"map",c,!1),i=(0,r.ug)(o,"irradiance",c,!1),s=(0,r.ug)(o,"prefilter",c,!1),(0,r.Gz)(o,0,t.scene.environmentMap.prefEnvMapMipLevelCount-1,0,1,(e=>t.showPrefEnvMapIndex=e)),a=(0,r.ug)(o,"brdf",c,!1)}}addScenesSelection(e,t){const n=(0,r.v)();e.appendChild(n),(0,r.EI)(n,this.scenes,(e=>e.name),(async e=>{await this.loadSceneAsync(this.scenes[e])}),t)}}},121:(e,t,n)=>{n.d(t,{Q:()=>Qt});var r=n(453),i=n(416),s=n(284),a=n(203);const o="\nstruct VOut\n{\n    @builtin(position) pos : vec4f,\n    @location(0) uv : vec2f,\n}\n\n@vertex\nfn vertexBrdf(@location(0) pos : vec4f, @location(1) uv : vec2f) -> VOut\n{\n    return VOut(pos, uv);\n}\n\n@fragment\nfn fragmentBrdf(@location(0) uv : vec2f) -> @location(0) vec4f\n{\n    return vec4f(IntegrateBRDF(uv.x, uv.y),0,1);\n}\n\nfn IntegrateBRDF(NdotV : f32, roughness : f32) -> vec2f\n{\n    var V = vec3f();\n    V.x = sqrt(1.0 - NdotV * NdotV);\n    V.y = 0.0;\n    V.z = NdotV;\n\n    var A = 0.0;\n    var B = 0.0;\n\n    let N = vec3(0.0, 0.0, 1.0);\n\n    const SAMPLE_COUNT = 1024u;\n    for(var i = 0u; i < SAMPLE_COUNT; i++)\n    {\n        //generates a sample vector that's biased towards the\n        //preferred alignment direction (importance sampling).\n        let Xi = Hammersley(i, SAMPLE_COUNT);\n        let H = ImportanceSampleGGX(Xi, N, roughness);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NdotL = max(L.z, 0.0);\n        let NdotH = max(H.z, 0.0);\n        let VdotH = max(dot(V, H), 0.0);\n\n        if(NdotL > 0.0)\n        {\n            let G = GeometrySmith(N, V, L, roughness);\n            let G_Vis = (G * VdotH) / (NdotH * NdotV);\n            let Fc = pow(1.0 - VdotH, 5.0);\n\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    A /= f32(SAMPLE_COUNT);\n    B /= f32(SAMPLE_COUNT);\n    return vec2(A, B);\n}\n"+a,u="This constructor is not a subclass of Float16Array",l="The constructor property value is not an object",c="Attempting to access detached ArrayBuffer",h="Cannot convert undefined or null to object",d="Cannot mix BigInt and other types, use explicit conversions",p="@@iterator property is not callable",f="Reduce of empty array with no initial value",m="Offset is out of bounds";function g(e){return(t,...n)=>w(e,t,n)}function _(e,t){return g(b(e,t).get)}const{apply:w,construct:v,defineProperty:y,get:x,getOwnPropertyDescriptor:b,getPrototypeOf:k,has:M,ownKeys:S,set:T,setPrototypeOf:P}=Reflect,A=Proxy,{EPSILON:E,MAX_SAFE_INTEGER:C,isFinite:B,isNaN:G}=Number,{iterator:N,species:z,toStringTag:L,for:R}=Symbol,U=Object,{create:V,defineProperty:F,freeze:O,is:I}=U,D=U.prototype,q=D.__lookupGetter__?g(D.__lookupGetter__):(e,t)=>{if(null==e)throw Re(h);let n=U(e);do{const e=b(n,t);if(void 0!==e)return H(e,"get")?e.get:void 0}while(null!==(n=k(n)))},H=U.hasOwn||g(D.hasOwnProperty),$=Array,j=$.isArray,X=$.prototype,Y=g(X.join),W=g(X.push),K=g(X.toLocaleString),Q=X[N],Z=g(Q),{abs:J,trunc:ee}=Math,te=ArrayBuffer,ne=te.isView,re=te.prototype,ie=g(re.slice),se=_(re,"byteLength"),ae="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:null,oe=ae&&_(ae.prototype,"byteLength"),ue=k(Uint8Array),le=ue.from,ce=ue.prototype,he=ce[N],de=g(ce.keys),pe=g(ce.values),fe=g(ce.entries),me=g(ce.set),ge=g(ce.reverse),_e=g(ce.fill),we=g(ce.copyWithin),ve=g(ce.sort),ye=g(ce.slice),xe=g(ce.subarray),be=_(ce,"buffer"),ke=_(ce,"byteOffset"),Me=_(ce,"length"),Se=_(ce,L),Te=Uint8Array,Pe=Uint16Array,Ae=(...e)=>w(le,Pe,e),Ee=Uint32Array,Ce=Float32Array,Be=k([][N]()),Ge=g(Be.next),Ne=g(function*(){}().next),ze=k(Be),Le=DataView.prototype,Re=(g(Le.getUint16),g(Le.setUint16),TypeError),Ue=RangeError,Ve=WeakSet,Fe=Ve.prototype,Oe=g(Fe.add),Ie=g(Fe.has),De=WeakMap,qe=De.prototype,He=g(qe.get),$e=g(qe.has),je=g(qe.set),Xe=new De,Ye=V(null,{next:{value:function(){const e=He(Xe,this);return Ge(e)}},[N]:{value:function(){return this}}});function We(e){if(e[N]===Q&&Be.next===Ge)return e;const t=V(Ye);return je(Xe,t,Z(e)),t}const Ke=new De,Qe=V(ze,{next:{value:function(){const e=He(Ke,this);return Ne(e)},writable:!0,configurable:!0}});for(const e of S(Be))"next"!==e&&F(Qe,e,b(Be,e));function Ze(e){const t=V(Qe);return je(Ke,t,e),t}function Je(e){return null!==e&&"object"==typeof e||"function"==typeof e}function et(e){return null!==e&&"object"==typeof e}function tt(e){return void 0!==Se(e)}function nt(e){const t=Se(e);return"BigInt64Array"===t||"BigUint64Array"===t}function rt(e){if(null===ae)return!1;try{return oe(e),!0}catch(e){return!1}}function it(e){return!!j(e)&&e[N]===Q&&Be.next===Ge}function st(e){if("string"!=typeof e)return!1;const t=+e;return e===t+""&&!!B(t)&&t===ee(t)}const at=R("__Float16Array__"),ot=1/E,ut=6103515625e-14,lt=65504,ct=.0009765625,ht=ct*ut,dt=ct*ot;const pt=new te(4),ft=new Ce(pt),mt=new Ee(pt),gt=new Pe(512),_t=new Te(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(gt[e]=0,gt[256|e]=32768,_t[e]=24,_t[256|e]=24):t<-14?(gt[e]=1024>>-t-14,gt[256|e]=1024>>-t-14|32768,_t[e]=-t-1,_t[256|e]=-t-1):t<=15?(gt[e]=t+15<<10,gt[256|e]=t+15<<10|32768,_t[e]=13,_t[256|e]=13):t<128?(gt[e]=31744,gt[256|e]=64512,_t[e]=24,_t[256|e]=24):(gt[e]=31744,gt[256|e]=64512,_t[e]=13,_t[256|e]=13)}function wt(e){ft[0]=function(e){const t=+e;if(!B(t)||0===t)return t;const n=t>0?1:-1,r=J(t);if(r<ut)return n*function(e){return e+ot-ot}(r/ht)*ht;const i=(1+dt)*r,s=i-(i-r);return s>lt||G(s)?n*(1/0):n*s}(e);const t=mt[0],n=t>>23&511;return gt[n]+((8388607&t)>>_t[n])}const vt=new Ee(2048);for(let e=1;e<1024;++e){let t=e<<13,n=0;for(;0==(8388608&t);)t<<=1,n-=8388608;t&=-8388609,n+=947912704,vt[e]=t|n}for(let e=1024;e<2048;++e)vt[e]=939524096+(e-1024<<13);const yt=new Ee(64);for(let e=1;e<31;++e)yt[e]=e<<23;yt[31]=1199570944,yt[32]=2147483648;for(let e=33;e<63;++e)yt[e]=2147483648+(e-32<<23);yt[63]=3347054592;const xt=new Pe(64);for(let e=1;e<64;++e)32!==e&&(xt[e]=1024);function bt(e){const t=e>>10;return mt[0]=vt[xt[t]+(1023&e)]+yt[t],ft[0]}function kt(e){const t=+e;return G(t)||0===t?0:ee(t)}function Mt(e){const t=kt(e);return t<0?0:t<C?t:C}function St(e,t){if(!Je(e))throw Re("This is not an object");const n=e.constructor;if(void 0===n)return t;if(!Je(n))throw Re(l);const r=n[z];return null==r?t:r}function Tt(e){if(rt(e))return!1;try{return ie(e,0,0),!1}catch(e){}return!0}function Pt(e,t){const n=G(e),r=G(t);if(n&&r)return 0;if(n)return 1;if(r)return-1;if(e<t)return-1;if(e>t)return 1;if(0===e&&0===t){const n=I(e,0),r=I(t,0);if(!n&&r)return-1;if(n&&!r)return 1}return 0}const At=new De;function Et(e){return $e(At,e)||!ne(e)&&function(e){if(!et(e))return!1;const t=k(e);if(!et(t))return!1;const n=t.constructor;if(void 0===n)return!1;if(!Je(n))throw Re(l);return M(n,at)}(e)}function Ct(e){if(!Et(e))throw Re("This is not a Float16Array object")}function Bt(e,t){const n=Et(e),r=tt(e);if(!n&&!r)throw Re("Species constructor didn't return TypedArray object");if("number"==typeof t){let r;if(n){const t=Gt(e);r=Me(t)}else r=Me(e);if(r<t)throw Re("Derived constructor created TypedArray object which was too small length")}if(nt(e))throw Re(d)}function Gt(e){const t=He(At,e);if(void 0!==t){if(Tt(be(t)))throw Re(c);return t}const n=e.buffer;if(Tt(n))throw Re(c);const r=v(Rt,[n,e.byteOffset,e.length],e.constructor);return He(At,r)}function Nt(e){const t=Me(e),n=[];for(let r=0;r<t;++r)n[r]=bt(e[r]);return n}const zt=new Ve;for(const e of S(ce)){if(e===L)continue;const t=b(ce,e);H(t,"get")&&"function"==typeof t.get&&Oe(zt,t.get)}const Lt=O({get:(e,t,n)=>st(t)&&H(e,t)?bt(x(e,t)):Ie(zt,q(e,t))?x(e,t):x(e,t,n),set:(e,t,n,r)=>st(t)&&H(e,t)?T(e,t,wt(n)):T(e,t,n,r),getOwnPropertyDescriptor(e,t){if(st(t)&&H(e,t)){const n=b(e,t);return n.value=bt(n.value),n}return b(e,t)},defineProperty:(e,t,n)=>st(t)&&H(e,t)&&H(n,"value")?(n.value=wt(n.value),y(e,t,n)):y(e,t,n)});class Rt{constructor(e,t,n){let r;if(Et(e))r=v(Pe,[Gt(e)],new.target);else if(!Je(e)||(function(e){try{return!j(e)&&(se(e),!0)}catch(e){return!1}}(i=e)||rt(i)))r=v(Pe,arguments,new.target);else{let t,n;if(tt(e)){if(t=e,n=Me(e),Tt(be(e)))throw Re(c);if(nt(e))throw Re(d);const i=new te(2*n);r=v(Pe,[i],new.target)}else{const i=e[N];if(null!=i&&"function"!=typeof i)throw Re(p);null!=i?it(e)?(t=e,n=e.length):(t=[...e],n=t.length):(t=e,n=Mt(t.length)),r=v(Pe,[n],new.target)}for(let e=0;e<n;++e)r[e]=wt(t[e])}var i;const s=new A(r,Lt);return je(At,s,r),s}static from(e,...t){const n=this;if(!M(n,at))throw Re(u);if(n===Rt){if(Et(e)&&0===t.length){const t=Gt(e),n=new Pe(be(t),ke(t),Me(t));return new Rt(be(ye(n)))}if(0===t.length)return new Rt(be(Ae(e,wt)));const n=t[0],r=t[1];return new Rt(be(Ae(e,(function(e,...t){return wt(w(n,this,[e,...We(t)]))}),r)))}let r,i;const s=e[N];if(null!=s&&"function"!=typeof s)throw Re(p);if(null!=s)it(e)?(r=e,i=e.length):tt(a=e)&&a[N]===he&&Be.next===Ge?(r=e,i=Me(e)):(r=[...e],i=r.length);else{if(null==e)throw Re(h);r=U(e),i=Mt(r.length)}var a;const o=new n(i);if(0===t.length)for(let e=0;e<i;++e)o[e]=r[e];else{const e=t[0],n=t[1];for(let t=0;t<i;++t)o[t]=w(e,n,[r[t],t])}return o}static of(...e){const t=this;if(!M(t,at))throw Re(u);const n=e.length;if(t===Rt){const t=new Rt(n),r=Gt(t);for(let t=0;t<n;++t)r[t]=wt(e[t]);return t}const r=new t(n);for(let t=0;t<n;++t)r[t]=e[t];return r}keys(){Ct(this);const e=Gt(this);return de(e)}values(){Ct(this);const e=Gt(this);return Ze(function*(){for(const t of pe(e))yield bt(t)}())}entries(){Ct(this);const e=Gt(this);return Ze(function*(){for(const[t,n]of fe(e))yield[t,bt(n)]}())}at(e){Ct(this);const t=Gt(this),n=Me(t),r=kt(e),i=r>=0?r:n+r;if(!(i<0||i>=n))return bt(t[i])}with(e,t){Ct(this);const n=Gt(this),r=Me(n),i=kt(e),s=i>=0?i:r+i,a=+t;if(s<0||s>=r)throw Ue(m);const o=new Pe(be(n),ke(n),Me(n)),u=new Rt(be(ye(o)));return Gt(u)[s]=wt(a),u}map(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0],s=St(n,Rt);if(s===Rt){const t=new Rt(r),s=Gt(t);for(let t=0;t<r;++t){const r=bt(n[t]);s[t]=wt(w(e,i,[r,t,this]))}return t}const a=new s(r);Bt(a,r);for(let t=0;t<r;++t){const r=bt(n[t]);a[t]=w(e,i,[r,t,this])}return a}filter(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0],s=[];for(let t=0;t<r;++t){const r=bt(n[t]);w(e,i,[r,t,this])&&W(s,r)}const a=new(St(n,Rt))(s);return Bt(a),a}reduce(e,...t){Ct(this);const n=Gt(this),r=Me(n);if(0===r&&0===t.length)throw Re(f);let i,s;0===t.length?(i=bt(n[0]),s=1):(i=t[0],s=0);for(let t=s;t<r;++t)i=e(i,bt(n[t]),t,this);return i}reduceRight(e,...t){Ct(this);const n=Gt(this),r=Me(n);if(0===r&&0===t.length)throw Re(f);let i,s;0===t.length?(i=bt(n[r-1]),s=r-2):(i=t[0],s=r-1);for(let t=s;t>=0;--t)i=e(i,bt(n[t]),t,this);return i}forEach(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=0;t<r;++t)w(e,i,[bt(n[t]),t,this])}find(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=0;t<r;++t){const r=bt(n[t]);if(w(e,i,[r,t,this]))return r}}findIndex(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=0;t<r;++t){const r=bt(n[t]);if(w(e,i,[r,t,this]))return t}return-1}findLast(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=r-1;t>=0;--t){const r=bt(n[t]);if(w(e,i,[r,t,this]))return r}}findLastIndex(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=r-1;t>=0;--t){const r=bt(n[t]);if(w(e,i,[r,t,this]))return t}return-1}every(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=0;t<r;++t)if(!w(e,i,[bt(n[t]),t,this]))return!1;return!0}some(e,...t){Ct(this);const n=Gt(this),r=Me(n),i=t[0];for(let t=0;t<r;++t)if(w(e,i,[bt(n[t]),t,this]))return!0;return!1}set(e,...t){Ct(this);const n=Gt(this),r=kt(t[0]);if(r<0)throw Ue(m);if(null==e)throw Re(h);if(nt(e))throw Re(d);if(Et(e))return me(Gt(this),Gt(e),r);if(tt(e)&&Tt(be(e)))throw Re(c);const i=Me(n),s=U(e),a=Mt(s.length);if(r===1/0||a+r>i)throw Ue(m);for(let e=0;e<a;++e)n[e+r]=wt(s[e])}reverse(){Ct(this);const e=Gt(this);return ge(e),this}toReversed(){Ct(this);const e=Gt(this),t=new Pe(be(e),ke(e),Me(e)),n=new Rt(be(ye(t))),r=Gt(n);return ge(r),n}fill(e,...t){Ct(this);const n=Gt(this);return _e(n,wt(e),...We(t)),this}copyWithin(e,t,...n){Ct(this);const r=Gt(this);return we(r,e,t,...We(n)),this}sort(e){Ct(this);const t=Gt(this),n=void 0!==e?e:Pt;return ve(t,((e,t)=>n(bt(e),bt(t)))),this}toSorted(e){Ct(this);const t=Gt(this);if(void 0!==e&&"function"!=typeof e)throw new Re("The comparison function must be either a function or undefined");const n=void 0!==e?e:Pt,r=new Pe(be(t),ke(t),Me(t)),i=new Rt(be(ye(r))),s=Gt(i);return ve(s,((e,t)=>n(bt(e),bt(t)))),i}slice(e,t){Ct(this);const n=Gt(this),r=St(n,Rt);if(r===Rt){const r=new Pe(be(n),ke(n),Me(n));return new Rt(be(ye(r,e,t)))}const i=Me(n),s=kt(e),a=void 0===t?i:kt(t);let o,u;o=s===-1/0?0:s<0?i+s>0?i+s:0:i<s?i:s,u=a===-1/0?0:a<0?i+a>0?i+a:0:i<a?i:a;const l=u-o>0?u-o:0,h=new r(l);if(Bt(h,l),0===l)return h;if(Tt(be(n)))throw Re(c);let d=0;for(;o<u;)h[d]=bt(n[o]),++o,++d;return h}subarray(e,t){Ct(this);const n=Gt(this),r=St(n,Rt),i=new Pe(be(n),ke(n),Me(n)),s=xe(i,e,t),a=new r(be(s),ke(s),Me(s));return Bt(a),a}indexOf(e,...t){Ct(this);const n=Gt(this),r=Me(n);let i=kt(t[0]);if(i===1/0)return-1;i<0&&(i+=r,i<0&&(i=0));for(let t=i;t<r;++t)if(H(n,t)&&bt(n[t])===e)return t;return-1}lastIndexOf(e,...t){Ct(this);const n=Gt(this),r=Me(n);let i=t.length>=1?kt(t[0]):r-1;if(i===-1/0)return-1;i>=0?i=i<r-1?i:r-1:i+=r;for(let t=i;t>=0;--t)if(H(n,t)&&bt(n[t])===e)return t;return-1}includes(e,...t){Ct(this);const n=Gt(this),r=Me(n);let i=kt(t[0]);if(i===1/0)return!1;i<0&&(i+=r,i<0&&(i=0));const s=G(e);for(let t=i;t<r;++t){const r=bt(n[t]);if(s&&G(r))return!0;if(r===e)return!0}return!1}join(e){Ct(this);const t=Nt(Gt(this));return Y(t,e)}toLocaleString(...e){Ct(this);const t=Nt(Gt(this));return K(t,...We(e))}get[L](){if(Et(this))return"Float16Array"}}F(Rt,"BYTES_PER_ELEMENT",{value:2}),F(Rt,at,{}),P(Rt,ue);const Ut=Rt.prototype;async function Vt(e,t){const n=await fetch(t),r=await n.arrayBuffer();return async function(e,t){const n=e.createTexture({size:[t.width,t.height],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),r=new Rt(t.width*t.height*4);let i=0;for(let e=0;e<t.data.length;e+=3)r[i+0]=t.data[e+0],r[i+1]=t.data[e+1],r[i+2]=t.data[e+2],r[i+3]=1,i+=4;return e.queue.writeTexture({texture:n},r.buffer,{bytesPerRow:8*t.width},{width:t.width,height:t.height}),await e.queue.onSubmittedWorkDone(),n}(e,function(e){const t={data:e,offset:0},n=function(e){let t=Ot(e);const n={colorCorr:[1,1,1],exposure:1,gamma:1,width:0,height:0,flipX:!1,flipY:!1};if("#?RADIANCE"!==t&&"#?RGBE"!==t)throw new Error("Incorrect file format!");for(;""!==t;){t=Ot(e);const r=t.split("=");switch(r[0]){case"GAMMA":n.gamma=parseFloat(r[1]);break;case"FORMAT":if("32-bit_rle_rgbe"!==r[1]&&"32-bit_rle_xyze"!==r[1])throw new Error("Incorrect encoding format!");break;case"EXPOSURE":n.exposure=parseFloat(r[1]);break;case"COLORCORR":n.colorCorr=r[1].replace(/^\s+|\s+$/g,"").split(" ").map((e=>parseFloat(e)))}}t=Ot(e);const r=t.split(" ");return Ft(r[0],parseInt(r[1]),n),Ft(r[2],parseInt(r[3]),n),n}(t);return{width:n.width,height:n.height,exposure:n.exposure,gamma:n.gamma,data:It(t,n)}}(new DataView(r)))}function Ft(e,t,n){switch(e){case"+X":n.width=t;break;case"-X":n.width=t,n.flipX=!0,console.warn("Flipping horizontal orientation not currently supported");break;case"-Y":n.height=t;break;case"+Y":n.height=t,n.flipY=!0}}function Ot(e){let t,n="";for(;10!==(t=e.data.getUint8(e.offset++));)n+=String.fromCharCode(t);return n}function It(e,t){let n;if(514!==e.data.getUint16(e.offset))throw new Error("Obsolete HDR file version!");return n=function(e,t){const{width:n,height:r,colorCorr:i}=t,s=new Float32Array(n*r*3);let a=0,{offset:o,data:u}=e;for(let e=0;e<r;++e){if(514!==u.getUint16(o))throw new Error("Incorrect scanline start hash");if(u.getUint16(o+2)!==n)throw new Error("Scanline doesn't match picture dimension!");o+=4;const e=4*n,t=[];let r=0;for(;r<e;){let e=u.getUint8(o++);if(e>128){const n=e-128;e=u.getUint8(o++);for(let i=0;i<n;++i)t[r++]=e}else for(let n=0;n<e;++n)t[r++]=u.getUint8(o++)}for(r=0;r<n;++r){const e=t[r],o=t[r+n],u=t[r+2*n];let l=t[r+3*n];l=l?Math.pow(2,l-136):0,s[a++]=e*l*i[0],s[a++]=o*l*i[1],s[a++]=u*l*i[2]}}return s}(e,t),t.flipX&&function(e,t){const{width:n,height:r}=t,i=n>>1;for(let t=0;t<r;++t){const r=t*n;for(let t=0;t<i;++t)Dt(e,r+t,r+n-1-t)}}(n,t),t.flipY&&function(e,t){const{width:n,height:r}=t,i=r>>1;for(let t=0;t<i;++t){const i=t*n,s=(r-1-t)*n;for(let t=0;t<n;++t)Dt(e,i+t,s+t)}}(n,t),n}function Dt(e,t,n){t*=3,n*=3;for(let r=0;r<3;++r){const i=e[t+r];e[t+r]=e[n+r],e[n+r]=i}}F(Ut,"BYTES_PER_ELEMENT",{value:2}),F(Ut,N,{value:Ut.values,writable:!0,configurable:!0}),P(Ut,ce);const qt="//#include ./pbr_functions.wgsl\n\n//shader renders one part of the split sum approximation for the following roughness level\noverride roughness : f32 = 1.0;\n//mode 1 expects mipmaps on the given cubemap and uses them to compensate for insufficient rays\noverride mode = 0;\noverride SAMPLE_COUNT = 1024u;\n//resolution of source cubemap\noverride resolution : f32 = 1024.0;\n\n@group(0) @binding(1) var sourceTexture : texture_cube < f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@location(0) WorldPos : vec4f) -> @location(0) vec4f\n{\n    let N = normalize(WorldPos.xyz);\n\n    //make the simplifying assumption that V equals R equals the normal\n    let R = N;\n    let V = R;\n\n    var prefilteredColor = vec3(0.0);\n    var totalWeight = 0.0;\n\n    for(var i = 0u; i < SAMPLE_COUNT; i++)\n    {\n        //generates a sample vector that's biased towards the preferred alignment direction (importance sampling).\n        let Xi = Hammersley(i, SAMPLE_COUNT);\n        let H = ImportanceSampleGGX(Xi, N, roughness);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NdotL = max(dot(N, L), 0.0);\n        //dunno why i have to invert L but it looks correct in the renders\n        let corr_L = L * vec3f(1, 1, -1);\n        //only sample value if NdotL > 0 and choose method\n        prefilteredColor += select(vec3(0.0), select(modeOne(corr_L), modeTwo(corr_L, N, H, V, roughness), mode==1) * NdotL, NdotL > 0.0);\n        totalWeight += select(0.0, NdotL, NdotL > 0.0);\n    }\n\n    prefilteredColor = prefilteredColor / totalWeight;\n\n    return vec4(prefilteredColor, 1.0);\n}\n\nfn modeOne(L : vec3f) -> vec3f\n{\n    return textureSample(sourceTexture, textureSampler, L).xyz;\n}\n\n//sampling from mip map\nfn modeTwo(L : vec3f, N : vec3f, H : vec3f, V : vec3f, roughness : f32) -> vec3f\n{\n    //sample from the environment's mip level based on roughness/pdf\n    let D = DistributionGGX(N, H, roughness);\n    let NdotH = max(dot(N, H), 0.0);\n    let HdotV = max(dot(H, V), 0.0);\n    let pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n\n    let saTexel = 4.0 * PI / (6.0 * resolution * resolution);\n    let saSample = 1.0 / (f32(SAMPLE_COUNT) * pdf + 0.0001);\n\n    let mipLevel = select(0.5 * log2(saSample / saTexel), 0.0, roughness == 0.0);\n\n    return textureSampleLevel(sourceTexture, textureSampler, L, mipLevel).xyz;\n}\n"+a;async function Ht(e,t,n,r=!1,i){if("2d"!=t.dimension||1!=t.depthOrArrayLayers)throw new Error("GPUTexture has wrong dimension");let s=Math.round(Math.log2(t.height/2));return $t(e,t,n=n??Math.pow(2,s),r?"cube_mips":"cube",i)}async function $t(e,t,n,a,o){o=o??t.format;const u=t.width,l=Math.min(1+Math.floor(Math.log2(u)),5),c="pre-filter"==a||"cube_mips"==a?l:1,h="cube"==a||"cube_mips"==a?t.createView():t.createView({dimension:"cube"}),d="cube"==a||"cube_mips"==a?"2d":"cube";let p="cube"==a||"cube_mips"==a?Yt:"irradiance"==a?Wt:qt;const f=1==t.mipLevelCount?0:1;let m="pre-filter"==a?{mode:f,resolution:u,roughness:1}:void 0,g=e.createTexture({size:[n,n,6],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,format:o,mipLevelCount:c}),_=e.createBuffer({size:s.zS.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(_,0,s.zS);let w=i._E.perspective(Math.PI/2,1,.1,10),v=[i._E.lookAt([0,0,0],[1,0,0],[0,1,0]),i._E.lookAt([0,0,0],[-1,0,0],[0,1,0]),i._E.lookAt([0,0,0],[0,1,0],[0,0,1]),i._E.lookAt([0,0,0],[0,-1,0],[0,0,-1]),i._E.lookAt([0,0,0],[0,0,-1],[0,1,0]),i._E.lookAt([0,0,0],[0,0,1],[0,1,0])],y=e.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),x=e.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:32,maxAnisotropy:16});const b=t=>e.createBindGroup({label:"texture builder binding group",layout:t.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:y}},{binding:1,resource:h},{binding:2,resource:x}]}),k="pre-filter"==a?c:1;for(let t=0;t<k;t++)for(let n=0;n<6;n++){let r={colorAttachments:[{view:g.createView({dimension:"2d",baseArrayLayer:n,arrayLayerCount:1,mipLevelCount:1,baseMipLevel:t}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]};e.queue.writeBuffer(y,0,i._E.multiply(w,v[n]));let a=e.createCommandEncoder(),u=a.beginRenderPass(r);u.setVertexBuffer(0,_),m&&(m.roughness=t/(c-1));let l=await jt(e,o,d,p,m);u.setPipeline(l);let h=b(l);u.setBindGroup(0,h),u.draw(s.MO),u.end(),e.queue.submit([a.finish()])}return"cube_mips"==a&&(0,r.zd)(e,g),g}async function jt(e,t,n,r,i){let a=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:n}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}}],o=e.createBindGroupLayout({entries:a}),u=e.createPipelineLayout({bindGroupLayouts:[o]});return e.createRenderPipeline({layout:u,vertex:{module:e.createShaderModule({label:"texture builder",code:Xt}),entryPoint:"vertexMain",buffers:[{arrayStride:s.O$,attributes:[{shaderLocation:0,offset:s.v8,format:"float32x4"},{shaderLocation:1,offset:s.Ax,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({label:"texture builder",code:r}),entryPoint:"fragmentMain",targets:[{format:t}],constants:i},primitive:{topology:"triangle-list"}})}const Xt="\nstruct Uniforms\n{\n    vp : mat4x4f,\n}\n\nstruct VertexOut\n{\n    @builtin(position) position : vec4f,\n    @location(0) viewDir: vec4f,\n}\n\n@group(0) @binding(0) var<uniform> uni : Uniforms;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> VertexOut\n{\n    return VertexOut(uni.vp * position, position);\n}\n",Yt="\n@group(0) @binding(1) var sourceTexture : texture_2d<f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@builtin(position) position : vec4f, @location(0) viewDir : vec4f) ->  @location(0) vec4f\n{\n    const PI = 3.14159265359; \n    const invPI = 1.0/vec2f(2*PI, PI);\n    let v = normalize(viewDir.xyz);\n    var uv = vec2(atan2(v.z, v.x), acos(v.y)) * invPI;    \n    \n    // flipping left and right otherwise the environment map renderer gets it wrong\n    return textureSample(sourceTexture, textureSampler, vec2f(1,0) + vec2f(-1,1) * uv);\n}\n",Wt="\n@group(0) @binding(1) var sourceTexture : texture_cube<f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@location(0) worldPos : vec4f) ->  @location(0) vec4f\n{\n    const PI = 3.14159265359;\n    let N = normalize(worldPos.xyz);\n    var irradiance = vec3f(0.0);  \n\n    var up    = vec3f(0.0, 1.0, 0.0);\n    let right = normalize(cross(up, N));\n    up        = normalize(cross(N, right));\n    \n    let sampleDelta = 0.025;\n    var nrSamples = 0.0; \n    for(var phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)\n    {\n        for(var theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)\n        {\n            // spherical to cartesian (in tangent space)\n            let tangentSample = vec3f(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\n            // tangent space to world\n            let sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;     \n            // testing shows that sampleVec needs to be inversed\n            irradiance += textureSample(sourceTexture, textureSampler, sampleVec * vec3f(1, 1, -1)).xyz * cos(theta) * sin(theta);\n            nrSamples += 1;\n        }\n    }\n    irradiance = PI * irradiance * (1.0 / nrSamples);\n\n    return vec4f(irradiance,1);\n}\n";var Kt=n(914);class Qt{flatTextureMap=null;get prefEnvMapMipLevelCount(){return this._prefilteredMap?.mipLevelCount??0}_cubeMap=null;get cubeMap(){if(!this._cubeMap)throw new Error("cubeMap map texture wasn't loaded");return this._cubeMap}_irradianceMap=null;get irradianceMap(){if(!this._irradianceMap)throw new Error("irradianceMap map texture wasn't loaded");return this._irradianceMap}_prefilteredMap=null;get prefilteredMap(){if(!this._prefilteredMap)throw new Error("prefilterede environment map texture wasn't loaded");return this._prefilteredMap}_brdfMap=null;get brdfMap(){if(!this._brdfMap)throw new Error("brdf map texture wasn't loaded");return this._brdfMap}urls;isHdr=!1;constructor(e){if(this.urls="string"==typeof e?[e]:e,1!=this.urls.length&&6!=this.urls.length)throw new Error("input needs to be a single equirectangular map or six images");this.isHdr=this.urls[0].toLowerCase().endsWith(".hdr")}async loadAsync(e){this.flatTextureMap=new Kt.x(this.isHdr?await Vt(e,this.urls[0]):await(0,r.WK)(e,this.urls[0]));let t=6!=this.urls.length?await Ht(e,this.flatTextureMap.gpuTexture):await async function(e,t,n,i,s){if(1!=(t="string"==typeof t?[t]:t).length&&6!=t.length)throw new Error("input needs to be a single equirectangular map or six images");return 6==t.length?await(0,r.Pk)(e,t,{mips:i}):Ht(e,t[0].toLowerCase().endsWith(".hdr")?await Vt(e,t[0]):await(0,r.WK)(e,t[0],{usage:GPUTextureUsage.COPY_SRC,format:void 0}),void 0,i)}(e,this.urls);this._cubeMap=new Kt.x(t),this._irradianceMap=new Kt.x(await async function(e,t,n=1024){if("2d"!=t.dimension||6!=t.depthOrArrayLayers)throw new Error("texture isn't a cubemap aka 6 layered 2d texture array");return $t(e,t,n,"irradiance")}(e,t)),this._prefilteredMap=new Kt.x(await async function(e,t,n=128){if("2d"!=t.dimension||6!=t.depthOrArrayLayers)throw new Error("texture isn't a cubemap aka 6 layered 2d texture array");return $t(e,t,n,"pre-filter")}(e,t)),this._brdfMap=new Kt.x(await async function(e,t=512){return async function(e,t=128){const n="rgba8unorm",r=new Float32Array([-1,1,0,0,0,-1,-1,0,0,1,1,1,0,1,0,1,-1,0,1,1]);let i=e.createBuffer({size:r.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(i,0,r);let s=e.createTexture({size:[t,t,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,format:n});const a=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({label:"brdf texture builder",code:o}),entryPoint:"vertexBrdf",buffers:[{arrayStride:20,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({label:"brdf texture builder",code:o}),entryPoint:"fragmentBrdf",targets:[{format:n}]},primitive:{topology:"triangle-strip"}}),u=e.createCommandEncoder(),l=u.beginRenderPass({colorAttachments:[{view:s.createView({}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});return l.setPipeline(a),l.setVertexBuffer(0,i),l.draw(4),l.end(),e.queue.submit([u.finish(l)]),s}(e,t)}(e))}}},877:(e,t,n)=>{n.d(t,{_:()=>s,v:()=>r});var r,i=n(416);!function(e){e[e.Direct=0]="Direct",e[e.Point=1]="Point",e[e.Target=2]="Target"}(r||(r={}));class s{isOn=!0;intensity=1;type=r.Point;ambientColor=[.2,.2,.2,0];diffuseColor=[.5,.5,.5,0];specularColor=[.8,.8,.8,0];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;useFalloff=!1;coneAngleDeg=72;get position(){return this._position}set position(e){this._position=e,this.type==r.Target&&(this._direction=i.R3.subtract(this._target,this._position))}_position=[0,30,0];get direction(){return this._direction}set direction(e){this._direction=e,this.type==r.Target?this._target=i.R3.add(this._position,this._direction):this.type==r.Direct&&(this._position=i.R3.mulScalar(i.R3.normalize(this._direction),-100))}_direction=[0,-1,0];get target(){return this._target}set target(e){this._target=e,this.type==r.Target&&(this._direction=i.R3.sub(this._target,this.position))}_target=[0,0,0];constructor(e){if(e)switch(this.type=e.type??this.type,this._position=e.position??this._position,this._direction=e.direction??this._direction,this._target=e.target??this._target,this.ambientColor=e.ambientColor??this.ambientColor,this.diffuseColor=e.diffuseColor??this.diffuseColor,this.specularColor=e.specularColor??this.specularColor,this.intensity=e.intensity??this.intensity,this.useFalloff=e.useFalloff??this.useFalloff,this._renderShadowMap=e.renderShadowMap??!0,this.coneAngleDeg=e.coneAngleDeg??this.coneAngleDeg,this.type){case r.Direct:this.direction=this.direction;break;case r.Target:!e.target&&e.direction?this.direction=this.direction:this.target=this.target}}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}getBytes(){return new Float32Array([this.type,this.useFalloff?1:0,this.shadowMap&&this.showShadows?this.shadowMap.id:-1,Math.cos(this.coneAngleDeg/360*Math.PI),...this._position,0,...this._direction,0,...this.disableAmbientColor||!this.isOn?[0,0,0,1]:i.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor||!this.isOn?[0,0,0,1]:i.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor||!this.isOn?[0,0,0,1]:i.vh.mulScalar(this.specularColor,this.intensity),...this.shadowMap?this.shadowMap.light_mat:this.dummy])}showShadows=!0;get renderShadowMap(){return this.type!=r.Point&&this._renderShadowMap}_renderShadowMap=!0;shadowMap;dummy=i._E.create();get byteLength(){return Math.max(this.getBytes().byteLength,80)}writeToGpu(e){const t=this.getBytes();this._gpuBuffer||(this._gpuBuffer=e.createBuffer({label:"direct light",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._gpuBuffer,0,t)}}},18:(e,t,n)=>{n.d(t,{O:()=>a});var r,i=n(453),s=n(777);!function(e){e[e.Default=0]="Default",e[e.SolidColor=1]="SolidColor",e[e.VertexNormal=2]="VertexNormal"}(r||(r={}));class a{get hasNormalMap(){return!!this.normalMapPath}mode=r.Default;reflectivness=0;tiling={u:1,v:1};ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(e){e&&(this.mode=e.mode??this.mode,this.reflectivness=e.reflectivness??this.reflectivness,this.diffuseColor=e.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=e.specularColor??this.specularColor,this.shininess=e.shininess??this.shininess,this.diffuseMapPath=e.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=e.specularMapPath??this.specularMapPath,this.normalMapPath=e.normalMapPath??this.normalMapPath,this.tiling=e.tiling??this.tiling,this.disableNormalMap=e.disableNormalMap??this.disableNormalMap)}static solidColor(e){return new a({mode:r.SolidColor,diffuseColor:e})}getBytes(){return new Float32Array([this.mode,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v,...this.ambientColor,...this.specularColor,this.shininess,this.reflectivness,0,0])}writeToGpu(e){const t=this.getBytes();this._gpuBuffer||(this._gpuBuffer=e.createBuffer({label:"material",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._gpuBuffer,0,t)}async writeTexturesToGpuAsync(e,t){const n=this.ambientMapPath?(0,i.WK)(e,this.ambientMapPath,{mips:t}):Promise.resolve((0,s.Rw)(e,this.ambientColor)),r=this.diffuseMapPath?(0,i.WK)(e,this.diffuseMapPath,{mips:t}):Promise.resolve((0,s.Rw)(e,this.diffuseColor)),a=this.specularMapPath?(0,i.WK)(e,this.specularMapPath,{mips:t}):Promise.resolve((0,s.Rw)(e,this.specularColor)),o=this.normalMapPath?(0,i.WK)(e,this.normalMapPath,{mips:t}):Promise.resolve((0,s.Rw)(e,[0,0,1,1]));[this._ambientTexture,this._diffuseTexture,this._specularTexture,this._normalTexture]=await Promise.all([n,r,a,o])}}},322:(e,t,n)=>{n.d(t,{C:()=>s,p:()=>i});var r=n(777);class i{get hasNormalMap(){return!!this.normalMapPath}ambientOcclussion=1;albedo=.3;metallic=.1;roughness=.3;normalMapPath=null;tiling={u:1,v:1};disableNormalMap=!1;constructor(e){e&&(this.ambientOcclussion=e.ambientOcclussion??this.ambientOcclussion,this.albedo=e.albedo??this.albedo,this.metallic=e.metallic??this.metallic,this.roughness=e.roughness??this.roughness,this.normalMapPath=e.normalMapPath??this.normalMapPath,this.tiling=e.tiling??this.tiling,this.disableNormalMap=e.disableNormalMap??this.disableNormalMap)}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_albedoTexture=null;get albedoTexture(){if(!this._albedoTexture)throw new Error("albedo texture wasn't loaded");return this._albedoTexture}_ambientOcclussionTexture=null;get ambientOcclussionTexture(){if(!this._ambientOcclussionTexture)throw new Error("ambient occlussion texture wasn't loaded");return this._ambientOcclussionTexture}_metalTexture=null;get metalTexture(){if(!this._metalTexture)throw new Error("specular texture wasn't loaded");return this._metalTexture}_roughnessTexture=null;get roughnessTexture(){if(!this._roughnessTexture)throw new Error("normal texture wasn't loaded");return this._roughnessTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}getBytes(){return new Float32Array([0,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v])}writeToGpu(e){const t=this.getBytes();this._gpuBuffer||(this._gpuBuffer=e.createBuffer({label:"pbr material",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._gpuBuffer,0,t)}async writeTexturesToGpuAsync(e,t){if(this._ambientOcclussionTexture)return;const n="rgba8unorm",i=(0,r.cU)(e,this.ambientOcclussion,t,n),s=(0,r.cU)(e,this.albedo,t,"rgba8unorm-srgb"),a=(0,r.cU)(e,this.metallic,t,n),o=(0,r.cU)(e,this.roughness,t,n),u=(0,r.cU)(e,this.normalMapPath?this.normalMapPath:[0,0,1,1],t,n);[this._ambientOcclussionTexture,this._albedoTexture,this._metalTexture,this._roughnessTexture,this._normalTexture]=await Promise.all([i,s,a,o,u])}}function s(e,t=!1,n="png"){return new i({ambientOcclussion:t?e+`ao.${n}`:1,albedo:e+`albedo.${n}`,metallic:e+`metallic.${n}`,roughness:e+`roughness.${n}`,normalMapPath:e+`normal.${n}`})}},738:(e,t,n)=>{n.d(t,{QG:()=>a,dV:()=>s,k4:()=>i});var r=n(416);function i(e){let t=[0,0,0],n=[0,0,0];for(let i of e)r.R3.min(t,i.min,t),r.R3.max(n,i.max,n);return{min:t,max:n}}function s(e,t){const n=r.R3.clone(e.min),i=r.R3.clone(e.max),s=[r.R3.fromValues(n[0],n[1],n[2]),r.R3.fromValues(n[0],n[1],i[2]),r.R3.fromValues(n[0],i[1],n[2]),r.R3.fromValues(n[0],i[1],i[2]),r.R3.fromValues(i[0],n[1],n[2]),r.R3.fromValues(i[0],n[1],i[2]),r.R3.fromValues(i[0],i[1],n[2]),r.R3.fromValues(i[0],i[1],i[2])];for(const e of s)r.R3.transformMat4(e,t,e);const a=function(e){const t=r.R3.clone(e[0]),n=r.R3.clone(e[0]);for(const i of e)r.R3.min(t,i,t),r.R3.max(n,i,n);return{min:t,max:n}}(s);return a}function a(e){const t=r.R3.create();return r.R3.add(e.min,e.max,t),r.R3.scale(t,.5,t),t}},403:(e,t,n)=>{n.d(t,{I:()=>r});class r{static getNewId(){return r.ID++}static ID=0;id=0;label;get device(){return this._device}_device=null;get buffer(){if(this._buffer)return this._buffer;throw new Error(`Buffer wasn't initialized. ${this.label}`)}_buffer;_usage=GPUBufferUsage.UNIFORM;_size=-1;constructor(e){this.id=r.getNewId(),this.label=e}calcSize(e){return Array.isArray(e)?Math.max(e.length*(e.length>0?e[0].byteLength:0),256):e.byteLength}initBuffer(e){this._device=e;const t={label:`${this.label}`,size:this._size,usage:this._usage|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(t)}}},914:(e,t,n)=>{n.d(t,{s:()=>i,x:()=>r});class r{gpuTexture;sampleType;label;constructor(e,t="float",n){this.gpuTexture=e,this.sampleType=t,this.label=n}get format(){return this.gpuTexture.format}get mipLevelCount(){return this.gpuTexture.mipLevelCount}is16bit(){return"rgba16float"==this.gpuTexture.format}isDepth(){return"depth"==this.sampleType}get viewDimension(){return this.getViewDimension()}is2d(){return 1==this.gpuTexture.depthOrArrayLayers&&"2d"==this.gpuTexture.dimension}is2dArray(){return this.gpuTexture.depthOrArrayLayers>1&&"2d"==this.gpuTexture.dimension}createGpuView(){return this.gpuTexture.createView()}createGpuCubeView(){return this.gpuTexture.createView({dimension:"cube"})}createMipView(e){return new i(this.gpuTexture.createView({mipLevelCount:1,baseMipLevel:e}),this.sampleType,this.getViewDimension(),this.gpuTexture.depthOrArrayLayers,this.format)}createView(){let e=this.getViewDimension();return new i(this.gpuTexture.createView({dimension:e}),this.sampleType,e,this.gpuTexture.depthOrArrayLayers,this.format)}getViewDimension(){if(this.is2d())return"2d";if(this.is2dArray())return"2d-array";throw new Error("Can't determine resulting ViewDimension for GpuTexture.")}}class i{view;sampleType;viewDimension;layerCount;format;label;constructor(e,t,n,r,i,s){this.view=e,this.sampleType=t,this.viewDimension=n,this.layerCount=r,this.format=i,this.label=s}is16bit(){return"rgba16float"==this.format}isDepth(){return"depth"==this.sampleType}is2d(){return"2d"==this.viewDimension}is2dArray(){return"2d-array"==this.viewDimension}isCube(){return"cube"==this.viewDimension}}},231:(e,t,n)=>{n.d(t,{Q:()=>i});var r=n(403);class i extends r.I{vertices;vertexCount;vertexBufferLayout;topology;constructor(e,t,n,r,i){super(i),this.vertices=e,this.vertexCount=t,this.vertexBufferLayout=n,this.topology=r}writeToGpu(e){this._device=e;const t={label:`${this.label}`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(t),e.queue.writeBuffer(this._buffer,0,this.vertices,0)}}},878:(e,t,n)=>{n.d(t,{x:()=>s});var r=n(218),i=n(877);class s{isAnimated=!0;camera=new r.t;lights=[new i._];models=[];environmentMap;constructor(e){e&&(this.isAnimated=e.isAnimated??!0,this.camera=e.camera??this.camera)}update(e){}}},838:(e,t,n)=>{n.d(t,{EI:()=>u,GL:()=>r,Gz:()=>l,_W:()=>a,ug:()=>o,v:()=>s,wy:()=>i});const r=window.location.pathname;function i(e){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t.style.margin=e?.margin??"",t}function s(e){const t=document.createElement("div");return e&&(t.id=e),t.style.display="flex",t.style.gap="10px",t}function a(e,t){e.innerHTML=`<h4 style="margin:5px">${t}</h4>`}function o(e,t,n,r=!0){let[i,s]=function(e,t=!0){const n=document.createElement("input");n.type="checkbox",n.id=e,n.name=n.id,n.checked=t;const r=document.createElement("label");return r.htmlFor=n.id,r.textContent=n.id,[n,r]}(t,r);return e.appendChild(i),e.appendChild(s),i.addEventListener("change",(()=>n(i))),i}function u(e,t,n,r,i=0){let s,a=document.createElement("select");a.setAttribute("size","7"),s="number"==typeof i?i:Math.max(0,[...t].indexOf(i));for(const[e,r]of[...t].entries()){const t=document.createElement("option");t.value=e.toString(),t.text=n(r)??e.toString(),a.appendChild(t)}a.value=s.toString(),a.addEventListener("change",(()=>{const e=parseInt(a.value);s!==e&&(s=e,r(s))})),e.appendChild(a)}function l(e,t=0,n=100,r,i=1,s){const a=new c(t,n,r,i,s);return e.appendChild(a.element),a}class c{el;_value;min;max;step;callbacks=[];constructor(e=0,t=100,n,r=1,i){this.el=document.createElement("input"),this.el.type="number",this.el.style.width="50px",this._value=n,this.min=e,this.max=t,this.step=r,this.el.value=this.value.toString(),this.callbacks.push(i),this.el.addEventListener("change",(()=>{const e=parseInt(this.el.value);e>=this.min&&e<=this.max?(this._value=e,this.executeCallbacks()):this.el.value=this.value.toString()})),this.el.addEventListener("keydown",(e=>{"ArrowUp"===e.key&&this.value<this.max?(this._value+=this.step,this.el.value=this.value.toString(),this.executeCallbacks()):"ArrowDown"===e.key&&this.value>this.min&&(this._value-=this.step,this.el.value=this.value.toString(),this.executeCallbacks())}))}executeCallbacks(){this.callbacks.forEach((e=>e(this._value)))}get element(){return this.el}get value(){return this._value}}},777:(e,t,n)=>{n.d(t,{Rw:()=>i,cU:()=>s});var r=n(453);function i(e,t,n=1,r=1,i="rgba8unorm"){const s=n*r,a=new Uint8Array(4*s),[o,u,l,c]=t;for(let e=0;e<s;++e){const t=4*e;a[t]=255*o,a[t+1]=255*u,a[t+2]=255*l,a[t+3]=255*c}const h=e.createTexture({size:{width:n,height:r},format:i,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return e.queue.writeTexture({texture:h},a,{bytesPerRow:4*n,rowsPerImage:r},{width:n,height:r}),h}async function s(e,t,n=!0,s="rgba8unorm"){return"string"==typeof t?await(0,r.WK)(e,t,{mips:n,format:s}):i(e,"number"==typeof t?[t,t,t,1]:t,1,1,s)}},607:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(10),i=n(750),s=n(311),a=n(90),o=n(479),u=n(48),l=n(941),c=n(865),h=n(540),d=n(128);const e=[{name:"Pbr Samples",build:()=>new o.O},{name:"Pbr",build:()=>new u.O},{name:"Benchmark",build:()=>new d.z},{name:"Environment Map",build:()=>new s.c},{name:"Target Light",build:()=>new h.m},{name:"Shadow Map",build:()=>new l.R},{name:"Normal Map",build:()=>new a.N},{name:"Simple",build:()=>new c.O}],p=e[0],f=document.querySelector("canvas"),m=new r.D(p.build(),f);await m.run(),new i.h(m,f,e,p).refresh(),t()}catch(e){t(e)}}),1)},284:(e,t,n)=>{n.d(t,{Ax:()=>l,MO:()=>c,O$:()=>o,Vk:()=>a,nk:()=>r,qw:()=>i,sY:()=>s,v8:()=>u,zS:()=>h});const r="triangle-list",i=36,s={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1]),o=40,u=0,l=32,c=36,h=new Float32Array([1,-1,1,1,1,0,1,1,0,1,-1,-1,1,1,0,0,1,1,1,1,-1,-1,-1,1,0,0,0,1,1,0,1,-1,-1,1,1,0,0,1,0,0,1,-1,1,1,1,0,1,1,0,1,-1,-1,-1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,-1,1,1,1,0,1,1,1,1,1,-1,-1,1,1,0,0,1,1,0,1,1,-1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,-1,-1,1,1,0,0,1,1,0,-1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,0,-1,1,-1,1,0,1,0,1,0,0,-1,1,1,1,0,1,1,1,0,1,1,1,-1,1,1,1,0,1,1,0,-1,-1,1,1,0,0,1,1,0,1,-1,1,1,1,0,1,1,1,1,1,-1,1,-1,1,0,1,0,1,1,0,-1,-1,-1,1,0,0,0,1,0,0,-1,-1,1,1,0,0,1,1,0,1,-1,1,-1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,-1,1,1,1,0,1,1,1,1,1,-1,-1,1,1,0,0,1,1,1,0,-1,-1,1,1,0,0,1,1,1,0,1,-1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,-1,-1,1,1,0,0,1,0,1,-1,-1,-1,1,0,0,0,1,1,1,-1,1,-1,1,0,1,0,1,1,0,1,1,-1,1,1,1,0,1,0,0,1,-1,-1,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,1,0])},102:(e,t,n)=>{n.d(t,{z:()=>x,Y:()=>b,$R:()=>d,xE:()=>y});var r=n(416),i=n(738);class s{name;vertexBuffer;material;boundingBox;normalBuffer;get hasNormals(){return null!=this.normalBuffer}get transform(){return this._transform}_transform=r._E.identity();constructor(e,t,n,i,s=void 0,a=r._E.identity()){this.name=e,this.vertexBuffer=t,this.material=n,this.boundingBox=i,this.normalBuffer=s,this._transform=a}getBoundingBox(){return(0,i.dV)(this.boundingBox,this._transform)}translate(e,t,n){return r._E.translate(this._transform,[e,t,n],this._transform),this}rotate(e,t,n){return r._E.rotateX(this._transform,e/180*Math.PI,this._transform),r._E.rotateY(this._transform,t/180*Math.PI,this._transform),r._E.rotateZ(this._transform,n/180*Math.PI,this._transform),this}scale(e,t,n){return t&&n||(n=t=e),r._E.scale(this._transform,[e,t,n],this._transform),this}get position(){return[...this._transform].slice(12,15)}lerp(e,t){let n=this.position;const i=r.R3.lerp(n,e,t);r.R3.sub(i,n,n),this.translate(...n)}}var a=n(231),o=n(284);const u="triangle-list",l={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]};function c(e,t,n,i=[0,0,0]){let s=Math.sin(t*Math.PI/180),a=Math.cos(t*Math.PI/180);return r.R3.fromValues(e*a+i[0],n+i[1],-e*s+i[2])}var h=n(149);function d(e,t,n,r,i){let a=r?f(r,i,n):p??(p=f());return new s(e,a.vertexBuffer,t,a.bb,n?a.normalBuffer:void 0)}let p;function f(e=128,t=!0,n=!0){const i=6*e**2,s=function(e,t=!0,n=1,i=[50,50,50,0]){const s=function(e,t=!0,n=1){const i=[],s=[],a=[];for(let o=0;o<e;o++){const u=o/e*2*Math.PI,l=(o+1)/e*2*Math.PI;for(let c=0;c<e;c++){const h=c/e*Math.PI,d=(c+1)/e*Math.PI,p=[n*Math.sin(h)*Math.cos(u),n*Math.cos(h),-n*Math.sin(h)*Math.sin(u)],f=[n*Math.sin(h)*Math.cos(l),n*Math.cos(h),-n*Math.sin(h)*Math.sin(l)],m=[n*Math.sin(d)*Math.cos(l),n*Math.cos(d),-n*Math.sin(d)*Math.sin(l)],g=[n*Math.sin(d)*Math.cos(u),n*Math.cos(d),-n*Math.sin(d)*Math.sin(u)];i.push(...m,1,...f,1,...p,1),i.push(...p,1,...g,1,...m,1);const _=r.R3.normalize;if(t)s.push(..._(m),0,..._(f),0,..._(p),0),s.push(..._(p),0,..._(g),0,..._(m),0);else{let e=_(r.R3.mulScalar(r.R3.add(r.R3.add(m,f),p),1/3)),t=_(r.R3.mulScalar(r.R3.add(r.R3.add(p,g),m),1/3));s.push(...e,0,...e,0,...e,0),s.push(...t,0,...t,0,...t,0)}const w=o/e,v=(o+1)/e,y=c/e,x=(c+1)/e;a.push(v,x,v,y,w,y),a.push(w,y,w,x,v,x)}}return{vertices:i,normals:s,uvs:a}}(e,t,n);let a=s.vertices.length/4;const o=Array(a).fill([...i]).flat(),u=function(e,...t){if(e.length!=t.length)throw new RangeError("strides lenght has to equal the amount of datasets");let n=t[0].length/e[0];t.forEach(((t,r)=>{if(t.length!=n*e[r])throw new Error(`dataset ${r} has size ${t.length} but should have ${n*e[r]}`)}));const r=[];for(let i=0;i<n;i++)e.forEach(((e,n)=>{r.push(...t[n].slice(i*e,i*e+e))}));return r}([4,4,2,4],s.vertices,o,s.uvs,s.normals);return new Float32Array(u)}(e,t),u=new a.Q(s,i,o.sY,o.nk,"Sphere Vertex Data (default)");let l;if(n){const e=(0,h.P)(s,i);l=new a.Q(e,i,h.a,o.nk,"Sphere Normal Data (default)")}return{vertexBuffer:u,bb:{min:[-1,-1,-1],max:[1,1,1]},normalBuffer:l}}const m={min:[-1,-1,-1],max:[1,1,1]},g=new a.Q(o.Vk,o.qw,o.sY,o.nk,"Cube Vertex Data (default)"),_=(0,h.P)(o.Vk,o.qw),w=new a.Q(_,o.qw,h.a,o.nk,"Cube Normal Data (default)"),v={vertexBuffer:g,bb:m,normalBuffer:void 0};function y(){return v}function x(e,t,n=!0){return new s(e,g,t,m,n?w:void 0)}function b(e,t,n,r,i){let a=n?M(n,r,i):k??(k=M());return new s(e,a.vertexBuffer,t,a.bb,i?a.normalBuffer:void 0)}let k;function M(e=100,t=!0,n=!0){const[i,s,o]=[.7,1.5,3],d=24*e,p=function(e=30,t=!1,n=.7,i=1.5,s=3){if(e<3||n>=i)throw new RangeError("arguments not valid");e+=1;let a=[],o=s/2;const u=[0,0,0];for(let t=0;t<e;t++)a.push([c(i,360*t/(e-1),o,u),c(i,360*t/(e-1),-o,u),c(n,360*t/(e-1),-o,u),c(n,360*t/(e-1),o,u)]);let l,h,d,p,f,m,g,_,w=[],v=[],y=[];for(let o=0;o<e-1;o++){l=a[o][0],h=a[o][1],d=a[o][2],p=a[o][3],f=a[o+1][0],m=a[o+1][1],g=a[o+1][2],_=a[o+1][3],w.push(l[0],l[1],l[2],f[0],f[1],f[2],_[0],_[1],_[2],_[0],_[1],_[2],p[0],p[1],p[2],l[0],l[1],l[2],h[0],h[1],h[2],d[0],d[1],d[2],g[0],g[1],g[2],g[0],g[1],g[2],m[0],m[1],m[2],h[0],h[1],h[2],l[0],l[1],l[2],h[0],h[1],h[2],m[0],m[1],m[2],m[0],m[1],m[2],f[0],f[1],f[2],l[0],l[1],l[2],d[0],d[1],d[2],p[0],p[1],p[2],_[0],_[1],_[2],_[0],_[1],_[2],g[0],g[1],g[2],d[0],d[1],d[2]);let u=[l,f,_,_,p,l];for(let e of u){let t=[e[0],e[2]];t=r.K4.divScalar(t,i),t=r.K4.addScaled(r.K4.create(.5,.5),t,.5),y.push(t)}u=[h,d,g,g,m,h];for(let e of u){let t=[e[2],e[0]];t=r.K4.divScalar(t,i),t=r.K4.addScaled(r.K4.create(.5,.5),t,.5),y.push(t)}const c=t=>Math.sqrt(2*t*t*(1-Math.cos(2*Math.PI/e))),x=1*c(i)/s;let b=o*x,k=(o+1)*x;y.push([b,0]),y.push([b,1]),y.push([k,1]),y.push([k,1]),y.push([k,0]),y.push([b,0]);const M=1*c(n)/s;if(k=-o*M,b=-(o+1)*M,y.push([k,1]),y.push([k,0]),y.push([b,0]),y.push([b,0]),y.push([b,1]),y.push([k,1]),v.push(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0),t){let e=r.R3.normalize([l[0],0,l[2]]),t=r.R3.normalize([m[0],0,m[2]]),n=r.R3.mulScalar(e,-1),i=r.R3.mulScalar(t,-1);v.push(...e),v.push(...e),v.push(...t),v.push(...t),v.push(...t),v.push(...e),v.push(...n),v.push(...n),v.push(...i),v.push(...i),v.push(...i),v.push(...n)}else{let e=[l[0]-f[0],0,l[2]-f[2]],t=r.R3.normalize([e[2],0,-e[0]]),n=r.R3.mulScalar(t,-1);for(let e=0;e<6;e++)v.push(...t);for(let e=0;e<6;e++)v.push(...n)}}let x=[];for(let e=0;e<w.length;e+=3)x.push(...w.slice(e,e+3)),x.push(1,1,0,0,1),x.push(...y[e/3]),x.push(...v.slice(e,e+3)),x.push(1);return new Float32Array(x)}(e,t,i,s,o),f=new a.Q(p,d,l,u,"Cylinder Vertex Data (default)");let m;if(n){const e=(0,h.P)(p,d);m=new a.Q(e,d,h.a,u,"Cylinder Normal Data (default)")}return{vertexBuffer:f,bb:{min:[-1,-1,-1],max:[1,1,1]},normalBuffer:m}}},149:(e,t,n)=>{n.d(t,{P:()=>s,a:()=>i});var r=n(416);const i={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:4},{format:"float32x3",offset:12,shaderLocation:5}]};function s(e,t){const n=[],r=14,i=e=>[e.slice(0,3),e.slice(8,10)];for(let s=0;s<t;s++){const[t,o]=i(e.slice(s*r,(s+1)*r));s++;const[u,l]=i(e.slice(s*r,(s+1)*r));s++;const[c,h]=i(e.slice(s*r,(s+1)*r)),[d,p]=a(t,u,c,o,l,h);for(let e=0;e<3;e++)n.push(...d),n.push(...p)}return new Float32Array(n)}function a(e,t,n,i,s,a,o=!0){const u=r.R3.subtract(t,e),l=r.R3.subtract(n,e),c=r.K4.subtract(s,i),h=r.K4.subtract(a,i),d=1/(c[0]*h[1]-c[1]*h[0]);return[r.R3.mulScalar(r.R3.add(r.R3.mulScalar(u,h[1]),r.R3.mulScalar(l,-c[1])),d),r.R3.mulScalar(r.R3.add(r.R3.mulScalar(u,-h[0]),r.R3.mulScalar(l,c[0])),o?-d:d)]}},311:(e,t,n)=>{n.d(t,{c:()=>c});var r=n(218),i=n(877),s=n(18),a=n(121),o=n(838),u=n(878),l=n(102);class c extends u.x{constructor(){super(),this.isAnimated=!1,o.GL,o.GL,o.GL,o.GL,o.GL,o.GL;const e=[`../${o.GL}/assets/hdr/vestibule_1k.png`];this.environmentMap=new a.Q(e),this.camera=new r.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i._({type:i.v.Direct,direction:[-1,-1,0],intensity:.7})),this.lights.push(new i._({type:i.v.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.forEach((e=>{e.intensity/=this.lights.length}));let t=new s.O({diffuseColor:[20,20,20,1]}),n=(0,l.z)("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(n);let u=new s.O({diffuseColor:[1,1,0,0],reflectivness:.2}),c=(0,l.$R)("Sphere01",u).translate(0,15,0).scale(10);this.models.push(c);let h=new s.O({diffuseColor:[235/255,201/255,52/255,1],reflectivness:.71}),d=(0,l.z)("Cube01",h).rotate(0,30,0).translate(25,8,0).scale(8);this.models.push(d)}}},128:(e,t,n)=>{n.d(t,{z:()=>u});var r=n(121),i=n(322),s=n(878),a=n(838),o=n(102);class u extends s.x{constructor(){super(),this.environmentMap=new r.Q(`../${a.GL}/assets/hdr/brown_photostudio_02_1k.hdr`);let e=(0,i.C)(`../${a.GL}/assets/pbr/light-gold/`);for(let t=0;t<9;t++)for(let n=0;n<9;n++)for(let r=0;r<9;r++)this.models.push((0,o.$R)(`[${t}, ${n}]`,e).translate(4*t,4*n,4*r))}}},90:(e,t,n)=>{n.d(t,{N:()=>l});var r=n(218),i=n(877),s=n(18),a=n(838),o=n(878),u=n(102);class l extends o.x{constructor(){super(),this.camera=new r.t({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new i._({type:i.v.Point,position:[-30,5,0]}),this.lights[1]=new i._({type:i.v.Point,position:[30,5,0]}),this.lights[2]=new i._({type:i.v.Direct,direction:[-1,-1,-1]}),this.lights.forEach((e=>e.intensity=.4));let e=new s.O({diffuseMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`}),t=(0,u.z)("Cube01",e).translate(-30,0,0).scale(10,10,10);this.models.push(t);let n=new s.O({diffuseMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`,tiling:{u:2.25,v:2}}),o=(0,u.Y)("Cube01",n).translate(30,0,0).scale(10,10/1.125,10);this.models.push(o)}currentTime=0;startPositions=[];update(e){if(this.isAnimated){0==this.startPositions.length&&this.lights.forEach((e=>this.startPositions.push(e.position))),this.currentTime+=e;for(let e=0;e<this.lights.length-1;e++)this.lights[e].position=[this.startPositions[e][0]+25*Math.sin(this.currentTime),this.startPositions[e][1],this.startPositions[e][2]+25*Math.cos(this.currentTime)]}}}},479:(e,t,n)=>{n.d(t,{O:()=>c});var r=n(218),i=n(877),s=n(322),a=n(878),o=n(838),u=n(121),l=n(102);class c extends a.x{constructor(){super(),this.isAnimated=!1,this.environmentMap=new u.Q(`../${o.GL}/assets/hdr/brown_photostudio_02_2k.hdr`),this.camera=new r.t({position:[0,100,100],movementSpeed:100,target:[0,100,0]}),this.lights=[];let e=(0,s.C)(`../${o.GL}/assets/pbr/light-gold/`),t=(0,s.C)(`../${o.GL}/assets/pbr/streaked-metal1/`,!0),n=(0,s.C)(`../${o.GL}/assets/pbr/oxidized-copper/`),a=(0,s.C)(`../${o.GL}/assets/pbr/dirty-flat-stonework/`,!0),c=(0,s.C)(`../${o.GL}/assets/pbr/dull-copper/`,!0),h=((0,s.C)(`../${o.GL}/assets/pbr/gold-scuffed/`),(0,s.C)(`../${o.GL}/assets/pbr/dull-brass/`,!0),(0,s.C)(`../${o.GL}/assets/pbr/wood-floor/`,!0,"jpg")),d=(0,s.C)(`../${o.GL}/assets/pbr/Sci-fi_Metal_Plate_003_SD/`,!0,"jpg"),p=(0,s.C)(`../${o.GL}/assets/pbr/Sci-fi_Metal_Plate_003_SD/`,!0,"jpg");p.tiling={u:2.25,v:2};let f=new s.p({albedo:.1,metallic:.9,roughness:.1});this.lights.push(new i._({type:i.v.Direct,direction:[0,-1,0],diffuseColor:[1,1,1,1],intensity:1,useFalloff:!1})),this.lights.push(new i._({type:i.v.Point,position:[0,100,100],diffuseColor:[1,1,1,1],intensity:2e4,useFalloff:!0})),this.lights.push(new i._({type:i.v.Target,position:[0,130,0],direction:[.5,-1,0],diffuseColor:[1,1,1,1],intensity:1,useFalloff:!0}));let m=(0,l.z)("Floor",h).translate(0,-1,0).scale(100,1,100);this.models.push(m);let g=(0,l.z)("Back",f).translate(0,98,-100).scale(100,100,1);this.models.push(g);let _=-2;const w=100;let v=(0,l.$R)("Sample01",a).translate(25*_++,w,0).scale(10);this.models.push(v);let y=(0,l.$R)("Sample02",t).translate(25*_++,w,0).scale(10);this.models.push(y);let x=(0,l.$R)("Sample03",c).translate(25*_++,w,0).scale(10);this.models.push(x);let b=(0,l.$R)("Sample04",e).translate(25*_++,w,0).scale(10);this.models.push(b);let k=(0,l.$R)("Sample05",n).translate(25*_++,w,0).scale(10);this.models.push(k);let M=(0,l.z)("Cube01",d).translate(-25,50,0).scale(10);this.models.push(M),this.rotatingBoxLight=new i._({type:i.v.Point,position:[-25,50,0],diffuseColor:[1,0,0,1],intensity:10,useFalloff:!1}),this.rotatingBoxLight.isOn=!1,this.lights.push(this.rotatingBoxLight);let S=(0,l.Y)("Cylinder01",p).translate(25,50,0).scale(10,10/1.125,10);this.models.push(S),this.rotatingBoxLight2=new i._({type:i.v.Point,position:[25,50,0],diffuseColor:[0,1,1,1],intensity:10,useFalloff:!1}),this.rotatingBoxLight2.isOn=!1,this.lights.push(this.rotatingBoxLight2)}rotatingBoxLight;rotatingBoxLight2;currentTime=0;startPositions=[];update(e){if(this.isAnimated){0==this.startPositions.length&&(this.startPositions=this.lights.map((e=>e.position)),this.rotatingBoxLight.isOn=this.rotatingBoxLight2.isOn=!0),this.currentTime+=e;for(let e=0;e<this.lights.length;e++)this.lights[e].position=[this.startPositions[e][0]+25*Math.sin(this.currentTime),this.startPositions[e][1],this.startPositions[e][2]+25*Math.cos(this.currentTime)]}}}},48:(e,t,n)=>{n.d(t,{O:()=>c});var r=n(218),i=n(877),s=n(322),a=n(878),o=n(838),u=n(121),l=n(102);class c extends a.x{constructor(){super();let e=[`../${o.GL}/assets/cubemap/posx.jpg`,`../${o.GL}/assets/cubemap/negx.jpg`,`../${o.GL}/assets/cubemap/posy.jpg`,`../${o.GL}/assets/cubemap/negy.jpg`,`../${o.GL}/assets/cubemap/posz.jpg`,`../${o.GL}/assets/cubemap/negz.jpg`];e=`../${o.GL}/assets/hdr/vestibule_1k.png`,e=`../${o.GL}/assets/hdr/brown_photostudio_02_1k.hdr`,this.environmentMap=new u.Q(e),this.camera=new r.t({position:[0,100,150],movementSpeed:100,target:[0,100,0]}),this.lights=[];let t=6e3;this.lights.push(new i._({type:i.v.Point,position:[100,200,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new i._({type:i.v.Point,position:[-100,200,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new i._({type:i.v.Point,position:[-100,0,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new i._({type:i.v.Point,position:[100,0,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0}));let n=new s.p({albedo:.3,metallic:.2,roughness:.3}),a=(0,l.z)("Floor",n).translate(0,-1,0).scale(200,1,100);this.models.push(a);let c=new s.p({albedo:.3,metallic:.2,roughness:.3}),h=(0,l.z)("Back",c).translate(0,98,-100).scale(200,150,1);this.models.push(h);let d=.8/7;for(let e=0;e<7;e++)for(let t=0;t<7;t++){let n=new s.p({ambientOcclussion:1,albedo:[.8,0,0,1],metallic:.1+e*d,roughness:.1+t*d}),r=(0,l.$R)("Sphere01",n).translate(25*(t-3.5),25*(e-3.5)+100,0).scale(10);this.models.push(r)}}}},941:(e,t,n)=>{n.d(t,{R:()=>c});var r=n(416),i=n(218),s=n(877),a=n(18),o=n(838),u=n(878),l=n(102);class c extends u.x{constructor(){super(),this.isAnimated=!1,this.camera=new i.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new s._({type:s.v.Direct,direction:[-2,-1,0]})),this.lights.push(new s._({type:s.v.Direct,direction:[0,-1,1]})),this.lights.push(new s._({type:s.v.Point,position:[50,16,0]})),this.lights.forEach((e=>{e.intensity=1/this.lights.length}));let e=new a.O({diffuseColor:[20,20,20,1]}),t=(0,l.z)("Floor",e).translate(0,-1,0).scale(100,1,100);this.models.push(t);let n=new a.O({diffuseColor:[235/255,201/255,52/255,1]}),r=(0,l.z)("Cube01",n).rotate(0,45,0).translate(0,10,0).scale(10);this.models.push(r);let u=new a.O({diffuseColor:[0,0,.8,1]}),c=(0,l.Y)("Cylinder01",u,5,!1).translate(0,10,-30).scale(20/3);this.models.push(c);let h=new a.O({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${o.GL}/assets/spiral_normal.png`}),d=(0,l.z)("Cube01",h).rotate(0,30,0).translate(25,8,0).scale(8);this.models.push(d);let p=(0,l.z)("Cube01",n).translate(50,7,0).scale(7);this.models.push(p)}update(e){this.isAnimated&&(this.lights[0].direction=r.R3.lerp(this.lights[0].direction,[0,-1,2],.2*e))}}},865:(e,t,n)=>{n.d(t,{O:()=>l});var r=n(218),i=n(877),s=n(18),a=n(838),o=n(878),u=n(102);class l extends o.x{isAnimated;constructor(e=!0){super(),this.isAnimated=e,this.camera=new r.t({position:[0,60,10],movementSpeed:100,target:[0,40,0]}),this.lights[0]=new i._({type:i.v.Point,position:[0,20,-25]}),this.lights[1]=new i._({type:i.v.Direct,direction:[-1,-1,0]}),this.lights.forEach((e=>e.intensity=.7));let t=new s.O({diffuseColor:[0,1,0,1],specularColor:[1,0,0,1]}),n=new s.O({diffuseMapPath:`../${a.GL}/assets/uv_dist.jpg`,shininess:50}),o=new s.O({diffuseColor:[0,0,.8,1]}),l=(0,u.z)("Cube01",t).translate(0,0,-50).rotate(0,30,0).scale(10,10,10);this.models.push(l);let c=(0,u.z)("Floor",t).translate(0,-25,0).scale(100,1,100);this.models.push(c);let h=(0,u.Y)("Cylinder01",n).translate(20,0,-20).rotate(0,0,45).scale(10,10,10);this.models.push(h);let d=(0,u.Y)("Cylinder02",o,5,!1).translate(-20,0,-20).scale(10,10,10);this.models.push(d)}currentTime=0;centerPos;update(e){this.isAnimated&&(this.centerPos=this.centerPos??this.lights[0].position,this.currentTime+=e,this.lights[0].position=[this.centerPos[0]+25*Math.sin(this.currentTime),this.centerPos[1],this.centerPos[2]+25*Math.cos(this.currentTime)])}}},540:(e,t,n)=>{n.d(t,{m:()=>c});var r=n(416),i=n(218),s=n(877),a=n(18),o=n(838),u=n(878),l=n(102);class c extends u.x{constructor(){super(),this.isAnimated=!1,this.camera=new i.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new s._({type:s.v.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.push(new s._({type:s.v.Target,position:[-50,30,-180],target:[-50,0,0],coneAngleDeg:40})),this.lights.forEach((e=>{e.intensity=1/this.lights.length}));let e=new a.O({diffuseColor:[20,20,20,1]}),t=(0,l.z)("Floor",e).translate(0,-1,0).scale(100,1,100);this.models.push(t);let n=new a.O({diffuseColor:[235/255,201/255,52/255,1]}),r=(0,l.z)("Cube01",n).rotate(0,45,0).translate(-50,10,0).scale(10);this.models.push(r);let u=new a.O({diffuseColor:[0,0,.8,1]}),c=(0,l.Y)("Cylinder01",u,5,!1).translate(-50,10,-30).scale(20/3);this.models.push(c);let h=new a.O({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${o.GL}/assets/spiral_normal.png`}),d=(0,l.z)("Cube01",h).rotate(0,30,0).translate(25,18,0).scale(8);this.models.push(d);let p=(0,l.z)("Cube02",n).translate(50,7,0).scale(7);this.models.push(p)}update(e){this.isAnimated&&(this.lights[0].position=r.R3.lerp(this.lights[0].position,[50,40,-70],.2*e),this.lights[1].coneAngleDeg=r.K4.lerp(r.K4.fromValues(this.lights[1].coneAngleDeg,0),r.K4.fromValues(22,0),.1*e)[0])}}},203:e=>{e.exports="const PI = 3.14159265359;\n\nfn fresnelSchlickRoughness(cosTheta : f32, F0 : vec3f, roughness : f32) -> vec3f\n{\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n}\n\nfn fresnelSchlick(cosTheta : f32, F0 : vec3f) -> vec3f\n{\n    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n}\n\nfn DistributionGGX(N : vec3f, H : vec3f, roughness : f32) -> f32\n{\n    let a = roughness * roughness;\n    let a2 = a * a;\n    let NdotH = max(dot(N, H), 0.0);\n    let NdotH2 = NdotH * NdotH;\n\n    let nom = a2;\n    var denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfn GeometrySchlickGGX(NdotV : f32, roughness : f32) -> f32\n{\n    let r = (roughness + 1.0);\n    let k = (r * r) / 8.0;\n\n    let num = NdotV;\n    let denom = NdotV * (1.0 - k) + k;\n\n    return num / denom;\n}\n\nfn GeometrySmith(N : vec3f, V : vec3f, L : vec3f, roughness : f32) -> f32\n{\n    let NdotV = max(dot(N, V), 0.0);\n    let NdotL = max(dot(N, L), 0.0);\n    let ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    let ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\n\n//http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n//efficient VanDerCorpus calculation.\nfn RadicalInverse_VdC(bits_in : u32) -> f32\n{\n    var bits = (bits_in << 16u) | (bits_in >> 16u);\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n    return f32(bits) / 0x100000000;\n}\n\nfn Hammersley(i : u32, N : u32) -> vec2f\n{\n    return vec2(f32(i) / f32(N), RadicalInverse_VdC(i));\n}\n\nfn ImportanceSampleGGX(Xi : vec2f, N : vec3f, roughness : f32) -> vec3f\n{\n    let a = roughness * roughness;\n\n    let phi = 2.0 * PI * Xi.x;\n    let cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n    let sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\n    //from spherical coordinates to cartesian coordinates - halfway vector\n    var H : vec3f = vec3f();\n    H.x = cos(phi) * sinTheta;\n    H.y = sin(phi) * sinTheta;\n    H.z = cosTheta;\n\n    //from tangent-space H vector to world-space sample vector\n    let up = select(vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), abs(N.z) < 0.999);\n    let tangent = normalize(cross(up, N));\n    let bitangent = cross(N, tangent);\n\n    let sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n    return normalize(sampleVec);\n}\n"},453:(e,t,n)=>{n.d(t,{Pk:()=>Le,WK:()=>Re,zd:()=>Te});const r=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class i{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class s{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}}class a extends s{constructor(){super()}}class o extends a{constructor(e,t,n,r){super(),this.name=e,this.args=t,this.returnType=n,this.body=r}get astNodeType(){return"function"}}class u extends a{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}}class l extends a{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}}class c extends a{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}}class h extends a{constructor(e,t,n,r){super(),this.init=e,this.condition=t,this.increment=n,this.body=r}get astNodeType(){return"for"}}class d extends a{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"var"}}class p extends a{constructor(e,t,n){super(),this.name=e,this.type=t,this.value=n}get astNodeType(){return"override"}}class f extends a{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"let"}}class m extends a{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}}var g,_,w,v,y;!function(e){e.increment="++",e.decrement="--"}(g||(g={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for IncrementOperator");return e[n]}}(g||(g={}));class x extends a{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(_||(_={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for AssignOperator");return e[n]}}(_||(_={}));class b extends a{constructor(e,t,n){super(),this.operator=e,this.variable=t,this.value=n}get astNodeType(){return"assign"}}class k extends a{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class M extends a{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class S extends a{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class T extends a{constructor(e,t,n,r){super(),this.condition=e,this.body=t,this.elseif=n,this.else=r}get astNodeType(){return"if"}}class P extends a{constructor(e){super(),this.value=e}get astNodeType(){return"return"}}class A extends a{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class E extends a{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class C extends a{constructor(){super()}get astNodeType(){return"discard"}}class B extends a{constructor(){super()}get astNodeType(){return"break"}}class G extends a{constructor(){super()}get astNodeType(){return"continue"}}class N extends a{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class z extends N{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class L extends N{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"template"}}class R extends N{constructor(e,t,n,r){super(e),this.storage=t,this.type=n,this.access=r}get astNodeType(){return"pointer"}}class U extends N{constructor(e,t,n,r){super(e),this.attributes=t,this.format=n,this.count=r}get astNodeType(){return"array"}get isArray(){return!0}}class V extends N{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"sampler"}}class F extends s{constructor(){super()}}class O extends F{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class I extends F{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class D extends F{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}}class q extends F{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}}class H extends F{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,n;if(this.initializer instanceof I){const r=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(n=this.initializer.type)||void 0===n?void 0:n.name,s=e.structs.get(i),a=null==s?void 0:s.getMemberIndex(r);if(-1!=a)return this.initializer.args[a].evaluate(e);console.log(a)}return this.initializer.evaluate(e)}}class $ extends F{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class j extends F{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}}class X extends F{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}}class Y extends F{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}}class W extends F{constructor(){super()}}class K extends W{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}}class Q extends W{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class Z extends s{constructor(){super()}}class J extends Z{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}}class ee extends Z{constructor(e){super(),this.body=e}get astNodeType(){return"default"}}class te extends s{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"argument"}}class ne extends s{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}}class re extends s{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"member"}}class ie extends s{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(v||(v={}));class se{constructor(e,t,n){this.name=e,this.type=t,this.rule=n}toString(){return this.name}}class ae{}w=ae,ae.none=new se("",v.reserved,""),ae.eof=new se("EOF",v.token,""),ae.reserved={asm:new se("asm",v.reserved,"asm"),bf16:new se("bf16",v.reserved,"bf16"),do:new se("do",v.reserved,"do"),enum:new se("enum",v.reserved,"enum"),f16:new se("f16",v.reserved,"f16"),f64:new se("f64",v.reserved,"f64"),handle:new se("handle",v.reserved,"handle"),i8:new se("i8",v.reserved,"i8"),i16:new se("i16",v.reserved,"i16"),i64:new se("i64",v.reserved,"i64"),mat:new se("mat",v.reserved,"mat"),premerge:new se("premerge",v.reserved,"premerge"),regardless:new se("regardless",v.reserved,"regardless"),typedef:new se("typedef",v.reserved,"typedef"),u8:new se("u8",v.reserved,"u8"),u16:new se("u16",v.reserved,"u16"),u64:new se("u64",v.reserved,"u64"),unless:new se("unless",v.reserved,"unless"),using:new se("using",v.reserved,"using"),vec:new se("vec",v.reserved,"vec"),void:new se("void",v.reserved,"void")},ae.keywords={array:new se("array",v.keyword,"array"),atomic:new se("atomic",v.keyword,"atomic"),bool:new se("bool",v.keyword,"bool"),f32:new se("f32",v.keyword,"f32"),i32:new se("i32",v.keyword,"i32"),mat2x2:new se("mat2x2",v.keyword,"mat2x2"),mat2x3:new se("mat2x3",v.keyword,"mat2x3"),mat2x4:new se("mat2x4",v.keyword,"mat2x4"),mat3x2:new se("mat3x2",v.keyword,"mat3x2"),mat3x3:new se("mat3x3",v.keyword,"mat3x3"),mat3x4:new se("mat3x4",v.keyword,"mat3x4"),mat4x2:new se("mat4x2",v.keyword,"mat4x2"),mat4x3:new se("mat4x3",v.keyword,"mat4x3"),mat4x4:new se("mat4x4",v.keyword,"mat4x4"),ptr:new se("ptr",v.keyword,"ptr"),sampler:new se("sampler",v.keyword,"sampler"),sampler_comparison:new se("sampler_comparison",v.keyword,"sampler_comparison"),struct:new se("struct",v.keyword,"struct"),texture_1d:new se("texture_1d",v.keyword,"texture_1d"),texture_2d:new se("texture_2d",v.keyword,"texture_2d"),texture_2d_array:new se("texture_2d_array",v.keyword,"texture_2d_array"),texture_3d:new se("texture_3d",v.keyword,"texture_3d"),texture_cube:new se("texture_cube",v.keyword,"texture_cube"),texture_cube_array:new se("texture_cube_array",v.keyword,"texture_cube_array"),texture_multisampled_2d:new se("texture_multisampled_2d",v.keyword,"texture_multisampled_2d"),texture_storage_1d:new se("texture_storage_1d",v.keyword,"texture_storage_1d"),texture_storage_2d:new se("texture_storage_2d",v.keyword,"texture_storage_2d"),texture_storage_2d_array:new se("texture_storage_2d_array",v.keyword,"texture_storage_2d_array"),texture_storage_3d:new se("texture_storage_3d",v.keyword,"texture_storage_3d"),texture_depth_2d:new se("texture_depth_2d",v.keyword,"texture_depth_2d"),texture_depth_2d_array:new se("texture_depth_2d_array",v.keyword,"texture_depth_2d_array"),texture_depth_cube:new se("texture_depth_cube",v.keyword,"texture_depth_cube"),texture_depth_cube_array:new se("texture_depth_cube_array",v.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new se("texture_depth_multisampled_2d",v.keyword,"texture_depth_multisampled_2d"),texture_external:new se("texture_external",v.keyword,"texture_external"),u32:new se("u32",v.keyword,"u32"),vec2:new se("vec2",v.keyword,"vec2"),vec3:new se("vec3",v.keyword,"vec3"),vec4:new se("vec4",v.keyword,"vec4"),bitcast:new se("bitcast",v.keyword,"bitcast"),block:new se("block",v.keyword,"block"),break:new se("break",v.keyword,"break"),case:new se("case",v.keyword,"case"),continue:new se("continue",v.keyword,"continue"),continuing:new se("continuing",v.keyword,"continuing"),default:new se("default",v.keyword,"default"),discard:new se("discard",v.keyword,"discard"),else:new se("else",v.keyword,"else"),enable:new se("enable",v.keyword,"enable"),fallthrough:new se("fallthrough",v.keyword,"fallthrough"),false:new se("false",v.keyword,"false"),fn:new se("fn",v.keyword,"fn"),for:new se("for",v.keyword,"for"),function:new se("function",v.keyword,"function"),if:new se("if",v.keyword,"if"),let:new se("let",v.keyword,"let"),const:new se("const",v.keyword,"const"),loop:new se("loop",v.keyword,"loop"),while:new se("while",v.keyword,"while"),private:new se("private",v.keyword,"private"),read:new se("read",v.keyword,"read"),read_write:new se("read_write",v.keyword,"read_write"),return:new se("return",v.keyword,"return"),storage:new se("storage",v.keyword,"storage"),switch:new se("switch",v.keyword,"switch"),true:new se("true",v.keyword,"true"),alias:new se("alias",v.keyword,"alias"),type:new se("type",v.keyword,"type"),uniform:new se("uniform",v.keyword,"uniform"),var:new se("var",v.keyword,"var"),override:new se("override",v.keyword,"override"),workgroup:new se("workgroup",v.keyword,"workgroup"),write:new se("write",v.keyword,"write"),r8unorm:new se("r8unorm",v.keyword,"r8unorm"),r8snorm:new se("r8snorm",v.keyword,"r8snorm"),r8uint:new se("r8uint",v.keyword,"r8uint"),r8sint:new se("r8sint",v.keyword,"r8sint"),r16uint:new se("r16uint",v.keyword,"r16uint"),r16sint:new se("r16sint",v.keyword,"r16sint"),r16float:new se("r16float",v.keyword,"r16float"),rg8unorm:new se("rg8unorm",v.keyword,"rg8unorm"),rg8snorm:new se("rg8snorm",v.keyword,"rg8snorm"),rg8uint:new se("rg8uint",v.keyword,"rg8uint"),rg8sint:new se("rg8sint",v.keyword,"rg8sint"),r32uint:new se("r32uint",v.keyword,"r32uint"),r32sint:new se("r32sint",v.keyword,"r32sint"),r32float:new se("r32float",v.keyword,"r32float"),rg16uint:new se("rg16uint",v.keyword,"rg16uint"),rg16sint:new se("rg16sint",v.keyword,"rg16sint"),rg16float:new se("rg16float",v.keyword,"rg16float"),rgba8unorm:new se("rgba8unorm",v.keyword,"rgba8unorm"),rgba8unorm_srgb:new se("rgba8unorm_srgb",v.keyword,"rgba8unorm_srgb"),rgba8snorm:new se("rgba8snorm",v.keyword,"rgba8snorm"),rgba8uint:new se("rgba8uint",v.keyword,"rgba8uint"),rgba8sint:new se("rgba8sint",v.keyword,"rgba8sint"),bgra8unorm:new se("bgra8unorm",v.keyword,"bgra8unorm"),bgra8unorm_srgb:new se("bgra8unorm_srgb",v.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new se("rgb10a2unorm",v.keyword,"rgb10a2unorm"),rg11b10float:new se("rg11b10float",v.keyword,"rg11b10float"),rg32uint:new se("rg32uint",v.keyword,"rg32uint"),rg32sint:new se("rg32sint",v.keyword,"rg32sint"),rg32float:new se("rg32float",v.keyword,"rg32float"),rgba16uint:new se("rgba16uint",v.keyword,"rgba16uint"),rgba16sint:new se("rgba16sint",v.keyword,"rgba16sint"),rgba16float:new se("rgba16float",v.keyword,"rgba16float"),rgba32uint:new se("rgba32uint",v.keyword,"rgba32uint"),rgba32sint:new se("rgba32sint",v.keyword,"rgba32sint"),rgba32float:new se("rgba32float",v.keyword,"rgba32float"),static_assert:new se("static_assert",v.keyword,"static_assert")},ae.tokens={decimal_float_literal:new se("decimal_float_literal",v.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new se("hex_float_literal",v.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new se("int_literal",v.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new se("uint_literal",v.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new se("ident",v.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new se("and",v.token,"&"),and_and:new se("and_and",v.token,"&&"),arrow:new se("arrow ",v.token,"->"),attr:new se("attr",v.token,"@"),attr_left:new se("attr_left",v.token,"[["),attr_right:new se("attr_right",v.token,"]]"),forward_slash:new se("forward_slash",v.token,"/"),bang:new se("bang",v.token,"!"),bracket_left:new se("bracket_left",v.token,"["),bracket_right:new se("bracket_right",v.token,"]"),brace_left:new se("brace_left",v.token,"{"),brace_right:new se("brace_right",v.token,"}"),colon:new se("colon",v.token,":"),comma:new se("comma",v.token,","),equal:new se("equal",v.token,"="),equal_equal:new se("equal_equal",v.token,"=="),not_equal:new se("not_equal",v.token,"!="),greater_than:new se("greater_than",v.token,">"),greater_than_equal:new se("greater_than_equal",v.token,">="),shift_right:new se("shift_right",v.token,">>"),less_than:new se("less_than",v.token,"<"),less_than_equal:new se("less_than_equal",v.token,"<="),shift_left:new se("shift_left",v.token,"<<"),modulo:new se("modulo",v.token,"%"),minus:new se("minus",v.token,"-"),minus_minus:new se("minus_minus",v.token,"--"),period:new se("period",v.token,"."),plus:new se("plus",v.token,"+"),plus_plus:new se("plus_plus",v.token,"++"),or:new se("or",v.token,"|"),or_or:new se("or_or",v.token,"||"),paren_left:new se("paren_left",v.token,"("),paren_right:new se("paren_right",v.token,")"),semicolon:new se("semicolon",v.token,";"),star:new se("star",v.token,"*"),tilde:new se("tilde",v.token,"~"),underscore:new se("underscore",v.token,"_"),xor:new se("xor",v.token,"^"),plus_equal:new se("plus_equal",v.token,"+="),minus_equal:new se("minus_equal",v.token,"-="),times_equal:new se("times_equal",v.token,"*="),division_equal:new se("division_equal",v.token,"/="),modulo_equal:new se("modulo_equal",v.token,"%="),and_equal:new se("and_equal",v.token,"&="),or_equal:new se("or_equal",v.token,"|="),xor_equal:new se("xor_equal",v.token,"^="),shift_right_equal:new se("shift_right_equal",v.token,">>="),shift_left_equal:new se("shift_left_equal",v.token,"<<=")},ae.storage_class=[w.keywords.function,w.keywords.private,w.keywords.workgroup,w.keywords.uniform,w.keywords.storage],ae.access_mode=[w.keywords.read,w.keywords.write,w.keywords.read_write],ae.sampler_type=[w.keywords.sampler,w.keywords.sampler_comparison],ae.sampled_texture_type=[w.keywords.texture_1d,w.keywords.texture_2d,w.keywords.texture_2d_array,w.keywords.texture_3d,w.keywords.texture_cube,w.keywords.texture_cube_array],ae.multisampled_texture_type=[w.keywords.texture_multisampled_2d],ae.storage_texture_type=[w.keywords.texture_storage_1d,w.keywords.texture_storage_2d,w.keywords.texture_storage_2d_array,w.keywords.texture_storage_3d],ae.depth_texture_type=[w.keywords.texture_depth_2d,w.keywords.texture_depth_2d_array,w.keywords.texture_depth_cube,w.keywords.texture_depth_cube_array,w.keywords.texture_depth_multisampled_2d],ae.texture_external_type=[w.keywords.texture_external],ae.any_texture_type=[...w.sampled_texture_type,...w.multisampled_texture_type,...w.storage_texture_type,...w.depth_texture_type,...w.texture_external_type],ae.texel_format=[w.keywords.r8unorm,w.keywords.r8snorm,w.keywords.r8uint,w.keywords.r8sint,w.keywords.r16uint,w.keywords.r16sint,w.keywords.r16float,w.keywords.rg8unorm,w.keywords.rg8snorm,w.keywords.rg8uint,w.keywords.rg8sint,w.keywords.r32uint,w.keywords.r32sint,w.keywords.r32float,w.keywords.rg16uint,w.keywords.rg16sint,w.keywords.rg16float,w.keywords.rgba8unorm,w.keywords.rgba8unorm_srgb,w.keywords.rgba8snorm,w.keywords.rgba8uint,w.keywords.rgba8sint,w.keywords.bgra8unorm,w.keywords.bgra8unorm_srgb,w.keywords.rgb10a2unorm,w.keywords.rg11b10float,w.keywords.rg32uint,w.keywords.rg32sint,w.keywords.rg32float,w.keywords.rgba16uint,w.keywords.rgba16sint,w.keywords.rgba16float,w.keywords.rgba32uint,w.keywords.rgba32sint,w.keywords.rgba32float],ae.const_literal=[w.tokens.int_literal,w.tokens.uint_literal,w.tokens.decimal_float_literal,w.tokens.hex_float_literal,w.keywords.true,w.keywords.false],ae.literal_or_ident=[w.tokens.ident,w.tokens.int_literal,w.tokens.uint_literal,w.tokens.decimal_float_literal,w.tokens.hex_float_literal],ae.element_count_expression=[w.tokens.int_literal,w.tokens.uint_literal,w.tokens.ident],ae.template_types=[w.keywords.vec2,w.keywords.vec3,w.keywords.vec4,w.keywords.mat2x2,w.keywords.mat2x3,w.keywords.mat2x4,w.keywords.mat3x2,w.keywords.mat3x3,w.keywords.mat3x4,w.keywords.mat4x2,w.keywords.mat4x3,w.keywords.mat4x4,w.keywords.atomic,w.keywords.bitcast,...w.any_texture_type],ae.attribute_name=[w.tokens.ident,w.keywords.block],ae.assignment_operators=[w.tokens.equal,w.tokens.plus_equal,w.tokens.minus_equal,w.tokens.times_equal,w.tokens.division_equal,w.tokens.modulo_equal,w.tokens.and_equal,w.tokens.or_equal,w.tokens.xor_equal,w.tokens.shift_right_equal,w.tokens.shift_left_equal],ae.increment_operators=[w.tokens.plus_plus,w.tokens.minus_minus];class oe{constructor(e,t,n){this.type=e,this.lexeme=t,this.line=n}toString(){return this.lexeme}isTemplateType(){return-1!=ae.template_types.indexOf(this.type)}isArrayType(){return this.type==ae.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ue{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new oe(ae.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=ae.none;for(;;){let n=this._findType(e);const r=this._peekAhead();if(">"==e&&(">"==r||"="==r)){let e=!1,t=this._tokens.length-1;for(let n=0;n<4&&t>=0;++n,--t)if(this._tokens[t].type===ae.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(n),!0}if(n===ae.none){let r=e,i=0;const s=2;for(let e=0;e<s;++e)if(r+=this._peekAhead(e),n=this._findType(r),n!==ae.none){i=e;break}if(n===ae.none)return t!==ae.none&&(this._current--,this._addToken(t),!0);e=r,this._current+=i+1}if(t=n,this._isAtEnd())break;e+=this._advance()}return t!==ae.none&&(this._addToken(t),!0)}_findType(e){for(const t in ae.keywords){const n=ae.keywords[t];if(this._match(e,n.rule))return n}for(const t in ae.tokens){const n=ae.tokens[t];if(this._match(e,n.rule))return n}return ae.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const n=t.exec(e);if(n&&0==n.index&&n[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new oe(e,t,this._line))}}class le{constructor(){this._tokens=[],this._current=0,this._context=new i}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new ue(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==ae.eof}_match(e){if(e instanceof se)return!!this._check(e)&&(this._advance(),!0);for(let t=0,n=e.length;t<n;++t){const n=e[t];if(this._check(n))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let n=t.type;return-1!=e.indexOf(n)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(ae.tokens.semicolon)&&!this._isAtEnd(););if(this._match(ae.keywords.alias)){const e=this._type_alias();return this._consume(ae.tokens.semicolon,"Expected ';'"),e}if(this._match(ae.keywords.enable)){const e=this._enable_directive();return this._consume(ae.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(ae.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(ae.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(ae.keywords.fn))return null;const e=this._consume(ae.tokens.ident,"Expected function name.").toString();this._consume(ae.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(ae.tokens.paren_right))do{if(this._check(ae.tokens.paren_right))break;const e=this._attribute(),n=this._consume(ae.tokens.ident,"Expected argument name.").toString();this._consume(ae.tokens.colon,"Expected ':' for argument type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r,t.push(new te(n,i,e)))}while(this._match(ae.tokens.comma));this._consume(ae.tokens.paren_right,"Expected ')' after function arguments.");let n=null;if(this._match(ae.tokens.arrow)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}const r=this._compound_statement();return new o(e,t,n,r)}_compound_statement(){const e=[];for(this._consume(ae.tokens.brace_left,"Expected '{' for block.");!this._check(ae.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(ae.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(ae.tokens.semicolon)&&!this._isAtEnd(););if(this._check(ae.keywords.if))return this._if_statement();if(this._check(ae.keywords.switch))return this._switch_statement();if(this._check(ae.keywords.loop))return this._loop_statement();if(this._check(ae.keywords.for))return this._for_statement();if(this._check(ae.keywords.while))return this._while_statement();if(this._check(ae.keywords.continuing))return this._continuing_statement();if(this._check(ae.keywords.static_assert))return this._static_assert_statement();if(this._check(ae.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(ae.keywords.return)?this._return_statement():this._check([ae.keywords.var,ae.keywords.let,ae.keywords.const])?this._variable_statement():this._match(ae.keywords.discard)?new C:this._match(ae.keywords.break)?new B:this._match(ae.keywords.continue)?new G:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(ae.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(ae.keywords.static_assert))return null;let e=this._optional_paren_expression();return new u(e)}_while_statement(){if(!this._match(ae.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new l(e,t)}_continuing_statement(){if(!this._match(ae.keywords.continuing))return null;const e=this._compound_statement();return new c(e)}_for_statement(){if(!this._match(ae.keywords.for))return null;this._consume(ae.tokens.paren_left,"Expected '('.");const e=this._check(ae.tokens.semicolon)?null:this._for_init();this._consume(ae.tokens.semicolon,"Expected ';'.");const t=this._check(ae.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(ae.tokens.semicolon,"Expected ';'.");const n=this._check(ae.tokens.paren_right)?null:this._for_increment();this._consume(ae.tokens.paren_right,"Expected ')'.");const r=this._compound_statement();return new h(e,t,n,r)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(ae.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(ae.tokens.equal)&&(t=this._short_circuit_or_expression()),new d(e.name,e.type,e.storage,e.access,t)}if(this._match(ae.keywords.let)){const e=this._consume(ae.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(ae.tokens.equal,"Expected '=' for let.");const n=this._short_circuit_or_expression();return new f(e,t,null,null,n)}if(this._match(ae.keywords.const)){const e=this._consume(ae.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(ae.tokens.equal,"Expected '=' for const.");const n=this._short_circuit_or_expression();return new m(e,t,null,null,n)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(ae.increment_operators))return this._current=e,null;const n=this._consume(ae.increment_operators,"Expected increment operator");return new x(n.type===ae.tokens.plus_plus?g.increment:g.decrement,t)}_assignment_statement(){let e=null;if(this._check(ae.tokens.brace_right))return null;let t=this._match(ae.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const n=this._consume(ae.assignment_operators,"Expected assignment operator."),r=this._short_circuit_or_expression();return new b(_.parse(n.lexeme),e,r)}_func_call_statement(){if(!this._check(ae.tokens.ident))return null;const e=this._current,t=this._consume(ae.tokens.ident,"Expected function name."),n=this._argument_expression_list();return null===n?(this._current=e,null):new k(t.lexeme,n)}_loop_statement(){if(!this._match(ae.keywords.loop))return null;this._consume(ae.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let n of t)e.push(n);else e.push(t);t=this._statement()}let n=null;return this._match(ae.keywords.continuing)&&(n=this._compound_statement()),this._consume(ae.tokens.brace_right,"Expected '}' for loop."),new M(e,n)}_switch_statement(){if(!this._match(ae.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(ae.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(ae.tokens.brace_right,"Expected '}' for switch."),new S(e,t)}_switch_body(){const e=[];if(this._match(ae.keywords.case)){const t=this._case_selectors();this._match(ae.tokens.colon),this._consume(ae.tokens.brace_left,"Exected '{' for switch case.");const n=this._case_body();this._consume(ae.tokens.brace_right,"Exected '}' for switch case."),e.push(new J(t,n))}if(this._match(ae.keywords.default)){this._match(ae.tokens.colon),this._consume(ae.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(ae.tokens.brace_right,"Exected '}' for switch default."),e.push(new ee(t))}if(this._check([ae.keywords.default,ae.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,n,r;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(ae.tokens.comma);)i.push(null!==(r=null===(n=this._shift_expression())||void 0===n?void 0:n.evaluate(this._context).toString())&&void 0!==r?r:"");return i}_case_body(){if(this._match(ae.keywords.fallthrough))return this._consume(ae.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(ae.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let n=[];this._match_elseif()&&(n=this._elseif_statement(n));let r=null;return this._match(ae.keywords.else)&&(r=this._compound_statement()),new T(e,t,n,r)}_match_elseif(){return this._tokens[this._current].type===ae.keywords.else&&this._tokens[this._current+1].type===ae.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),n=this._compound_statement();return e.push(new ne(t,n)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(ae.keywords.return))return null;const e=this._short_circuit_or_expression();return new P(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(ae.tokens.or_or);)e=new Q(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(ae.tokens.and_and);)e=new Q(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(ae.tokens.or);)e=new Q(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(ae.tokens.xor);)e=new Q(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(ae.tokens.and);)e=new Q(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([ae.tokens.equal_equal,ae.tokens.not_equal])?new Q(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([ae.tokens.less_than,ae.tokens.greater_than,ae.tokens.less_than_equal,ae.tokens.greater_than_equal]);)e=new Q(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([ae.tokens.shift_left,ae.tokens.shift_right]);)e=new Q(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([ae.tokens.plus,ae.tokens.minus]);)e=new Q(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([ae.tokens.star,ae.tokens.forward_slash,ae.tokens.modulo]);)e=new Q(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([ae.tokens.minus,ae.tokens.bang,ae.tokens.tilde,ae.tokens.star,ae.tokens.and])?new K(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(ae.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(ae.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(ae.tokens.period)){const e=this._consume(ae.tokens.ident,"Expected member name."),t=this._postfix_expression(),n=new O(e.lexeme);return t&&(n.postfix=t),n}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(ae.tokens.ident)){const e=this._previous().toString();if(this._check(ae.tokens.paren_left)){const t=this._argument_expression_list(),n=this._getStruct(e);return null!=n?new I(n,t):new D(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new H(e,t.value)}return new q(e)}if(this._match(ae.const_literal))return new $(parseFloat(this._previous().toString()));if(this._check(ae.tokens.paren_left))return this._paren_expression();if(this._match(ae.keywords.bitcast)){this._consume(ae.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(ae.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new j(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new X(e,t)}_argument_expression_list(){if(!this._match(ae.tokens.paren_left))return null;const e=[];do{if(this._check(ae.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(ae.tokens.comma));return this._consume(ae.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(ae.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(ae.tokens.paren_right),new Y([e])}_paren_expression(){this._consume(ae.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(ae.tokens.paren_right,"Expected ')'."),new Y([e])}_struct_decl(){if(!this._match(ae.keywords.struct))return null;const e=this._consume(ae.tokens.ident,"Expected name for struct.").toString();this._consume(ae.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(ae.tokens.brace_right);){const e=this._attribute(),n=this._consume(ae.tokens.ident,"Expected variable name.").toString();this._consume(ae.tokens.colon,"Expected ':' for struct member type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r),this._check(ae.tokens.brace_right)?this._match(ae.tokens.comma):this._consume(ae.tokens.comma,"Expected ',' for struct member."),t.push(new re(n,i,e))}this._consume(ae.tokens.brace_right,"Expected '}' after struct body.");const n=new z(e,t);return this._context.structs.set(e,n),n}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(ae.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(ae.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(ae.keywords.const))return null;const e=this._consume(ae.tokens.ident,"Expected variable name");let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;if(this._match(ae.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof I)n=e;else if(e instanceof H&&e.initializer instanceof I)n=e.initializer;else try{const t=e.evaluate(this._context);n=new $(t)}catch(t){n=e}}const r=new m(e.toString(),t,"","",n);return this._context.constants.set(r.name,r),r}_global_let_decl(){if(!this._match(ae.keywords.let))return null;const e=this._consume(ae.tokens.ident,"Expected variable name");let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;return this._match(ae.tokens.equal)&&(n=this._const_expression()),new f(e.toString(),t,"","",n)}_const_expression(){if(this._match(ae.const_literal))return new O(this._previous().toString());const e=this._type_decl();this._consume(ae.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(ae.tokens.paren_right)&&(t.push(this._const_expression()),this._check(ae.tokens.comma));)this._advance();return this._consume(ae.tokens.paren_right,"Expected ')'."),new I(e,t)}_variable_decl(){if(!this._match(ae.keywords.var))return null;let e="",t="";this._match(ae.tokens.less_than)&&(e=this._consume(ae.storage_class,"Expected storage_class.").toString(),this._match(ae.tokens.comma)&&(t=this._consume(ae.access_mode,"Expected access_mode.").toString()),this._consume(ae.tokens.greater_than,"Expected '>'."));const n=this._consume(ae.tokens.ident,"Expected variable name");let r=null;if(this._match(ae.tokens.colon)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}return new d(n.toString(),r,e,t,null)}_override_decl(){if(!this._match(ae.keywords.override))return null;const e=this._consume(ae.tokens.ident,"Expected variable name");let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new p(e.toString(),t,null)}_enable_directive(){const e=this._consume(ae.tokens.ident,"identity expected.");return new A(e.toString())}_type_alias(){const e=this._consume(ae.tokens.ident,"identity expected.");this._consume(ae.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const n=new E(e.toString(),t);return this._context.aliases.set(n.name,n),n}_type_decl(){if(this._check([ae.tokens.ident,...ae.texel_format,ae.keywords.bool,ae.keywords.f32,ae.keywords.i32,ae.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new N(e.toString())}if(this._check(ae.template_types)){let e=this._advance().toString(),t=null,n=null;return this._match(ae.tokens.less_than)&&(t=this._type_decl(),n=null,this._match(ae.tokens.comma)&&(n=this._consume(ae.access_mode,"Expected access_mode for pointer").toString()),this._consume(ae.tokens.greater_than,"Expected '>' for type.")),new L(e,t,n)}if(this._match(ae.keywords.ptr)){let e=this._previous().toString();this._consume(ae.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(ae.storage_class,"Expected storage_class for pointer");this._consume(ae.tokens.comma,"Expected ',' for pointer.");const n=this._type_decl();let r=null;return this._match(ae.tokens.comma)&&(r=this._consume(ae.access_mode,"Expected access_mode for pointer").toString()),this._consume(ae.tokens.greater_than,"Expected '>' for pointer."),new R(e,t.toString(),n,r)}let e=this._texture_sampler_types();if(e)return e;const t=this._attribute();if(this._match(ae.keywords.array)){let e=null,n=-1;const r=this._previous();if(this._match(ae.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(ae.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(ae.tokens.greater_than,"Expected '>' for array."),n=t?parseInt(t):0}return new U(r.toString(),t,e,n)}return null}_texture_sampler_types(){if(this._match(ae.sampler_type))return new V(this._previous().toString(),null,null);if(this._match(ae.depth_texture_type))return new V(this._previous().toString(),null,null);if(this._match(ae.sampled_texture_type)||this._match(ae.multisampled_texture_type)){const e=this._previous();this._consume(ae.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(ae.tokens.greater_than,"Expected '>' for sampler type."),new V(e.toString(),t,null)}if(this._match(ae.storage_texture_type)){const e=this._previous();this._consume(ae.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(ae.texel_format,"Invalid texel format.").toString();this._consume(ae.tokens.comma,"Expected ',' after texel format.");const n=this._consume(ae.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(ae.tokens.greater_than,"Expected '>' for sampler type."),new V(e.toString(),t,n)}return null}_attribute(){let e=[];for(;this._match(ae.tokens.attr);){const t=this._consume(ae.attribute_name,"Expected attribute name"),n=new ie(t.toString(),null);if(this._match(ae.tokens.paren_left)){if(n.value=this._consume(ae.literal_or_ident,"Expected attribute value").toString(),this._check(ae.tokens.comma)){this._advance();do{const e=this._consume(ae.literal_or_ident,"Expected attribute value").toString();n.value instanceof Array||(n.value=[n.value]),n.value.push(e)}while(this._match(ae.tokens.comma))}this._consume(ae.tokens.paren_right,"Expected ')'")}e.push(n)}for(;this._match(ae.tokens.attr_left);){if(!this._check(ae.tokens.attr_right))do{const t=this._consume(ae.attribute_name,"Expected attribute name"),n=new ie(t.toString(),null);if(this._match(ae.tokens.paren_left)){if(n.value=[this._consume(ae.literal_or_ident,"Expected attribute value").toString()],this._check(ae.tokens.comma)){this._advance();do{const e=this._consume(ae.literal_or_ident,"Expected attribute value").toString();n.value.push(e)}while(this._match(ae.tokens.comma))}this._consume(ae.tokens.paren_right,"Expected ')'")}e.push(n)}while(this._match(ae.tokens.comma));this._consume(ae.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class ce{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class he{constructor(e,t,n){this.name=e,this.type=t,this.attributes=n,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class de extends ce{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class pe extends ce{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class fe extends ce{constructor(e,t,n){super(e,n),this.format=t}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler"}(y||(y={}));class me{constructor(e,t,n,r,i,s){this.name=e,this.type=t,this.group=n,this.binding=r,this.attributes=i,this.resourceType=s}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class ge{constructor(e,t){this.name=e,this.type=t}}class _e{constructor(e,t){this.align=e,this.size=t}}class we{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r,this.interpolation=null}}class ve{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r}}class ye{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=e,this.stage=t}}class xe{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class be{constructor(e,t,n,r){this.name=e,this.type=t,this.attributes=n,this.id=r}}class ke{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new xe,this._types=new Map,e&&this.update(e)}update(e){const t=(new le).parse(e);for(const e of t){if(e instanceof z){const t=this._getTypeInfo(e,null);t instanceof de&&this.structs.push(t)}if(e instanceof E&&this.aliases.push(this._getAliasInfo(e)),e instanceof p){const t=e,n=this._getAttributeNum(t.attributes,"id",0),r=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new be(t.name,r,t.attributes,n))}if(this._isUniformVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new me(t.name,i,n,r,t.attributes,y.Uniform);this.uniforms.push(s)}if(this._isStorageVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new me(t.name,i,n,r,t.attributes,y.Storage);this.storage.push(s)}if(this._isTextureVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new me(t.name,i,n,r,t.attributes,y.Texture);this.textures.push(s)}if(this._isSamplerVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new me(t.name,i,n,r,t.attributes,y.Sampler);this.samplers.push(s)}if(e instanceof o){const t=this._getAttribute(e,"vertex"),n=this._getAttribute(e,"fragment"),r=this._getAttribute(e,"compute"),i=t||n||r;if(i){const t=new ye(e.name,i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),this.entry[i.name].push(t)}}}}getBindGroups(){const e=[];function t(t,n){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),n>=e[t].length&&(e[t].length=n+1)}for(const n of this.uniforms)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.storage)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.textures)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.samplers)t(n.group,n.binding),e[n.group][n.binding]=n;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof z)this._getStructOutputs(e,t);else{const n=this._getOutputInfo(e);null!==n&&t.push(n)}return t}_getStructOutputs(e,t){for(const n of e.members)if(n.type instanceof z)this._getStructOutputs(n.type,t);else{const e=this._getAttribute(n,"location")||this._getAttribute(n,"builtin");if(null!==e){const r=this._getTypeInfo(n.type,n.type.attributes),i=this._parseInt(e.value),s=new ve(n.name,r,e.name,i);t.push(s)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getTypeInfo(e,e.attributes),r=this._parseInt(t.value);return new ve("",n,t.name,r)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const n of e)if(n.type instanceof z)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const n of e.members)if(n.type instanceof z)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getAttribute(e,"interpolation"),r=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),s=new we(e.name,r,t.name,i);return null!==n&&(s.interpolation=this._parseString(n.value)),s}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new ge(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof U){const n=e,r=this._getTypeInfo(n.format,n.attributes),i=new pe(n.name,t);return i.format=r,i.count=n.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof z){const n=e,r=new de(n.name,t);for(const e of n.members){const t=this._getTypeInfo(e.type,e.attributes);r.members.push(new he(e.name,t,e.attributes))}return this._types.set(e,r),this._updateTypeInfo(r),r}if(e instanceof L){const n=e,r=n.format?this._getTypeInfo(n.format,null):null,i=new fe(n.name,r,t);return this._types.set(e,i),this._updateTypeInfo(i),i}const n=new ce(e.name,t);return this._types.set(e,n),this._updateTypeInfo(n),n}_updateTypeInfo(e){var t,n;const r=this._getTypeSize(e);if(e.size=null!==(t=null==r?void 0:r.size)&&void 0!==t?t:0,e instanceof pe){const t=this._getTypeSize(e.format);e.stride=null!==(n=null==t?void 0:t.size)&&void 0!==n?n:0,this._updateTypeInfo(e.format)}e instanceof de&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let n=0,r=0,i=0,s=0;for(let a=0,o=e.members.length;a<o;++a){const o=e.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(t=this._getAlias(o.type.name))&&void 0!==t||o.type;const l=u.align,c=u.size;n=this._roundUp(l,n+r),r=c,i=n,s=Math.max(s,l),o.offset=n,o.size=c,this._updateTypeInfo(o.type)}e.size=this._roundUp(s,i+r),e.align=s}_getTypeSize(e){var t;if(null==e)return null;const n=this._getAttributeNum(e.attributes,"size",0),r=this._getAttributeNum(e.attributes,"align",0);if(e instanceof he&&(e=e.type),e instanceof ce){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=ke._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new _e(Math.max(r,t.align/i),Math.max(n,t.size/i))}}{const t=ke._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new _e(Math.max(r,t.align/i),Math.max(n,t.size/i))}}if(e instanceof pe){let i=e,s=8,a=8;const o=this._getTypeSize(i.format);return null!==o&&(a=o.size,s=o.align),a=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(s,a)),n&&(a=n),new _e(Math.max(r,s),Math.max(n,a))}if(e instanceof de){let t=0,i=0,s=0,a=0,o=0;for(const n of e.members){const e=this._getTypeSize(n.type);null!==e&&(t=Math.max(e.align,t),s=this._roundUp(e.align,s+a),a=e.size,o=s)}return i=this._roundUp(t,o+a),new _e(Math.max(r,t),Math.max(n,i))}return null}_isUniformVar(e){return e instanceof d&&"uniform"==e.storage}_isStorageVar(e){return e instanceof d&&"storage"==e.storage}_isTextureVar(e){return e instanceof d&&null!==e.type&&-1!=ke._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof d&&null!==e.type&&-1!=ke._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const n=e;if(!n||!n.attributes)return null;const r=n.attributes;for(let e of r)if(e.name==t)return e;return null}_getAttributeNum(e,t,n){if(null===e)return n;for(let r of e)if(r.name==t){let e=null!==r&&null!==r.value?r.value:n;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):n}return n}_roundUp(e,t){return Math.ceil(t/e)*e}}function Me(e,t){const n=function(e){return Array.isArray(e)||r(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),i=Math.max(...n.slice(0,"3d"===t?3:2));return 1+Math.log2(i)|0}ke._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},ke._textureTypes=ae.any_texture_type.map((e=>e.name)),ke._samplerTypes=ae.sampler_type.map((e=>e.name));const Se=new WeakMap;function Te(e,t){let n=Se.get(e);n||(n={pipelineByFormat:{},moduleByView:{}},Se.set(e,n));let{sampler:r}=n;const{pipelineByFormat:i,moduleByView:s}=n,a=function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let o=s[a];o||(o=e.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),s[a]=o),r||(r=e.createSampler({minFilter:"linear"}),n.sampler=r);const u=`${t.format}`;i[u]||(i[u]=e.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:t.format}]}}));const l=i[u],c=e.createCommandEncoder({label:"mip gen encoder"});for(let n=1;n<t.mipLevelCount;++n)for(let i=0;i<t.depthOrArrayLayers;++i){const s=e.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:r},{binding:1,resource:t.createView({dimension:"2d",baseMipLevel:n-1,mipLevelCount:1,baseArrayLayer:i,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:t.createView({baseMipLevel:n,mipLevelCount:1,baseArrayLayer:i,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=c.beginRenderPass(a);o.setPipeline(l),o.setBindGroup(0,s),o.draw(3),o.end()}const h=c.finish();e.queue.submit([h])}const Pe=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Ae(e){return r(e)||Array.isArray(e)||function(e){const t=e;return r(t.data)||Array.isArray(t.data)}(e)}function Ee(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Pe.entries()].map((([e,{formats:[t,n]}])=>[[t,e],[n,e]])).flat());const Ce={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Be=/([a-z]+)(\d+)([a-z]+)/;function Ge(e){const[,t,n,r]=Be.exec(e),i=t.length,s=parseInt(n)/8;return{channels:t,numChannels:i,bytesPerChannel:s,bytesPerElement:i*s,Type:Ce[`${n}${r}`]}}function Ne(e,t,n,i={}){n.forEach(((n,s)=>{const a=[0,0,s+(i.baseArrayLayer||0)];if(Ae(n))!function(e,t,n,i){const s=function(e,t){if(r(e))return e;const{Type:n}=Ge(t);return new n(e)}(n.data||n,t.format),a=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=Ge(t.format),u=i.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:u},s,{bytesPerRow:o*a[0],rowsPerImage:a[1]},a)}(e,t,n,{origin:a});else{const r=n,{flipY:s,premultipliedAlpha:o,colorSpace:u}=i;e.queue.copyExternalImageToTexture({source:r,flipY:s},{texture:t,premultipliedAlpha:o,colorSpace:u,origin:a},ze(r,i))}})),t.mipLevelCount>1&&Te(e,t)}function ze(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const n=e,{width:i,height:s}=n;if(i>0&&s>0&&!Ae(e))return[i,s,1];const a=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:u}=Ge(a),l=r(e)||Array.isArray(e)?e:e.data;return function(e,t,n,r="2d"){if(n%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=n/t)%1)throw new Error("can't guess dimensions")}else if((t=n/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(n/("cube"===r?6:1));i%1==0?(e=i,t=i):(e=n,t=1)}const i=n/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(i,s,(r(l)?l.byteLength:l.length*u)/o)}}async function Le(e,t,n={}){const r=await Promise.all(t.map((e=>async function(e,t={}){const n=await fetch(e),r=await n.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(r,i)}(e))));return function(e,t,n={}){const r=ze(t[0],n);r[2]=r[2]>1?r[2]:t.length;const i=e.createTexture({dimension:Ee(n.dimension),format:n.format||"rgba8unorm",mipLevelCount:n.mipLevelCount?n.mipLevelCount:n.mips?Me(r):1,size:r,usage:(n.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Ne(e,i,t,n),i}(e,r,n)}async function Re(e,t,n={}){return Le(e,[t],n)}},416:(e,t,n)=>{n.d(t,{K4:()=>A,R3:()=>te,_E:()=>_e,vh:()=>Ie});let r=1e-6,i=Float32Array;function s(e=0,t=0){const n=new i(2);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t)),n}const a=s;function o(e,t,n){return(n=n||new i(2))[0]=e[0]-t[0],n[1]=e[1]-t[1],n}const u=o;function l(e,t,n){return(n=n||new i(2))[0]=e[0]*t,n[1]=e[1]*t,n}const c=l;function h(e,t){return(t=t||new i(2))[0]=1/e[0],t[1]=1/e[1],t}const d=h;function p(e,t){return e[0]*t[0]+e[1]*t[1]}function f(e){const t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}const m=f;function g(e){const t=e[0],n=e[1];return t*t+n*n}const _=g;function w(e,t){const n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}const v=w;function y(e,t){const n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}const x=y;function b(e,t){return(t=t||new i(2))[0]=e[0],t[1]=e[1],t}const k=b;function M(e,t,n){return(n=n||new i(2))[0]=e[0]*t[0],n[1]=e[1]*t[1],n}const S=M;function T(e,t,n){return(n=n||new i(2))[0]=e[0]/t[0],n[1]=e[1]/t[1],n}const P=T;var A=Object.freeze({__proto__:null,create:s,setDefaultType:function(e){const t=i;return i=e,t},fromValues:a,set:function(e,t,n){return(n=n||new i(2))[0]=e,n[1]=t,n},ceil:function(e,t){return(t=t||new i(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new i(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new i(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,n=1,r){return(r=r||new i(2))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r},add:function(e,t,n){return(n=n||new i(2))[0]=e[0]+t[0],n[1]=e[1]+t[1],n},addScaled:function(e,t,n,r){return(r=r||new i(2))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[0],s=e[1],a=Math.sqrt(n*n+r*r)*Math.sqrt(i*i+s*s),o=a&&p(e,t)/a;return Math.acos(o)},subtract:o,sub:u,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,n,r){return(r=r||new i(2))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r},lerpV:function(e,t,n,r){return(r=r||new i(2))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r},max:function(e,t,n){return(n=n||new i(2))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},min:function(e,t,n){return(n=n||new i(2))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},mulScalar:l,scale:c,divScalar:function(e,t,n){return(n=n||new i(2))[0]=e[0]/t,n[1]=e[1]/t,n},inverse:h,invert:d,cross:function(e,t,n){n=n||new i(3);const r=e[0]*t[1]-e[1]*t[0];return n[0]=0,n[1]=0,n[2]=r,n},dot:p,length:f,len:m,lengthSq:g,lenSq:_,distance:w,dist:v,distanceSq:y,distSq:x,normalize:function(e,t){t=t||new i(2);const n=e[0],r=e[1],s=Math.sqrt(n*n+r*r);return s>1e-5?(t[0]=n/s,t[1]=r/s):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new i(2))[0]=-e[0],t[1]=-e[1],t},copy:b,clone:k,multiply:M,mul:S,divide:T,div:P,random:function(e=1,t){t=t||new i(2);const n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},zero:function(e){return(e=e||new i(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,n){n=n||new i(2);const r=e[0],s=e[1];return n[0]=r*t[0]+s*t[4]+t[12],n[1]=r*t[1]+s*t[5]+t[13],n},transformMat3:function(e,t,n){n=n||new i(2);const r=e[0],s=e[1];return n[0]=t[0]*r+t[4]*s+t[8],n[1]=t[1]*r+t[5]*s+t[9],n}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let E=Float32Array;function C(e,t,n){const r=new E(3);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t,void 0!==n&&(r[2]=n))),r}const B=C;function G(e,t,n){return(n=n||new E(3))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}const N=G;function z(e,t,n){return(n=n||new E(3))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n}const L=z;function R(e,t){return(t=t||new E(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const U=R;function V(e,t,n){n=n||new E(3);const r=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return n[0]=e[1]*t[2]-e[2]*t[1],n[1]=r,n[2]=i,n}function F(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function O(e){const t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}const I=O;function D(e){const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}const q=D;function H(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(n*n+r*r+i*i)}const $=H;function j(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}const X=j;function Y(e,t){t=t||new E(3);const n=e[0],r=e[1],i=e[2],s=Math.sqrt(n*n+r*r+i*i);return s>1e-5?(t[0]=n/s,t[1]=r/s,t[2]=i/s):(t[0]=0,t[1]=0,t[2]=0),t}function W(e,t){return(t=t||new E(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const K=W;function Q(e,t,n){return(n=n||new E(3))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n}const Z=Q;function J(e,t,n){return(n=n||new E(3))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n}const ee=J;var te=Object.freeze({__proto__:null,create:C,setDefaultType:function(e){const t=E;return E=e,t},fromValues:B,set:function(e,t,n,r){return(r=r||new E(3))[0]=e,r[1]=t,r[2]=n,r},ceil:function(e,t){return(t=t||new E(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new E(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new E(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,n=1,r){return(r=r||new E(3))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r},add:function(e,t,n){return(n=n||new E(3))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},addScaled:function(e,t,n,r){return(r=r||new E(3))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[2],s=e[0],a=e[1],o=e[2],u=Math.sqrt(n*n+r*r+i*i)*Math.sqrt(s*s+a*a+o*o),l=u&&F(e,t)/u;return Math.acos(l)},subtract:G,sub:N,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,n,r){return(r=r||new E(3))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r},lerpV:function(e,t,n,r){return(r=r||new E(3))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r},max:function(e,t,n){return(n=n||new E(3))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},min:function(e,t,n){return(n=n||new E(3))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},mulScalar:z,scale:L,divScalar:function(e,t,n){return(n=n||new E(3))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n},inverse:R,invert:U,cross:V,dot:F,length:O,len:I,lengthSq:D,lenSq:q,distance:H,dist:$,distanceSq:j,distSq:X,normalize:Y,negate:function(e,t){return(t=t||new E(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:W,clone:K,multiply:Q,mul:Z,divide:J,div:ee,random:function(e=1,t){t=t||new E(3);const n=2*Math.random()*Math.PI,r=2*Math.random()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t},zero:function(e){return(e=e||new E(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,n){n=n||new E(3);const r=e[0],i=e[1],s=e[2],a=t[3]*r+t[7]*i+t[11]*s+t[15]||1;return n[0]=(t[0]*r+t[4]*i+t[8]*s+t[12])/a,n[1]=(t[1]*r+t[5]*i+t[9]*s+t[13])/a,n[2]=(t[2]*r+t[6]*i+t[10]*s+t[14])/a,n},transformMat4Upper3x3:function(e,t,n){n=n||new E(3);const r=e[0],i=e[1],s=e[2];return n[0]=r*t[0]+i*t[4]+s*t[8],n[1]=r*t[1]+i*t[5]+s*t[9],n[2]=r*t[2]+i*t[6]+s*t[10],n},transformMat3:function(e,t,n){n=n||new E(3);const r=e[0],i=e[1],s=e[2];return n[0]=r*t[0]+i*t[4]+s*t[8],n[1]=r*t[1]+i*t[5]+s*t[9],n[2]=r*t[2]+i*t[6]+s*t[10],n},transformQuat:function(e,t,n){n=n||new E(3);const r=t[0],i=t[1],s=t[2],a=2*t[3],o=e[0],u=e[1],l=e[2],c=i*l-s*u,h=s*o-r*l,d=r*u-i*o;return n[0]=o+c*a+2*(i*d-s*h),n[1]=u+h*a+2*(s*c-r*d),n[2]=l+d*a+2*(r*h-i*c),n},getTranslation:function(e,t){return(t=t||new E(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||new E(3))[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||new E(3);const n=e[0],r=e[1],i=e[2],s=e[4],a=e[5],o=e[6],u=e[8],l=e[9],c=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(s*s+a*a+o*o),t[2]=Math.sqrt(u*u+l*l+c*c),t}});let ne=Float32Array;function re(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const ie=re;function se(e){return(e=e||new ne(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function ae(e,t){t=t||new ne(16);const n=e[0],r=e[1],i=e[2],s=e[3],a=e[4],o=e[5],u=e[6],l=e[7],c=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],g=e[14],_=e[15],w=d*_,v=g*p,y=u*_,x=g*l,b=u*p,k=d*l,M=i*_,S=g*s,T=i*p,P=d*s,A=i*l,E=u*s,C=c*m,B=f*h,G=a*m,N=f*o,z=a*h,L=c*o,R=n*m,U=f*r,V=n*h,F=c*r,O=n*o,I=a*r,D=w*o+x*h+b*m-(v*o+y*h+k*m),q=v*r+M*h+P*m-(w*r+S*h+T*m),H=y*r+S*o+A*m-(x*r+M*o+E*m),$=k*r+T*o+E*h-(b*r+P*o+A*h),j=1/(n*D+a*q+c*H+f*$);return t[0]=j*D,t[1]=j*q,t[2]=j*H,t[3]=j*$,t[4]=j*(v*a+y*c+k*f-(w*a+x*c+b*f)),t[5]=j*(w*n+S*c+T*f-(v*n+M*c+P*f)),t[6]=j*(x*n+M*a+E*f-(y*n+S*a+A*f)),t[7]=j*(b*n+P*a+A*c-(k*n+T*a+E*c)),t[8]=j*(C*l+N*p+z*_-(B*l+G*p+L*_)),t[9]=j*(B*s+R*p+F*_-(C*s+U*p+V*_)),t[10]=j*(G*s+U*l+O*_-(N*s+R*l+I*_)),t[11]=j*(L*s+V*l+I*p-(z*s+F*l+O*p)),t[12]=j*(G*d+L*g+B*u-(z*g+C*u+N*d)),t[13]=j*(V*g+C*i+U*d-(R*d+F*g+B*i)),t[14]=j*(R*u+I*g+N*i-(O*g+G*i+U*u)),t[15]=j*(O*d+z*i+F*u-(V*u+I*d+L*i)),t}const oe=ae;function ue(e,t,n){n=n||new ne(16);const r=e[0],i=e[1],s=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],h=e[8],d=e[9],p=e[10],f=e[11],m=e[12],g=e[13],_=e[14],w=e[15],v=t[0],y=t[1],x=t[2],b=t[3],k=t[4],M=t[5],S=t[6],T=t[7],P=t[8],A=t[9],E=t[10],C=t[11],B=t[12],G=t[13],N=t[14],z=t[15];return n[0]=r*v+o*y+h*x+m*b,n[1]=i*v+u*y+d*x+g*b,n[2]=s*v+l*y+p*x+_*b,n[3]=a*v+c*y+f*x+w*b,n[4]=r*k+o*M+h*S+m*T,n[5]=i*k+u*M+d*S+g*T,n[6]=s*k+l*M+p*S+_*T,n[7]=a*k+c*M+f*S+w*T,n[8]=r*P+o*A+h*E+m*C,n[9]=i*P+u*A+d*E+g*C,n[10]=s*P+l*A+p*E+_*C,n[11]=a*P+c*A+f*E+w*C,n[12]=r*B+o*G+h*N+m*z,n[13]=i*B+u*G+d*N+g*z,n[14]=s*B+l*G+p*N+_*z,n[15]=a*B+c*G+f*N+w*z,n}const le=ue;let ce,he,de;function pe(e,t,n){n=n||new ne(16);let r=e[0],i=e[1],s=e[2];const a=Math.sqrt(r*r+i*i+s*s);r/=a,i/=a,s/=a;const o=r*r,u=i*i,l=s*s,c=Math.cos(t),h=Math.sin(t),d=1-c;return n[0]=o+(1-o)*c,n[1]=r*i*d+s*h,n[2]=r*s*d-i*h,n[3]=0,n[4]=r*i*d-s*h,n[5]=u+(1-u)*c,n[6]=i*s*d+r*h,n[7]=0,n[8]=r*s*d+i*h,n[9]=i*s*d-r*h,n[10]=l+(1-l)*c,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}const fe=pe;function me(e,t,n,r){r=r||new ne(16);let i=t[0],s=t[1],a=t[2];const o=Math.sqrt(i*i+s*s+a*a);i/=o,s/=o,a/=o;const u=i*i,l=s*s,c=a*a,h=Math.cos(n),d=Math.sin(n),p=1-h,f=u+(1-u)*h,m=i*s*p+a*d,g=i*a*p-s*d,_=i*s*p-a*d,w=l+(1-l)*h,v=s*a*p+i*d,y=i*a*p+s*d,x=s*a*p-i*d,b=c+(1-c)*h,k=e[0],M=e[1],S=e[2],T=e[3],P=e[4],A=e[5],E=e[6],C=e[7],B=e[8],G=e[9],N=e[10],z=e[11];return r[0]=f*k+m*P+g*B,r[1]=f*M+m*A+g*G,r[2]=f*S+m*E+g*N,r[3]=f*T+m*C+g*z,r[4]=_*k+w*P+v*B,r[5]=_*M+w*A+v*G,r[6]=_*S+w*E+v*N,r[7]=_*T+w*C+v*z,r[8]=y*k+x*P+b*B,r[9]=y*M+x*A+b*G,r[10]=y*S+x*E+b*N,r[11]=y*T+x*C+b*z,e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}const ge=me;var _e=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ne;return ne=e,t},create:function(e,t,n,r,i,s,a,o,u,l,c,h,d,p,f,m){const g=new ne(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==n&&(g[2]=n,void 0!==r&&(g[3]=r,void 0!==i&&(g[4]=i,void 0!==s&&(g[5]=s,void 0!==a&&(g[6]=a,void 0!==o&&(g[7]=o,void 0!==u&&(g[8]=u,void 0!==l&&(g[9]=l,void 0!==c&&(g[10]=c,void 0!==h&&(g[11]=h,void 0!==d&&(g[12]=d,void 0!==p&&(g[13]=p,void 0!==f&&(g[14]=f,void 0!==m&&(g[15]=m)))))))))))))))),g},set:function(e,t,n,r,i,s,a,o,u,l,c,h,d,p,f,m,g){return(g=g||new ne(16))[0]=e,g[1]=t,g[2]=n,g[3]=r,g[4]=i,g[5]=s,g[6]=a,g[7]=o,g[8]=u,g[9]=l,g[10]=c,g[11]=h,g[12]=d,g[13]=p,g[14]=f,g[15]=m,g},fromMat3:function(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ne(16);const n=e[0],r=e[1],i=e[2],s=e[3],a=n+n,o=r+r,u=i+i,l=n*a,c=r*a,h=r*o,d=i*a,p=i*o,f=i*u,m=s*a,g=s*o,_=s*u;return t[0]=1-h-f,t[1]=c+_,t[2]=d-g,t[3]=0,t[4]=c-_,t[5]=1-l-f,t[6]=p+m,t[7]=0,t[8]=d+g,t[9]=p-m,t[10]=1-l-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ne(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:re,clone:ie,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r&&Math.abs(e[4]-t[4])<r&&Math.abs(e[5]-t[5])<r&&Math.abs(e[6]-t[6])<r&&Math.abs(e[7]-t[7])<r&&Math.abs(e[8]-t[8])<r&&Math.abs(e[9]-t[9])<r&&Math.abs(e[10]-t[10])<r&&Math.abs(e[11]-t[11])<r&&Math.abs(e[12]-t[12])<r&&Math.abs(e[13]-t[13])<r&&Math.abs(e[14]-t[14])<r&&Math.abs(e[15]-t[15])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:se,transpose:function(e,t){if((t=t||new ne(16))===e){let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,t}const n=e[0],r=e[1],i=e[2],s=e[3],a=e[4],o=e[5],u=e[6],l=e[7],c=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],g=e[14],_=e[15];return t[0]=n,t[1]=a,t[2]=c,t[3]=f,t[4]=r,t[5]=o,t[6]=h,t[7]=m,t[8]=i,t[9]=u,t[10]=d,t[11]=g,t[12]=s,t[13]=l,t[14]=p,t[15]=_,t},inverse:ae,determinant:function(e){const t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],a=e[5],o=e[6],u=e[7],l=e[8],c=e[9],h=e[10],d=e[11],p=e[12],f=e[13],m=e[14],g=e[15],_=h*g,w=m*d,v=o*g,y=m*u,x=o*d,b=h*u,k=r*g,M=m*i,S=r*d,T=h*i,P=r*u,A=o*i;return t*(_*a+y*c+x*f-(w*a+v*c+b*f))+s*(w*n+k*c+T*f-(_*n+M*c+S*f))+l*(v*n+M*a+P*f-(y*n+k*a+A*f))+p*(b*n+S*a+A*c-(x*n+T*a+P*c))},invert:oe,multiply:ue,mul:le,setTranslation:function(e,t,n){return e!==(n=n||se())&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},getTranslation:function(e,t){return(t=t||C())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||C())[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},setAxis:function(e,t,n,r){r!==e&&(r=re(e,r));const i=4*n;return r[i+0]=t[0],r[i+1]=t[1],r[i+2]=t[2],r},getScaling:function(e,t){t=t||C();const n=e[0],r=e[1],i=e[2],s=e[4],a=e[5],o=e[6],u=e[8],l=e[9],c=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(s*s+a*a+o*o),t[2]=Math.sqrt(u*u+l*l+c*c),t},perspective:function(e,t,n,r,i){i=i||new ne(16);const s=Math.tan(.5*Math.PI-.5*e);if(i[0]=s/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=s,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,r===1/0)i[10]=-1,i[14]=-n;else{const e=1/(n-r);i[10]=r*e,i[14]=r*n*e}return i},ortho:function(e,t,n,r,i,s,a){return(a=a||new ne(16))[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(r-n),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(i-s),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(r+n)/(n-r),a[14]=i/(i-s),a[15]=1,a},frustum:function(e,t,n,r,i,s,a){const o=t-e,u=r-n,l=i-s;return(a=a||new ne(16))[0]=2*i/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*i/u,a[6]=0,a[7]=0,a[8]=(e+t)/o,a[9]=(r+n)/u,a[10]=s/l,a[11]=-1,a[12]=0,a[13]=0,a[14]=i*s/l,a[15]=0,a},aim:function(e,t,n,r){return r=r||new ne(16),ce=ce||C(),he=he||C(),de=de||C(),Y(G(t,e,de),de),Y(V(n,de,ce),ce),Y(V(de,ce,he),he),r[0]=ce[0],r[1]=ce[1],r[2]=ce[2],r[3]=0,r[4]=he[0],r[5]=he[1],r[6]=he[2],r[7]=0,r[8]=de[0],r[9]=de[1],r[10]=de[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},cameraAim:function(e,t,n,r){return r=r||new ne(16),ce=ce||C(),he=he||C(),de=de||C(),Y(G(e,t,de),de),Y(V(n,de,ce),ce),Y(V(de,ce,he),he),r[0]=ce[0],r[1]=ce[1],r[2]=ce[2],r[3]=0,r[4]=he[0],r[5]=he[1],r[6]=he[2],r[7]=0,r[8]=de[0],r[9]=de[1],r[10]=de[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},lookAt:function(e,t,n,r){return r=r||new ne(16),ce=ce||C(),he=he||C(),de=de||C(),Y(G(e,t,de),de),Y(V(n,de,ce),ce),Y(V(de,ce,he),he),r[0]=ce[0],r[1]=he[0],r[2]=de[0],r[3]=0,r[4]=ce[1],r[5]=he[1],r[6]=de[1],r[7]=0,r[8]=ce[2],r[9]=he[2],r[10]=de[2],r[11]=0,r[12]=-(ce[0]*e[0]+ce[1]*e[1]+ce[2]*e[2]),r[13]=-(he[0]*e[0]+he[1]*e[1]+he[2]*e[2]),r[14]=-(de[0]*e[0]+de[1]*e[1]+de[2]*e[2]),r[15]=1,r},translation:function(e,t){return(t=t||new ne(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,n){n=n||new ne(16);const r=t[0],i=t[1],s=t[2],a=e[0],o=e[1],u=e[2],l=e[3],c=e[4],h=e[5],d=e[6],p=e[7],f=e[8],m=e[9],g=e[10],_=e[11],w=e[12],v=e[13],y=e[14],x=e[15];return e!==n&&(n[0]=a,n[1]=o,n[2]=u,n[3]=l,n[4]=c,n[5]=h,n[6]=d,n[7]=p,n[8]=f,n[9]=m,n[10]=g,n[11]=_),n[12]=a*r+c*i+f*s+w,n[13]=o*r+h*i+m*s+v,n[14]=u*r+d*i+g*s+y,n[15]=l*r+p*i+_*s+x,n},rotationX:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,n){n=n||new ne(16);const r=e[4],i=e[5],s=e[6],a=e[7],o=e[8],u=e[9],l=e[10],c=e[11],h=Math.cos(t),d=Math.sin(t);return n[4]=h*r+d*o,n[5]=h*i+d*u,n[6]=h*s+d*l,n[7]=h*a+d*c,n[8]=h*o-d*r,n[9]=h*u-d*i,n[10]=h*l-d*s,n[11]=h*c-d*a,e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationY:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,n){n=n||new ne(16);const r=e[0],i=e[1],s=e[2],a=e[3],o=e[8],u=e[9],l=e[10],c=e[11],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r-d*o,n[1]=h*i-d*u,n[2]=h*s-d*l,n[3]=h*a-d*c,n[8]=h*o+d*r,n[9]=h*u+d*i,n[10]=h*l+d*s,n[11]=h*c+d*a,e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationZ:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,n){n=n||new ne(16);const r=e[0],i=e[1],s=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r+d*o,n[1]=h*i+d*u,n[2]=h*s+d*l,n[3]=h*a+d*c,n[4]=h*o-d*r,n[5]=h*u-d*i,n[6]=h*l-d*s,n[7]=h*c-d*a,e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},axisRotation:pe,rotation:fe,axisRotate:me,rotate:ge,scaling:function(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,n){n=n||new ne(16);const r=t[0],i=t[1],s=t[2];return n[0]=r*e[0],n[1]=r*e[1],n[2]=r*e[2],n[3]=r*e[3],n[4]=i*e[4],n[5]=i*e[5],n[6]=i*e[6],n[7]=i*e[7],n[8]=s*e[8],n[9]=s*e[9],n[10]=s*e[10],n[11]=s*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},uniformScaling:function(e,t){return(t=t||new ne(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,n){return(n=n||new ne(16))[0]=t*e[0],n[1]=t*e[1],n[2]=t*e[2],n[3]=t*e[3],n[4]=t*e[4],n[5]=t*e[5],n[6]=t*e[6],n[7]=t*e[7],n[8]=t*e[8],n[9]=t*e[9],n[10]=t*e[10],n[11]=t*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}});Float32Array;let we=Float32Array;function ve(e,t,n,r){const i=new we(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==n&&(i[2]=n,void 0!==r&&(i[3]=r)))),i}const ye=ve;function xe(e,t,n){return(n=n||new we(4))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n}const be=xe;function ke(e,t,n){return(n=n||new we(4))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n}const Me=ke;function Se(e,t){return(t=t||new we(4))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}const Te=Se;function Pe(e){const t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)}const Ae=Pe;function Ee(e){const t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i}const Ce=Ee;function Be(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2],s=e[3]-t[3];return Math.sqrt(n*n+r*r+i*i+s*s)}const Ge=Be;function Ne(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2],s=e[3]-t[3];return n*n+r*r+i*i+s*s}const ze=Ne;function Le(e,t){return(t=t||new we(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Re=Le;function Ue(e,t,n){return(n=n||new we(4))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n[3]=e[3]*t[3],n}const Ve=Ue;function Fe(e,t,n){return(n=n||new we(4))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n[3]=e[3]/t[3],n}const Oe=Fe;var Ie=Object.freeze({__proto__:null,create:ve,setDefaultType:function(e){const t=we;return we=e,t},fromValues:ye,set:function(e,t,n,r,i){return(i=i||new we(4))[0]=e,i[1]=t,i[2]=n,i[3]=r,i},ceil:function(e,t){return(t=t||new we(4))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},floor:function(e,t){return(t=t||new we(4))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},round:function(e,t){return(t=t||new we(4))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},clamp:function(e,t=0,n=1,r){return(r=r||new we(4))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r[3]=Math.min(n,Math.max(t,e[3])),r},add:function(e,t,n){return(n=n||new we(4))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},addScaled:function(e,t,n,r){return(r=r||new we(4))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r[3]=e[3]+t[3]*n,r},subtract:xe,sub:be,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},lerp:function(e,t,n,r){return(r=r||new we(4))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r[3]=e[3]+n*(t[3]-e[3]),r},lerpV:function(e,t,n,r){return(r=r||new we(4))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r[3]=e[3]+n[3]*(t[3]-e[3]),r},max:function(e,t,n){return(n=n||new we(4))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n[3]=Math.max(e[3],t[3]),n},min:function(e,t,n){return(n=n||new we(4))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n[3]=Math.min(e[3],t[3]),n},mulScalar:ke,scale:Me,divScalar:function(e,t,n){return(n=n||new we(4))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n[3]=e[3]/t,n},inverse:Se,invert:Te,dot:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},length:Pe,len:Ae,lengthSq:Ee,lenSq:Ce,distance:Be,dist:Ge,distanceSq:Ne,distSq:ze,normalize:function(e,t){t=t||new we(4);const n=e[0],r=e[1],i=e[2],s=e[3],a=Math.sqrt(n*n+r*r+i*i+s*s);return a>1e-5?(t[0]=n/a,t[1]=r/a,t[2]=i/a,t[3]=s/a):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t},negate:function(e,t){return(t=t||new we(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},copy:Le,clone:Re,multiply:Ue,mul:Ve,divide:Fe,div:Oe,zero:function(e){return(e=e||new we(4))[0]=0,e[1]=0,e[2]=0,e[3]=0,e},transformMat4:function(e,t,n){n=n||new we(4);const r=e[0],i=e[1],s=e[2],a=e[3];return n[0]=t[0]*r+t[4]*i+t[8]*s+t[12]*a,n[1]=t[1]*r+t[5]*i+t[9]*s+t[13]*a,n[2]=t[2]*r+t[6]*i+t[10]*s+t[14]*a,n[3]=t[3]*r+t[7]*i+t[11]*s+t[15]*a,n}})}},s={};function a(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e](n,n.exports,a),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(i,s,a)=>{var o;a&&((o=[]).d=-1);var u,l,c,h=new Set,d=i.exports,p=new Promise(((e,t)=>{c=t,l=e}));p[t]=d,p[e]=e=>(o&&e(o),h.forEach(e),p.catch((e=>{}))),i.exports=p,s((i=>{var s;u=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];s.d=0,i.then((e=>{a[t]=e,r(s)}),(e=>{a[n]=e,r(s)}));var a={};return a[e]=e=>e(s),a}}var o={};return o[e]=e=>{},o[t]=i,o})))(i);var a=()=>u.map((e=>{if(e[n])throw e[n];return e[t]})),l=new Promise((t=>{(s=()=>t(a)).r=0;var n=e=>e!==o&&!h.has(e)&&(h.add(e),e&&!e.d&&(s.r++,e.push(s)));u.map((t=>t[e](n)))}));return s.r?l:a()}),(e=>(e?c(p[n]=e):l(d),r(o)))),o&&o.d<0&&(o.d=0)},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,