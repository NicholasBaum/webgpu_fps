(()=>{"use strict";var t,e,r,s,n={675:(t,e,r)=>{r.d(e,{D:()=>c});var s=r(416);class n{camera;lights;viewProjectionMatrix=s._E.identity();constructor(t,e){this.camera=t,this.lights=e}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}writeToGpu(t){let e=this.lights[0].size;this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"scene uniforms buffer",size:80+this.lights.length*e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})),s._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,0,this.viewProjectionMatrix),t.queue.writeBuffer(this._gpuBuffer,64,this.camera.position);for(let[r,s]of this.lights.entries())t.queue.writeBuffer(this._gpuBuffer,80+r*e,s.getBytes())}}var i=r(284);class a{instances;constructor(t){this.instances=t}get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}_gpuBuffer;writeToGpu(t){this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"models uniforms buffer",size:64*this.instances.length*2,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}));for(let e=0;e<this.instances.length;e++){let r=this.instances[e].transform,n=s._E.transpose(s._E.invert(this.instances[e].transform));t.queue.writeBuffer(this._gpuBuffer,128*e,r),t.queue.writeBuffer(this._gpuBuffer,128*e+64,n)}}}class o{device;canvasFormat;aaSampleCount;sceneMap;lights;camera;groups=[];pipeline;camAndLightUniform;constructor(t,e,r,s){this.device=t,this.canvasFormat=r,this.aaSampleCount=s,this.sceneMap=this.groupByAsset(e.models),this.lights=e.lights,this.camera=e.camera}render(t){this.camAndLightUniform.writeToGpu(this.device);for(let e of this.groups)e.writeToGpu(this.device),t.setPipeline(this.pipeline),t.setBindGroup(0,e.bindGroup),t.setVertexBuffer(0,e.vertexBuffer),t.draw(e.vertexCount,e.instancesCount,0,0)}async initializeAsync(){let t=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16});this.pipeline=await async function(t,e,r){const s=t.createShaderModule({label:"Blinn Phong Shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    lightType : vec4f,\n    positionOrDirection : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n}\n\nstruct Material\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct CameraAndLights\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : CameraAndLights;\n@group(0) @binding(2) var<uniform> material : Material;\n@group(0) @binding(3) var textureSampler : sampler;\n@group(0) @binding(4) var ambientTexture : texture_2d<f32>;\n@group(0) @binding(5) var diffuseTexture : texture_2d<f32>;\n@group(0) @binding(6) var specularTexture : texture_2d<f32>;\n\nstruct VertexOut\n{\n    @builtin(position) position : vec4f,\n    @location(0) vColor : vec4f,\n    @location(1) uv : vec2f,\n    @location(2) normal : vec4f,\n    @location(3) worldPosition : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    return VertexOut(uni.viewProjectionMatrix * worldPos, color, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) vColor : vec4f,\n@location(1) uv : vec2f,\n@location(2) worldPosition : vec4f,\n@location(3) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let lightsCount = i32(arrayLength(&uni.lights));\n    var finalColor = vec4f(0, 0, 0, 1);\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], uv, worldPosition, worldNormal);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let lightDir = normalize(select(-light.positionOrDirection.xyz, light.positionOrDirection.xyz - worldPosition.xyz, light.lightType.x == 1));\n    let intensity = max(dot(lightDir, unitNormal), 0);\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity;\n\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    let H = normalize(lightDir + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x);\n\n    //Blinn-Phong seems to have some artefacts\n    //first of specular should only be rendered on surfaces that are hit by the light aka diffuse intensity>0\n    //by doing this you get some strange cutoffs\n    //that why an alternative ist to multiply the specular with the difusse intensity but this lead to specular highlights with weak intensity\n    //var finalColor = select(ambient + diffuse, ambient + diffuse + specular, intensity > 0);\n    var finalColor = ambient + diffuse + specular * intensity;\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, normalize(worldNormal.xyz) * 0.5 + 0.5, material.mode.x == 2);\n    return vec4f(finalColor, 1);\n}\n"});return async function(t,e,r,s,n){let i=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{}}],a=t.createBindGroupLayout({entries:i}),o={label:"mesh pipeline",layout:t.createPipelineLayout({bindGroupLayouts:[a]}),vertex:{module:e,entryPoint:"vertexMain",buffers:[r]},fragment:{module:e,entryPoint:"fragmentMain",targets:[{format:s,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]},primitive:{topology:"triangle-list",cullMode:"back"},multisample:n?{count:n}:void 0,depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await t.createRenderPipelineAsync(o)}(t,s,i.sY,e,r)}(this.device,this.canvasFormat,this.aaSampleCount),this.camAndLightUniform=new n(this.camera,this.lights),this.camAndLightUniform.writeToGpu(this.device);for(let e of this.sceneMap.values()){let r=e[0].asset;r.writeMeshToGpu(this.device),await r.material.writeTexturesToGpuAsync(this.device,!0),r.material.writeToGpu(this.device);const s=new a(e);s.writeToGpu(this.device);let n=new u(this.device,this.pipeline,s,e.length,r.vertexBuffer,r.vertexCount,r.material,t,this.camAndLightUniform);this.groups.push(n)}}groupByAsset(t){return t.reduce(((t,e)=>{let r=e.asset;return t.has(r)||t.set(r,[]),t.get(r)?.push(e),t}),new Map)}}class u{bindGroup;vertexBuffer;vertexCount;instancesCount;instancesBuffer;material;constructor(t,e,r,s,n,i,a,o,u){this.vertexBuffer=n,this.vertexCount=i,this.instancesCount=s,this.instancesBuffer=r,this.material=a,this.bindGroup=function(t,e,r,s,n,i){let a={label:"binding group",layout:e.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r.gpuBuffer}},{binding:1,resource:{buffer:s.gpuBuffer}},{binding:2,resource:{buffer:n.gpuBuffer}},{binding:3,resource:i},{binding:4,resource:n.ambientTexture.createView()},{binding:5,resource:n.diffuseTexture.createView()},{binding:6,resource:n.specularTexture.createView()}]};return t.createBindGroup(a)}(t,e,this.instancesBuffer,u,a,o)}writeToGpu(t){this.instancesBuffer.writeToGpu(t),this.material.writeToGpu(t)}}class c{scene;canvas;useMSAA=!0;aaSampleCount=4;device;context;canvasFormat;renderTarget;depthTexture;depthTextureView;inputHandler;lastFrameMS=Date.now();renderer=null;constructor(t,e){this.scene=t,this.canvas=e,this.inputHandler=function(t,e){const r={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},s={x:0,y:0,zoom:0};let n=!1;const i=(t,e)=>{switch(t.code){case"KeyW":r.forward=e,t.preventDefault(),t.stopPropagation();break;case"KeyS":r.backward=e,t.preventDefault(),t.stopPropagation();break;case"KeyA":r.left=e,t.preventDefault(),t.stopPropagation();break;case"KeyD":r.right=e,t.preventDefault(),t.stopPropagation();break;case"Space":r.up=e,t.preventDefault(),t.stopPropagation();break;case"ShiftLeft":case"ControlLeft":case"KeyC":r.down=e,t.preventDefault(),t.stopPropagation()}};return t.addEventListener("keydown",(t=>i(t,!0))),t.addEventListener("keyup",(t=>i(t,!1))),e.addEventListener("mousedown",(()=>{n=!0})),e.addEventListener("mouseup",(()=>{n=!1})),e.addEventListener("mousemove",(t=>{n=0!=(1&t.buttons),n&&(s.x+=t.movementX,s.y+=t.movementY)})),e.addEventListener("wheel",(t=>{n=0!=(1&t.buttons),n&&(s.zoom+=Math.sign(t.deltaY),t.preventDefault(),t.stopPropagation())}),{passive:!1}),()=>{const t={digital:r,analog:{x:s.x,y:s.y,zoom:s.zoom,touching:n}};return s.x=0,s.y=0,s.zoom=0,t}}(window,e)}async run(){await this.initAsync(),this.render()}async initAsync(){await this.initGpuContext(),this.scene.camera.aspect=this.canvas.width/this.canvas.height,this.renderer=new o(this.device,this.scene,this.canvasFormat,this.aaSampleCount),await this.renderer.initializeAsync()}render(){requestAnimationFrame((()=>{const t=this.getDeltaTime();this.scene.update(t),this.scene.camera.update(t,this.inputHandler());let e=this.context.getCurrentTexture().createView();const r={colorAttachments:[{view:this.useMSAA?this.renderTarget.createView():e,resolveTarget:e,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},s=this.device.createCommandEncoder(),n=s.beginRenderPass(r);this.renderer.render(n),n.end(),this.device.queue.submit([s.finish()]),this.render()}))}getDeltaTime(){const t=Date.now(),e=(t-this.lastFrameMS)/1e3;return this.lastFrameMS=t,e}async initGpuContext(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");this.device=await t.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),this.context.configure({device:this.device,format:this.canvasFormat,alphaMode:"premultiplied"}),this.useMSAA&&(this.renderTarget=this.device.createTexture({size:[this.canvas.width,this.canvas.height],sampleCount:this.aaSampleCount,format:this.canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.depthTexture=this.device.createTexture({size:[this.canvas.width,this.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:this.useMSAA?this.aaSampleCount:1}),this.depthTextureView=this.depthTexture.createView()}}},607:(t,e,r)=>{r.a(t,(async(t,e)=>{try{var s=r(675),n=r(901);const t=document.querySelector("canvas"),i=new s.D(new n.N,t);i.scene.attachUi(t),await i.run(),e()}catch(t){e(t)}}),1)},284:(t,e,r)=>{r.d(e,{Vk:()=>a,nk:()=>s,qw:()=>n,sY:()=>i});const s="triangle-list",n=36,i={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1])},901:(t,e,r)=>{r.d(e,{N:()=>Jt});var s=r(416);class n{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(t){this._aspect=t,this._projectionMatrix=s._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=s._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=s._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(t){s._E.copy(t,this.matrix_)}get view(){return this.view_}set view(t){s._E.copy(t,this.view_)}get right(){return this.right_}set right(t){s.R3.copy(t,this.right_)}get up(){return this.up_}set up(t){s.R3.copy(t,this.up_)}get back(){return this.back_}set back(t){s.R3.copy(t,this.back_)}get position(){return this.position_}set position(t){s.R3.copy(t,this.position_)}}class i extends n{pitch=0;yaw=0;velocity_=s.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(t){s.R3.copy(t,this.velocity_)}constructor(t){if(super(),t&&(t.position||t.target||t.movementSpeed)){const e=t.position??s.R3.create(0,0,-5),r=t.target??s.R3.create(0,0,0);this.back=s.R3.normalize(s.R3.subtract(e,r)),this.recalculateAngles(this.back),this.position=e,this.movementSpeed=t.movementSpeed??10,this.aspect=t.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(t){super.matrix=t,this.recalculateAngles(this.back)}update(t,e){const r=(t,e)=>(t?1:0)-(e?1:0);var n,i;this.yaw-=e.analog.x*t*this.rotationSpeed,this.pitch-=e.analog.y*t*this.rotationSpeed,this.yaw=(n=this.yaw,i=2*Math.PI,n-Math.floor(Math.abs(n)/i)*i*Math.sign(n)),this.pitch=function(t,e,r){return Math.min(Math.max(t,e),r)}(this.pitch,-Math.PI/2,Math.PI/2);const a=s.R3.copy(this.position);super.matrix=s._E.rotateX(s._E.rotationY(this.yaw),this.pitch);const o=e.digital,u=r(o.right,o.left),c=r(o.up,o.down),l=s.R3.create(),h=r(o.backward,o.forward);s.R3.addScaled(l,this.right,u,l),s.R3.addScaled(l,this.up,c,l),s.R3.addScaled(l,this.back,h,l),s.R3.normalize(l,l),s.R3.mulScalar(l,this.movementSpeed,l),this.velocity=function(t,e,r){return s.R3.addScaled(t,s.R3.sub(e,t),r)}(l,this.velocity,Math.pow(1-this.frictionCoefficient,t)),this.position=s.R3.addScaled(a,this.velocity,t),this.view=s._E.invert(this.matrix)}recalculateAngles(t){this.yaw=Math.atan2(t[0],t[2]),this.pitch=-Math.asin(t[1])}}class a{name;asset;transform;constructor(t,e,r=s._E.identity()){this.name=t,this.asset=e,this.transform=r}translate(t,e,r){return s._E.translate(this.transform,[t,e,r],this.transform),this}rotate(t,e,r){return s._E.rotateX(this.transform,t/180*Math.PI,this.transform),s._E.rotateY(this.transform,e/180*Math.PI,this.transform),s._E.rotateZ(this.transform,r/180*Math.PI,this.transform),this}scale(t,e,r){return s._E.scale(this.transform,[t,e,r],this.transform),this}}const o=t=>t&&"number"==typeof t.length&&t.buffer instanceof ArrayBuffer&&"number"==typeof t.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class u{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class c{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(t){throw new Error("Cannot evaluate node")}evaluateString(t){return this.evaluate(t).toString()}}class l extends c{constructor(){super()}}class h extends l{constructor(t,e,r,s){super(),this.name=t,this.args=e,this.returnType=r,this.body=s}get astNodeType(){return"function"}}class _ extends l{constructor(t){super(),this.expression=t}get astNodeType(){return"staticAssert"}}class d extends l{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"while"}}class p extends l{constructor(t){super(),this.body=t}get astNodeType(){return"continuing"}}class f extends l{constructor(t,e,r,s){super(),this.init=t,this.condition=e,this.increment=r,this.body=s}get astNodeType(){return"for"}}class m extends l{constructor(t,e,r,s,n){super(),this.name=t,this.type=e,this.storage=r,this.access=s,this.value=n}get astNodeType(){return"var"}}class g extends l{constructor(t,e,r){super(),this.name=t,this.type=e,this.value=r}get astNodeType(){return"override"}}class y extends l{constructor(t,e,r,s,n){super(),this.name=t,this.type=e,this.storage=r,this.access=s,this.value=n}get astNodeType(){return"let"}}class w extends l{constructor(t,e,r,s,n){super(),this.name=t,this.type=e,this.storage=r,this.access=s,this.value=n}get astNodeType(){return"const"}evaluate(t){return this.value.evaluate(t)}}var x,k,v,b,M;!function(t){t.increment="++",t.decrement="--"}(x||(x={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return t[r]}}(x||(x={}));class A extends l{constructor(t,e){super(),this.operator=t,this.variable=e}get astNodeType(){return"increment"}}!function(t){t.assign="=",t.addAssign="+=",t.subtractAssin="-=",t.multiplyAssign="*=",t.divideAssign="/=",t.moduloAssign="%=",t.andAssign="&=",t.orAssign="|=",t.xorAssign="^=",t.shiftLeftAssign="<<=",t.shiftRightAssign=">>="}(k||(k={})),function(t){t.parse=function(e){const r=e;if("parse"==r)throw new Error("Invalid value for AssignOperator");return t[r]}}(k||(k={}));class T extends l{constructor(t,e,r){super(),this.operator=t,this.variable=e,this.value=r}get astNodeType(){return"assign"}}class S extends l{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"call"}}class E extends l{constructor(t,e){super(),this.body=t,this.continuing=e}get astNodeType(){return"loop"}}class C extends l{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"body"}}class P extends l{constructor(t,e,r,s){super(),this.condition=t,this.body=e,this.elseif=r,this.else=s}get astNodeType(){return"if"}}class q extends l{constructor(t){super(),this.value=t}get astNodeType(){return"return"}}class z extends l{constructor(t){super(),this.name=t}get astNodeType(){return"enable"}}class U extends l{constructor(t,e){super(),this.name=t,this.type=e}get astNodeType(){return"alias"}}class B extends l{constructor(){super()}get astNodeType(){return"discard"}}class I extends l{constructor(){super()}get astNodeType(){return"break"}}class N extends l{constructor(){super()}get astNodeType(){return"continue"}}class F extends l{constructor(t){super(),this.name=t}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class O extends F{constructor(t,e){super(t),this.members=e}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(t){for(let e=0;e<this.members.length;e++)if(this.members[e].name==t)return e;return-1}}class D extends F{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"template"}}class G extends F{constructor(t,e,r,s){super(t),this.storage=e,this.type=r,this.access=s}get astNodeType(){return"pointer"}}class L extends F{constructor(t,e,r,s){super(t),this.attributes=e,this.format=r,this.count=s}get astNodeType(){return"array"}get isArray(){return!0}}class R extends F{constructor(t,e,r){super(t),this.format=e,this.access=r}get astNodeType(){return"sampler"}}class V extends c{constructor(){super()}}class Y extends V{constructor(t){super(),this.value=t}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class j extends V{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"createExpr"}}class $ extends V{constructor(t,e){super(),this.name=t,this.args=e}get astNodeType(){return"callExpr"}evaluate(t){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(t));case"acos":return Math.acos(this.args[0].evaluate(t));case"acosh":return Math.acosh(this.args[0].evaluate(t));case"asin":return Math.asin(this.args[0].evaluate(t));case"asinh":return Math.asinh(this.args[0].evaluate(t));case"atan":return Math.atan(this.args[0].evaluate(t));case"atan2":return Math.atan2(this.args[0].evaluate(t),this.args[1].evaluate(t));case"atanh":return Math.atanh(this.args[0].evaluate(t));case"ceil":return Math.ceil(this.args[0].evaluate(t));case"clamp":return Math.min(Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t)),this.args[2].evaluate(t));case"cos":return Math.cos(this.args[0].evaluate(t));case"degrees":return 180*this.args[0].evaluate(t)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(t)-this.args[1].evaluate(t),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(t));case"exp2":return Math.pow(2,this.args[0].evaluate(t));case"floor":return Math.floor(this.args[0].evaluate(t));case"fma":return this.args[0].evaluate(t)*this.args[1].evaluate(t)+this.args[2].evaluate(t);case"fract":case"modf":return this.args[0].evaluate(t)-Math.floor(this.args[0].evaluate(t));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(t));case"log":return Math.log(this.args[0].evaluate(t));case"log2":return Math.log2(this.args[0].evaluate(t));case"max":return Math.max(this.args[0].evaluate(t),this.args[1].evaluate(t));case"min":return Math.min(this.args[0].evaluate(t),this.args[1].evaluate(t));case"mix":return this.args[0].evaluate(t)*(1-this.args[2].evaluate(t))+this.args[1].evaluate(t)*this.args[2].evaluate(t);case"pow":return Math.pow(this.args[0].evaluate(t),this.args[1].evaluate(t));case"radians":return this.args[0].evaluate(t)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(t));case"sign":return Math.sign(this.args[0].evaluate(t));case"sin":return Math.sin(this.args[0].evaluate(t));case"sinh":return Math.sinh(this.args[0].evaluate(t));case"saturate":return Math.min(Math.max(this.args[0].evaluate(t),0),1);case"smoothstep":return this.args[0].evaluate(t)*this.args[0].evaluate(t)*(3-2*this.args[0].evaluate(t));case"sqrt":return Math.sqrt(this.args[0].evaluate(t));case"step":return this.args[0].evaluate(t)<this.args[1].evaluate(t)?0:1;case"tan":return Math.tan(this.args[0].evaluate(t));case"tanh":return Math.tanh(this.args[0].evaluate(t));case"trunc":return Math.trunc(this.args[0].evaluate(t));default:throw new Error("Non const function: "+this.name)}}}class H extends V{constructor(t){super(),this.name=t}get astNodeType(){return"varExpr"}}class X extends V{constructor(t,e){super(),this.name=t,this.initializer=e}get astNodeType(){return"constExpr"}evaluate(t){var e,r;if(this.initializer instanceof j){const s=null===(e=this.postfix)||void 0===e?void 0:e.evaluateString(t),n=null===(r=this.initializer.type)||void 0===r?void 0:r.name,i=t.structs.get(n),a=null==i?void 0:i.getMemberIndex(s);if(-1!=a)return this.initializer.args[a].evaluate(t);console.log(a)}return this.initializer.evaluate(t)}}class W extends V{constructor(t){super(),this.value=t}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class K extends V{constructor(t,e){super(),this.type=t,this.value=e}get astNodeType(){return"bitcastExpr"}}class Z extends V{constructor(t,e){super(),this.type=t,this.args=e}get astNodeType(){return"typecastExpr"}evaluate(t){return this.args[0].evaluate(t)}}class Q extends V{constructor(t){super(),this.contents=t}get astNodeType(){return"groupExpr"}evaluate(t){return this.contents[0].evaluate(t)}}class J extends V{constructor(){super()}}class tt extends J{constructor(t,e){super(),this.operator=t,this.right=e}get astNodeType(){return"unaryOp"}evaluate(t){switch(this.operator){case"+":return this.right.evaluate(t);case"-":return-this.right.evaluate(t);case"!":return this.right.evaluate(t)?0:1;case"~":return~this.right.evaluate(t);default:throw new Error("Unknown unary operator: "+this.operator)}}}class et extends J{constructor(t,e,r){super(),this.operator=t,this.left=e,this.right=r}get astNodeType(){return"binaryOp"}evaluate(t){switch(this.operator){case"+":return this.left.evaluate(t)+this.right.evaluate(t);case"-":return this.left.evaluate(t)-this.right.evaluate(t);case"*":return this.left.evaluate(t)*this.right.evaluate(t);case"/":return this.left.evaluate(t)/this.right.evaluate(t);case"%":return this.left.evaluate(t)%this.right.evaluate(t);case"==":return this.left.evaluate(t)==this.right.evaluate(t)?1:0;case"!=":return this.left.evaluate(t)!=this.right.evaluate(t)?1:0;case"<":return this.left.evaluate(t)<this.right.evaluate(t)?1:0;case">":return this.left.evaluate(t)>this.right.evaluate(t)?1:0;case"<=":return this.left.evaluate(t)<=this.right.evaluate(t)?1:0;case">=":return this.left.evaluate(t)>=this.right.evaluate(t)?1:0;case"&&":return this.left.evaluate(t)&&this.right.evaluate(t)?1:0;case"||":return this.left.evaluate(t)||this.right.evaluate(t)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class rt extends c{constructor(){super()}}class st extends rt{constructor(t,e){super(),this.selector=t,this.body=e}get astNodeType(){return"case"}}class nt extends rt{constructor(t){super(),this.body=t}get astNodeType(){return"default"}}class it extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"argument"}}class at extends c{constructor(t,e){super(),this.condition=t,this.body=e}get astNodeType(){return"elseif"}}class ot extends c{constructor(t,e,r){super(),this.name=t,this.type=e,this.attributes=r}get astNodeType(){return"member"}}class ut extends c{constructor(t,e){super(),this.name=t,this.value=e}get astNodeType(){return"attribute"}}!function(t){t[t.token=0]="token",t[t.keyword=1]="keyword",t[t.reserved=2]="reserved"}(b||(b={}));class ct{constructor(t,e,r){this.name=t,this.type=e,this.rule=r}toString(){return this.name}}class lt{}v=lt,lt.none=new ct("",b.reserved,""),lt.eof=new ct("EOF",b.token,""),lt.reserved={asm:new ct("asm",b.reserved,"asm"),bf16:new ct("bf16",b.reserved,"bf16"),do:new ct("do",b.reserved,"do"),enum:new ct("enum",b.reserved,"enum"),f16:new ct("f16",b.reserved,"f16"),f64:new ct("f64",b.reserved,"f64"),handle:new ct("handle",b.reserved,"handle"),i8:new ct("i8",b.reserved,"i8"),i16:new ct("i16",b.reserved,"i16"),i64:new ct("i64",b.reserved,"i64"),mat:new ct("mat",b.reserved,"mat"),premerge:new ct("premerge",b.reserved,"premerge"),regardless:new ct("regardless",b.reserved,"regardless"),typedef:new ct("typedef",b.reserved,"typedef"),u8:new ct("u8",b.reserved,"u8"),u16:new ct("u16",b.reserved,"u16"),u64:new ct("u64",b.reserved,"u64"),unless:new ct("unless",b.reserved,"unless"),using:new ct("using",b.reserved,"using"),vec:new ct("vec",b.reserved,"vec"),void:new ct("void",b.reserved,"void")},lt.keywords={array:new ct("array",b.keyword,"array"),atomic:new ct("atomic",b.keyword,"atomic"),bool:new ct("bool",b.keyword,"bool"),f32:new ct("f32",b.keyword,"f32"),i32:new ct("i32",b.keyword,"i32"),mat2x2:new ct("mat2x2",b.keyword,"mat2x2"),mat2x3:new ct("mat2x3",b.keyword,"mat2x3"),mat2x4:new ct("mat2x4",b.keyword,"mat2x4"),mat3x2:new ct("mat3x2",b.keyword,"mat3x2"),mat3x3:new ct("mat3x3",b.keyword,"mat3x3"),mat3x4:new ct("mat3x4",b.keyword,"mat3x4"),mat4x2:new ct("mat4x2",b.keyword,"mat4x2"),mat4x3:new ct("mat4x3",b.keyword,"mat4x3"),mat4x4:new ct("mat4x4",b.keyword,"mat4x4"),ptr:new ct("ptr",b.keyword,"ptr"),sampler:new ct("sampler",b.keyword,"sampler"),sampler_comparison:new ct("sampler_comparison",b.keyword,"sampler_comparison"),struct:new ct("struct",b.keyword,"struct"),texture_1d:new ct("texture_1d",b.keyword,"texture_1d"),texture_2d:new ct("texture_2d",b.keyword,"texture_2d"),texture_2d_array:new ct("texture_2d_array",b.keyword,"texture_2d_array"),texture_3d:new ct("texture_3d",b.keyword,"texture_3d"),texture_cube:new ct("texture_cube",b.keyword,"texture_cube"),texture_cube_array:new ct("texture_cube_array",b.keyword,"texture_cube_array"),texture_multisampled_2d:new ct("texture_multisampled_2d",b.keyword,"texture_multisampled_2d"),texture_storage_1d:new ct("texture_storage_1d",b.keyword,"texture_storage_1d"),texture_storage_2d:new ct("texture_storage_2d",b.keyword,"texture_storage_2d"),texture_storage_2d_array:new ct("texture_storage_2d_array",b.keyword,"texture_storage_2d_array"),texture_storage_3d:new ct("texture_storage_3d",b.keyword,"texture_storage_3d"),texture_depth_2d:new ct("texture_depth_2d",b.keyword,"texture_depth_2d"),texture_depth_2d_array:new ct("texture_depth_2d_array",b.keyword,"texture_depth_2d_array"),texture_depth_cube:new ct("texture_depth_cube",b.keyword,"texture_depth_cube"),texture_depth_cube_array:new ct("texture_depth_cube_array",b.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new ct("texture_depth_multisampled_2d",b.keyword,"texture_depth_multisampled_2d"),texture_external:new ct("texture_external",b.keyword,"texture_external"),u32:new ct("u32",b.keyword,"u32"),vec2:new ct("vec2",b.keyword,"vec2"),vec3:new ct("vec3",b.keyword,"vec3"),vec4:new ct("vec4",b.keyword,"vec4"),bitcast:new ct("bitcast",b.keyword,"bitcast"),block:new ct("block",b.keyword,"block"),break:new ct("break",b.keyword,"break"),case:new ct("case",b.keyword,"case"),continue:new ct("continue",b.keyword,"continue"),continuing:new ct("continuing",b.keyword,"continuing"),default:new ct("default",b.keyword,"default"),discard:new ct("discard",b.keyword,"discard"),else:new ct("else",b.keyword,"else"),enable:new ct("enable",b.keyword,"enable"),fallthrough:new ct("fallthrough",b.keyword,"fallthrough"),false:new ct("false",b.keyword,"false"),fn:new ct("fn",b.keyword,"fn"),for:new ct("for",b.keyword,"for"),function:new ct("function",b.keyword,"function"),if:new ct("if",b.keyword,"if"),let:new ct("let",b.keyword,"let"),const:new ct("const",b.keyword,"const"),loop:new ct("loop",b.keyword,"loop"),while:new ct("while",b.keyword,"while"),private:new ct("private",b.keyword,"private"),read:new ct("read",b.keyword,"read"),read_write:new ct("read_write",b.keyword,"read_write"),return:new ct("return",b.keyword,"return"),storage:new ct("storage",b.keyword,"storage"),switch:new ct("switch",b.keyword,"switch"),true:new ct("true",b.keyword,"true"),alias:new ct("alias",b.keyword,"alias"),type:new ct("type",b.keyword,"type"),uniform:new ct("uniform",b.keyword,"uniform"),var:new ct("var",b.keyword,"var"),override:new ct("override",b.keyword,"override"),workgroup:new ct("workgroup",b.keyword,"workgroup"),write:new ct("write",b.keyword,"write"),r8unorm:new ct("r8unorm",b.keyword,"r8unorm"),r8snorm:new ct("r8snorm",b.keyword,"r8snorm"),r8uint:new ct("r8uint",b.keyword,"r8uint"),r8sint:new ct("r8sint",b.keyword,"r8sint"),r16uint:new ct("r16uint",b.keyword,"r16uint"),r16sint:new ct("r16sint",b.keyword,"r16sint"),r16float:new ct("r16float",b.keyword,"r16float"),rg8unorm:new ct("rg8unorm",b.keyword,"rg8unorm"),rg8snorm:new ct("rg8snorm",b.keyword,"rg8snorm"),rg8uint:new ct("rg8uint",b.keyword,"rg8uint"),rg8sint:new ct("rg8sint",b.keyword,"rg8sint"),r32uint:new ct("r32uint",b.keyword,"r32uint"),r32sint:new ct("r32sint",b.keyword,"r32sint"),r32float:new ct("r32float",b.keyword,"r32float"),rg16uint:new ct("rg16uint",b.keyword,"rg16uint"),rg16sint:new ct("rg16sint",b.keyword,"rg16sint"),rg16float:new ct("rg16float",b.keyword,"rg16float"),rgba8unorm:new ct("rgba8unorm",b.keyword,"rgba8unorm"),rgba8unorm_srgb:new ct("rgba8unorm_srgb",b.keyword,"rgba8unorm_srgb"),rgba8snorm:new ct("rgba8snorm",b.keyword,"rgba8snorm"),rgba8uint:new ct("rgba8uint",b.keyword,"rgba8uint"),rgba8sint:new ct("rgba8sint",b.keyword,"rgba8sint"),bgra8unorm:new ct("bgra8unorm",b.keyword,"bgra8unorm"),bgra8unorm_srgb:new ct("bgra8unorm_srgb",b.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new ct("rgb10a2unorm",b.keyword,"rgb10a2unorm"),rg11b10float:new ct("rg11b10float",b.keyword,"rg11b10float"),rg32uint:new ct("rg32uint",b.keyword,"rg32uint"),rg32sint:new ct("rg32sint",b.keyword,"rg32sint"),rg32float:new ct("rg32float",b.keyword,"rg32float"),rgba16uint:new ct("rgba16uint",b.keyword,"rgba16uint"),rgba16sint:new ct("rgba16sint",b.keyword,"rgba16sint"),rgba16float:new ct("rgba16float",b.keyword,"rgba16float"),rgba32uint:new ct("rgba32uint",b.keyword,"rgba32uint"),rgba32sint:new ct("rgba32sint",b.keyword,"rgba32sint"),rgba32float:new ct("rgba32float",b.keyword,"rgba32float"),static_assert:new ct("static_assert",b.keyword,"static_assert")},lt.tokens={decimal_float_literal:new ct("decimal_float_literal",b.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new ct("hex_float_literal",b.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new ct("int_literal",b.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new ct("uint_literal",b.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new ct("ident",b.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new ct("and",b.token,"&"),and_and:new ct("and_and",b.token,"&&"),arrow:new ct("arrow ",b.token,"->"),attr:new ct("attr",b.token,"@"),attr_left:new ct("attr_left",b.token,"[["),attr_right:new ct("attr_right",b.token,"]]"),forward_slash:new ct("forward_slash",b.token,"/"),bang:new ct("bang",b.token,"!"),bracket_left:new ct("bracket_left",b.token,"["),bracket_right:new ct("bracket_right",b.token,"]"),brace_left:new ct("brace_left",b.token,"{"),brace_right:new ct("brace_right",b.token,"}"),colon:new ct("colon",b.token,":"),comma:new ct("comma",b.token,","),equal:new ct("equal",b.token,"="),equal_equal:new ct("equal_equal",b.token,"=="),not_equal:new ct("not_equal",b.token,"!="),greater_than:new ct("greater_than",b.token,">"),greater_than_equal:new ct("greater_than_equal",b.token,">="),shift_right:new ct("shift_right",b.token,">>"),less_than:new ct("less_than",b.token,"<"),less_than_equal:new ct("less_than_equal",b.token,"<="),shift_left:new ct("shift_left",b.token,"<<"),modulo:new ct("modulo",b.token,"%"),minus:new ct("minus",b.token,"-"),minus_minus:new ct("minus_minus",b.token,"--"),period:new ct("period",b.token,"."),plus:new ct("plus",b.token,"+"),plus_plus:new ct("plus_plus",b.token,"++"),or:new ct("or",b.token,"|"),or_or:new ct("or_or",b.token,"||"),paren_left:new ct("paren_left",b.token,"("),paren_right:new ct("paren_right",b.token,")"),semicolon:new ct("semicolon",b.token,";"),star:new ct("star",b.token,"*"),tilde:new ct("tilde",b.token,"~"),underscore:new ct("underscore",b.token,"_"),xor:new ct("xor",b.token,"^"),plus_equal:new ct("plus_equal",b.token,"+="),minus_equal:new ct("minus_equal",b.token,"-="),times_equal:new ct("times_equal",b.token,"*="),division_equal:new ct("division_equal",b.token,"/="),modulo_equal:new ct("modulo_equal",b.token,"%="),and_equal:new ct("and_equal",b.token,"&="),or_equal:new ct("or_equal",b.token,"|="),xor_equal:new ct("xor_equal",b.token,"^="),shift_right_equal:new ct("shift_right_equal",b.token,">>="),shift_left_equal:new ct("shift_left_equal",b.token,"<<=")},lt.storage_class=[v.keywords.function,v.keywords.private,v.keywords.workgroup,v.keywords.uniform,v.keywords.storage],lt.access_mode=[v.keywords.read,v.keywords.write,v.keywords.read_write],lt.sampler_type=[v.keywords.sampler,v.keywords.sampler_comparison],lt.sampled_texture_type=[v.keywords.texture_1d,v.keywords.texture_2d,v.keywords.texture_2d_array,v.keywords.texture_3d,v.keywords.texture_cube,v.keywords.texture_cube_array],lt.multisampled_texture_type=[v.keywords.texture_multisampled_2d],lt.storage_texture_type=[v.keywords.texture_storage_1d,v.keywords.texture_storage_2d,v.keywords.texture_storage_2d_array,v.keywords.texture_storage_3d],lt.depth_texture_type=[v.keywords.texture_depth_2d,v.keywords.texture_depth_2d_array,v.keywords.texture_depth_cube,v.keywords.texture_depth_cube_array,v.keywords.texture_depth_multisampled_2d],lt.texture_external_type=[v.keywords.texture_external],lt.any_texture_type=[...v.sampled_texture_type,...v.multisampled_texture_type,...v.storage_texture_type,...v.depth_texture_type,...v.texture_external_type],lt.texel_format=[v.keywords.r8unorm,v.keywords.r8snorm,v.keywords.r8uint,v.keywords.r8sint,v.keywords.r16uint,v.keywords.r16sint,v.keywords.r16float,v.keywords.rg8unorm,v.keywords.rg8snorm,v.keywords.rg8uint,v.keywords.rg8sint,v.keywords.r32uint,v.keywords.r32sint,v.keywords.r32float,v.keywords.rg16uint,v.keywords.rg16sint,v.keywords.rg16float,v.keywords.rgba8unorm,v.keywords.rgba8unorm_srgb,v.keywords.rgba8snorm,v.keywords.rgba8uint,v.keywords.rgba8sint,v.keywords.bgra8unorm,v.keywords.bgra8unorm_srgb,v.keywords.rgb10a2unorm,v.keywords.rg11b10float,v.keywords.rg32uint,v.keywords.rg32sint,v.keywords.rg32float,v.keywords.rgba16uint,v.keywords.rgba16sint,v.keywords.rgba16float,v.keywords.rgba32uint,v.keywords.rgba32sint,v.keywords.rgba32float],lt.const_literal=[v.tokens.int_literal,v.tokens.uint_literal,v.tokens.decimal_float_literal,v.tokens.hex_float_literal,v.keywords.true,v.keywords.false],lt.literal_or_ident=[v.tokens.ident,v.tokens.int_literal,v.tokens.uint_literal,v.tokens.decimal_float_literal,v.tokens.hex_float_literal],lt.element_count_expression=[v.tokens.int_literal,v.tokens.uint_literal,v.tokens.ident],lt.template_types=[v.keywords.vec2,v.keywords.vec3,v.keywords.vec4,v.keywords.mat2x2,v.keywords.mat2x3,v.keywords.mat2x4,v.keywords.mat3x2,v.keywords.mat3x3,v.keywords.mat3x4,v.keywords.mat4x2,v.keywords.mat4x3,v.keywords.mat4x4,v.keywords.atomic,v.keywords.bitcast,...v.any_texture_type],lt.attribute_name=[v.tokens.ident,v.keywords.block],lt.assignment_operators=[v.tokens.equal,v.tokens.plus_equal,v.tokens.minus_equal,v.tokens.times_equal,v.tokens.division_equal,v.tokens.modulo_equal,v.tokens.and_equal,v.tokens.or_equal,v.tokens.xor_equal,v.tokens.shift_right_equal,v.tokens.shift_left_equal],lt.increment_operators=[v.tokens.plus_plus,v.tokens.minus_minus];class ht{constructor(t,e,r){this.type=t,this.lexeme=e,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=lt.template_types.indexOf(this.type)}isArrayType(){return this.type==lt.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class _t{constructor(t){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=t?t:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new ht(lt.eof,"",this._line)),this._tokens}scanToken(){let t=this._advance();if("\n"==t)return this._line++,!0;if(this._isWhitespace(t))return!0;if("/"==t){if("/"==this._peekAhead()){for(;"\n"!=t;){if(this._isAtEnd())return!0;t=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let e=1;for(;e>0;){if(this._isAtEnd())return!0;if(t=this._advance(),"\n"==t)this._line++;else if("*"==t){if("/"==this._peekAhead()&&(this._advance(),e--,0==e))return!0}else"/"==t&&"*"==this._peekAhead()&&(this._advance(),e++)}return!0}}let e=lt.none;for(;;){let r=this._findType(t);const s=this._peekAhead();if(">"==t&&(">"==s||"="==s)){let t=!1,e=this._tokens.length-1;for(let r=0;r<4&&e>=0;++r,--e)if(this._tokens[e].type===lt.tokens.less_than){e>0&&this._tokens[e-1].isArrayOrTemplateType()&&(t=!0);break}if(t)return this._addToken(r),!0}if(r===lt.none){let s=t,n=0;const i=2;for(let t=0;t<i;++t)if(s+=this._peekAhead(t),r=this._findType(s),r!==lt.none){n=t;break}if(r===lt.none)return e!==lt.none&&(this._current--,this._addToken(e),!0);t=s,this._current+=n+1}if(e=r,this._isAtEnd())break;t+=this._advance()}return e!==lt.none&&(this._addToken(e),!0)}_findType(t){for(const e in lt.keywords){const r=lt.keywords[e];if(this._match(t,r.rule))return r}for(const e in lt.tokens){const r=lt.tokens[e];if(this._match(t,r.rule))return r}return lt.none}_match(t,e){if("string"==typeof e){if(e==t)return!0}else{const r=e.exec(t);if(r&&0==r.index&&r[0]==t)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(t){return" "==t||"\t"==t||"\r"==t}_advance(t=0){let e=this._source[this._current];return t=t||0,t++,this._current+=t,e}_peekAhead(t=0){return t=t||0,this._current+t>=this._source.length?"\0":this._source[this._current+t]}_addToken(t){const e=this._source.substring(this._start,this._current);this._tokens.push(new ht(t,e,this._line))}}class dt{constructor(){this._tokens=[],this._current=0,this._context=new u}parse(t){this._initialize(t);let e=[];for(;!this._isAtEnd();){const t=this._global_decl_or_directive();if(!t)break;e.push(t)}return e}_initialize(t){if(t)if("string"==typeof t){const e=new _t(t);this._tokens=e.scanTokens()}else this._tokens=t;else this._tokens=[];this._current=0}_error(t,e){return console.error(t,e),{token:t,message:e,toString:function(){return`${e}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==lt.eof}_match(t){if(t instanceof ct)return!!this._check(t)&&(this._advance(),!0);for(let e=0,r=t.length;e<r;++e){const r=t[e];if(this._check(r))return this._advance(),!0}return!1}_consume(t,e){if(this._check(t))return this._advance();throw this._error(this._peek(),e)}_check(t){if(this._isAtEnd())return!1;const e=this._peek();if(t instanceof Array){let r=e.type;return-1!=t.indexOf(r)}return e.type==t}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(lt.tokens.semicolon)&&!this._isAtEnd(););if(this._match(lt.keywords.alias)){const t=this._type_alias();return this._consume(lt.tokens.semicolon,"Expected ';'"),t}if(this._match(lt.keywords.enable)){const t=this._enable_directive();return this._consume(lt.tokens.semicolon,"Expected ';'"),t}const t=this._attribute();if(this._check(lt.keywords.var)){const e=this._global_variable_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.override)){const e=this._override_variable_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.let)){const e=this._global_let_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.const)){const e=this._global_const_decl();return null!=e&&(e.attributes=t),this._consume(lt.tokens.semicolon,"Expected ';'."),e}if(this._check(lt.keywords.struct)){const e=this._struct_decl();return null!=e&&(e.attributes=t),e}if(this._check(lt.keywords.fn)){const e=this._function_decl();return null!=e&&(e.attributes=t),e}return null}_function_decl(){if(!this._match(lt.keywords.fn))return null;const t=this._consume(lt.tokens.ident,"Expected function name.").toString();this._consume(lt.tokens.paren_left,"Expected '(' for function arguments.");const e=[];if(!this._check(lt.tokens.paren_right))do{if(this._check(lt.tokens.paren_right))break;const t=this._attribute(),r=this._consume(lt.tokens.ident,"Expected argument name.").toString();this._consume(lt.tokens.colon,"Expected ':' for argument type.");const s=this._attribute(),n=this._type_decl();null!=n&&(n.attributes=s,e.push(new it(r,n,t)))}while(this._match(lt.tokens.comma));this._consume(lt.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(lt.tokens.arrow)){const t=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=t)}const s=this._compound_statement();return new h(t,e,r,s)}_compound_statement(){const t=[];for(this._consume(lt.tokens.brace_left,"Expected '{' for block.");!this._check(lt.tokens.brace_right);){const e=this._statement();null!==e&&t.push(e)}return this._consume(lt.tokens.brace_right,"Expected '}' for block."),t}_statement(){for(;this._match(lt.tokens.semicolon)&&!this._isAtEnd(););if(this._check(lt.keywords.if))return this._if_statement();if(this._check(lt.keywords.switch))return this._switch_statement();if(this._check(lt.keywords.loop))return this._loop_statement();if(this._check(lt.keywords.for))return this._for_statement();if(this._check(lt.keywords.while))return this._while_statement();if(this._check(lt.keywords.continuing))return this._continuing_statement();if(this._check(lt.keywords.static_assert))return this._static_assert_statement();if(this._check(lt.tokens.brace_left))return this._compound_statement();let t=null;return t=this._check(lt.keywords.return)?this._return_statement():this._check([lt.keywords.var,lt.keywords.let,lt.keywords.const])?this._variable_statement():this._match(lt.keywords.discard)?new B:this._match(lt.keywords.break)?new I:this._match(lt.keywords.continue)?new N:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=t&&this._consume(lt.tokens.semicolon,"Expected ';' after statement."),t}_static_assert_statement(){if(!this._match(lt.keywords.static_assert))return null;let t=this._optional_paren_expression();return new _(t)}_while_statement(){if(!this._match(lt.keywords.while))return null;let t=this._optional_paren_expression();const e=this._compound_statement();return new d(t,e)}_continuing_statement(){if(!this._match(lt.keywords.continuing))return null;const t=this._compound_statement();return new p(t)}_for_statement(){if(!this._match(lt.keywords.for))return null;this._consume(lt.tokens.paren_left,"Expected '('.");const t=this._check(lt.tokens.semicolon)?null:this._for_init();this._consume(lt.tokens.semicolon,"Expected ';'.");const e=this._check(lt.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(lt.tokens.semicolon,"Expected ';'.");const r=this._check(lt.tokens.paren_right)?null:this._for_increment();this._consume(lt.tokens.paren_right,"Expected ')'.");const s=this._compound_statement();return new f(t,e,r,s)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(lt.keywords.var)){const t=this._variable_decl();if(null===t)throw this._error(this._peek(),"Variable declaration expected.");let e=null;return this._match(lt.tokens.equal)&&(e=this._short_circuit_or_expression()),new m(t.name,t.type,t.storage,t.access,e)}if(this._match(lt.keywords.let)){const t=this._consume(lt.tokens.ident,"Expected name for let.").toString();let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(lt.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new y(t,e,null,null,r)}if(this._match(lt.keywords.const)){const t=this._consume(lt.tokens.ident,"Expected name for const.").toString();let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}this._consume(lt.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new w(t,e,null,null,r)}return null}_increment_decrement_statement(){const t=this._current,e=this._unary_expression();if(null==e)return null;if(!this._check(lt.increment_operators))return this._current=t,null;const r=this._consume(lt.increment_operators,"Expected increment operator");return new A(r.type===lt.tokens.plus_plus?x.increment:x.decrement,e)}_assignment_statement(){let t=null;if(this._check(lt.tokens.brace_right))return null;let e=this._match(lt.tokens.underscore);if(e||(t=this._unary_expression()),!e&&null==t)return null;const r=this._consume(lt.assignment_operators,"Expected assignment operator."),s=this._short_circuit_or_expression();return new T(k.parse(r.lexeme),t,s)}_func_call_statement(){if(!this._check(lt.tokens.ident))return null;const t=this._current,e=this._consume(lt.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=t,null):new S(e.lexeme,r)}_loop_statement(){if(!this._match(lt.keywords.loop))return null;this._consume(lt.tokens.brace_left,"Expected '{' for loop.");const t=[];let e=this._statement();for(;null!==e;){if(Array.isArray(e))for(let r of e)t.push(r);else t.push(e);e=this._statement()}let r=null;return this._match(lt.keywords.continuing)&&(r=this._compound_statement()),this._consume(lt.tokens.brace_right,"Expected '}' for loop."),new E(t,r)}_switch_statement(){if(!this._match(lt.keywords.switch))return null;const t=this._optional_paren_expression();this._consume(lt.tokens.brace_left,"Expected '{' for switch.");const e=this._switch_body();if(null==e||0==e.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(lt.tokens.brace_right,"Expected '}' for switch."),new C(t,e)}_switch_body(){const t=[];if(this._match(lt.keywords.case)){const e=this._case_selectors();this._match(lt.tokens.colon),this._consume(lt.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(lt.tokens.brace_right,"Exected '}' for switch case."),t.push(new st(e,r))}if(this._match(lt.keywords.default)){this._match(lt.tokens.colon),this._consume(lt.tokens.brace_left,"Exected '{' for switch default.");const e=this._case_body();this._consume(lt.tokens.brace_right,"Exected '}' for switch default."),t.push(new nt(e))}if(this._check([lt.keywords.default,lt.keywords.case])){const e=this._switch_body();t.push(e[0])}return t}_case_selectors(){var t,e,r,s;const n=[null!==(e=null===(t=this._shift_expression())||void 0===t?void 0:t.evaluate(this._context).toString())&&void 0!==e?e:""];for(;this._match(lt.tokens.comma);)n.push(null!==(s=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==s?s:"");return n}_case_body(){if(this._match(lt.keywords.fallthrough))return this._consume(lt.tokens.semicolon,"Expected ';'"),[];let t=this._statement();if(null==t)return[];t instanceof Array||(t=[t]);const e=this._case_body();return 0==e.length?t:[...t,e[0]]}_if_statement(){if(!this._match(lt.keywords.if))return null;const t=this._optional_paren_expression(),e=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let s=null;return this._match(lt.keywords.else)&&(s=this._compound_statement()),new P(t,e,r,s)}_match_elseif(){return this._tokens[this._current].type===lt.keywords.else&&this._tokens[this._current+1].type===lt.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(t=[]){const e=this._optional_paren_expression(),r=this._compound_statement();return t.push(new at(e,r)),this._match_elseif()&&this._elseif_statement(t),t}_return_statement(){if(!this._match(lt.keywords.return))return null;const t=this._short_circuit_or_expression();return new q(t)}_short_circuit_or_expression(){let t=this._short_circuit_and_expr();for(;this._match(lt.tokens.or_or);)t=new et(this._previous().toString(),t,this._short_circuit_and_expr());return t}_short_circuit_and_expr(){let t=this._inclusive_or_expression();for(;this._match(lt.tokens.and_and);)t=new et(this._previous().toString(),t,this._inclusive_or_expression());return t}_inclusive_or_expression(){let t=this._exclusive_or_expression();for(;this._match(lt.tokens.or);)t=new et(this._previous().toString(),t,this._exclusive_or_expression());return t}_exclusive_or_expression(){let t=this._and_expression();for(;this._match(lt.tokens.xor);)t=new et(this._previous().toString(),t,this._and_expression());return t}_and_expression(){let t=this._equality_expression();for(;this._match(lt.tokens.and);)t=new et(this._previous().toString(),t,this._equality_expression());return t}_equality_expression(){const t=this._relational_expression();return this._match([lt.tokens.equal_equal,lt.tokens.not_equal])?new et(this._previous().toString(),t,this._relational_expression()):t}_relational_expression(){let t=this._shift_expression();for(;this._match([lt.tokens.less_than,lt.tokens.greater_than,lt.tokens.less_than_equal,lt.tokens.greater_than_equal]);)t=new et(this._previous().toString(),t,this._shift_expression());return t}_shift_expression(){let t=this._additive_expression();for(;this._match([lt.tokens.shift_left,lt.tokens.shift_right]);)t=new et(this._previous().toString(),t,this._additive_expression());return t}_additive_expression(){let t=this._multiplicative_expression();for(;this._match([lt.tokens.plus,lt.tokens.minus]);)t=new et(this._previous().toString(),t,this._multiplicative_expression());return t}_multiplicative_expression(){let t=this._unary_expression();for(;this._match([lt.tokens.star,lt.tokens.forward_slash,lt.tokens.modulo]);)t=new et(this._previous().toString(),t,this._unary_expression());return t}_unary_expression(){return this._match([lt.tokens.minus,lt.tokens.bang,lt.tokens.tilde,lt.tokens.star,lt.tokens.and])?new tt(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const t=this._primary_expression(),e=this._postfix_expression();return e&&(t.postfix=e),t}_postfix_expression(){if(this._match(lt.tokens.bracket_left)){const t=this._short_circuit_or_expression();this._consume(lt.tokens.bracket_right,"Expected ']'.");const e=this._postfix_expression();return e&&(t.postfix=e),t}if(this._match(lt.tokens.period)){const t=this._consume(lt.tokens.ident,"Expected member name."),e=this._postfix_expression(),r=new Y(t.lexeme);return e&&(r.postfix=e),r}return null}_getStruct(t){return this._context.aliases.has(t)?this._context.aliases.get(t).type:this._context.structs.has(t)?this._context.structs.get(t):null}_primary_expression(){if(this._match(lt.tokens.ident)){const t=this._previous().toString();if(this._check(lt.tokens.paren_left)){const e=this._argument_expression_list(),r=this._getStruct(t);return null!=r?new j(r,e):new $(t,e)}if(this._context.constants.has(t)){const e=this._context.constants.get(t);return new X(t,e.value)}return new H(t)}if(this._match(lt.const_literal))return new W(parseFloat(this._previous().toString()));if(this._check(lt.tokens.paren_left))return this._paren_expression();if(this._match(lt.keywords.bitcast)){this._consume(lt.tokens.less_than,"Expected '<'.");const t=this._type_decl();this._consume(lt.tokens.greater_than,"Expected '>'.");const e=this._paren_expression();return new K(t,e)}const t=this._type_decl(),e=this._argument_expression_list();return new Z(t,e)}_argument_expression_list(){if(!this._match(lt.tokens.paren_left))return null;const t=[];do{if(this._check(lt.tokens.paren_right))break;const e=this._short_circuit_or_expression();t.push(e)}while(this._match(lt.tokens.comma));return this._consume(lt.tokens.paren_right,"Expected ')' for agument list"),t}_optional_paren_expression(){this._match(lt.tokens.paren_left);const t=this._short_circuit_or_expression();return this._match(lt.tokens.paren_right),new Q([t])}_paren_expression(){this._consume(lt.tokens.paren_left,"Expected '('.");const t=this._short_circuit_or_expression();return this._consume(lt.tokens.paren_right,"Expected ')'."),new Q([t])}_struct_decl(){if(!this._match(lt.keywords.struct))return null;const t=this._consume(lt.tokens.ident,"Expected name for struct.").toString();this._consume(lt.tokens.brace_left,"Expected '{' for struct body.");const e=[];for(;!this._check(lt.tokens.brace_right);){const t=this._attribute(),r=this._consume(lt.tokens.ident,"Expected variable name.").toString();this._consume(lt.tokens.colon,"Expected ':' for struct member type.");const s=this._attribute(),n=this._type_decl();null!=n&&(n.attributes=s),this._check(lt.tokens.brace_right)?this._match(lt.tokens.comma):this._consume(lt.tokens.comma,"Expected ',' for struct member."),e.push(new ot(r,n,t))}this._consume(lt.tokens.brace_right,"Expected '}' after struct body.");const r=new O(t,e);return this._context.structs.set(t,r),r}_global_variable_decl(){const t=this._variable_decl();return t&&this._match(lt.tokens.equal)&&(t.value=this._const_expression()),t}_override_variable_decl(){const t=this._override_decl();return t&&this._match(lt.tokens.equal)&&(t.value=this._const_expression()),t}_global_const_decl(){if(!this._match(lt.keywords.const))return null;const t=this._consume(lt.tokens.ident,"Expected variable name");let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;if(this._match(lt.tokens.equal)){const t=this._short_circuit_or_expression();if(t instanceof j)r=t;else if(t instanceof X&&t.initializer instanceof j)r=t.initializer;else try{const e=t.evaluate(this._context);r=new W(e)}catch(e){r=t}}const s=new w(t.toString(),e,"","",r);return this._context.constants.set(s.name,s),s}_global_let_decl(){if(!this._match(lt.keywords.let))return null;const t=this._consume(lt.tokens.ident,"Expected variable name");let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}let r=null;return this._match(lt.tokens.equal)&&(r=this._const_expression()),new y(t.toString(),e,"","",r)}_const_expression(){if(this._match(lt.const_literal))return new Y(this._previous().toString());const t=this._type_decl();this._consume(lt.tokens.paren_left,"Expected '('.");let e=[];for(;!this._check(lt.tokens.paren_right)&&(e.push(this._const_expression()),this._check(lt.tokens.comma));)this._advance();return this._consume(lt.tokens.paren_right,"Expected ')'."),new j(t,e)}_variable_decl(){if(!this._match(lt.keywords.var))return null;let t="",e="";this._match(lt.tokens.less_than)&&(t=this._consume(lt.storage_class,"Expected storage_class.").toString(),this._match(lt.tokens.comma)&&(e=this._consume(lt.access_mode,"Expected access_mode.").toString()),this._consume(lt.tokens.greater_than,"Expected '>'."));const r=this._consume(lt.tokens.ident,"Expected variable name");let s=null;if(this._match(lt.tokens.colon)){const t=this._attribute();s=this._type_decl(),null!=s&&(s.attributes=t)}return new m(r.toString(),s,t,e,null)}_override_decl(){if(!this._match(lt.keywords.override))return null;const t=this._consume(lt.tokens.ident,"Expected variable name");let e=null;if(this._match(lt.tokens.colon)){const t=this._attribute();e=this._type_decl(),null!=e&&(e.attributes=t)}return new g(t.toString(),e,null)}_enable_directive(){const t=this._consume(lt.tokens.ident,"identity expected.");return new z(t.toString())}_type_alias(){const t=this._consume(lt.tokens.ident,"identity expected.");this._consume(lt.tokens.equal,"Expected '=' for type alias.");let e=this._type_decl();if(null===e)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);const r=new U(t.toString(),e);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([lt.tokens.ident,...lt.texel_format,lt.keywords.bool,lt.keywords.f32,lt.keywords.i32,lt.keywords.u32])){const t=this._advance(),e=t.toString();return this._context.structs.has(e)?this._context.structs.get(e):this._context.aliases.has(e)?this._context.aliases.get(e).type:new F(t.toString())}if(this._check(lt.template_types)){let t=this._advance().toString(),e=null,r=null;return this._match(lt.tokens.less_than)&&(e=this._type_decl(),r=null,this._match(lt.tokens.comma)&&(r=this._consume(lt.access_mode,"Expected access_mode for pointer").toString()),this._consume(lt.tokens.greater_than,"Expected '>' for type.")),new D(t,e,r)}if(this._match(lt.keywords.ptr)){let t=this._previous().toString();this._consume(lt.tokens.less_than,"Expected '<' for pointer.");const e=this._consume(lt.storage_class,"Expected storage_class for pointer");this._consume(lt.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let s=null;return this._match(lt.tokens.comma)&&(s=this._consume(lt.access_mode,"Expected access_mode for pointer").toString()),this._consume(lt.tokens.greater_than,"Expected '>' for pointer."),new G(t,e.toString(),r,s)}let t=this._texture_sampler_types();if(t)return t;const e=this._attribute();if(this._match(lt.keywords.array)){let t=null,r=-1;const s=this._previous();if(this._match(lt.tokens.less_than)){t=this._type_decl(),this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);let e="";this._match(lt.tokens.comma)&&(e=this._shift_expression().evaluate(this._context).toString()),this._consume(lt.tokens.greater_than,"Expected '>' for array."),r=e?parseInt(e):0}return new L(s.toString(),e,t,r)}return null}_texture_sampler_types(){if(this._match(lt.sampler_type))return new R(this._previous().toString(),null,null);if(this._match(lt.depth_texture_type))return new R(this._previous().toString(),null,null);if(this._match(lt.sampled_texture_type)||this._match(lt.multisampled_texture_type)){const t=this._previous();this._consume(lt.tokens.less_than,"Expected '<' for sampler type.");const e=this._type_decl();return this._consume(lt.tokens.greater_than,"Expected '>' for sampler type."),new R(t.toString(),e,null)}if(this._match(lt.storage_texture_type)){const t=this._previous();this._consume(lt.tokens.less_than,"Expected '<' for sampler type.");const e=this._consume(lt.texel_format,"Invalid texel format.").toString();this._consume(lt.tokens.comma,"Expected ',' after texel format.");const r=this._consume(lt.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(lt.tokens.greater_than,"Expected '>' for sampler type."),new R(t.toString(),e,r)}return null}_attribute(){let t=[];for(;this._match(lt.tokens.attr);){const e=this._consume(lt.attribute_name,"Expected attribute name"),r=new ut(e.toString(),null);if(this._match(lt.tokens.paren_left)){if(r.value=this._consume(lt.literal_or_ident,"Expected attribute value").toString(),this._check(lt.tokens.comma)){this._advance();do{const t=this._consume(lt.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(t)}while(this._match(lt.tokens.comma))}this._consume(lt.tokens.paren_right,"Expected ')'")}t.push(r)}for(;this._match(lt.tokens.attr_left);){if(!this._check(lt.tokens.attr_right))do{const e=this._consume(lt.attribute_name,"Expected attribute name"),r=new ut(e.toString(),null);if(this._match(lt.tokens.paren_left)){if(r.value=[this._consume(lt.literal_or_ident,"Expected attribute value").toString()],this._check(lt.tokens.comma)){this._advance();do{const t=this._consume(lt.literal_or_ident,"Expected attribute value").toString();r.value.push(t)}while(this._match(lt.tokens.comma))}this._consume(lt.tokens.paren_right,"Expected ')'")}t.push(r)}while(this._match(lt.tokens.comma));this._consume(lt.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==t.length?null:t}}class pt{constructor(t,e){this.name=t,this.attributes=e,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class ft{constructor(t,e,r){this.name=t,this.type=e,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class mt extends pt{constructor(t,e){super(t,e),this.members=[],this.align=0}get isStruct(){return!0}}class gt extends pt{constructor(t,e){super(t,e),this.count=0,this.stride=0}get isArray(){return!0}}class yt extends pt{constructor(t,e,r){super(t,r),this.format=e}get isTemplate(){return!0}}!function(t){t[t.Uniform=0]="Uniform",t[t.Storage=1]="Storage",t[t.Texture=2]="Texture",t[t.Sampler=3]="Sampler"}(M||(M={}));class wt{constructor(t,e,r,s,n,i){this.name=t,this.type=e,this.group=r,this.binding=s,this.attributes=n,this.resourceType=i}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class xt{constructor(t,e){this.name=t,this.type=e}}class kt{constructor(t,e){this.align=t,this.size=e}}class vt{constructor(t,e,r,s){this.name=t,this.type=e,this.locationType=r,this.location=s,this.interpolation=null}}class bt{constructor(t,e,r,s){this.name=t,this.type=e,this.locationType=r,this.location=s}}class Mt{constructor(t,e=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=t,this.stage=e}}class At{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Tt{constructor(t,e,r,s){this.name=t,this.type=e,this.attributes=r,this.id=s}}class St{constructor(t){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new At,this._types=new Map,t&&this.update(t)}update(t){const e=(new dt).parse(t);for(const t of e){if(t instanceof O){const e=this._getTypeInfo(t,null);e instanceof mt&&this.structs.push(e)}if(t instanceof U&&this.aliases.push(this._getAliasInfo(t)),t instanceof g){const e=t,r=this._getAttributeNum(e.attributes,"id",0),s=null!=e.type?this._getTypeInfo(e.type,e.attributes):null;this.overrides.push(new Tt(e.name,s,e.attributes,r))}if(this._isUniformVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),s=this._getAttributeNum(e.attributes,"binding",0),n=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,n,r,s,e.attributes,M.Uniform);this.uniforms.push(i)}if(this._isStorageVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),s=this._getAttributeNum(e.attributes,"binding",0),n=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,n,r,s,e.attributes,M.Storage);this.storage.push(i)}if(this._isTextureVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),s=this._getAttributeNum(e.attributes,"binding",0),n=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,n,r,s,e.attributes,M.Texture);this.textures.push(i)}if(this._isSamplerVar(t)){const e=t,r=this._getAttributeNum(e.attributes,"group",0),s=this._getAttributeNum(e.attributes,"binding",0),n=this._getTypeInfo(e.type,e.attributes),i=new wt(e.name,n,r,s,e.attributes,M.Sampler);this.samplers.push(i)}if(t instanceof h){const e=this._getAttribute(t,"vertex"),r=this._getAttribute(t,"fragment"),s=this._getAttribute(t,"compute"),n=e||r||s;if(n){const e=new Mt(t.name,n.name);e.inputs=this._getInputs(t.args),e.outputs=this._getOutputs(t.returnType),this.entry[n.name].push(e)}}}}getBindGroups(){const t=[];function e(e,r){e>=t.length&&(t.length=e+1),void 0===t[e]&&(t[e]=[]),r>=t[e].length&&(t[e].length=r+1)}for(const r of this.uniforms)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.storage)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.textures)e(r.group,r.binding),t[r.group][r.binding]=r;for(const r of this.samplers)e(r.group,r.binding),t[r.group][r.binding]=r;return t}_getOutputs(t,e=void 0){if(void 0===e&&(e=[]),t instanceof O)this._getStructOutputs(t,e);else{const r=this._getOutputInfo(t);null!==r&&e.push(r)}return e}_getStructOutputs(t,e){for(const r of t.members)if(r.type instanceof O)this._getStructOutputs(r.type,e);else{const t=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==t){const s=this._getTypeInfo(r.type,r.type.attributes),n=this._parseInt(t.value),i=new bt(r.name,s,t.name,n);e.push(i)}}}_getOutputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getTypeInfo(t,t.attributes),s=this._parseInt(e.value);return new bt("",r,e.name,s)}return null}_getInputs(t,e=void 0){void 0===e&&(e=[]);for(const r of t)if(r.type instanceof O)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}return e}_getStructInputs(t,e){for(const r of t.members)if(r.type instanceof O)this._getStructInputs(r.type,e);else{const t=this._getInputInfo(r);null!==t&&e.push(t)}}_getInputInfo(t){const e=this._getAttribute(t,"location")||this._getAttribute(t,"builtin");if(null!==e){const r=this._getAttribute(t,"interpolation"),s=this._getTypeInfo(t.type,t.attributes),n=this._parseInt(e.value),i=new vt(t.name,s,e.name,n);return null!==r&&(i.interpolation=this._parseString(r.value)),i}return null}_parseString(t){return t instanceof Array&&(t=t[0]),t}_parseInt(t){t instanceof Array&&(t=t[0]);const e=parseInt(t);return isNaN(e)?t:e}_getAlias(t){for(const e of this.aliases)if(e.name==t)return e.type;return null}_getAliasInfo(t){return new xt(t.name,this._getTypeInfo(t.type,null))}_getTypeInfo(t,e){if(this._types.has(t))return this._types.get(t);if(t instanceof L){const r=t,s=this._getTypeInfo(r.format,r.attributes),n=new gt(r.name,e);return n.format=s,n.count=r.count,this._types.set(t,n),this._updateTypeInfo(n),n}if(t instanceof O){const r=t,s=new mt(r.name,e);for(const t of r.members){const e=this._getTypeInfo(t.type,t.attributes);s.members.push(new ft(t.name,e,t.attributes))}return this._types.set(t,s),this._updateTypeInfo(s),s}if(t instanceof D){const r=t,s=r.format?this._getTypeInfo(r.format,null):null,n=new yt(r.name,s,e);return this._types.set(t,n),this._updateTypeInfo(n),n}const r=new pt(t.name,e);return this._types.set(t,r),this._updateTypeInfo(r),r}_updateTypeInfo(t){var e,r;const s=this._getTypeSize(t);if(t.size=null!==(e=null==s?void 0:s.size)&&void 0!==e?e:0,t instanceof gt){const e=this._getTypeSize(t.format);t.stride=null!==(r=null==e?void 0:e.size)&&void 0!==r?r:0,this._updateTypeInfo(t.format)}t instanceof mt&&this._updateStructInfo(t)}_updateStructInfo(t){var e;let r=0,s=0,n=0,i=0;for(let a=0,o=t.members.length;a<o;++a){const o=t.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(e=this._getAlias(o.type.name))&&void 0!==e||o.type;const c=u.align,l=u.size;r=this._roundUp(c,r+s),s=l,n=r,i=Math.max(i,c),o.offset=r,o.size=l,this._updateTypeInfo(o.type)}t.size=this._roundUp(i,n+s),t.align=i}_getTypeSize(t){var e;if(null==t)return null;const r=this._getAttributeNum(t.attributes,"size",0),s=this._getAttributeNum(t.attributes,"align",0);if(t instanceof ft&&(t=t.type),t instanceof pt){const e=this._getAlias(t.name);null!==e&&(t=e)}{const e=St._typeInfo[t.name];if(void 0!==e){const n="f16"===t.format?2:1;return new kt(Math.max(s,e.align/n),Math.max(r,e.size/n))}}{const e=St._typeInfo[t.name.substring(0,t.name.length-1)];if(e){const n="h"===t.name[t.name.length-1]?2:1;return new kt(Math.max(s,e.align/n),Math.max(r,e.size/n))}}if(t instanceof gt){let n=t,i=8,a=8;const o=this._getTypeSize(n.format);return null!==o&&(a=o.size,i=o.align),a=n.count*this._getAttributeNum(null!==(e=null==t?void 0:t.attributes)&&void 0!==e?e:null,"stride",this._roundUp(i,a)),r&&(a=r),new kt(Math.max(s,i),Math.max(r,a))}if(t instanceof mt){let e=0,n=0,i=0,a=0,o=0;for(const r of t.members){const t=this._getTypeSize(r.type);null!==t&&(e=Math.max(t.align,e),i=this._roundUp(t.align,i+a),a=t.size,o=i)}return n=this._roundUp(e,o+a),new kt(Math.max(s,e),Math.max(r,n))}return null}_isUniformVar(t){return t instanceof m&&"uniform"==t.storage}_isStorageVar(t){return t instanceof m&&"storage"==t.storage}_isTextureVar(t){return t instanceof m&&null!==t.type&&-1!=St._textureTypes.indexOf(t.type.name)}_isSamplerVar(t){return t instanceof m&&null!==t.type&&-1!=St._samplerTypes.indexOf(t.type.name)}_getAttribute(t,e){const r=t;if(!r||!r.attributes)return null;const s=r.attributes;for(let t of s)if(t.name==e)return t;return null}_getAttributeNum(t,e,r){if(null===t)return r;for(let s of t)if(s.name==e){let t=null!==s&&null!==s.value?s.value:r;return t instanceof Array&&(t=t[0]),"number"==typeof t?t:"string"==typeof t?parseInt(t):r}return r}_roundUp(t,e){return Math.ceil(e/t)*t}}function Et(t,e){const r=function(t){return Array.isArray(t)||o(t)?[...t,1,1].slice(0,3):function(t){return[t.width,t.height||1,t.depthOrArrayLayers||1]}(t)}(t),s=Math.max(...r.slice(0,"3d"===e?3:2));return 1+Math.log2(s)|0}St._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},St._textureTypes=lt.any_texture_type.map((t=>t.name)),St._samplerTypes=lt.sampler_type.map((t=>t.name));const Ct=new WeakMap,Pt=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function qt(t){return o(t)||Array.isArray(t)||function(t){const e=t;return o(e.data)||Array.isArray(e.data)}(t)}function zt(t){switch(t){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Pt.entries()].map((([t,{formats:[e,r]}])=>[[e,t],[r,t]])).flat());const Ut={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Bt=/([a-z]+)(\d+)([a-z]+)/;function It(t){const[,e,r,s]=Bt.exec(t),n=e.length,i=parseInt(r)/8;return{channels:e,numChannels:n,bytesPerChannel:i,bytesPerElement:n*i,Type:Ut[`${r}${s}`]}}function Nt(t,e,r,s={}){r.forEach(((r,n)=>{const i=[0,0,n+(s.baseArrayLayer||0)];if(qt(r))!function(t,e,r,s){const n=function(t,e){if(o(t))return t;const{Type:r}=It(e);return new r(t)}(r.data||r,e.format),i=function(t,e){return[t.width,t.height,t.depthOrArrayLayers].map((t=>Math.max(1,Math.floor(t/1))))}(e),{bytesPerElement:a}=It(e.format),u=s.origin||[0,0,0];t.queue.writeTexture({texture:e,origin:u},n,{bytesPerRow:a*i[0],rowsPerImage:i[1]},i)}(t,e,r,{origin:i});else{const n=r,{flipY:a,premultipliedAlpha:o,colorSpace:u}=s;t.queue.copyExternalImageToTexture({source:n,flipY:a},{texture:e,premultipliedAlpha:o,colorSpace:u,origin:i},Ft(n,s))}})),e.mipLevelCount>1&&function(t,e){let r=Ct.get(t);r||(r={pipelineByFormat:{},moduleByView:{}},Ct.set(t,r));let{sampler:s}=r;const{pipelineByFormat:n,moduleByView:i}=r,a=function(t){switch(t.dimension){case"1d":return"1d";case"3d":return"3d";default:return t.depthOrArrayLayers>1?"2d-array":"2d"}}(e);let o=i[a];o||(o=t.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),i[a]=o),s||(s=t.createSampler({minFilter:"linear"}),r.sampler=s);const u=`${e.format}`;n[u]||(n[u]=t.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:e.format}]}}));const c=n[u],l=t.createCommandEncoder({label:"mip gen encoder"});for(let r=1;r<e.mipLevelCount;++r)for(let n=0;n<e.depthOrArrayLayers;++n){const i=t.createBindGroup({layout:c.getBindGroupLayout(0),entries:[{binding:0,resource:s},{binding:1,resource:e.createView({dimension:"2d",baseMipLevel:r-1,mipLevelCount:1,baseArrayLayer:n,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:e.createView({baseMipLevel:r,mipLevelCount:1,baseArrayLayer:n,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=l.beginRenderPass(a);o.setPipeline(c),o.setBindGroup(0,i),o.draw(3),o.end()}const h=l.finish();t.queue.submit([h])}(t,e)}function Ft(t,e){if(t instanceof HTMLVideoElement)return[t.videoWidth,t.videoHeight,1];{const r=t,{width:s,height:n}=r;if(s>0&&n>0&&!qt(t))return[s,n,1];const i=e.format||"rgba8unorm",{bytesPerElement:a,bytesPerChannel:u}=It(i),c=o(t)||Array.isArray(t)?t:t.data;return function(t,e,r,s="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(t||e){if(e){if(!t&&(t=r/e)%1)throw new Error("can't guess dimensions")}else if((e=r/t)%1)throw new Error("can't guess dimensions")}else{const n=Math.sqrt(r/("cube"===s?6:1));n%1==0?(t=n,e=n):(t=r,e=1)}const n=r/t/e;if(n%1)throw new Error("can't guess dimensions");return[t,e,n]}(s,n,(o(c)?c.byteLength:c.length*u)/a)}}async function Ot(t,e,r={}){const s=await Promise.all(e.map((t=>async function(t,e={}){const r=await fetch(t),s=await r.blob(),n={...e,...void 0!==e.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(s,n)}(t))));return function(t,e,r={}){const s=Ft(e[0],r);s[2]=s[2]>1?s[2]:e.length;const n=t.createTexture({dimension:zt(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Et(s):1,size:s,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Nt(t,n,e,r),n}(t,s,r)}async function Dt(t,e,r={}){return Ot(t,[e],r)}var Gt;function Lt(t,e,r=1,s=1){const n=r*s,i=new Uint8Array(4*n),[a,o,u,c]=e;for(let t=0;t<n;++t){const e=4*t;i[e]=255*a,i[e+1]=255*o,i[e+2]=255*u,i[e+3]=255*c}const l=t.createTexture({size:{width:r,height:s},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return t.queue.writeTexture({texture:l},i,{bytesPerRow:4*r,rowsPerImage:s},{width:r,height:s}),l}!function(t){t[t.Default=0]="Default",t[t.SolidColor=1]="SolidColor",t[t.Normals=2]="Normals"}(Gt||(Gt={}));class Rt{mode=Gt.Default;ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized");return this._gpuBuffer}_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}constructor(t){t&&(this.mode=t.mode??this.mode,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=t.specularColor??this.specularColor,this.shininess=t.shininess??this.shininess,this.diffuseMapPath=t.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=t.specularMapPath??this.specularMapPath)}static solidColor(t){return new Rt({mode:Gt.SolidColor,diffuseColor:t})}getBytes(){return new Float32Array([this.mode,0,0,0,...this.ambientColor,...this.specularColor,this.shininess,0,0,0])}writeToGpu(t){const e=this.getBytes();this._gpuBuffer=t.createBuffer({label:"material",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),t.queue.writeBuffer(this._gpuBuffer,0,e)}async writeTexturesToGpuAsync(t,e){this.ambientMapPath?this._ambientTexture=await Dt(t,this.ambientMapPath,{mips:e}):this._ambientTexture=Lt(t,this.ambientColor),this.diffuseMapPath?this._diffuseTexture=await Dt(t,this.diffuseMapPath,{mips:e}):this._diffuseTexture=Lt(t,this.diffuseColor),this.specularMapPath?this._specularTexture=await Dt(t,this.specularMapPath,{mips:e}):this._specularTexture=Lt(t,this.specularColor)}}class Vt{name;vertices;vertexCount;vertexBufferLayout;topology;material;vertexBuffer=null;vertexBufferOffset=0;constructor(t,e,r,s,n,i=new Rt){this.name=t,this.vertices=e,this.vertexCount=r,this.vertexBufferLayout=s,this.topology=n,this.material=i}writeMeshToGpu(t){const e={label:`${this.name} vertex buffer`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this.vertexBuffer=t.createBuffer(e),t.queue.writeBuffer(this.vertexBuffer,0,this.vertices,0)}}var Yt,jt=r(284);function $t(t){return new Vt("cube_asset",jt.Vk,jt.qw,jt.sY,jt.nk,t??new Rt)}!function(t){t[t.Direct=0]="Direct",t[t.Point=1]="Point"}(Yt||(Yt={}));class Ht{static _CUBEASSET=$t(new Rt({mode:Gt.SolidColor,diffuseColor:[1,1,1,0]}));_model=new a("light",Ht._CUBEASSET);get model(){return this._model}intensity=1;type=Yt.Point;ambientColor=[.2,.2,.2,0];diffuseColor=[.5,.5,.5,0];specularColor=[.8,.8,.8,0];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;_positionOrDirection=[0,30,0];get positionOrDirection(){return this._positionOrDirection}set positionOrDirection(t){this._positionOrDirection=t;let e=this.type==Yt.Point?this._positionOrDirection:s.R3.mulScalar(s.R3.normalize(this._positionOrDirection),-100);this._model.transform=s._E.uniformScale(s._E.translation([...e,0],this._model.transform),.5,this._model.transform)}constructor(t){this._model=new a("light",Ht._CUBEASSET).translate(...this.positionOrDirection).scale(.5,.5,.5),t&&(this.type=t.type??this.type,this.positionOrDirection=t.positionOrDirection??this.positionOrDirection,this.ambientColor=t.ambientColor??this.ambientColor,this.diffuseColor=t.diffuseColor??this.diffuseColor,this.specularColor=t.specularColor??this.specularColor),this.positionOrDirection=this._positionOrDirection}_gpuBuffer=null;get gpuBuffer(){if(!this._gpuBuffer)throw new Error("buffer wasn't initialized yet");return this._gpuBuffer}getBytes(){return new Float32Array([this.type,0,0,0,...this.positionOrDirection,0,...this.disableAmbientColor?[0,0,0,1]:s.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor?[0,0,0,1]:s.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor?[0,0,0,1]:s.vh.mulScalar(this.specularColor,this.intensity)])}get size(){return Math.max(this.getBytes().byteLength,80)}writeToGpu(t){const e=this.getBytes();this._gpuBuffer||(this._gpuBuffer=t.createBuffer({label:"direct light",size:Math.max(e.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),t.queue.writeBuffer(this._gpuBuffer,0,e)}}const Xt=window.location.pathname;function Wt(){const t=document.createElement("div");return t.style.display="flex",t.style.gap="10px",t}function Kt(t,e,r){let[s,n]=function(t){const e=document.createElement("input");e.type="checkbox",e.id=t,e.name=e.id,e.checked=!0;const r=document.createElement("label");return r.htmlFor=e.id,r.textContent=e.id,[e,r]}(e);t.appendChild(s),t.appendChild(n),s.addEventListener("change",(()=>r(s)))}class Zt{isAnimated=!0;camera=new i;lights=[new Ht];models=[];constructor(t){t&&(this.isAnimated=t.isAnimated??!0,this.camera=t.camera??this.camera)}update(t){}attachUi(t){}}class Qt extends Zt{attachUi(t){const e=function(){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t}(),r=Wt();e.appendChild(r);for(let[t,e]of this.lights.entries())Kt(r,`${Yt[e.type]}Light_${t.toString().padStart(2,"0")}`,(t=>{e.intensity=t.checked?1:0}));const s=Wt();e.appendChild(s),Kt(s,"ambient",(t=>{for(let e of this.lights.values())e.disableAmbientColor=!t.checked})),Kt(s,"diffuse",(t=>{for(let e of this.lights.values())e.disableDiffuseColor=!t.checked})),Kt(s,"specular",(t=>{for(let e of this.lights.values())e.disableSpecularColor=!t.checked})),document.body.insertBefore(e,t.nextSibling)}}class Jt extends Qt{constructor(){super(),this.camera=new i({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new Ht({positionOrDirection:[0,5,0]}),this.lights[1]=new Ht({type:Yt.Direct,positionOrDirection:[-1,-1,0]}),this.lights.forEach((t=>t.intensity=.7));let t=$t(new Rt({diffuseMapPath:`../${Xt}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`})),e=new a("Cube01",t).scale(10,10,10);this.models.push(e),this.lights.forEach((t=>{this.models.push(t.model)}))}currentTime=0;centerPos;update(t){this.isAnimated&&(this.centerPos=this.centerPos??this.lights[0].positionOrDirection,this.currentTime+=t,this.lights[0].positionOrDirection=[this.centerPos[0]+25*Math.sin(this.currentTime),this.centerPos[1],this.centerPos[2]+25*Math.cos(this.currentTime)])}}},416:(t,e,r)=>{r.d(e,{R3:()=>P,_E:()=>$,vh:()=>mt});let s=1e-6;Float32Array,Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let n=Float32Array;function i(t,e,r){const s=new n(3);return void 0!==t&&(s[0]=t,void 0!==e&&(s[1]=e,void 0!==r&&(s[2]=r))),s}const a=i;function o(t,e,r){return(r=r||new n(3))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r}const u=o;function c(t,e,r){return(r=r||new n(3))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r}const l=c;function h(t,e){return(e=e||new n(3))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}const _=h;function d(t,e,r){r=r||new n(3);const s=t[2]*e[0]-t[0]*e[2],i=t[0]*e[1]-t[1]*e[0];return r[0]=t[1]*e[2]-t[2]*e[1],r[1]=s,r[2]=i,r}function p(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function f(t){const e=t[0],r=t[1],s=t[2];return Math.sqrt(e*e+r*r+s*s)}const m=f;function g(t){const e=t[0],r=t[1],s=t[2];return e*e+r*r+s*s}const y=g;function w(t,e){const r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return Math.sqrt(r*r+s*s+n*n)}const x=w;function k(t,e){const r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return r*r+s*s+n*n}const v=k;function b(t,e){e=e||new n(3);const r=t[0],s=t[1],i=t[2],a=Math.sqrt(r*r+s*s+i*i);return a>1e-5?(e[0]=r/a,e[1]=s/a,e[2]=i/a):(e[0]=0,e[1]=0,e[2]=0),e}function M(t,e){return(e=e||new n(3))[0]=t[0],e[1]=t[1],e[2]=t[2],e}const A=M;function T(t,e,r){return(r=r||new n(3))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r}const S=T;function E(t,e,r){return(r=r||new n(3))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r}const C=E;var P=Object.freeze({__proto__:null,create:i,setDefaultType:function(t){const e=n;return n=t,e},fromValues:a,set:function(t,e,r,s){return(s=s||new n(3))[0]=t,s[1]=e,s[2]=r,s},ceil:function(t,e){return(e=e||new n(3))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e},floor:function(t,e){return(e=e||new n(3))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e},round:function(t,e){return(e=e||new n(3))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e},clamp:function(t,e=0,r=1,s){return(s=s||new n(3))[0]=Math.min(r,Math.max(e,t[0])),s[1]=Math.min(r,Math.max(e,t[1])),s[2]=Math.min(r,Math.max(e,t[2])),s},add:function(t,e,r){return(r=r||new n(3))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r},addScaled:function(t,e,r,s){return(s=s||new n(3))[0]=t[0]+e[0]*r,s[1]=t[1]+e[1]*r,s[2]=t[2]+e[2]*r,s},angle:function(t,e){const r=t[0],s=t[1],n=t[2],i=t[0],a=t[1],o=t[2],u=Math.sqrt(r*r+s*s+n*n)*Math.sqrt(i*i+a*a+o*o),c=u&&p(t,e)/u;return Math.acos(c)},subtract:o,sub:u,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<s&&Math.abs(t[1]-e[1])<s&&Math.abs(t[2]-e[2])<s},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},lerp:function(t,e,r,s){return(s=s||new n(3))[0]=t[0]+r*(e[0]-t[0]),s[1]=t[1]+r*(e[1]-t[1]),s[2]=t[2]+r*(e[2]-t[2]),s},lerpV:function(t,e,r,s){return(s=s||new n(3))[0]=t[0]+r[0]*(e[0]-t[0]),s[1]=t[1]+r[1]*(e[1]-t[1]),s[2]=t[2]+r[2]*(e[2]-t[2]),s},max:function(t,e,r){return(r=r||new n(3))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r},min:function(t,e,r){return(r=r||new n(3))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r},mulScalar:c,scale:l,divScalar:function(t,e,r){return(r=r||new n(3))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r},inverse:h,invert:_,cross:d,dot:p,length:f,len:m,lengthSq:g,lenSq:y,distance:w,dist:x,distanceSq:k,distSq:v,normalize:b,negate:function(t,e){return(e=e||new n(3))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},copy:M,clone:A,multiply:T,mul:S,divide:E,div:C,random:function(t=1,e){e=e||new n(3);const r=2*Math.random()*Math.PI,s=2*Math.random()-1,i=Math.sqrt(1-s*s)*t;return e[0]=Math.cos(r)*i,e[1]=Math.sin(r)*i,e[2]=s*t,e},zero:function(t){return(t=t||new n(3))[0]=0,t[1]=0,t[2]=0,t},transformMat4:function(t,e,r){r=r||new n(3);const s=t[0],i=t[1],a=t[2],o=e[3]*s+e[7]*i+e[11]*a+e[15]||1;return r[0]=(e[0]*s+e[4]*i+e[8]*a+e[12])/o,r[1]=(e[1]*s+e[5]*i+e[9]*a+e[13])/o,r[2]=(e[2]*s+e[6]*i+e[10]*a+e[14])/o,r},transformMat4Upper3x3:function(t,e,r){r=r||new n(3);const s=t[0],i=t[1],a=t[2];return r[0]=s*e[0]+i*e[4]+a*e[8],r[1]=s*e[1]+i*e[5]+a*e[9],r[2]=s*e[2]+i*e[6]+a*e[10],r},transformMat3:function(t,e,r){r=r||new n(3);const s=t[0],i=t[1],a=t[2];return r[0]=s*e[0]+i*e[4]+a*e[8],r[1]=s*e[1]+i*e[5]+a*e[9],r[2]=s*e[2]+i*e[6]+a*e[10],r},transformQuat:function(t,e,r){r=r||new n(3);const s=e[0],i=e[1],a=e[2],o=2*e[3],u=t[0],c=t[1],l=t[2],h=i*l-a*c,_=a*u-s*l,d=s*c-i*u;return r[0]=u+h*o+2*(i*d-a*_),r[1]=c+_*o+2*(a*h-s*d),r[2]=l+d*o+2*(s*_-i*h),r},getTranslation:function(t,e){return(e=e||new n(3))[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const s=4*e;return(r=r||new n(3))[0]=t[s+0],r[1]=t[s+1],r[2]=t[s+2],r},getScaling:function(t,e){e=e||new n(3);const r=t[0],s=t[1],i=t[2],a=t[4],o=t[5],u=t[6],c=t[8],l=t[9],h=t[10];return e[0]=Math.sqrt(r*r+s*s+i*i),e[1]=Math.sqrt(a*a+o*o+u*u),e[2]=Math.sqrt(c*c+l*l+h*h),e}});let q=Float32Array;function z(t,e){return(e=e||new q(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}const U=z;function B(t){return(t=t||new q(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function I(t,e){e=e||new q(16);const r=t[0],s=t[1],n=t[2],i=t[3],a=t[4],o=t[5],u=t[6],c=t[7],l=t[8],h=t[9],_=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],y=_*g,w=m*d,x=u*g,k=m*c,v=u*d,b=_*c,M=n*g,A=m*i,T=n*d,S=_*i,E=n*c,C=u*i,P=l*f,z=p*h,U=a*f,B=p*o,I=a*h,N=l*o,F=r*f,O=p*s,D=r*h,G=l*s,L=r*o,R=a*s,V=y*o+k*h+v*f-(w*o+x*h+b*f),Y=w*s+M*h+S*f-(y*s+A*h+T*f),j=x*s+A*o+E*f-(k*s+M*o+C*f),$=b*s+T*o+C*h-(v*s+S*o+E*h),H=1/(r*V+a*Y+l*j+p*$);return e[0]=H*V,e[1]=H*Y,e[2]=H*j,e[3]=H*$,e[4]=H*(w*a+x*l+b*p-(y*a+k*l+v*p)),e[5]=H*(y*r+A*l+T*p-(w*r+M*l+S*p)),e[6]=H*(k*r+M*a+C*p-(x*r+A*a+E*p)),e[7]=H*(v*r+S*a+E*l-(b*r+T*a+C*l)),e[8]=H*(P*c+B*d+I*g-(z*c+U*d+N*g)),e[9]=H*(z*i+F*d+G*g-(P*i+O*d+D*g)),e[10]=H*(U*i+O*c+L*g-(B*i+F*c+R*g)),e[11]=H*(N*i+D*c+R*d-(I*i+G*c+L*d)),e[12]=H*(U*_+N*m+z*u-(I*m+P*u+B*_)),e[13]=H*(D*m+P*n+O*_-(F*_+G*m+z*n)),e[14]=H*(F*u+R*m+B*n-(L*m+U*n+O*u)),e[15]=H*(L*_+I*n+G*u-(D*u+R*_+N*n)),e}const N=I;function F(t,e,r){r=r||new q(16);const s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],u=t[5],c=t[6],l=t[7],h=t[8],_=t[9],d=t[10],p=t[11],f=t[12],m=t[13],g=t[14],y=t[15],w=e[0],x=e[1],k=e[2],v=e[3],b=e[4],M=e[5],A=e[6],T=e[7],S=e[8],E=e[9],C=e[10],P=e[11],z=e[12],U=e[13],B=e[14],I=e[15];return r[0]=s*w+o*x+h*k+f*v,r[1]=n*w+u*x+_*k+m*v,r[2]=i*w+c*x+d*k+g*v,r[3]=a*w+l*x+p*k+y*v,r[4]=s*b+o*M+h*A+f*T,r[5]=n*b+u*M+_*A+m*T,r[6]=i*b+c*M+d*A+g*T,r[7]=a*b+l*M+p*A+y*T,r[8]=s*S+o*E+h*C+f*P,r[9]=n*S+u*E+_*C+m*P,r[10]=i*S+c*E+d*C+g*P,r[11]=a*S+l*E+p*C+y*P,r[12]=s*z+o*U+h*B+f*I,r[13]=n*z+u*U+_*B+m*I,r[14]=i*z+c*U+d*B+g*I,r[15]=a*z+l*U+p*B+y*I,r}const O=F;let D,G,L;function R(t,e,r){r=r||new q(16);let s=t[0],n=t[1],i=t[2];const a=Math.sqrt(s*s+n*n+i*i);s/=a,n/=a,i/=a;const o=s*s,u=n*n,c=i*i,l=Math.cos(e),h=Math.sin(e),_=1-l;return r[0]=o+(1-o)*l,r[1]=s*n*_+i*h,r[2]=s*i*_-n*h,r[3]=0,r[4]=s*n*_-i*h,r[5]=u+(1-u)*l,r[6]=n*i*_+s*h,r[7]=0,r[8]=s*i*_+n*h,r[9]=n*i*_-s*h,r[10]=c+(1-c)*l,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const V=R;function Y(t,e,r,s){s=s||new q(16);let n=e[0],i=e[1],a=e[2];const o=Math.sqrt(n*n+i*i+a*a);n/=o,i/=o,a/=o;const u=n*n,c=i*i,l=a*a,h=Math.cos(r),_=Math.sin(r),d=1-h,p=u+(1-u)*h,f=n*i*d+a*_,m=n*a*d-i*_,g=n*i*d-a*_,y=c+(1-c)*h,w=i*a*d+n*_,x=n*a*d+i*_,k=i*a*d-n*_,v=l+(1-l)*h,b=t[0],M=t[1],A=t[2],T=t[3],S=t[4],E=t[5],C=t[6],P=t[7],z=t[8],U=t[9],B=t[10],I=t[11];return s[0]=p*b+f*S+m*z,s[1]=p*M+f*E+m*U,s[2]=p*A+f*C+m*B,s[3]=p*T+f*P+m*I,s[4]=g*b+y*S+w*z,s[5]=g*M+y*E+w*U,s[6]=g*A+y*C+w*B,s[7]=g*T+y*P+w*I,s[8]=x*b+k*S+v*z,s[9]=x*M+k*E+v*U,s[10]=x*A+k*C+v*B,s[11]=x*T+k*P+v*I,t!==s&&(s[12]=t[12],s[13]=t[13],s[14]=t[14],s[15]=t[15]),s}const j=Y;var $=Object.freeze({__proto__:null,setDefaultType:function(t){const e=q;return q=t,e},create:function(t,e,r,s,n,i,a,o,u,c,l,h,_,d,p,f){const m=new q(16);return void 0!==t&&(m[0]=t,void 0!==e&&(m[1]=e,void 0!==r&&(m[2]=r,void 0!==s&&(m[3]=s,void 0!==n&&(m[4]=n,void 0!==i&&(m[5]=i,void 0!==a&&(m[6]=a,void 0!==o&&(m[7]=o,void 0!==u&&(m[8]=u,void 0!==c&&(m[9]=c,void 0!==l&&(m[10]=l,void 0!==h&&(m[11]=h,void 0!==_&&(m[12]=_,void 0!==d&&(m[13]=d,void 0!==p&&(m[14]=p,void 0!==f&&(m[15]=f)))))))))))))))),m},set:function(t,e,r,s,n,i,a,o,u,c,l,h,_,d,p,f,m){return(m=m||new q(16))[0]=t,m[1]=e,m[2]=r,m[3]=s,m[4]=n,m[5]=i,m[6]=a,m[7]=o,m[8]=u,m[9]=c,m[10]=l,m[11]=h,m[12]=_,m[13]=d,m[14]=p,m[15]=f,m},fromMat3:function(t,e){return(e=e||new q(16))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=0,e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=0,e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},fromQuat:function(t,e){e=e||new q(16);const r=t[0],s=t[1],n=t[2],i=t[3],a=r+r,o=s+s,u=n+n,c=r*a,l=s*a,h=s*o,_=n*a,d=n*o,p=n*u,f=i*a,m=i*o,g=i*u;return e[0]=1-h-p,e[1]=l+g,e[2]=_-m,e[3]=0,e[4]=l-g,e[5]=1-c-p,e[6]=d+f,e[7]=0,e[8]=_+m,e[9]=d-f,e[10]=1-c-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},negate:function(t,e){return(e=e||new q(16))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=-t[7],e[8]=-t[8],e[9]=-t[9],e[10]=-t[10],e[11]=-t[11],e[12]=-t[12],e[13]=-t[13],e[14]=-t[14],e[15]=-t[15],e},copy:z,clone:U,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<s&&Math.abs(t[1]-e[1])<s&&Math.abs(t[2]-e[2])<s&&Math.abs(t[3]-e[3])<s&&Math.abs(t[4]-e[4])<s&&Math.abs(t[5]-e[5])<s&&Math.abs(t[6]-e[6])<s&&Math.abs(t[7]-e[7])<s&&Math.abs(t[8]-e[8])<s&&Math.abs(t[9]-e[9])<s&&Math.abs(t[10]-e[10])<s&&Math.abs(t[11]-e[11])<s&&Math.abs(t[12]-e[12])<s&&Math.abs(t[13]-e[13])<s&&Math.abs(t[14]-e[14])<s&&Math.abs(t[15]-e[15])<s},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},identity:B,transpose:function(t,e){if((e=e||new q(16))===t){let r;return r=t[1],t[1]=t[4],t[4]=r,r=t[2],t[2]=t[8],t[8]=r,r=t[3],t[3]=t[12],t[12]=r,r=t[6],t[6]=t[9],t[9]=r,r=t[7],t[7]=t[13],t[13]=r,r=t[11],t[11]=t[14],t[14]=r,e}const r=t[0],s=t[1],n=t[2],i=t[3],a=t[4],o=t[5],u=t[6],c=t[7],l=t[8],h=t[9],_=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15];return e[0]=r,e[1]=a,e[2]=l,e[3]=p,e[4]=s,e[5]=o,e[6]=h,e[7]=f,e[8]=n,e[9]=u,e[10]=_,e[11]=m,e[12]=i,e[13]=c,e[14]=d,e[15]=g,e},inverse:I,determinant:function(t){const e=t[0],r=t[1],s=t[2],n=t[3],i=t[4],a=t[5],o=t[6],u=t[7],c=t[8],l=t[9],h=t[10],_=t[11],d=t[12],p=t[13],f=t[14],m=t[15],g=h*m,y=f*_,w=o*m,x=f*u,k=o*_,v=h*u,b=s*m,M=f*n,A=s*_,T=h*n,S=s*u,E=o*n;return e*(g*a+x*l+k*p-(y*a+w*l+v*p))+i*(y*r+b*l+T*p-(g*r+M*l+A*p))+c*(w*r+M*a+S*p-(x*r+b*a+E*p))+d*(v*r+A*a+E*l-(k*r+T*a+S*l))},invert:N,multiply:F,mul:O,setTranslation:function(t,e,r){return t!==(r=r||B())&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11]),r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},getTranslation:function(t,e){return(e=e||i())[0]=t[12],e[1]=t[13],e[2]=t[14],e},getAxis:function(t,e,r){const s=4*e;return(r=r||i())[0]=t[s+0],r[1]=t[s+1],r[2]=t[s+2],r},setAxis:function(t,e,r,s){s!==t&&(s=z(t,s));const n=4*r;return s[n+0]=e[0],s[n+1]=e[1],s[n+2]=e[2],s},getScaling:function(t,e){e=e||i();const r=t[0],s=t[1],n=t[2],a=t[4],o=t[5],u=t[6],c=t[8],l=t[9],h=t[10];return e[0]=Math.sqrt(r*r+s*s+n*n),e[1]=Math.sqrt(a*a+o*o+u*u),e[2]=Math.sqrt(c*c+l*l+h*h),e},perspective:function(t,e,r,s,n){n=n||new q(16);const i=Math.tan(.5*Math.PI-.5*t);if(n[0]=i/e,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=i,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[11]=-1,n[12]=0,n[13]=0,n[15]=0,s===1/0)n[10]=-1,n[14]=-r;else{const t=1/(r-s);n[10]=s*t,n[14]=s*r*t}return n},ortho:function(t,e,r,s,n,i,a){return(a=a||new q(16))[0]=2/(e-t),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(s-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(n-i),a[11]=0,a[12]=(e+t)/(t-e),a[13]=(s+r)/(r-s),a[14]=n/(n-i),a[15]=1,a},frustum:function(t,e,r,s,n,i,a){const o=e-t,u=s-r,c=n-i;return(a=a||new q(16))[0]=2*n/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*n/u,a[6]=0,a[7]=0,a[8]=(t+e)/o,a[9]=(s+r)/u,a[10]=i/c,a[11]=-1,a[12]=0,a[13]=0,a[14]=n*i/c,a[15]=0,a},aim:function(t,e,r,s){return s=s||new q(16),D=D||i(),G=G||i(),L=L||i(),b(o(e,t,L),L),b(d(r,L,D),D),b(d(L,D,G),G),s[0]=D[0],s[1]=D[1],s[2]=D[2],s[3]=0,s[4]=G[0],s[5]=G[1],s[6]=G[2],s[7]=0,s[8]=L[0],s[9]=L[1],s[10]=L[2],s[11]=0,s[12]=t[0],s[13]=t[1],s[14]=t[2],s[15]=1,s},cameraAim:function(t,e,r,s){return s=s||new q(16),D=D||i(),G=G||i(),L=L||i(),b(o(t,e,L),L),b(d(r,L,D),D),b(d(L,D,G),G),s[0]=D[0],s[1]=D[1],s[2]=D[2],s[3]=0,s[4]=G[0],s[5]=G[1],s[6]=G[2],s[7]=0,s[8]=L[0],s[9]=L[1],s[10]=L[2],s[11]=0,s[12]=t[0],s[13]=t[1],s[14]=t[2],s[15]=1,s},lookAt:function(t,e,r,s){return s=s||new q(16),D=D||i(),G=G||i(),L=L||i(),b(o(t,e,L),L),b(d(r,L,D),D),b(d(L,D,G),G),s[0]=D[0],s[1]=G[0],s[2]=L[0],s[3]=0,s[4]=D[1],s[5]=G[1],s[6]=L[1],s[7]=0,s[8]=D[2],s[9]=G[2],s[10]=L[2],s[11]=0,s[12]=-(D[0]*t[0]+D[1]*t[1]+D[2]*t[2]),s[13]=-(G[0]*t[0]+G[1]*t[1]+G[2]*t[2]),s[14]=-(L[0]*t[0]+L[1]*t[1]+L[2]*t[2]),s[15]=1,s},translation:function(t,e){return(e=e||new q(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},translate:function(t,e,r){r=r||new q(16);const s=e[0],n=e[1],i=e[2],a=t[0],o=t[1],u=t[2],c=t[3],l=t[4],h=t[5],_=t[6],d=t[7],p=t[8],f=t[9],m=t[10],g=t[11],y=t[12],w=t[13],x=t[14],k=t[15];return t!==r&&(r[0]=a,r[1]=o,r[2]=u,r[3]=c,r[4]=l,r[5]=h,r[6]=_,r[7]=d,r[8]=p,r[9]=f,r[10]=m,r[11]=g),r[12]=a*s+l*n+p*i+y,r[13]=o*s+h*n+f*i+w,r[14]=u*s+_*n+m*i+x,r[15]=c*s+d*n+g*i+k,r},rotationX:function(t,e){e=e||new q(16);const r=Math.cos(t),s=Math.sin(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=s,e[7]=0,e[8]=0,e[9]=-s,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateX:function(t,e,r){r=r||new q(16);const s=t[4],n=t[5],i=t[6],a=t[7],o=t[8],u=t[9],c=t[10],l=t[11],h=Math.cos(e),_=Math.sin(e);return r[4]=h*s+_*o,r[5]=h*n+_*u,r[6]=h*i+_*c,r[7]=h*a+_*l,r[8]=h*o-_*s,r[9]=h*u-_*n,r[10]=h*c-_*i,r[11]=h*l-_*a,t!==r&&(r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationY:function(t,e){e=e||new q(16);const r=Math.cos(t),s=Math.sin(t);return e[0]=r,e[1]=0,e[2]=-s,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=s,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateY:function(t,e,r){r=r||new q(16);const s=t[0],n=t[1],i=t[2],a=t[3],o=t[8],u=t[9],c=t[10],l=t[11],h=Math.cos(e),_=Math.sin(e);return r[0]=h*s-_*o,r[1]=h*n-_*u,r[2]=h*i-_*c,r[3]=h*a-_*l,r[8]=h*o+_*s,r[9]=h*u+_*n,r[10]=h*c+_*i,r[11]=h*l+_*a,t!==r&&(r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},rotationZ:function(t,e){e=e||new q(16);const r=Math.cos(t),s=Math.sin(t);return e[0]=r,e[1]=s,e[2]=0,e[3]=0,e[4]=-s,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},rotateZ:function(t,e,r){r=r||new q(16);const s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],u=t[5],c=t[6],l=t[7],h=Math.cos(e),_=Math.sin(e);return r[0]=h*s+_*o,r[1]=h*n+_*u,r[2]=h*i+_*c,r[3]=h*a+_*l,r[4]=h*o-_*s,r[5]=h*u-_*n,r[6]=h*c-_*i,r[7]=h*l-_*a,t!==r&&(r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},axisRotation:R,rotation:V,axisRotate:Y,rotate:j,scaling:function(t,e){return(e=e||new q(16))[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},scale:function(t,e,r){r=r||new q(16);const s=e[0],n=e[1],i=e[2];return r[0]=s*t[0],r[1]=s*t[1],r[2]=s*t[2],r[3]=s*t[3],r[4]=n*t[4],r[5]=n*t[5],r[6]=n*t[6],r[7]=n*t[7],r[8]=i*t[8],r[9]=i*t[9],r[10]=i*t[10],r[11]=i*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r},uniformScaling:function(t,e){return(e=e||new q(16))[0]=t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},uniformScale:function(t,e,r){return(r=r||new q(16))[0]=e*t[0],r[1]=e*t[1],r[2]=e*t[2],r[3]=e*t[3],r[4]=e*t[4],r[5]=e*t[5],r[6]=e*t[6],r[7]=e*t[7],r[8]=e*t[8],r[9]=e*t[9],r[10]=e*t[10],r[11]=e*t[11],t!==r&&(r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15]),r}});Float32Array;let H=Float32Array;function X(t,e,r,s){const n=new H(4);return void 0!==t&&(n[0]=t,void 0!==e&&(n[1]=e,void 0!==r&&(n[2]=r,void 0!==s&&(n[3]=s)))),n}const W=X;function K(t,e,r){return(r=r||new H(4))[0]=t[0]-e[0],r[1]=t[1]-e[1],r[2]=t[2]-e[2],r[3]=t[3]-e[3],r}const Z=K;function Q(t,e,r){return(r=r||new H(4))[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r[3]=t[3]*e,r}const J=Q;function tt(t,e){return(e=e||new H(4))[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}const et=tt;function rt(t){const e=t[0],r=t[1],s=t[2],n=t[3];return Math.sqrt(e*e+r*r+s*s+n*n)}const st=rt;function nt(t){const e=t[0],r=t[1],s=t[2],n=t[3];return e*e+r*r+s*s+n*n}const it=nt;function at(t,e){const r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2],i=t[3]-e[3];return Math.sqrt(r*r+s*s+n*n+i*i)}const ot=at;function ut(t,e){const r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2],i=t[3]-e[3];return r*r+s*s+n*n+i*i}const ct=ut;function lt(t,e){return(e=e||new H(4))[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}const ht=lt;function _t(t,e,r){return(r=r||new H(4))[0]=t[0]*e[0],r[1]=t[1]*e[1],r[2]=t[2]*e[2],r[3]=t[3]*e[3],r}const dt=_t;function pt(t,e,r){return(r=r||new H(4))[0]=t[0]/e[0],r[1]=t[1]/e[1],r[2]=t[2]/e[2],r[3]=t[3]/e[3],r}const ft=pt;var mt=Object.freeze({__proto__:null,create:X,setDefaultType:function(t){const e=H;return H=t,e},fromValues:W,set:function(t,e,r,s,n){return(n=n||new H(4))[0]=t,n[1]=e,n[2]=r,n[3]=s,n},ceil:function(t,e){return(e=e||new H(4))[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e},floor:function(t,e){return(e=e||new H(4))[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e},round:function(t,e){return(e=e||new H(4))[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e},clamp:function(t,e=0,r=1,s){return(s=s||new H(4))[0]=Math.min(r,Math.max(e,t[0])),s[1]=Math.min(r,Math.max(e,t[1])),s[2]=Math.min(r,Math.max(e,t[2])),s[3]=Math.min(r,Math.max(e,t[3])),s},add:function(t,e,r){return(r=r||new H(4))[0]=t[0]+e[0],r[1]=t[1]+e[1],r[2]=t[2]+e[2],r[3]=t[3]+e[3],r},addScaled:function(t,e,r,s){return(s=s||new H(4))[0]=t[0]+e[0]*r,s[1]=t[1]+e[1]*r,s[2]=t[2]+e[2]*r,s[3]=t[3]+e[3]*r,s},subtract:K,sub:Z,equalsApproximately:function(t,e){return Math.abs(t[0]-e[0])<s&&Math.abs(t[1]-e[1])<s&&Math.abs(t[2]-e[2])<s&&Math.abs(t[3]-e[3])<s},equals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},lerp:function(t,e,r,s){return(s=s||new H(4))[0]=t[0]+r*(e[0]-t[0]),s[1]=t[1]+r*(e[1]-t[1]),s[2]=t[2]+r*(e[2]-t[2]),s[3]=t[3]+r*(e[3]-t[3]),s},lerpV:function(t,e,r,s){return(s=s||new H(4))[0]=t[0]+r[0]*(e[0]-t[0]),s[1]=t[1]+r[1]*(e[1]-t[1]),s[2]=t[2]+r[2]*(e[2]-t[2]),s[3]=t[3]+r[3]*(e[3]-t[3]),s},max:function(t,e,r){return(r=r||new H(4))[0]=Math.max(t[0],e[0]),r[1]=Math.max(t[1],e[1]),r[2]=Math.max(t[2],e[2]),r[3]=Math.max(t[3],e[3]),r},min:function(t,e,r){return(r=r||new H(4))[0]=Math.min(t[0],e[0]),r[1]=Math.min(t[1],e[1]),r[2]=Math.min(t[2],e[2]),r[3]=Math.min(t[3],e[3]),r},mulScalar:Q,scale:J,divScalar:function(t,e,r){return(r=r||new H(4))[0]=t[0]/e,r[1]=t[1]/e,r[2]=t[2]/e,r[3]=t[3]/e,r},inverse:tt,invert:et,dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},length:rt,len:st,lengthSq:nt,lenSq:it,distance:at,dist:ot,distanceSq:ut,distSq:ct,normalize:function(t,e){e=e||new H(4);const r=t[0],s=t[1],n=t[2],i=t[3],a=Math.sqrt(r*r+s*s+n*n+i*i);return a>1e-5?(e[0]=r/a,e[1]=s/a,e[2]=n/a,e[3]=i/a):(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e},negate:function(t,e){return(e=e||new H(4))[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},copy:lt,clone:ht,multiply:_t,mul:dt,divide:pt,div:ft,zero:function(t){return(t=t||new H(4))[0]=0,t[1]=0,t[2]=0,t[3]=0,t},transformMat4:function(t,e,r){r=r||new H(4);const s=t[0],n=t[1],i=t[2],a=t[3];return r[0]=e[0]*s+e[4]*n+e[8]*i+e[12]*a,r[1]=e[1]*s+e[5]*n+e[9]*i+e[13]*a,r[2]=e[2]*s+e[6]*n+e[10]*i+e[14]*a,r[3]=e[3]*s+e[7]*n+e[11]*i+e[15]*a,r}})}},i={};function a(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return n[t](r,r.exports,a),r.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",s=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(n,i,a)=>{var o;a&&((o=[]).d=-1);var u,c,l,h=new Set,_=n.exports,d=new Promise(((t,e)=>{l=e,c=t}));d[e]=_,d[t]=t=>(o&&t(o),h.forEach(t),d.catch((t=>{}))),n.exports=d,i((n=>{var i;u=(n=>n.map((n=>{if(null!==n&&"object"==typeof n){if(n[t])return n;if(n.then){var i=[];i.d=0,n.then((t=>{a[e]=t,s(i)}),(t=>{a[r]=t,s(i)}));var a={};return a[t]=t=>t(i),a}}var o={};return o[t]=t=>{},o[e]=n,o})))(n);var a=()=>u.map((t=>{if(t[r])throw t[r];return t[e]})),c=new Promise((e=>{(i=()=>e(a)).r=0;var r=t=>t!==o&&!h.has(t)&&(h.add(t),t&&!t.d&&(i.r++,t.push(i)));u.map((e=>e[t](r)))}));return i.r?c:a()}),(t=>(t?l(d[r]=t):c(_),s(o)))),o&&o.d<0&&(o.d=0)},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,