(()=>{"use strict";var e,t,n,r,s={218:(e,t,n)=>{n.d(t,{t:()=>i});var r=n(416);class s{matrix_=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);zFar=1e5;_aspect=1;get aspect(){return this._aspect}set aspect(e){this._aspect=e,this._projectionMatrix=r._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar)}_projectionMatrix=r._E.perspective(2*Math.PI/5,this._aspect,1,this.zFar);get projectionMatrix(){return this._projectionMatrix}view_=r._E.create();right_=new Float32Array(this.matrix_.buffer,0,4);up_=new Float32Array(this.matrix_.buffer,16,4);back_=new Float32Array(this.matrix_.buffer,32,4);position_=new Float32Array(this.matrix_.buffer,48,4);get matrix(){return this.matrix_}set matrix(e){r._E.copy(e,this.matrix_)}get view(){return this.view_}set view(e){r._E.copy(e,this.view_)}get right(){return this.right_}set right(e){r.R3.copy(e,this.right_)}get up(){return this.up_}set up(e){r.R3.copy(e,this.up_)}get back(){return this.back_}set back(e){r.R3.copy(e,this.back_)}get position(){return this.position_}set position(e){r.R3.copy(e,this.position_)}}class i extends s{pitch=0;yaw=0;velocity_=r.R3.create();movementSpeed=10;rotationSpeed=1;frictionCoefficient=.99;get velocity(){return this.velocity_}set velocity(e){r.R3.copy(e,this.velocity_)}constructor(e){if(super(),e&&(e.position||e.target||e.movementSpeed)){const t=e.position??r.R3.create(0,0,-5),n=e.target??r.R3.create(0,0,0);this.back=r.R3.normalize(r.R3.subtract(t,n)),this.recalculateAngles(this.back),this.position=t,this.movementSpeed=e.movementSpeed??10,this.aspect=e.aspect??this.aspect}}get matrix(){return super.matrix}set matrix(e){super.matrix=e,this.recalculateAngles(this.back)}update(e,t){const n=(e,t)=>(e?1:0)-(t?1:0);var s,i;this.yaw-=t.analog.x*e*this.rotationSpeed,this.pitch-=t.analog.y*e*this.rotationSpeed,this.yaw=(s=this.yaw,i=2*Math.PI,s-Math.floor(Math.abs(s)/i)*i*Math.sign(s)),this.pitch=function(e,t,n){return Math.min(Math.max(e,t),n)}(this.pitch,-Math.PI/2,Math.PI/2);const a=r.R3.copy(this.position);super.matrix=r._E.rotateX(r._E.rotationY(this.yaw),this.pitch);const o=t.digital,u=n(o.right,o.left),l=n(o.up,o.down),c=r.R3.create(),h=n(o.backward,o.forward);var d,f,p;r.R3.addScaled(c,this.right,u,c),r.R3.addScaled(c,this.up,l,c),r.R3.addScaled(c,this.back,h,c),r.R3.normalize(c,c),r.R3.mulScalar(c,this.movementSpeed,c),this.velocity=(d=c,f=this.velocity,p=Math.pow(1-this.frictionCoefficient,e),r.R3.addScaled(d,r.R3.sub(f,d),p)),this.position=r.R3.addScaled(a,this.velocity,e),this.view=r._E.invert(this.matrix)}recalculateAngles(e){this.yaw=Math.atan2(e[0],e[2]),this.pitch=-Math.asin(e[1])}}},908:(e,t,n)=>{n.d(t,{D:()=>he});var r=n(416),s=n(403);class i extends s.I{get device(){return this._device}_device;get buffer(){if(this._buffer)return this._buffer;throw new Error(`Buffer wasn't initialized. ${this.label}`)}_buffer;_data;_dataFct;isArrayData=!1;_usage=GPUBufferUsage.UNIFORM;_size=-1;constructor(e,t,n,r){super(n),this._usage=t,this._size=r??this._size,"function"==typeof e?this._dataFct=e:this._data=e}writeToGpu(e){let t=this._dataFct?this._dataFct():this._data;if(!this._buffer||this._device!=e){this._device=e,this.isArrayData=Array.isArray(t),this._size<=0&&(this._size=s.I.calcSize(t)),this._usage==GPUBufferUsage.STORAGE&&(this._size=Math.max(this._size,256));const n={label:`${this.label}`,size:this._size,usage:this._usage|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(n)}this.isArrayData||(t=[t]);let n=0;t.forEach(((t,r)=>{e.queue.writeBuffer(this._buffer,n,t),n+=t.byteLength}))}}class a extends i{instances;get length(){return this.instances.length}get vertexBuffer(){return this.instances[0].vertexBuffer}get normalBuffer(){return this.instances[0].normalBuffer}get vertexBufferLayout(){return this.normalBuffer?[this.vertexBuffer.layout,this.normalBuffer.layout]:[this.vertexBuffer.layout]}get topology(){return this.vertexBuffer.topology}constructor(e,t){if(e.length<0)throw new Error("instances lenght can't be 0.");super((()=>{let e=[];for(let t=0;t<this.instances.length;t++){let n=this.instances[t].transform,s=r._E.transpose(r._E.invert(this.instances[t].transform));e.push(n),e.push(s)}return e}),GPUBufferUsage.STORAGE,t??"Models Instances Buffer",64*e.length*2),this.instances=e}}function o(e,t,n){return e.reduce(((e,r)=>{let s=t(r),i=Array.from(e.keys()).find((e=>n(e,s)));return i||e.set(s,[]),e.get(i??s)?.push(r),e}),new Map)}const u=(e,t)=>{if("object"==typeof e&&"object"==typeof t){const n=Object.values(e),r=Object.values(t);if(n.length!==r.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==r[e])return!1;return!0}return!1};class l{device;models;shadowMaps;shadowPipeline;renderGroups;lightBuffer;constructor(e,t,n){this.device=e,this.models=t,this.shadowMaps=n}async buildAsync(e){var t,n;return this.shadowPipeline=await function(e){let t=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0}}],n=e.createBindGroupLayout({entries:t}),r={label:"shadow map pipeline",layout:e.createPipelineLayout({bindGroupLayouts:[n]}),vertex:{module:e.createShaderModule({label:"shadow shader",code:"struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\n@group(0) @binding(0) var<storage, read> instances : array<Instance>;\n@group(0) @binding(1) var<uniform> lightView_mat : mat4x4 < f32>;\n\n@vertex\nfn vertexMain(@builtin(instance_index) idx : u32, @location(0) position : vec3 < f32>) -> @builtin(position) vec4 < f32>\n{\n    return lightView_mat * instances[idx].transform * vec4(position, 1);\n}\n"}),entryPoint:"vertexMain",buffers:[d]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}};return e.createRenderPipelineAsync(r)}(e),this.renderGroups=[...(t=this.models,n=e=>e.vertexBuffer,o(t,n,((e,t)=>e===t))).values()].map((e=>new a(e))),this.renderGroups.forEach((t=>t.writeToGpu(e))),this.writeToGpu(e),this}addPass(e){const t=this.device;this.shadowMaps.forEach((e=>e.createViewMat())),this.writeToGpu(t),this.shadowMaps.forEach(((n,r)=>{const s=this.lightBuffer,i={colorAttachments:[],depthStencilAttachment:{view:n.textureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},a=e.beginRenderPass(i);for(let e of this.renderGroups){e.writeToGpu(t);const n=e.vertexBuffer;a.setPipeline(this.shadowPipeline),a.setBindGroup(0,h(t,this.shadowPipeline,e.buffer,s),[r*c]),a.setVertexBuffer(0,n.buffer),a.draw(n.vertexCount,e.length)}a.end()}))}writeToGpu(e){this.lightBuffer||(this.lightBuffer=e.createBuffer({label:"light view buffer",size:c*this.shadowMaps.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}));for(let t=0;t<this.shadowMaps.length;t++){let n=this.shadowMaps[t];e.queue.writeBuffer(this.lightBuffer,t*c,n.light_mat)}}}const c=256;function h(e,t,n,r){let s={label:"shadow map shader binding group",layout:t.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:n}},{binding:1,resource:{buffer:r,size:c}}]};return e.createBindGroup(s)}const d={arrayStride:56,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]};var f=n(102),p=n(231);class m{label;index=0;get bindings(){return this._bindings}_bindings=[];constructor(e,t){this.label=t,e&&this.add(...Array.isArray(e)?e:[e])}getBindGroupLayoutDescriptor(){return{entries:this._bindings.map(((e,t)=>e.getLayout(t))),label:this.label}}add(...e){return this._bindings.push(...e),this}addBuffer(e,t=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT){return this._bindings.push(new _({type:e},t)),this}addTexture(e,t,n,r=GPUShaderStage.FRAGMENT){return this._bindings.push(new g({sampleType:t,viewDimension:e,multisampled:n},r)),this}addSampler(e,t=GPUShaderStage.FRAGMENT){return this._bindings.push(new w(e,t)),this}addLinearSampler(){return this._bindings.push(new v),this}addNearestSampler(){return this._bindings.push(new y),this}addDepthSampler(){return this._bindings.push(new x),this}when(e,t){return e?t(this):this}}class _{type;visibility;constructor(e,t=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT){this.type=e,this.visibility=t}getLayout(e){return{binding:e,visibility:this.visibility,buffer:this.type}}}class g{type;visibility;constructor(e={},t=GPUShaderStage.FRAGMENT){this.type=e,this.visibility=t}getLayout(e){return{binding:e,visibility:this.visibility,texture:this.type}}}class w{type;visibility;constructor(e,t=GPUShaderStage.FRAGMENT){this.type=e,this.visibility=t}getLayout(e){return{binding:e,visibility:this.visibility,sampler:{type:this.type}}}}class v extends w{constructor(e=GPUShaderStage.FRAGMENT){super("filtering",e)}}class y extends w{constructor(e=GPUShaderStage.FRAGMENT){super("filtering",e)}}class x extends w{constructor(e=GPUShaderStage.FRAGMENT){super("comparison",e)}}class b{get groupDefinitions(){return this._groupDefinitions}_groupDefinitions=[];SHADER;get device(){return this._device}_device;get actualPipeline(){return this._pipeline}_pipeline;options;_vertexBufferLayouts=[];_topology="triangle-list";constructor(e,t,n,r){this.SHADER=e,n?(this.setVertexBufferLayouts(t,n),this.options=r):this.options=t}async buildAsync(e){return this._device=e,this._pipeline=await async function(e,t,n,r,s,i="triangle-list"){if(t.length<=0)throw new Error("vertexBufferLayout argument can't be empty.");t[0]instanceof p.Q&&(t=t.map((e=>e.layout)));let a="auto";if(0==s?.autoLayout){let t=n.map((t=>e.createBindGroupLayout(t.getBindGroupLayoutDescriptor())));a=e.createPipelineLayout({bindGroupLayouts:t})}let o=e.createShaderModule({code:r,label:`${s?.label} Shader`}),u={label:`${s?.label} Pipeline`,layout:a,vertex:{module:o,entryPoint:s?.vertexEntry??"vertexMain",buffers:t,constants:s?.vertexConstants},fragment:{module:o,entryPoint:s?.fragmentEntry??"fragmentMain",constants:s?.fragmentConstants,targets:[{format:s?.canvasFormat??"bgra8unorm",blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{}}}]},primitive:{topology:i,cullMode:s?.cullMode??"back"},multisample:{count:s?.aaSampleCount??4},depthStencil:s?.depthStencilState??{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};return await e.createRenderPipelineAsync(u)}(e,this._vertexBufferLayouts,this._groupDefinitions,this.SHADER,this.options,this._topology),this._pipeline}setVertexBufferLayouts(e,t){return this._vertexBufferLayouts=Array.isArray(e)?e:[e],this._topology=t,this}addBindGroup(e){let t="function"==typeof e?e(new m):e;return t.index=this._groupDefinitions.length,this._groupDefinitions.push(t),this}}const k={addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:4,maxAnisotropy:16};let M;const S={addressModeU:"repeat",addressModeV:"repeat",magFilter:"nearest",minFilter:"nearest"};let T;const A={compare:"less"};let P;class E{_device;_pipeline;label;groups=[[]];get current(){return this.rebuildRequired=!0,this.groups[this.groups.length-1]}build;rebuildRequired=!0;constructor(e,t,n){this._device=e,this._pipeline=t,this.label=n}getBindGroups(){return this.build&&!this.rebuildRequired||(this.build=this.createBindGroups()),this.build}createBindGroups(){return this.build=this.groups.map(((e,t)=>this._device.createBindGroup({layout:this._pipeline.getBindGroupLayout(t),entries:e.map(((e,t)=>e.getEntry(t))),label:`BindGroup ${t} of ${this.label}`}))),this.rebuildRequired=!1,this.build}addGroup(){return this.groups.push([]),this}addBuffer(...e){for(let t of e)this.current.push({getEntry:e=>({binding:e,resource:{buffer:t.buffer}})});return this}addTexture(e){return this.current.push({getEntry:t=>({binding:t,resource:e})}),this}addSampler(e){return this.current.push({getEntry:t=>({binding:t,resource:e instanceof GPUSampler?e:this._device.createSampler(e)})}),this}addLinearSampler(){return this.current.push({getEntry:e=>{return{binding:e,resource:(t=this._device,M&&t==M[0]||(M=[t,t.createSampler(k)]),M[1])};var t}}),this}addNearestSampler(){return this.current.push({getEntry:e=>{return{binding:e,resource:(t=this._device,T&&t==T[0]||(T=[t,t.createSampler(S)]),T[1])};var t}}),this}addDepthSampler(){return this.current.push({getEntry:e=>{return{binding:e,resource:(t=this._device,P&&t==P[0]||(P=[t,t.createSampler(A)]),P[1])};var t}}),this}when(e,t){return e?t(this):this}}class C{lights;camera;_pipeBuilder;_vbo;_buffers;_bindGroup;constructor(e,t){this.lights=e,this.camera=t,this._vbo=(0,f.xE)().vertexBuffer;const n=this.lights.map((e=>new Float32Array(e.diffuseColor)));this._buffers=[new i((()=>r._E.multiply(this.camera.projectionMatrix,this.camera.view)),GPUBufferUsage.UNIFORM),new i(n,GPUBufferUsage.STORAGE),new i((()=>this.lights.map((e=>r._E.uniformScale(r._E.translation([...e.position,0]),.5)))),GPUBufferUsage.STORAGE)],this._pipeBuilder=new b(N).setVertexBufferLayouts(this._vbo.layout,this._vbo.topology).addBindGroup((new m).addBuffer("uniform").addBuffer("read-only-storage").addBuffer("read-only-storage"))}async buildAsync(e){await this._pipeBuilder.buildAsync(e),this._vbo.writeToGpu(e),this._buffers.forEach((t=>t.writeToGpu(e)));let t=new E(e,this._pipeBuilder.actualPipeline).addBuffer(...this._buffers);return this._bindGroup=t.createBindGroups()[0],this}render(e,t,n){if(!this._pipeBuilder.actualPipeline)throw new Error("Pipeline hasn't been built.");this._buffers.forEach((t=>t.writeToGpu(e))),t.setVertexBuffer(0,this._vbo.buffer),t.setBindGroup(0,this._bindGroup),t.setPipeline(this._pipeBuilder.actualPipeline),t.draw(this._vbo.vertexCount,n??this.lights.length)}}const N="\n\n@group(0) @binding(0) var<uniform> viewProjMat: mat4x4f;\n@group(0) @binding(1) var<storage, read> colors: array<vec4f>;\n@group(0) @binding(2) var<storage, read> transforms: array<mat4x4f>;\n\nstruct VertexOutput\n{\n    @builtin(position) Position : vec4f,\n    @location(0) color: vec4f,\n}\n  \n@vertex\nfn vertexMain(\n@builtin(instance_index) index: u32,\n@location(0) position: vec4f,\n@location(1) uv: vec2f\n) -> VertexOutput \n{  \n    return VertexOutput(viewProjMat*transforms[index]*position, colors[index]);\n}\n\n@fragment\nfn fragmentMain(\n  @location(0) color: vec4f\n) -> @location(0) vec4f \n{    \n    return color;\n}\n\n";class B{tex2dRenderer;cube2dArraydRenderer;depthRenderer;constructor(e,t){this.tex2dRenderer=new L(e,t),this.cube2dArraydRenderer=new R(e,t),this.depthRenderer=new V(e,t)}render(e,t,n){var r;switch(t instanceof GPUTexture&&([t,n]="2d"==(r=t).dimension&&6==r.depthOrArrayLayers?[r.createView(),"2d-array-l6"]:[r.createView(),"2d"]),n){case"2d":this.tex2dRenderer.render(e,t);break;case"2d-array-l6":this.cube2dArraydRenderer.render(e,t);break;case"depth":this.depthRenderer.render(e,t);break;default:throw new Error(`${n} isn't supported.`)}}async buildAsync(e){await Promise.all([this.tex2dRenderer.buildAsync(e),this.cube2dArraydRenderer.buildAsync(e),this.depthRenderer.buildAsync(e)])}}class z{useSampler;_vbo;_pipeBuilder;constructor(e,t,n,r,s,i,a){this.useSampler=i;let o={canvasWidth:e,canvasHeight:t};this._vbo=function(){const e=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,-1,1,0,1,1,-1,0,1,1,1,0,1]);return new p.Q(e,6,{arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]},"triangle-list","Quad VBO")}(),this._pipeBuilder=new b(n,{fragmentConstants:o,label:a}).setVertexBufferLayouts(this._vbo.layout,this._vbo.topology).addBindGroup((new m).addTexture(r,s).when(i,(e=>e.addNearestSampler())))}device;async buildAsync(e){this.device=e,this._vbo.writeToGpu(e),await this._pipeBuilder.buildAsync(e)}render(e,t){if(!this._pipeBuilder?.actualPipeline||!this.device)throw new Error("Pipeline hasn't been built.");let n=new E(this.device,this._pipeBuilder.actualPipeline).addTexture(t).when(this.useSampler,(e=>e.addNearestSampler()));e.setVertexBuffer(0,this._vbo.buffer),e.setBindGroup(0,n.getBindGroups()[0]),e.setPipeline(this._pipeBuilder.actualPipeline),e.draw(this._vbo.vertexCount)}}class L extends z{constructor(e,t){super(e,t,G,"2d","float",!0,"Texture Renderer 2d")}}class R extends z{constructor(e,t){super(e,t,F,"2d-array","float",!0,"Texture Renderer Cube2DArray")}}class V extends z{constructor(e,t){super(e,t,U,"2d","depth",!1,"Texture Renderer Depth")}}const G="\noverride canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\n@group(0) @binding(0) var texture : texture_2d<f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    return textureSample(texture, textureSampler, fragCoord.xy  / vec2<f32>(canvasWidth, canvasHeight));\n}\n",F="\noverride canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\nstruct VOut\n{\n    @builtin(position) pixelPos : vec4f,\n    @location(0) fragPos : vec4f,\n}\n\n@group(0) @binding(0) var texture : texture_2d_array  < f32>;\n@group(0) @binding(1) var textureSampler : sampler;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> VOut {\n    return VOut(position, position);\n}\n\n@fragment\nfn fragmentMain(@builtin(position) pixelPos : vec4f, @location(0) f : vec4f)\n-> @location(0) vec4f {\n    let scale = vec2f(4.0/canvasWidth,3.0/canvasHeight);    \n    const h = 1.0/3.0;    \n    var layer = -1;\n\n    // layer 0 => positive x\n    // layer 1 => negative x\n    // layer 2 => positive y\n    // layer 3 => negative y\n    // layer 4 => positive z\n    // layer 5 => negative z\n\n    if(f.y > h)\n    {\n        if(f.x > -0.5 && f.x < 0)\n        {\n            layer = 2;\n        }     \n    }\n    else if(f.y < -h)\n    {\n        if(f.x > -0.5 && f.x < 0)\n        {\n            layer = 3;\n        }\n    }\n    else\n    {\n        if(f.x < -0.5)\n        {\n            layer = 1;\n        }\n        else if(f.x < 0.0)\n        {\n            layer = 4;\n        }\n        else if(f.x < 0.5)\n        {\n            layer = 0;\n        }\n        else\n        {\n            layer = 5;\n        }        \n    }\n    var uv = pixelPos.xy*scale;\n    return  select(textureSample(texture, textureSampler, uv, layer), vec4f(0,0,0,1), layer<0);\n}\n",U="\noverride canvasWidth : f32 = 1920.0;\noverride canvasHeight : f32 = 1080.0;\n\n@group(0) @binding(0) var textureMap : texture_depth_2d;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> @builtin(position) vec4f {\n    return position;\n}\n\n@fragment\nfn fragmentMain(@builtin(position) fragCoord : vec4f)\n-> @location(0) vec4f {\n    //can't use sampler_comparison as they only return 0 or 1\n    //other sampler don't seem to work\n    //got to calculate pixel indices manually\n    let dim = textureDimensions(textureMap, 0);\n    let textureScreenRatio = vec2f(f32(dim.x) / canvasWidth, f32(dim.y) / canvasHeight);\n    let depthValue = textureLoad(textureMap, vec2 < i32 > (floor(fragCoord.xy * textureScreenRatio)), 0);\n    return vec4 < f32 > (depthValue, depthValue, depthValue, 1.0);\n\n\n    //transformation to make depth values distingushable\n    //const zFar = 100.0;\n    //const zNear = 0.1;\n    //let d = (2 * zNear) / (zFar + zNear - depthValue * (zFar - zNear));\n    //return vec4 < f32 > (d, d, d, 1.0);\n}\n",O="fn ACESFilm(x : vec3f) -> vec3f{\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), vec3f(0), vec3f(1));\n}\n\nfn Reinhard(x : vec3f) -> vec3f{\n    return x / (x + vec3(1.0));\n}\n\nfn gammaEncode(x : vec3f) -> vec3f{\n    return pow(x, vec3(1.0 / 2.2));\n}\n";class I{_pipeline;_vbo;_groupBuilder;_cameraBuffer;_envrionmentMapView;constructor(e,t){this._vbo=(0,f.xE)().vertexBuffer,this._envrionmentMapView=t.createView({dimension:"cube"}),this._cameraBuffer=new i((()=>function(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Float32Array(t);let r=0;for(const t of e)n.set(t,r),r+=t.length;return n}([e.view,e.projectionMatrix])),GPUBufferUsage.UNIFORM);const n={isHdr:"rgba16float"==t.format?1:0};this._pipeline=new b(D,{fragmentConstants:n,cullMode:"none",depthStencilState:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"less-equal"}}).setVertexBufferLayouts(this._vbo.layout,this._vbo.topology).addBindGroup((new m).addTexture("cube").addLinearSampler().addBuffer("uniform"))}async buildAsync(e){return await this._pipeline.buildAsync(e),this._vbo.writeToGpu(e),this._groupBuilder=new E(e,this._pipeline.actualPipeline).addTexture(this._envrionmentMapView).addLinearSampler().addBuffer(this._cameraBuffer),this}render(e){if(!this._pipeline.actualPipeline||!this._pipeline.device)throw new Error("Pipeline wasn't built.");this._cameraBuffer.writeToGpu(this._pipeline.device),e.setVertexBuffer(0,this._vbo.buffer),e.setBindGroup(0,this._groupBuilder.getBindGroups()[0]),e.setPipeline(this._pipeline.actualPipeline),e.draw(this._vbo.vertexCount)}}const D=O+"\n\nstruct Uniforms\n{\n    view: mat4x4f,\n    proj: mat4x4f,\n}\n\n@group(0) @binding(0) var texture: texture_cube < f32>;\n@group(0) @binding(1) var textureSampler: sampler;\n@group(0) @binding(2) var<uniform> uni: Uniforms;\n\nstruct VertexOutput\n{\n    @builtin(position) Position: vec4f,\n    @location(0) viewDir: vec4f,\n}\n  \n@vertex\nfn vertexMain(\n@location(0) position: vec4f,\n@location(1) uv: vec2f\n) -> VertexOutput \n{\n    var out : VertexOutput;\n\n    // remove translation from view matrix\n    var tmp = mat4x4f();\n    tmp[0] = vec4f(uni.view[0].xyz,0);\n    tmp[1] = vec4f(uni.view[1].xyz,0);\n    tmp[2] = vec4f(uni.view[2].xyz,0);\n    tmp[3] = vec4f(0,0,0,1);      \n    \n    let p = uni.proj * tmp * position;    \n    // p is divided by p.w before forwarded to the fragement shader (NDC coordinates)\n    // p.z is only used as z-buffer value and if set to p.w the NDC value will be 1\n    // corresponding to the farthest away point \n    out.Position = vec4f(p.x,p.y,p.w,p.w);    \n    out.viewDir = position;\n    return out;\n}\n\noverride isHdr: f32 = 0.0;\n@fragment\nfn fragmentMain(\n  @location(0) viewDir: vec4f\n) -> @location(0) vec4f \n{    \n    var finalColor =  textureSample(texture, textureSampler, viewDir.xyz).xyz;\n\n    if(isHdr == 1.0)\n    {\n        finalColor = ACESFilm(finalColor);       \n        finalColor = gammaEncode(finalColor);\n    }\n\n    return vec4f(finalColor,1);\n}\n\n";var q=n(322);class H extends i{camera;lights;showEnvironment;viewProjectionMatrix=r._E.identity();constructor(e,t,n){super((()=>{let e=[];return r._E.multiply(this.camera.projectionMatrix,this.camera.view,this.viewProjectionMatrix),e.push(this.viewProjectionMatrix),e.push(this.camera.position),e.push(new Float32Array(this.showEnvironment?[1,0,0,0]:[0,0,0,0])),e.push(...this.lights.map((e=>e.getBytes()))),e}),GPUBufferUsage.STORAGE,"Scene Settings Buffer"),this.camera=e,this.lights=t,this.showEnvironment=n}}var $=n(284),j=n(149);const X=[$.sY],Y=[$.sY,j.a];function W(e,t=!0){return new K(t?Y:X,"triangle-list",t).buildAsync(e)}class K{hasNormals;_pipeline;get device(){return this._pipeline.device}constructor(e,t,n){this.hasNormals=n;const r={vertexEntry:this.hasNormals?"vertexMain":"vertexMain_alt",fragmentEntry:this.hasNormals?"fragmentMain":"fragmentMain_alt"};this._pipeline=new b("struct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct BlinnMaterial\n{\n    mode : vec4f,\n    ambientColor : vec4f,\n    specularColor : vec4f,\n    shininess : vec4f,\n}\n\nstruct SceneSettings\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    settings : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : SceneSettings;\n\n@group(1) @binding(0) var<uniform> material : BlinnMaterial;\n@group(1) @binding(1) var textureSampler : sampler;\n@group(1) @binding(2) var ambientTexture : texture_2d<f32>;\n@group(1) @binding(3) var diffuseTexture : texture_2d<f32>;\n@group(1) @binding(4) var specularTexture : texture_2d<f32>;\n@group(1) @binding(5) var normalTexture : texture_2d<f32>;\n\n@group(2) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(2) @binding(1) var shadowMapSampler : sampler_comparison;\n\n@group(3) @binding(0) var environmentMap : texture_cube < f32>;\n@group(3) @binding(1) var environmentMapSampler : sampler;\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n//remark 1\n//wgsl doesn't support forwarding matrices or arrays to the FS as function argument\n//for matrices this can be solved by forwarding the columns separatly\n//for arrays i actually don't have any solution\n//a fixed amount of array entries could be forwarded as separate arguments\n\n//remark 2\n//literature says the vertex shader isn't called as often as the fragment shader\n//reasoning is probably that the VS runs for every vertex and 3 vertices usually belong to more than 2 fragments/pixels\n//but i'm not sure if this is actually still true when using zbuffer or even when just using a high poly model\n\n//so it might be advantageous to push calculations into the VS\n//the tbn can be built in the VS and inverted by only taking the transpose because it's an orthonormal matrix\n//now instead of calculating everything in world space we can take the light position/direction and the camera position\n//into tangent space in the VS! and foward them to the FS\n\n//in case of multiple lights one has to forward every light pos/dir what is problematic because arrays can't be forwarded\n//this problem vanishes when using deferred shading as every light is calculated in a separate run\n\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let ambientColor = textureSample(ambientTexture, textureSampler, uv).xyz;\n    let diffuseColor = textureSample(diffuseTexture, textureSampler, uv).xyz;\n    let specularColor = textureSample(specularTexture, textureSampler, uv).xyz;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec4f(0, 0, 0, 1);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(uni.lights[i], worldPosition, worldNormal, ambientColor, diffuseColor, specularColor);\n    }\n    return finalColor;\n}\n\nfn calcLight(light : Light, worldPos : vec4f, worldNormal : vec3f, ambientColor : vec3f, diffuseColor : vec3f, specularColor : vec3f) -> vec4f\n{\n    let unitNormal = normalize(worldNormal);\n\n    let ambient = light.ambientColor.xyz * ambientColor;\n\n    let fragToLight = light.position.xyz - worldPos.xyz;\n    //set falloff to 1 or to frag to light distance squared\n    let lightSqrDist = select(1, dot(fragToLight, fragToLight), light.mode.y == 1);\n    //DirectLight=0; PointLight=1; TargetLight=2\n    let lightDirInverse = normalize(select(fragToLight, -light.direction.xyz, light.mode.x == 0));\n\n    //calc intensity, 0 if not facing light\n    var intensity = max(dot(lightDirInverse, unitNormal), 0);\n    //target light\n    if(light.mode.x==2 && intensity!=0)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        //const sharpness = 10;\n        //intensity = select(0, 1 - pow((1 - spot) / (1 - cutoff), sharpness), spot > cutoff);\n        intensity = select(0.0, 1.0, spot > cutoff);\n    }\n\n    //calc diffuse\n    let diffuse = light.diffuseColor.xyz * diffuseColor * intensity / lightSqrDist;\n\n    //calc specular\n    let viewDir = normalize(uni.cameraPosition.xyz - worldPos.xyz);\n    let H = normalize(lightDirInverse + viewDir);\n    let specular = light.specularColor.xyz * specularColor * pow(max(dot(unitNormal, H), 0), material.shininess.x) / lightSqrDist;\n\n    //shadow map\n\n    const constOffset = 0.5;\n    //let slopeFactor = 1.1 - clamp(dot(lightDirInverse, unitNormal), 0,1);\n    //correct with an z adjusted texelsize value\n    //let tmp = light.shadow_mat * worldPos;\n    //let texelSize = (2 / shadowMapSize) * tan(coneAngle/90*3.14) * abs(tmp.z/tmp.w) * 100000.0;\n    let offset = constOffset;\n    var shadowPos = light.shadow_mat * (offset * vec4f(unitNormal, 0) + worldPos);\n    //var shadowPos = light.shadow_mat * worldPos;//potentially 0 if no shadowmap exists\n    //perspective transformations alter the w coordinate and it has to be scaled back\n    //the vertex shader actually does this automatically on its output position afterwards\n    shadowPos = shadowPos / shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    let visibility = select(calcShadowVisibility(u32(light.mode.z), shadowMaps, shadowMapSampler, shadowPosUV, 0.0), 1.0, i32(light.mode.z)==-1);\n\n    //Problem: specular higlights (artefacts) on faces that aren't even hit by light\n    //Solution 1: only render specular when intensity>0 -> problem: specular highlight is cutoff\n    //Solution 2: multiply specular with difuse intensity -> problem: weak specular highlights\n    var finalColor = ambient + (diffuse + specular * intensity) * visibility;\n\n    //environment reflection\n    let reflV = reflect(-viewDir, unitNormal.xyz);\n    let env = textureSample(environmentMap, environmentMapSampler, reflV);\n    let reflectivness = clamp(material.shininess.y, 0, 1);\n\n    finalColor = reflectivness * env.xyz + (1 - reflectivness) * finalColor;\n\n\n    //respect other rendermodes\n    finalColor = select(finalColor, diffuseColor, material.mode.x == 1);\n    finalColor = select(finalColor, unitNormal.xyz * 0.5 + 0.5, material.mode.x == 2);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcShadowVisibilitySmoothed(shadowMapIndex : u32, textureSize : f32, texture : texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    var visibility = 0.0;\n    let pixelRatio = 1.0 / textureSize;\n    for (var y = -1; y <= 1; y++)\n    {\n        for (var x = -1; x <= 1; x++)\n        {\n            let offset = vec2 < f32 > (vec2(x, y)) * pixelRatio;\n            visibility += textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy + offset, shadowMapIndex, shadowPosUV.z - bias);\n        }\n    }\n    visibility /= 9;\n    //depending on the bounding box the shadow map used some fragments might be out of the shadow maps scope\n    visibility = select(visibility, 1.0, shadowPosUV.x < 0 || shadowPosUV.x > 1 || shadowPosUV.y < 0 || shadowPosUV.y > 1);\n    return visibility;\n}\n\nfn calcShadowVisibility(shadowMapIndex: u32, texture: texture_depth_2d_array,\ndepthSampler : sampler_comparison, shadowPosUV : vec3f, bias : f32) -> f32\n{\n    return textureSampleCompareLevel(texture, depthSampler, shadowPosUV.xy, shadowMapIndex, shadowPosUV.z - bias);\n}\n\n\n\n//no normal data/map entrypoint\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n//no normal data/map entrypoint\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n",r).setVertexBufferLayouts(e,t)}async buildAsync(e){return this.device==e||await this._pipeline.buildAsync(e),this}render(e,t,n,r,s,i){if(!this._pipeline.actualPipeline||!this.device)throw new Error("renderer wasn't built.");let a=new E(this.device,this._pipeline.actualPipeline,"Blinn Phong Pipeline");a.addBuffer(t),a.addBuffer(r),a.addGroup(),a.addBuffer(n),a.addLinearSampler(),a.addTexture(n.ambientTexture.createView()),a.addTexture(n.diffuseTexture.createView()),a.addTexture(n.specularTexture.createView()),this.hasNormals&&a.addTexture(n.normalTexture.createView()),a.addGroup(),a.addTexture(i),a.addDepthSampler(),a.addGroup(),a.addTexture(s),a.addLinearSampler(),e.setVertexBuffer(0,t.vertexBuffer.buffer),this.hasNormals&&e.setVertexBuffer(1,t.normalBuffer.buffer),a.createBindGroups().forEach(((t,n)=>e.setBindGroup(n,t))),e.setPipeline(this._pipeline.actualPipeline),e.draw(t.vertexBuffer.vertexCount,t.length)}}const Q="//#include ./tone_mapping.wgsl\nstruct Instance\n{\n    transform : mat4x4 < f32>,\n    normal_mat : mat4x4 < f32>,\n}\n\nstruct PbrMaterial\n{\n    mode : vec4f,\n}\n\nstruct Light\n{\n    mode : vec4f,\n    position : vec4f,\n    direction : vec4f,\n    ambientColor : vec4f,\n    diffuseColor : vec4f,\n    specularColor : vec4f,\n    shadow_mat : mat4x4 < f32>,\n}\n\nstruct SceneSettings\n{\n    viewProjectionMatrix : mat4x4 < f32>,\n    cameraPosition : vec4f,\n    settings : vec4f,\n    lights : array<Light>,\n}\n\n@group(0) @binding(0) var<storage, read> models : array<Instance>;\n@group(0) @binding(1) var<storage, read> uni : SceneSettings;\n\n@group(1) @binding(0) var<uniform> material : PbrMaterial;\n@group(1) @binding(1) var textureSampler : sampler;\n@group(1) @binding(2) var ambientOcclusionTexture : texture_2d<f32>;\n@group(1) @binding(3) var albedoTexture : texture_2d<f32>;\n@group(1) @binding(4) var metalTexture : texture_2d<f32>;\n@group(1) @binding(5) var roughnessTexture : texture_2d<f32>;\n@group(1) @binding(6) var normalTexture : texture_2d<f32>;\n\n@group(2) @binding(0) var shadowMaps : texture_depth_2d_array;\n@group(2) @binding(1) var shadowMapSampler : sampler_comparison;\n\n@group(3) @binding(0) var environmentMapSampler : sampler;\n@group(3) @binding(1) var irradianceMap : texture_cube < f32>;\n@group(3) @binding(2) var specularMap : texture_cube < f32>;\n@group(3) @binding(3) var brdfMap : texture_2d<f32>;\n\n\nstruct VertexOut\n{\n    //clip space position\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n    @location(3) worldTangent : vec3f,\n    @location(4) worldBitangent : vec3f,\n}\n\n@vertex\nfn vertexMain\n(\n//all in object space\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n@location(4) tangent : vec3f,\n@location(5) bitangent : vec3f,\n) -> VertexOut\n{\n    let worldPos = models[idx].transform * pos;\n    let clipSpacePosition = uni.viewProjectionMatrix * worldPos;\n    //tangent space base in world space coordinates\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n    let worldTangent = (models[idx].normal_mat * vec4f(tangent.xyz, 0)).xyz;\n    let worldBitangent = (models[idx].normal_mat * vec4f(bitangent.xyz, 0)).xyz;\n\n    return VertexOut(clipSpacePosition, uv, worldPos, worldNormal, worldTangent, worldBitangent);\n}\n\n@fragment\nfn fragmentMain\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n@location(3) worldTangent : vec3f,\n@location(4) worldBitangent : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    //transform normal from normal map from its tangent space into worldspace\n    let t2w = mat3x3 < f32 > (normalize(worldTangent), normalize(worldBitangent), normalize(worldNormal));\n    var worldNormalFromMap = normalize(t2w * (textureSample(normalTexture, textureSampler, uv_tiled).xyz * 2-1));\n    //turn off normal map normals\n    worldNormalFromMap = select(worldNormalFromMap, worldNormal, material.mode.y==1);\n\n    return calcAllLights(uv_tiled, worldPosition, worldNormalFromMap);\n}\n\nfn calcAllLights(uv : vec2f, worldPosition : vec4f, worldNormal : vec3f) -> vec4f\n{\n    let albedo = textureSample(albedoTexture, textureSampler, uv).xyz;\n    let metal = textureSample(metalTexture, textureSampler, uv).r;\n    let roughness = textureSample(roughnessTexture, textureSampler, uv).r;\n\n    let lightsCount = i32(arrayLength(&uni.lights));\n\n    var finalColor = vec3f(0);\n\n    for(var i = 0; i < lightsCount; i++)\n    {\n        finalColor += calcLight(worldPosition.xyz, worldNormal, uni.lights[i], albedo, metal, roughness);\n    }\n\n    if(uni.settings.x == 1)\n    {\n        let ao = textureSample(ambientOcclusionTexture, textureSampler, uv).r;\n        finalColor += calcEnvironmentLight(worldPosition, worldNormal, ao, albedo, metal, roughness);\n    }\n\n    //tone mapping\n    finalColor = ACESFilm(finalColor);\n\n    finalColor = gammaEncode(finalColor);\n\n    return vec4f(finalColor, 1);\n}\n\nfn calcEnvironmentLight(worldPosition : vec4f, worldNormal : vec3f, ao : f32, albedo : vec3f, metal : f32, roughness : f32) -> vec3f\n{\n    //can be optimize as its calculated per light again i think\n    let N = normalize(worldNormal);\n    let V = normalize(uni.cameraPosition.xyz - worldPosition.xyz);\n    var F0 = vec3(0.04);\n    F0 = (1.0 - metal) * F0 + metal * albedo;\n    let F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n    let kS = F;\n    var kD = 1.0 - kS;\n    kD *= 1.0 - metal;\n\n    //not sure why the reflectance direction is N here\n    //but i think because the irradiance map is built on the normal direction because the viewing direction isnt known when building it\n    let irradiance = textureSample(irradianceMap, environmentMapSampler, N).xyz;\n    let diffuse = irradiance * albedo;\n\n    //specular\n    let maxRoughnessMipLevel = f32(textureNumLevels(specularMap)) - 1;\n    let R = reflect(-V, N);\n    let preCalcedSpecular = textureSampleLevel(specularMap, environmentMapSampler, R, roughness * maxRoughnessMipLevel).xyz;\n    let preCalcedBRDF = textureSample(brdfMap, environmentMapSampler, vec2(max(dot(N, V), 0.0), roughness)).xy;\n    let specular = preCalcedSpecular * (F * preCalcedBRDF.x + preCalcedBRDF.y);\n\n    //precalculated environment map light\n    let ambient = (kD * diffuse + specular) * ao;\n    return ambient;\n}\n\nfn calcLight(worldPos : vec3f, normal : vec3f, light : Light, albedo : vec3f, metal : f32, roughness : f32) -> vec3f\n{\n    let lightPos = light.position.xyz;\n    let lightColor = light.diffuseColor.xyz;\n    let fragToLight = select(lightPos - worldPos, -light.direction.xyz, light.mode.x==0);\n\n    //mode.x: DirectLight=0; PointLight=1; TargetLight=2\n    //mode.y: use falloff\n    var falloffFactor = select(1.0, 1.0 / dot(fragToLight, fragToLight), light.mode.x!=0 && light.mode.y == 1);\n    //spot light\n    if(light.mode.x==2)\n    {\n        let cutoff = light.mode.w;\n        let spot = dot(normalize(light.direction.xyz), normalize(-fragToLight));\n        falloffFactor = select(0.0, 1.0, spot > cutoff);\n    }\n    let radiance : vec3f = lightColor * falloffFactor;\n\n    //cook-torrance brdf\n    var F0 = vec3(0.04);\n    F0 = (1.0 - metal) * F0 + metal * albedo;\n\n    let L = normalize(fragToLight);\n    let N = normalize(normal);\n    let V = normalize(uni.cameraPosition.xyz - worldPos);\n    let H = normalize(V + L);\n    let NDF = DistributionGGX(N, H, roughness);\n    let G = GeometrySmith(N, V, L, roughness);\n    let F : vec3f = fresnelSchlick(max(dot(H, V), 0.0), F0);\n\n    //specular\n    let numerator : vec3f = NDF * G * F;\n    let denominator : f32 = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;\n    let specular : vec3f = numerator / denominator;\n\n    //diffuse\n    let kS = F;\n    var kD : vec3f = vec3(1.0) - kS;\n    kD *= 1.0 - metal;\n    let diffuse = kD * albedo / PI;\n\n    //shadow factor\n    let visibility = getShadowFactor(light, worldPos, N);\n\n    //add to outgoing radiance Lo\n    let NdotL = max(dot(N, L), 0.0);\n    return (diffuse + specular) * radiance * NdotL * visibility;\n}\n\nfn getShadowFactor(light : Light, worldPos : vec3f, unitNormal : vec3f) -> f32\n{\n    const offset = 0.5;\n    var shadowPos = light.shadow_mat * vec4f((offset * unitNormal + worldPos), 1);\n    shadowPos /= shadowPos.w;\n    let shadowPosUV = vec3(shadowPos.xy * vec2(0.5, -0.5) + vec2(0.5), shadowPos.z);\n\n    return select(textureSampleCompareLevel(shadowMaps, shadowMapSampler, shadowPosUV.xy, u32(light.mode.z), shadowPosUV.z), 1.0, i32(light.mode.z)==-1);\n}\n\n////////////////////////////////\n//No Normals Entrypoint Block //\n/////////////////////////////////\n\nstruct VertexOut_alt\n{\n    @builtin(position) position : vec4f,\n    @location(0) uv : vec2f,\n    @location(1) worldPosition : vec4f,\n    @location(2) worldNormal : vec3f,\n}\n\n@vertex\nfn vertexMain_alt\n(\n@builtin(instance_index) idx : u32,\n@location(0) pos : vec4f,\n@location(1) color : vec4f,\n@location(2) uv : vec2f,\n@location(3) normal : vec4f,\n) -> VertexOut_alt\n{\n    let worldPos = models[idx].transform * pos;\n    let worldNormal = (models[idx].normal_mat * vec4f(normal.xyz, 0)).xyz;\n\n    return VertexOut_alt(uni.viewProjectionMatrix * worldPos, uv, worldPos, worldNormal);\n}\n\n@fragment\nfn fragmentMain_alt\n(\n@builtin(position) position : vec4f,\n@location(0) uv : vec2f,\n@location(1) worldPosition : vec4f,\n@location(2) worldNormal : vec3f,\n) -> @location(0) vec4f\n{\n    let uv_tiled = vec2f(material.mode.z * uv.x, material.mode.w * uv.y);\n    return calcAllLights(uv_tiled, worldPosition, worldNormal);\n}\n"+n(203)+O,Z=[$.sY],J=[$.sY,j.a];function ee(e,t=!0){return new te(t?J:Z,"triangle-list",t).buildAsync(e)}class te{hasNormals;_pipeline;get device(){return this._pipeline.device}constructor(e,t,n){this.hasNormals=n;const r={vertexEntry:this.hasNormals?"vertexMain":"vertexMain_alt",fragmentEntry:this.hasNormals?"fragmentMain":"fragmentMain_alt"};this._pipeline=new b(Q,r).setVertexBufferLayouts(e,t)}async buildAsync(e){return this.device==e||await this._pipeline.buildAsync(e),this}render(e,t,n,r,s,i,a,o){if(!this._pipeline.actualPipeline||!this.device)throw new Error("renderer wasn't built.");let u=new E(this.device,this._pipeline.actualPipeline,"Pbr Pipeline");u.addBuffer(t),u.addBuffer(r),u.addGroup(),u.addBuffer(n),u.addLinearSampler(),u.addTexture(n.ambientOcclussionTexture.createView()),u.addTexture(n.albedoTexture.createView()),u.addTexture(n.metalTexture.createView()),u.addTexture(n.roughnessTexture.createView()),this.hasNormals&&u.addTexture(n.normalTexture.createView()),u.addGroup(),u.addTexture(o),u.addDepthSampler(),u.addGroup(),u.addLinearSampler(),u.addTexture(s),u.addTexture(i),u.addTexture(a),e.setVertexBuffer(0,t.vertexBuffer.buffer),this.hasNormals&&e.setVertexBuffer(1,t.normalBuffer.buffer),u.createBindGroups().forEach(((t,n)=>e.setBindGroup(n,t))),e.setPipeline(this._pipeline.actualPipeline),e.draw(t.vertexBuffer.vertexCount,t.length)}}class ne{camera;lights;models;environmentMap;shadowMapBuilder;renderBackground=!0;device;pbrRenderer;pbrRenderer_NN;blinnRenderer;blinnRenderer_NN;environmentRenderer;sceneSettingsBuffer;groups=[];cubeMap;irradianceMap;prefilteredMap;brdfMap;shadowMapView;constructor(e,t,n,r,s){this.camera=e,this.lights=t,this.models=n,this.environmentMap=r,this.shadowMapBuilder=s,this.renderBackground=!!r,this.sceneSettingsBuffer=new H(this.camera,this.lights,this.renderBackground)}async buildAsync(e){return this.device=e,this.pbrRenderer=await ee(this.device),this.pbrRenderer_NN=await ee(this.device,!1),this.blinnRenderer=await W(this.device),this.blinnRenderer_NN=await W(this.device,!1),this.environmentMap&&(this.environmentRenderer=await async function(e,t,n){return await new I(t,n).buildAsync(e)}(e,this.camera,this.environmentMap.cubeMap)),await this.createRenderGroups(),this.createEnvironmentMaps(),this}render(e){this.sceneSettingsBuffer.writeToGpu(this.device);for(let t of this.groups)t.instancesBuffer.writeToGpu(this.device),t.material.writeToGpu(this.device),t.material instanceof q.p?(t.hasNormals?this.pbrRenderer:this.pbrRenderer_NN).render(e,t.instancesBuffer,t.material,this.sceneSettingsBuffer,this.irradianceMap,this.prefilteredMap,this.brdfMap,this.shadowMapView):(t.hasNormals?this.blinnRenderer:this.blinnRenderer_NN).render(e,t.instancesBuffer,t.material,this.sceneSettingsBuffer,this.cubeMap,this.shadowMapView);this.renderBackground&&this.environmentRenderer?.render(e)}async createRenderGroups(){let e=o(this.models,(e=>e.hasNormals&&e.material.hasNormalMap?{usesNormalMap:!0,vbo:e.vertexBuffer,mat:e.material}:{usesNormalMap:!1,vbo:e.vertexBuffer,mat:e.material}),u);for(let[t,n]of e.entries()){let e=new a(n);this.groups.push({hasNormals:t.usesNormalMap,instancesBuffer:e,material:t.mat}),e.vertexBuffer.writeToGpu(this.device),e.normalBuffer?.writeToGpu(this.device),await t.mat.writeTexturesToGpuAsync(this.device,!0),t.mat.writeToGpu(this.device),e.writeToGpu(this.device)}}createEnvironmentMaps(){this.shadowMapView=this.shadowMapBuilder?.textureArray.createView({dimension:"2d-array",label:"Shadow Map View"})??se(this.device,1,"depth32float","2d-array","shadow map dummy"),this.cubeMap=this.environmentMap?.cubeMap.createView({dimension:"cube"})??re(this.device,"cube map dummy"),this.irradianceMap=this.environmentMap?.irradianceMap.createView({dimension:"cube"})??re(this.device,"irradiance map dummy"),this.prefilteredMap=this.environmentMap?.specularMap.createView({dimension:"cube"})??re(this.device,"envSpecular map dummy"),this.brdfMap=this.environmentMap?.brdfMap.createView()??se(this.device,1,"rgba8unorm","2d","brdf map dummy")}}function re(e,t){return se(e,6,"rgba8unorm","cube",t)}function se(e,t,n,r,s){return e.createTexture({size:[1,1,t],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:n,label:s}).createView({dimension:r})}var ie=n(877),ae=n(738);class oe{id;textureView;light;camera;get lightPosition(){return this.light.position}light_mat=r._E.identity();view_mat=r._E.identity();proj_mat=r._E.identity();constructor(e,t,n){this.id=e,this.textureView=t,this.light=n,this.camera=new ue(this)}}class ue{map;constructor(e){this.map=e}get view(){return this.map.view_mat}get projectionMatrix(){return this.map.proj_mat}get position(){return new Float32Array([...this.map.lightPosition,1])}}class le extends oe{boundingBox;constructor(e,t,n,r){super(e,t,n),this.boundingBox=r}createViewMat(){const e=this.boundingBox,t=(0,ae.QG)(e),n=r.R3.distance(e.min,e.max),s=r.R3.normalize(this.light.direction),i=r.R3.addScaled(t,s,-n);let a=r.R3.cross(this.light.direction,[0,1,0]);a=r.R3.equalsApproximately(a,[0,0,0])?[0,0,1]:[0,1,0],r._E.lookAt(i,t,a,this.view_mat);const o=(0,ae.dV)(e,this.view_mat),u=o.min[0],l=o.max[0],c=o.min[1],h=o.max[1],d=-o.min[2];r._E.ortho(u,l,c,h,0,d,this.proj_mat),r._E.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class ce extends oe{constructor(e,t,n){super(e,t,n)}createViewMat(){const e=this.light.position,t=r.R3.add(e,this.light.direction);let n=r.R3.cross(this.light.direction,[0,1,0]);n=r.R3.equalsApproximately(n,[0,0,0])?[0,0,1]:[0,1,0],r._E.lookAt(e,t,n,this.view_mat);const s=this.light.coneAngleDeg/180*Math.PI;r._E.perspective(s,1,.1,1e5,this.proj_mat),r._E.multiply(this.proj_mat,this.view_mat,this.light_mat)}}class he{scene;canvas;useMSAA=!0;shadowMapSize=2048;sceneRenderer;shadowRenderer;shadowBuilder;useShadowMaps=!1;textureViewer;_currentTexture2dView=void 0;lightViewRenderers=[];lightSourceRenderer;device;context;canvasFormat;depthTexture;depthTextureView;intermediateTarget;inputHandler;lastFrameMS=Date.now();currentAnimationFrameId=0;constructor(e,t){this.scene=e,this.canvas=t,this.inputHandler=function(e,t){const n={forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},r={x:0,y:0,zoom:0};let s=!1;const i=(e,t)=>{switch(e.code){case"KeyW":n.forward=t,e.preventDefault(),e.stopPropagation();break;case"KeyS":n.backward=t,e.preventDefault(),e.stopPropagation();break;case"KeyA":n.left=t,e.preventDefault(),e.stopPropagation();break;case"KeyD":n.right=t,e.preventDefault(),e.stopPropagation();break;case"Space":n.up=t,e.preventDefault(),e.stopPropagation();break;case"KeyC":n.down=t,e.preventDefault(),e.stopPropagation()}};return e.addEventListener("keydown",(e=>i(e,!0))),e.addEventListener("keyup",(e=>i(e,!1))),t.addEventListener("mousedown",(()=>{s=!0})),t.addEventListener("mouseup",(()=>{s=!1})),t.addEventListener("mousemove",(e=>{s=0!=(1&e.buttons),s&&(r.x+=e.movementX,r.y+=e.movementY)})),t.addEventListener("wheel",(e=>{s=0!=(1&e.buttons),s&&(r.zoom+=Math.sign(e.deltaY),e.preventDefault(),e.stopPropagation())}),{passive:!1}),()=>{const e={digital:n,analog:{x:r.x,y:r.y,zoom:r.zoom,touching:s}};return r.x=0,r.y=0,r.zoom=0,e}}(window,t)}async run(){this.device&&(cancelAnimationFrame(this.currentAnimationFrameId),this.device.destroy()),await this.initAsync(),this.render()}async initAsync(){await this.initTargetsAsync(),this._currentTexture2dView=void 0,this.scene.camera.aspect=this.canvas.width/this.canvas.height,await this.buildShadowMap(),await(this.scene.environmentMap?.buildAsync(this.device)),this.sceneRenderer=await async function(e,t,n){return await new ne(t.camera,t.lights,t.models,t.environmentMap,n).buildAsync(e)}(this.device,this.scene,this.shadowBuilder),this.lightViewRenderers=(await async function(e,t,n){return await Promise.all(t.lights.filter((e=>!!e.shadowMap)).map((n=>new ne(n.shadowMap.camera,t.lights,t.models,t.environmentMap,undefined).buildAsync(e))))}(this.device,this.scene)).map((e=>({renderer:e,selected:!1}))),this.textureViewer=await async function(e,t,n){let r=new B(t,n);return await r.buildAsync(e),r}(this.device,this.canvas.width,this.canvas.height),this.lightSourceRenderer=await async function(e,t,n){return await new C(t,n).buildAsync(e)}(this.device,this.scene.lights,this.scene.camera)}async buildShadowMap(){this.shadowBuilder=void 0,this.shadowRenderer=void 0,this.useShadowMaps=this.scene.lights.filter((e=>e.useShadowMap)).length>0,this.useShadowMaps&&(this.shadowBuilder=function(e,t,n,r=1024){let s=n.filter((e=>e.useShadowMap));if(s.length<1)throw new Error("Can't create shadow map with no applicable lighs.");let i=[],a=t.map((e=>e.getBoundingBox())),o=(0,ae.k4)(a),u=e.createTexture({size:[r,r,s.length],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float"});return s.forEach(((e,t)=>{const n=u.createView({label:`shadow map view ${t}`,dimension:"2d",aspect:"all",baseMipLevel:0,baseArrayLayer:t,arrayLayerCount:1});let r;switch(e.type){case ie.v.Direct:r=new le(t,n,e,o);break;case ie.v.Target:r=new ce(t,n,e);break;default:throw new Error(`Can't create a shadow map for type ${ie.v[e.type]}`)}r.createViewMat(),i.push(r),e.shadowMap=r})),{textureArray:u,maps:i,textureSize:r}}(this.device,this.scene.models,this.scene.lights,this.shadowMapSize),this.shadowRenderer=await async function(e,t,n){return await new l(e,t.models,n.maps).buildAsync(e)}(this.device,this.scene,this.shadowBuilder))}render(){this.currentAnimationFrameId=requestAnimationFrame((()=>{const e=this.getDeltaTime();this.scene.update(e),this.scene.camera.update(e,this.inputHandler());const t=this.device.createCommandEncoder();this.shadowRenderer?.addPass(t);const n=t.beginRenderPass(this.createDefaultPassDescriptor());this._currentTexture2dView?this.textureViewer.render(n,this._currentTexture2dView[0],this._currentTexture2dView[1]):this.lightViewRenderers.some((e=>e.selected))?this.lightViewRenderers.find((e=>e.selected)).renderer.render(n):(this.sceneRenderer.render(n),this.lightSourceRenderer.render(this.device,n)),n.end(),this.device.queue.submit([t.finish()]),this.render()}))}getDeltaTime(){const e=Date.now(),t=(e-this.lastFrameMS)/1e3;return this.lastFrameMS=e,t}createDefaultPassDescriptor(){const e=this.context.getCurrentTexture().createView(),t=this.intermediateTarget?.createView()??e;return{colorAttachments:[{view:t??e,resolveTarget:t?e:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.depthTextureView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}}}async initTargetsAsync(){const{device:e,context:t,canvasFormat:n}=await async function(e){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");let n=await t.requestDevice(),r=e.getContext("webgpu"),s=navigator.gpu.getPreferredCanvasFormat();return r.configure({device:n,format:s,alphaMode:"premultiplied"}),{device:n,context:r,canvasFormat:s}}(this.canvas),r=this.useMSAA?4:1,s=this.canvas;this.device=e,this.context=t,this.canvasFormat=n,this.intermediateTarget=this.useMSAA?e.createTexture({size:[s.width,s.height],sampleCount:r,format:n,usage:GPUTextureUsage.RENDER_ATTACHMENT}):void 0,this.depthTexture=e.createTexture({size:[s.width,s.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT,sampleCount:r}),this.depthTextureView=this.depthTexture.createView()}set showBackground(e){this.sceneRenderer.renderBackground=e}showScene(){this._currentTexture2dView=void 0}showEnvironmentMap(){this.scene.environmentMap&&(this._currentTexture2dView=[this.scene.environmentMap.cubeMap.createView(),"2d-array-l6"])}showShadowMap(e){this.shadowBuilder&&e<this.shadowBuilder.maps.length&&(this._currentTexture2dView=[this.shadowBuilder.maps[e].textureView,"depth"])}showIrradianceMap(){this.scene.environmentMap&&(this._currentTexture2dView=[this.scene.environmentMap.irradianceMap.createView(),"2d-array-l6"])}showEnvSpecularMap(e){this.scene.environmentMap&&e<this.scene.environmentMap.specularMap.mipLevelCount&&(this._currentTexture2dView=[this.scene.environmentMap.specularMap.createView({mipLevelCount:1,baseMipLevel:e}),"2d-array-l6"])}showBrdfMap(){this.scene.environmentMap&&(this._currentTexture2dView=[this.scene.environmentMap.brdfMap.createView(),"2d"])}showLightView(e){this.lightViewRenderers.forEach((e=>e.selected=!1)),e<this.lightViewRenderers.length&&(this.lightViewRenderers[e].selected=!0)}}},750:(e,t,n)=>{n.d(t,{h:()=>i});var r=n(838),s=n(877);class i{engine;canvas;scenes;currentScene;constructor(e,t,n,r){this.engine=e,this.canvas=t,this.scenes=n,this.currentScene=r}async loadSceneAsync(e){this.currentScene=e,this.engine.scene=this.currentScene.build(),await this.engine.run(),this.refresh()}refresh(){const e="uiContainer";let t=document.querySelector(`#${e}`);t?t.innerHTML="":(t=(0,r.v)(e),document.body.insertBefore(t,this.canvas.nextSibling));const n=t.appendChild((0,r.wy)()),s=n.appendChild((0,r.wy)());(0,r._W)(s,"Options"),this.addOptions(s);const i=n.appendChild((0,r.wy)());(0,r._W)(i,"Renderer"),this.addRendererControls(i);const a=t.appendChild((0,r.wy)({margin:"0px 200px 0px auto"})).appendChild((0,r.wy)());(0,r._W)(a,"Scenes"),this.addScenesSelection(a,this.currentScene)}addOptions(e){let t=this.engine.scene,n=(0,r.wy)();e.appendChild(n),e=n;const i=(0,r.v)();n.appendChild(i);for(let[e,n]of t.lights.entries())(0,r.ug)(i,`${s.v[n.type]}Light_${e.toString().padStart(2,"0")}`,(e=>{n.isOn=e.checked}),n.isOn);(0,r.ug)(i,"isAnimated",(e=>{t.isAnimated=e.checked}),t.isAnimated);const a=(0,r.v)();n.appendChild(a),(0,r.ug)(a,"ambient",(e=>{for(let n of t.lights.values())n.disableAmbientColor=!e.checked})),(0,r.ug)(a,"diffuse",(e=>{for(let n of t.lights.values())n.disableDiffuseColor=!e.checked})),(0,r.ug)(a,"specular",(e=>{for(let n of t.lights.values())n.disableSpecularColor=!e.checked})),(0,r.ug)(a,"normal_mapping",(e=>{for(let n of t.models)n.material.disableNormalMap=!e.checked}))}addRendererControls(e){const t=this.engine;let n,s,i,a,o,u,l=new Array,c=new Array;const h=e=>{n&&n!=e&&(n.checked=!1),n=e,t.showScene(),n?.checked&&(l.forEach(((e,r)=>{e==n&&t.showShadowMap(r)})),c.forEach(((e,r)=>{e==n&&t.showLightView(r)})),s==n&&t.showEnvironmentMap(),i==n&&t.showIrradianceMap(),a==n&&t.showEnvSpecularMap(u.value),o==n&&t.showBrdfMap())};if(t.scene.lights.filter((e=>e.useShadowMap)).forEach(((t,n)=>{const s=(0,r.v)();e.appendChild(s),(0,r.ug)(s,`ShadowMap${n}`,(e=>{t.showShadows=e.checked})),l.push((0,r.ug)(s,"map",h,!1)),c.push((0,r.ug)(s,"view",h,!1))})),t.scene.environmentMap){const n=(0,r.v)();e.appendChild(n),(0,r.ug)(n,"Environment",(e=>{t.showBackground=e.checked})),s=(0,r.ug)(n,"map",h,!1),i=(0,r.ug)(n,"irradiance",h,!1),a=(0,r.ug)(n,"prefilter",h,!1),u=(0,r.Gz)(n,0,t.scene.environmentMap.specularMipsCount-1,0,1,(e=>t.showEnvSpecularMap(e))),o=(0,r.ug)(n,"brdf",h,!1)}}addScenesSelection(e,t){const n=(0,r.v)();e.appendChild(n),(0,r.EI)(n,this.scenes,(e=>e.name),(async e=>{await this.loadSceneAsync(this.scenes[e])}),t)}}},121:(e,t,n)=>{n.d(t,{Q:()=>Kt});var r=n(453),s=n(416),i=n(284),a=n(203);const o="\nstruct VOut\n{\n    @builtin(position) pos : vec4f,\n    @location(0) uv : vec2f,\n}\n\n@vertex\nfn vertexBrdf(@location(0) pos : vec4f, @location(1) uv : vec2f) -> VOut\n{\n    return VOut(pos, uv);\n}\n\n@fragment\nfn fragmentBrdf(@location(0) uv : vec2f) -> @location(0) vec4f\n{\n    return vec4f(IntegrateBRDF(uv.x, uv.y),0,1);\n}\n\nfn IntegrateBRDF(NdotV : f32, roughness : f32) -> vec2f\n{\n    var V = vec3f();\n    V.x = sqrt(1.0 - NdotV * NdotV);\n    V.y = 0.0;\n    V.z = NdotV;\n\n    var A = 0.0;\n    var B = 0.0;\n\n    let N = vec3(0.0, 0.0, 1.0);\n\n    const SAMPLE_COUNT = 1024u;\n    for(var i = 0u; i < SAMPLE_COUNT; i++)\n    {\n        //generates a sample vector that's biased towards the\n        //preferred alignment direction (importance sampling).\n        let Xi = Hammersley(i, SAMPLE_COUNT);\n        let H = ImportanceSampleGGX(Xi, N, roughness);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NdotL = max(L.z, 0.0);\n        let NdotH = max(H.z, 0.0);\n        let VdotH = max(dot(V, H), 0.0);\n\n        if(NdotL > 0.0)\n        {\n            let G = GeometrySmith(N, V, L, roughness);\n            let G_Vis = (G * VdotH) / (NdotH * NdotV);\n            let Fc = pow(1.0 - VdotH, 5.0);\n\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    A /= f32(SAMPLE_COUNT);\n    B /= f32(SAMPLE_COUNT);\n    return vec2(A, B);\n}\n"+a,u="This constructor is not a subclass of Float16Array",l="The constructor property value is not an object",c="Attempting to access detached ArrayBuffer",h="Cannot convert undefined or null to object",d="Cannot mix BigInt and other types, use explicit conversions",f="@@iterator property is not callable",p="Reduce of empty array with no initial value",m="Offset is out of bounds";function _(e){return(t,...n)=>w(e,t,n)}function g(e,t){return _(b(e,t).get)}const{apply:w,construct:v,defineProperty:y,get:x,getOwnPropertyDescriptor:b,getPrototypeOf:k,has:M,ownKeys:S,set:T,setPrototypeOf:A}=Reflect,P=Proxy,{EPSILON:E,MAX_SAFE_INTEGER:C,isFinite:N,isNaN:B}=Number,{iterator:z,species:L,toStringTag:R,for:V}=Symbol,G=Object,{create:F,defineProperty:U,freeze:O,is:I}=G,D=G.prototype,q=D.__lookupGetter__?_(D.__lookupGetter__):(e,t)=>{if(null==e)throw Ve(h);let n=G(e);do{const e=b(n,t);if(void 0!==e)return H(e,"get")?e.get:void 0}while(null!==(n=k(n)))},H=G.hasOwn||_(D.hasOwnProperty),$=Array,j=$.isArray,X=$.prototype,Y=_(X.join),W=_(X.push),K=_(X.toLocaleString),Q=X[z],Z=_(Q),{abs:J,trunc:ee}=Math,te=ArrayBuffer,ne=te.isView,re=te.prototype,se=_(re.slice),ie=g(re,"byteLength"),ae="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:null,oe=ae&&g(ae.prototype,"byteLength"),ue=k(Uint8Array),le=ue.from,ce=ue.prototype,he=ce[z],de=_(ce.keys),fe=_(ce.values),pe=_(ce.entries),me=_(ce.set),_e=_(ce.reverse),ge=_(ce.fill),we=_(ce.copyWithin),ve=_(ce.sort),ye=_(ce.slice),xe=_(ce.subarray),be=g(ce,"buffer"),ke=g(ce,"byteOffset"),Me=g(ce,"length"),Se=g(ce,R),Te=Uint8Array,Ae=Uint16Array,Pe=(...e)=>w(le,Ae,e),Ee=Uint32Array,Ce=Float32Array,Ne=k([][z]()),Be=_(Ne.next),ze=_(function*(){}().next),Le=k(Ne),Re=DataView.prototype,Ve=(_(Re.getUint16),_(Re.setUint16),TypeError),Ge=RangeError,Fe=WeakSet,Ue=Fe.prototype,Oe=_(Ue.add),Ie=_(Ue.has),De=WeakMap,qe=De.prototype,He=_(qe.get),$e=_(qe.has),je=_(qe.set),Xe=new De,Ye=F(null,{next:{value:function(){const e=He(Xe,this);return Be(e)}},[z]:{value:function(){return this}}});function We(e){if(e[z]===Q&&Ne.next===Be)return e;const t=F(Ye);return je(Xe,t,Z(e)),t}const Ke=new De,Qe=F(Le,{next:{value:function(){const e=He(Ke,this);return ze(e)},writable:!0,configurable:!0}});for(const e of S(Ne))"next"!==e&&U(Qe,e,b(Ne,e));function Ze(e){const t=F(Qe);return je(Ke,t,e),t}function Je(e){return null!==e&&"object"==typeof e||"function"==typeof e}function et(e){return null!==e&&"object"==typeof e}function tt(e){return void 0!==Se(e)}function nt(e){const t=Se(e);return"BigInt64Array"===t||"BigUint64Array"===t}function rt(e){if(null===ae)return!1;try{return oe(e),!0}catch(e){return!1}}function st(e){return!!j(e)&&e[z]===Q&&Ne.next===Be}function it(e){if("string"!=typeof e)return!1;const t=+e;return e===t+""&&!!N(t)&&t===ee(t)}const at=V("__Float16Array__"),ot=1/E,ut=6103515625e-14,lt=65504,ct=.0009765625,ht=ct*ut,dt=ct*ot;const ft=new te(4),pt=new Ce(ft),mt=new Ee(ft),_t=new Ae(512),gt=new Te(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(_t[e]=0,_t[256|e]=32768,gt[e]=24,gt[256|e]=24):t<-14?(_t[e]=1024>>-t-14,_t[256|e]=1024>>-t-14|32768,gt[e]=-t-1,gt[256|e]=-t-1):t<=15?(_t[e]=t+15<<10,_t[256|e]=t+15<<10|32768,gt[e]=13,gt[256|e]=13):t<128?(_t[e]=31744,_t[256|e]=64512,gt[e]=24,gt[256|e]=24):(_t[e]=31744,_t[256|e]=64512,gt[e]=13,gt[256|e]=13)}function wt(e){pt[0]=function(e){const t=+e;if(!N(t)||0===t)return t;const n=t>0?1:-1,r=J(t);if(r<ut)return n*function(e){return e+ot-ot}(r/ht)*ht;const s=(1+dt)*r,i=s-(s-r);return i>lt||B(i)?n*(1/0):n*i}(e);const t=mt[0],n=t>>23&511;return _t[n]+((8388607&t)>>gt[n])}const vt=new Ee(2048);for(let e=1;e<1024;++e){let t=e<<13,n=0;for(;0==(8388608&t);)t<<=1,n-=8388608;t&=-8388609,n+=947912704,vt[e]=t|n}for(let e=1024;e<2048;++e)vt[e]=939524096+(e-1024<<13);const yt=new Ee(64);for(let e=1;e<31;++e)yt[e]=e<<23;yt[31]=1199570944,yt[32]=2147483648;for(let e=33;e<63;++e)yt[e]=2147483648+(e-32<<23);yt[63]=3347054592;const xt=new Ae(64);for(let e=1;e<64;++e)32!==e&&(xt[e]=1024);function bt(e){const t=e>>10;return mt[0]=vt[xt[t]+(1023&e)]+yt[t],pt[0]}function kt(e){const t=+e;return B(t)||0===t?0:ee(t)}function Mt(e){const t=kt(e);return t<0?0:t<C?t:C}function St(e,t){if(!Je(e))throw Ve("This is not an object");const n=e.constructor;if(void 0===n)return t;if(!Je(n))throw Ve(l);const r=n[L];return null==r?t:r}function Tt(e){if(rt(e))return!1;try{return se(e,0,0),!1}catch(e){}return!0}function At(e,t){const n=B(e),r=B(t);if(n&&r)return 0;if(n)return 1;if(r)return-1;if(e<t)return-1;if(e>t)return 1;if(0===e&&0===t){const n=I(e,0),r=I(t,0);if(!n&&r)return-1;if(n&&!r)return 1}return 0}const Pt=new De;function Et(e){return $e(Pt,e)||!ne(e)&&function(e){if(!et(e))return!1;const t=k(e);if(!et(t))return!1;const n=t.constructor;if(void 0===n)return!1;if(!Je(n))throw Ve(l);return M(n,at)}(e)}function Ct(e){if(!Et(e))throw Ve("This is not a Float16Array object")}function Nt(e,t){const n=Et(e),r=tt(e);if(!n&&!r)throw Ve("Species constructor didn't return TypedArray object");if("number"==typeof t){let r;if(n){const t=Bt(e);r=Me(t)}else r=Me(e);if(r<t)throw Ve("Derived constructor created TypedArray object which was too small length")}if(nt(e))throw Ve(d)}function Bt(e){const t=He(Pt,e);if(void 0!==t){if(Tt(be(t)))throw Ve(c);return t}const n=e.buffer;if(Tt(n))throw Ve(c);const r=v(Vt,[n,e.byteOffset,e.length],e.constructor);return He(Pt,r)}function zt(e){const t=Me(e),n=[];for(let r=0;r<t;++r)n[r]=bt(e[r]);return n}const Lt=new Fe;for(const e of S(ce)){if(e===R)continue;const t=b(ce,e);H(t,"get")&&"function"==typeof t.get&&Oe(Lt,t.get)}const Rt=O({get:(e,t,n)=>it(t)&&H(e,t)?bt(x(e,t)):Ie(Lt,q(e,t))?x(e,t):x(e,t,n),set:(e,t,n,r)=>it(t)&&H(e,t)?T(e,t,wt(n)):T(e,t,n,r),getOwnPropertyDescriptor(e,t){if(it(t)&&H(e,t)){const n=b(e,t);return n.value=bt(n.value),n}return b(e,t)},defineProperty:(e,t,n)=>it(t)&&H(e,t)&&H(n,"value")?(n.value=wt(n.value),y(e,t,n)):y(e,t,n)});class Vt{constructor(e,t,n){let r;if(Et(e))r=v(Ae,[Bt(e)],new.target);else if(!Je(e)||(function(e){try{return!j(e)&&(ie(e),!0)}catch(e){return!1}}(s=e)||rt(s)))r=v(Ae,arguments,new.target);else{let t,n;if(tt(e)){if(t=e,n=Me(e),Tt(be(e)))throw Ve(c);if(nt(e))throw Ve(d);const s=new te(2*n);r=v(Ae,[s],new.target)}else{const s=e[z];if(null!=s&&"function"!=typeof s)throw Ve(f);null!=s?st(e)?(t=e,n=e.length):(t=[...e],n=t.length):(t=e,n=Mt(t.length)),r=v(Ae,[n],new.target)}for(let e=0;e<n;++e)r[e]=wt(t[e])}var s;const i=new P(r,Rt);return je(Pt,i,r),i}static from(e,...t){const n=this;if(!M(n,at))throw Ve(u);if(n===Vt){if(Et(e)&&0===t.length){const t=Bt(e),n=new Ae(be(t),ke(t),Me(t));return new Vt(be(ye(n)))}if(0===t.length)return new Vt(be(Pe(e,wt)));const n=t[0],r=t[1];return new Vt(be(Pe(e,(function(e,...t){return wt(w(n,this,[e,...We(t)]))}),r)))}let r,s;const i=e[z];if(null!=i&&"function"!=typeof i)throw Ve(f);if(null!=i)st(e)?(r=e,s=e.length):tt(a=e)&&a[z]===he&&Ne.next===Be?(r=e,s=Me(e)):(r=[...e],s=r.length);else{if(null==e)throw Ve(h);r=G(e),s=Mt(r.length)}var a;const o=new n(s);if(0===t.length)for(let e=0;e<s;++e)o[e]=r[e];else{const e=t[0],n=t[1];for(let t=0;t<s;++t)o[t]=w(e,n,[r[t],t])}return o}static of(...e){const t=this;if(!M(t,at))throw Ve(u);const n=e.length;if(t===Vt){const t=new Vt(n),r=Bt(t);for(let t=0;t<n;++t)r[t]=wt(e[t]);return t}const r=new t(n);for(let t=0;t<n;++t)r[t]=e[t];return r}keys(){Ct(this);const e=Bt(this);return de(e)}values(){Ct(this);const e=Bt(this);return Ze(function*(){for(const t of fe(e))yield bt(t)}())}entries(){Ct(this);const e=Bt(this);return Ze(function*(){for(const[t,n]of pe(e))yield[t,bt(n)]}())}at(e){Ct(this);const t=Bt(this),n=Me(t),r=kt(e),s=r>=0?r:n+r;if(!(s<0||s>=n))return bt(t[s])}with(e,t){Ct(this);const n=Bt(this),r=Me(n),s=kt(e),i=s>=0?s:r+s,a=+t;if(i<0||i>=r)throw Ge(m);const o=new Ae(be(n),ke(n),Me(n)),u=new Vt(be(ye(o)));return Bt(u)[i]=wt(a),u}map(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0],i=St(n,Vt);if(i===Vt){const t=new Vt(r),i=Bt(t);for(let t=0;t<r;++t){const r=bt(n[t]);i[t]=wt(w(e,s,[r,t,this]))}return t}const a=new i(r);Nt(a,r);for(let t=0;t<r;++t){const r=bt(n[t]);a[t]=w(e,s,[r,t,this])}return a}filter(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0],i=[];for(let t=0;t<r;++t){const r=bt(n[t]);w(e,s,[r,t,this])&&W(i,r)}const a=new(St(n,Vt))(i);return Nt(a),a}reduce(e,...t){Ct(this);const n=Bt(this),r=Me(n);if(0===r&&0===t.length)throw Ve(p);let s,i;0===t.length?(s=bt(n[0]),i=1):(s=t[0],i=0);for(let t=i;t<r;++t)s=e(s,bt(n[t]),t,this);return s}reduceRight(e,...t){Ct(this);const n=Bt(this),r=Me(n);if(0===r&&0===t.length)throw Ve(p);let s,i;0===t.length?(s=bt(n[r-1]),i=r-2):(s=t[0],i=r-1);for(let t=i;t>=0;--t)s=e(s,bt(n[t]),t,this);return s}forEach(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=0;t<r;++t)w(e,s,[bt(n[t]),t,this])}find(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=0;t<r;++t){const r=bt(n[t]);if(w(e,s,[r,t,this]))return r}}findIndex(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=0;t<r;++t){const r=bt(n[t]);if(w(e,s,[r,t,this]))return t}return-1}findLast(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=r-1;t>=0;--t){const r=bt(n[t]);if(w(e,s,[r,t,this]))return r}}findLastIndex(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=r-1;t>=0;--t){const r=bt(n[t]);if(w(e,s,[r,t,this]))return t}return-1}every(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=0;t<r;++t)if(!w(e,s,[bt(n[t]),t,this]))return!1;return!0}some(e,...t){Ct(this);const n=Bt(this),r=Me(n),s=t[0];for(let t=0;t<r;++t)if(w(e,s,[bt(n[t]),t,this]))return!0;return!1}set(e,...t){Ct(this);const n=Bt(this),r=kt(t[0]);if(r<0)throw Ge(m);if(null==e)throw Ve(h);if(nt(e))throw Ve(d);if(Et(e))return me(Bt(this),Bt(e),r);if(tt(e)&&Tt(be(e)))throw Ve(c);const s=Me(n),i=G(e),a=Mt(i.length);if(r===1/0||a+r>s)throw Ge(m);for(let e=0;e<a;++e)n[e+r]=wt(i[e])}reverse(){Ct(this);const e=Bt(this);return _e(e),this}toReversed(){Ct(this);const e=Bt(this),t=new Ae(be(e),ke(e),Me(e)),n=new Vt(be(ye(t))),r=Bt(n);return _e(r),n}fill(e,...t){Ct(this);const n=Bt(this);return ge(n,wt(e),...We(t)),this}copyWithin(e,t,...n){Ct(this);const r=Bt(this);return we(r,e,t,...We(n)),this}sort(e){Ct(this);const t=Bt(this),n=void 0!==e?e:At;return ve(t,((e,t)=>n(bt(e),bt(t)))),this}toSorted(e){Ct(this);const t=Bt(this);if(void 0!==e&&"function"!=typeof e)throw new Ve("The comparison function must be either a function or undefined");const n=void 0!==e?e:At,r=new Ae(be(t),ke(t),Me(t)),s=new Vt(be(ye(r))),i=Bt(s);return ve(i,((e,t)=>n(bt(e),bt(t)))),s}slice(e,t){Ct(this);const n=Bt(this),r=St(n,Vt);if(r===Vt){const r=new Ae(be(n),ke(n),Me(n));return new Vt(be(ye(r,e,t)))}const s=Me(n),i=kt(e),a=void 0===t?s:kt(t);let o,u;o=i===-1/0?0:i<0?s+i>0?s+i:0:s<i?s:i,u=a===-1/0?0:a<0?s+a>0?s+a:0:s<a?s:a;const l=u-o>0?u-o:0,h=new r(l);if(Nt(h,l),0===l)return h;if(Tt(be(n)))throw Ve(c);let d=0;for(;o<u;)h[d]=bt(n[o]),++o,++d;return h}subarray(e,t){Ct(this);const n=Bt(this),r=St(n,Vt),s=new Ae(be(n),ke(n),Me(n)),i=xe(s,e,t),a=new r(be(i),ke(i),Me(i));return Nt(a),a}indexOf(e,...t){Ct(this);const n=Bt(this),r=Me(n);let s=kt(t[0]);if(s===1/0)return-1;s<0&&(s+=r,s<0&&(s=0));for(let t=s;t<r;++t)if(H(n,t)&&bt(n[t])===e)return t;return-1}lastIndexOf(e,...t){Ct(this);const n=Bt(this),r=Me(n);let s=t.length>=1?kt(t[0]):r-1;if(s===-1/0)return-1;s>=0?s=s<r-1?s:r-1:s+=r;for(let t=s;t>=0;--t)if(H(n,t)&&bt(n[t])===e)return t;return-1}includes(e,...t){Ct(this);const n=Bt(this),r=Me(n);let s=kt(t[0]);if(s===1/0)return!1;s<0&&(s+=r,s<0&&(s=0));const i=B(e);for(let t=s;t<r;++t){const r=bt(n[t]);if(i&&B(r))return!0;if(r===e)return!0}return!1}join(e){Ct(this);const t=zt(Bt(this));return Y(t,e)}toLocaleString(...e){Ct(this);const t=zt(Bt(this));return K(t,...We(e))}get[R](){if(Et(this))return"Float16Array"}}U(Vt,"BYTES_PER_ELEMENT",{value:2}),U(Vt,at,{}),A(Vt,ue);const Gt=Vt.prototype;async function Ft(e,t){const n=await fetch(t),r=await n.arrayBuffer();return async function(e,t){const n=e.createTexture({size:[t.width,t.height],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),r=new Vt(t.width*t.height*4);let s=0;for(let e=0;e<t.data.length;e+=3)r[s+0]=t.data[e+0],r[s+1]=t.data[e+1],r[s+2]=t.data[e+2],r[s+3]=1,s+=4;return e.queue.writeTexture({texture:n},r.buffer,{bytesPerRow:8*t.width},{width:t.width,height:t.height}),await e.queue.onSubmittedWorkDone(),n}(e,function(e){const t={data:e,offset:0},n=function(e){let t=Ot(e);const n={colorCorr:[1,1,1],exposure:1,gamma:1,width:0,height:0,flipX:!1,flipY:!1};if("#?RADIANCE"!==t&&"#?RGBE"!==t)throw new Error("Incorrect file format!");for(;""!==t;){t=Ot(e);const r=t.split("=");switch(r[0]){case"GAMMA":n.gamma=parseFloat(r[1]);break;case"FORMAT":if("32-bit_rle_rgbe"!==r[1]&&"32-bit_rle_xyze"!==r[1])throw new Error("Incorrect encoding format!");break;case"EXPOSURE":n.exposure=parseFloat(r[1]);break;case"COLORCORR":n.colorCorr=r[1].replace(/^\s+|\s+$/g,"").split(" ").map((e=>parseFloat(e)))}}t=Ot(e);const r=t.split(" ");return Ut(r[0],parseInt(r[1]),n),Ut(r[2],parseInt(r[3]),n),n}(t);return{width:n.width,height:n.height,exposure:n.exposure,gamma:n.gamma,data:It(t,n)}}(new DataView(r)))}function Ut(e,t,n){switch(e){case"+X":n.width=t;break;case"-X":n.width=t,n.flipX=!0,console.warn("Flipping horizontal orientation not currently supported");break;case"-Y":n.height=t;break;case"+Y":n.height=t,n.flipY=!0}}function Ot(e){let t,n="";for(;10!==(t=e.data.getUint8(e.offset++));)n+=String.fromCharCode(t);return n}function It(e,t){let n;if(514!==e.data.getUint16(e.offset))throw new Error("Obsolete HDR file version!");return n=function(e,t){const{width:n,height:r,colorCorr:s}=t,i=new Float32Array(n*r*3);let a=0,{offset:o,data:u}=e;for(let e=0;e<r;++e){if(514!==u.getUint16(o))throw new Error("Incorrect scanline start hash");if(u.getUint16(o+2)!==n)throw new Error("Scanline doesn't match picture dimension!");o+=4;const e=4*n,t=[];let r=0;for(;r<e;){let e=u.getUint8(o++);if(e>128){const n=e-128;e=u.getUint8(o++);for(let s=0;s<n;++s)t[r++]=e}else for(let n=0;n<e;++n)t[r++]=u.getUint8(o++)}for(r=0;r<n;++r){const e=t[r],o=t[r+n],u=t[r+2*n];let l=t[r+3*n];l=l?Math.pow(2,l-136):0,i[a++]=e*l*s[0],i[a++]=o*l*s[1],i[a++]=u*l*s[2]}}return i}(e,t),t.flipX&&function(e,t){const{width:n,height:r}=t,s=n>>1;for(let t=0;t<r;++t){const r=t*n;for(let t=0;t<s;++t)Dt(e,r+t,r+n-1-t)}}(n,t),t.flipY&&function(e,t){const{width:n,height:r}=t,s=r>>1;for(let t=0;t<s;++t){const s=t*n,i=(r-1-t)*n;for(let t=0;t<n;++t)Dt(e,s+t,i+t)}}(n,t),n}function Dt(e,t,n){t*=3,n*=3;for(let r=0;r<3;++r){const s=e[t+r];e[t+r]=e[n+r],e[n+r]=s}}U(Gt,"BYTES_PER_ELEMENT",{value:2}),U(Gt,z,{value:Gt.values,writable:!0,configurable:!0}),A(Gt,ce);const qt="//#include ./pbr_functions.wgsl\n\n//shader renders one part of the split sum approximation for the following roughness level\noverride roughness : f32 = 1.0;\n//mode 1 expects mipmaps on the given cubemap and uses them to compensate for insufficient rays\noverride mode = 0;\noverride SAMPLE_COUNT = 1024u;\n//resolution of source cubemap\noverride resolution : f32 = 1024.0;\n\n@group(0) @binding(1) var sourceTexture : texture_cube < f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@location(0) WorldPos : vec4f) -> @location(0) vec4f\n{\n    let N = normalize(WorldPos.xyz);\n\n    //make the simplifying assumption that V equals R equals the normal\n    let R = N;\n    let V = R;\n\n    var prefilteredColor = vec3(0.0);\n    var totalWeight = 0.0;\n\n    for(var i = 0u; i < SAMPLE_COUNT; i++)\n    {\n        //generates a sample vector that's biased towards the preferred alignment direction (importance sampling).\n        let Xi = Hammersley(i, SAMPLE_COUNT);\n        let H = ImportanceSampleGGX(Xi, N, roughness);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NdotL = max(dot(N, L), 0.0);\n        //dunno why i have to invert L but it looks correct in the renders\n        let corr_L = L * vec3f(1, 1, -1);\n        //only sample value if NdotL > 0 and choose method\n        prefilteredColor += select(vec3(0.0), select(modeOne(corr_L), modeTwo(corr_L, N, H, V, roughness), mode==1) * NdotL, NdotL > 0.0);\n        totalWeight += select(0.0, NdotL, NdotL > 0.0);\n    }\n\n    prefilteredColor = prefilteredColor / totalWeight;\n\n    return vec4(prefilteredColor, 1.0);\n}\n\nfn modeOne(L : vec3f) -> vec3f\n{\n    return textureSample(sourceTexture, textureSampler, L).xyz;\n}\n\n//sampling from mip map\nfn modeTwo(L : vec3f, N : vec3f, H : vec3f, V : vec3f, roughness : f32) -> vec3f\n{\n    //sample from the environment's mip level based on roughness/pdf\n    let D = DistributionGGX(N, H, roughness);\n    let NdotH = max(dot(N, H), 0.0);\n    let HdotV = max(dot(H, V), 0.0);\n    let pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n\n    let saTexel = 4.0 * PI / (6.0 * resolution * resolution);\n    let saSample = 1.0 / (f32(SAMPLE_COUNT) * pdf + 0.0001);\n\n    let mipLevel = select(0.5 * log2(saSample / saTexel), 0.0, roughness == 0.0);\n\n    return textureSampleLevel(sourceTexture, textureSampler, L, mipLevel).xyz;\n}\n"+a;async function Ht(e,t,n,r=!1,s){if("2d"!=t.dimension||1!=t.depthOrArrayLayers)throw new Error("GPUTexture has wrong dimension");let i=Math.round(Math.log2(t.height/2));return $t(e,t,n=n??Math.pow(2,i),r?"cube_mips":"cube",s)}async function $t(e,t,n,a,o){o=o??t.format;const u=t.width,l=Math.min(1+Math.floor(Math.log2(u)),5),c="specular"==a||"cube_mips"==a?l:1,h="cube"==a||"cube_mips"==a?t.createView():t.createView({dimension:"cube"}),d="cube"==a||"cube_mips"==a?"2d":"cube";let f="cube"==a||"cube_mips"==a?Yt:"irradiance"==a?Wt:qt;const p=1==t.mipLevelCount?0:1;let m="specular"==a?{mode:p,resolution:u,roughness:1}:void 0,_=e.createTexture({size:[n,n,6],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,format:o,mipLevelCount:c}),g=e.createBuffer({size:i.zS.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(g,0,i.zS);let w=s._E.perspective(Math.PI/2,1,.1,10),v=[s._E.lookAt([0,0,0],[1,0,0],[0,1,0]),s._E.lookAt([0,0,0],[-1,0,0],[0,1,0]),s._E.lookAt([0,0,0],[0,1,0],[0,0,1]),s._E.lookAt([0,0,0],[0,-1,0],[0,0,-1]),s._E.lookAt([0,0,0],[0,0,-1],[0,1,0]),s._E.lookAt([0,0,0],[0,0,1],[0,1,0])],y=e.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),x=e.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:32,maxAnisotropy:16});const b=t=>e.createBindGroup({label:"texture builder binding group",layout:t.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:y}},{binding:1,resource:h},{binding:2,resource:x}]}),k="specular"==a?c:1;for(let t=0;t<k;t++)for(let n=0;n<6;n++){let r={colorAttachments:[{view:_.createView({dimension:"2d",baseArrayLayer:n,arrayLayerCount:1,mipLevelCount:1,baseMipLevel:t}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]};e.queue.writeBuffer(y,0,s._E.multiply(w,v[n]));let a=e.createCommandEncoder(),u=a.beginRenderPass(r);u.setVertexBuffer(0,g),m&&(m.roughness=t/(c-1));let l=await jt(e,o,d,f,m);u.setPipeline(l);let h=b(l);u.setBindGroup(0,h),u.draw(i.MO),u.end(),e.queue.submit([a.finish()])}return"cube_mips"==a&&(0,r.zd)(e,_),_}async function jt(e,t,n,r,s){let a=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:n}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}}],o=e.createBindGroupLayout({entries:a}),u=e.createPipelineLayout({bindGroupLayouts:[o]});return e.createRenderPipeline({layout:u,vertex:{module:e.createShaderModule({label:"texture builder",code:Xt}),entryPoint:"vertexMain",buffers:[{arrayStride:i.O$,attributes:[{shaderLocation:0,offset:i.v8,format:"float32x4"},{shaderLocation:1,offset:i.Ax,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({label:"texture builder",code:r}),entryPoint:"fragmentMain",targets:[{format:t}],constants:s},primitive:{topology:"triangle-list"}})}const Xt="\nstruct Uniforms\n{\n    vp : mat4x4f,\n}\n\nstruct VertexOut\n{\n    @builtin(position) position : vec4f,\n    @location(0) viewDir: vec4f,\n}\n\n@group(0) @binding(0) var<uniform> uni : Uniforms;\n\n@vertex\nfn vertexMain(@location(0) position : vec4f) -> VertexOut\n{\n    return VertexOut(uni.vp * position, position);\n}\n",Yt="\n@group(0) @binding(1) var sourceTexture : texture_2d<f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@builtin(position) position : vec4f, @location(0) viewDir : vec4f) ->  @location(0) vec4f\n{\n    const PI = 3.14159265359; \n    const invPI = 1.0/vec2f(2*PI, PI);\n    let v = normalize(viewDir.xyz);\n    var uv = vec2(atan2(v.z, v.x), acos(v.y)) * invPI;    \n    \n    // flipping left and right otherwise the environment map renderer gets it wrong\n    return textureSample(sourceTexture, textureSampler, vec2f(1,0) + vec2f(-1,1) * uv);\n}\n",Wt="\n@group(0) @binding(1) var sourceTexture : texture_cube<f32>;\n@group(0) @binding(2) var textureSampler : sampler;\n\n@fragment\nfn fragmentMain(@location(0) worldPos : vec4f) ->  @location(0) vec4f\n{\n    const PI = 3.14159265359;\n    let N = normalize(worldPos.xyz);\n    var irradiance = vec3f(0.0);  \n\n    var up    = vec3f(0.0, 1.0, 0.0);\n    let right = normalize(cross(up, N));\n    up        = normalize(cross(N, right));\n    \n    let sampleDelta = 0.025;\n    var nrSamples = 0.0; \n    for(var phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)\n    {\n        for(var theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)\n        {\n            // spherical to cartesian (in tangent space)\n            let tangentSample = vec3f(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\n            // tangent space to world\n            let sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;     \n            // testing shows that sampleVec needs to be inversed\n            irradiance += textureSample(sourceTexture, textureSampler, sampleVec * vec3f(1, 1, -1)).xyz * cos(theta) * sin(theta);\n            nrSamples += 1;\n        }\n    }\n    irradiance = PI * irradiance * (1.0 / nrSamples);\n\n    return vec4f(irradiance,1);\n}\n";class Kt{flatTextureMap=null;get specularMipsCount(){return this._specularMipsCount?.mipLevelCount??0}_cubeMap=null;get cubeMap(){if(!this._cubeMap)throw new Error("cubeMap map texture wasn't loaded");return this._cubeMap}_irradianceMap=null;get irradianceMap(){if(!this._irradianceMap)throw new Error("irradianceMap map texture wasn't loaded");return this._irradianceMap}_specularMipsCount=null;get specularMap(){if(!this._specularMipsCount)throw new Error("specular map texture wasn't loaded");return this._specularMipsCount}_brdfMap=null;get brdfMap(){if(!this._brdfMap)throw new Error("brdf map texture wasn't loaded");return this._brdfMap}urls;isHdr=!1;constructor(e){if(this.urls="string"==typeof e?[e]:e,1!=this.urls.length&&6!=this.urls.length)throw new Error("input needs to be a single equirectangular map or six images");this.isHdr=this.urls[0].toLowerCase().endsWith(".hdr")}async buildAsync(e){this.flatTextureMap=this.isHdr?await Ft(e,this.urls[0]):await(0,r.WK)(e,this.urls[0]);let t=6!=this.urls.length?await Ht(e,this.flatTextureMap):await async function(e,t,n,s,i){if(1!=(t="string"==typeof t?[t]:t).length&&6!=t.length)throw new Error("input needs to be a single equirectangular map or six images");return 6==t.length?await(0,r.Pk)(e,t,{mips:s}):Ht(e,t[0].toLowerCase().endsWith(".hdr")?await Ft(e,t[0]):await(0,r.WK)(e,t[0],{usage:GPUTextureUsage.COPY_SRC,format:void 0}),void 0,s)}(e,this.urls);this._cubeMap=t,this._irradianceMap=await async function(e,t,n=1024){if("2d"!=t.dimension||6!=t.depthOrArrayLayers)throw new Error("texture isn't a cubemap aka 6 layered 2d texture array");return $t(e,t,n,"irradiance")}(e,t),this._specularMipsCount=await async function(e,t,n=128){if("2d"!=t.dimension||6!=t.depthOrArrayLayers)throw new Error("texture isn't a cubemap aka 6 layered 2d texture array");return $t(e,t,n,"specular")}(e,t),this._brdfMap=await async function(e,t=512){return async function(e,t=128){const n="rgba8unorm",r=new Float32Array([-1,1,0,0,0,-1,-1,0,0,1,1,1,0,1,0,1,-1,0,1,1]);let s=e.createBuffer({size:r.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(s,0,r);let i=e.createTexture({size:[t,t,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,format:n});const a=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({label:"brdf texture builder",code:o}),entryPoint:"vertexBrdf",buffers:[{arrayStride:20,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({label:"brdf texture builder",code:o}),entryPoint:"fragmentBrdf",targets:[{format:n}]},primitive:{topology:"triangle-strip"}}),u=e.createCommandEncoder(),l=u.beginRenderPass({colorAttachments:[{view:i.createView({}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});return l.setPipeline(a),l.setVertexBuffer(0,s),l.draw(4),l.end(),e.queue.submit([u.finish(l)]),i}(e,t)}(e)}}},877:(e,t,n)=>{n.d(t,{_:()=>i,v:()=>r});var r,s=n(416);!function(e){e[e.Direct=0]="Direct",e[e.Point=1]="Point",e[e.Target=2]="Target"}(r||(r={}));class i{isOn=!0;intensity=1;type=r.Point;ambientColor=[.2,.2,.2,1];diffuseColor=[1,1,1,1];specularColor=[.8,.8,.8,1];disableAmbientColor=!1;disableDiffuseColor=!1;disableSpecularColor=!1;useFalloff=!1;coneAngleDeg=72;get position(){return this._position}set position(e){this._position=e,this.type==r.Target&&(this._direction=s.R3.subtract(this._target,this._position))}_position=[0,30,0];get direction(){return this._direction}set direction(e){this._direction=e,this.type==r.Target?this._target=s.R3.add(this._position,this._direction):this.type==r.Direct&&(this._position=s.R3.mulScalar(s.R3.normalize(this._direction),-100))}_direction=[0,-1,0];get target(){return this._target}set target(e){this._target=e,this.type==r.Target&&(this._direction=s.R3.sub(this._target,this.position))}_target=[0,0,0];constructor(e){if(e)switch(this.type=e.type??this.type,this._position=e.position??this._position,this._direction=e.direction??this._direction,this._target=e.target??this._target,this.ambientColor=e.ambientColor??this.ambientColor,this.diffuseColor=e.diffuseColor??this.diffuseColor,this.specularColor=e.specularColor??this.specularColor,this.intensity=e.intensity??this.intensity,this.useFalloff=e.useFalloff??this.useFalloff,this._useShadowMap=e.useShadowMap??!0,this.coneAngleDeg=e.coneAngleDeg??this.coneAngleDeg,this.type){case r.Direct:this.direction=this.direction;break;case r.Target:!e.target&&e.direction?this.direction=this.direction:this.target=this.target}}get byteLength(){return Math.max(this.getBytes().byteLength,80)}getBytes(){return new Float32Array([this.type,this.useFalloff?1:0,this.shadowMap&&this.showShadows?this.shadowMap.id:-1,Math.cos(this.coneAngleDeg/360*Math.PI),...this._position,0,...this._direction,0,...this.disableAmbientColor||!this.isOn?[0,0,0,1]:s.vh.mulScalar(this.ambientColor,this.intensity),...this.disableDiffuseColor||!this.isOn?[0,0,0,1]:s.vh.mulScalar(this.diffuseColor,this.intensity),...this.disableSpecularColor||!this.isOn?[0,0,0,1]:s.vh.mulScalar(this.specularColor,this.intensity),...this.shadowMap?this.shadowMap.light_mat:this.dummy])}showShadows=!0;get useShadowMap(){return this.type!=r.Point&&this._useShadowMap}_useShadowMap=!0;shadowMap;dummy=s._E.create()}},18:(e,t,n)=>{n.d(t,{O:()=>o});var r,s=n(453),i=n(777),a=n(403);!function(e){e[e.Default=0]="Default",e[e.SolidColor=1]="SolidColor",e[e.VertexNormal=2]="VertexNormal"}(r||(r={}));class o extends a.I{get hasNormalMap(){return!!this.normalMapPath}mode=r.Default;reflectivness=0;tiling={u:1,v:1};ambientColor=[.3,.3,.3,1];diffuseColor=[.3,.3,.3,1];specularColor=[1,1,1,1];shininess=30;ambientMapPath=null;diffuseMapPath=null;specularMapPath=null;normalMapPath=null;disableNormalMap=!1;_ambientTexture=null;get ambientTexture(){if(!this._ambientTexture)throw new Error("ambient texture wasn't loaded");return this._ambientTexture}_diffuseTexture=null;get diffuseTexture(){if(!this._diffuseTexture)throw new Error("diffuse texture wasn't loaded");return this._diffuseTexture}_specularTexture=null;get specularTexture(){if(!this._specularTexture)throw new Error("specular texture wasn't loaded");return this._specularTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}constructor(e){super("Blinn Phong Material Buffer"),e&&(this.mode=e.mode??this.mode,this.reflectivness=e.reflectivness??this.reflectivness,this.diffuseColor=e.diffuseColor??this.diffuseColor,this.ambientColor=this.diffuseColor,this.specularColor=e.specularColor??this.specularColor,this.shininess=e.shininess??this.shininess,this.diffuseMapPath=e.diffuseMapPath??this.diffuseMapPath,this.ambientMapPath=this.diffuseMapPath,this.specularMapPath=e.specularMapPath??this.specularMapPath,this.normalMapPath=e.normalMapPath??this.normalMapPath,this.tiling=e.tiling??this.tiling,this.disableNormalMap=e.disableNormalMap??this.disableNormalMap)}static solidColor(e){return new o({mode:r.SolidColor,diffuseColor:e})}get device(){return this._device}_device;_buffer=null;get buffer(){if(!this._buffer)throw new Error("buffer wasn't initialized");return this._buffer}getFloatArray(){return new Float32Array([this.mode,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v,...this.ambientColor,...this.specularColor,this.shininess,this.reflectivness,0,0])}writeToGpu(e){this._device=e;const t=this.getFloatArray();this._buffer||(this._buffer=e.createBuffer({label:"material",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._buffer,0,t)}async writeTexturesToGpuAsync(e,t){if(this._ambientTexture&&this._device==e)return void console.log("texture maps are already loaded.");this._device=e;const n=this.ambientMapPath?(0,s.WK)(e,this.ambientMapPath,{mips:t}):Promise.resolve((0,i.Rw)(e,this.ambientColor)),r=this.diffuseMapPath?(0,s.WK)(e,this.diffuseMapPath,{mips:t}):Promise.resolve((0,i.Rw)(e,this.diffuseColor)),a=this.specularMapPath?(0,s.WK)(e,this.specularMapPath,{mips:t}):Promise.resolve((0,i.Rw)(e,this.specularColor)),o=this.normalMapPath?(0,s.WK)(e,this.normalMapPath,{mips:t}):Promise.resolve((0,i.Rw)(e,[0,0,1,1]));[this._ambientTexture,this._diffuseTexture,this._specularTexture,this._normalTexture]=await Promise.all([n,r,a,o])}}},322:(e,t,n)=>{n.d(t,{C:()=>a,p:()=>i});var r=n(777),s=n(403);class i extends s.I{get hasNormalMap(){return!!this.normalMapPath}ambientOcclussion=1;albedo=.3;metallic=.1;roughness=.3;normalMapPath=null;tiling={u:1,v:1};disableNormalMap=!1;constructor(e){super("Pbr Shader Buffer"),e&&(this.ambientOcclussion=e.ambientOcclussion??this.ambientOcclussion,this.albedo=e.albedo??this.albedo,this.metallic=e.metallic??this.metallic,this.roughness=e.roughness??this.roughness,this.normalMapPath=e.normalMapPath??this.normalMapPath,this.tiling=e.tiling??this.tiling,this.disableNormalMap=e.disableNormalMap??this.disableNormalMap)}_albedoTexture=null;get albedoTexture(){if(!this._albedoTexture)throw new Error("albedo texture wasn't loaded");return this._albedoTexture}_ambientOcclussionTexture=null;get ambientOcclussionTexture(){if(!this._ambientOcclussionTexture)throw new Error("ambient occlussion texture wasn't loaded");return this._ambientOcclussionTexture}_metalTexture=null;get metalTexture(){if(!this._metalTexture)throw new Error("specular texture wasn't loaded");return this._metalTexture}_roughnessTexture=null;get roughnessTexture(){if(!this._roughnessTexture)throw new Error("normal texture wasn't loaded");return this._roughnessTexture}_normalTexture=null;get normalTexture(){if(!this._normalTexture)throw new Error("normal texture wasn't loaded");return this._normalTexture}get device(){return this._device}_device;_buffer=null;get buffer(){if(!this._buffer)throw new Error("buffer wasn't initialized");return this._buffer}getFloatArray(){return new Float32Array([0,this.disableNormalMap?1:0,this.tiling.u,this.tiling.v])}writeToGpu(e){this._device=e;const t=this.getFloatArray();this._buffer||(this._buffer=e.createBuffer({label:"pbr material",size:Math.max(t.byteLength,80),usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),e.queue.writeBuffer(this._buffer,0,t)}async writeTexturesToGpuAsync(e,t){if(this._ambientOcclussionTexture&&this._device==e)return void console.log("texture maps are already loaded.");this._device=e;const n="rgba8unorm",s=(0,r.cU)(e,this.ambientOcclussion,t,n),i=(0,r.cU)(e,this.albedo,t,"rgba8unorm-srgb"),a=(0,r.cU)(e,this.metallic,t,n),o=(0,r.cU)(e,this.roughness,t,n),u=(0,r.cU)(e,this.normalMapPath?this.normalMapPath:[0,0,1,1],t,n);[this._ambientOcclussionTexture,this._albedoTexture,this._metalTexture,this._roughnessTexture,this._normalTexture]=await Promise.all([s,i,a,o,u])}}function a(e,t=!1,n="png"){return new i({ambientOcclussion:t?e+`ao.${n}`:1,albedo:e+`albedo.${n}`,metallic:e+`metallic.${n}`,roughness:e+`roughness.${n}`,normalMapPath:e+`normal.${n}`})}},738:(e,t,n)=>{n.d(t,{QG:()=>a,dV:()=>i,k4:()=>s});var r=n(416);function s(e){let t=[0,0,0],n=[0,0,0];for(let s of e)r.R3.min(t,s.min,t),r.R3.max(n,s.max,n);return{min:t,max:n}}function i(e,t){const n=r.R3.clone(e.min),s=r.R3.clone(e.max),i=[r.R3.fromValues(n[0],n[1],n[2]),r.R3.fromValues(n[0],n[1],s[2]),r.R3.fromValues(n[0],s[1],n[2]),r.R3.fromValues(n[0],s[1],s[2]),r.R3.fromValues(s[0],n[1],n[2]),r.R3.fromValues(s[0],n[1],s[2]),r.R3.fromValues(s[0],s[1],n[2]),r.R3.fromValues(s[0],s[1],s[2])];for(const e of i)r.R3.transformMat4(e,t,e);const a=function(e){const t=r.R3.clone(e[0]),n=r.R3.clone(e[0]);for(const s of e)r.R3.min(t,s,t),r.R3.max(n,s,n);return{min:t,max:n}}(i);return a}function a(e){const t=r.R3.create();return r.R3.add(e.min,e.max,t),r.R3.scale(t,.5,t),t}},403:(e,t,n)=>{n.d(t,{I:()=>r});class r{static getNewId(){return r.ID++}static ID=0;id=0;label;constructor(e){this.id=r.getNewId(),this.label=e}static calcSize(e){return Array.isArray(e)?e.length<=0?0:e.reduce(((e,t)=>e+t.byteLength),0):e.byteLength}}},231:(e,t,n)=>{n.d(t,{Q:()=>s});var r=n(403);class s extends r.I{vertices;vertexCount;layout;topology;get device(){return this._device}_device;get buffer(){if(this._buffer)return this._buffer;throw new Error(`Buffer wasn't initialized. ${this.label}`)}_buffer;constructor(e,t,n,r,s){super(s),this.vertices=e,this.vertexCount=t,this.layout=n,this.topology=r}writeToGpu(e){this._device=e;const t={label:`${this.label}`,size:this.vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST};this._buffer=e.createBuffer(t),e.queue.writeBuffer(this._buffer,0,this.vertices,0)}async buildAsync(e){this._device==e&&this._buffer||(this._device=e,this.writeToGpu(e))}}},878:(e,t,n)=>{n.d(t,{x:()=>i});var r=n(218),s=n(877);class i{isAnimated=!0;camera=new r.t;lights=[new s._];models=[];environmentMap;constructor(e){e&&(this.isAnimated=e.isAnimated??!0,this.camera=e.camera??this.camera)}update(e){}}},838:(e,t,n)=>{n.d(t,{EI:()=>u,GL:()=>r,Gz:()=>l,_W:()=>a,ug:()=>o,v:()=>i,wy:()=>s});const r=window.location.pathname;function s(e){const t=document.createElement("div");return t.style.display="flex",t.style.flexDirection="column",t.style.margin=e?.margin??"",t}function i(e){const t=document.createElement("div");return e&&(t.id=e),t.style.display="flex",t.style.gap="10px",t}function a(e,t){e.innerHTML=`<h4 style="margin:5px">${t}</h4>`}function o(e,t,n,r=!0){let[s,i]=function(e,t=!0){const n=document.createElement("input");n.type="checkbox",n.id=e,n.name=n.id,n.checked=t;const r=document.createElement("label");return r.htmlFor=n.id,r.textContent=n.id,[n,r]}(t,r);return e.appendChild(s),e.appendChild(i),s.addEventListener("change",(()=>n(s))),s}function u(e,t,n,r,s=0){let i,a=document.createElement("select");a.setAttribute("size","7"),i="number"==typeof s?s:Math.max(0,[...t].indexOf(s));for(const[e,r]of[...t].entries()){const t=document.createElement("option");t.value=e.toString(),t.text=n(r)??e.toString(),a.appendChild(t)}a.value=i.toString(),a.addEventListener("change",(()=>{const e=parseInt(a.value);i!==e&&(i=e,r(i))})),e.appendChild(a)}function l(e,t=0,n=100,r,s=1,i){const a=new c(t,n,r,s,i);return e.appendChild(a.element),a}class c{el;_value;min;max;step;callbacks=[];constructor(e=0,t=100,n,r=1,s){this.el=document.createElement("input"),this.el.type="number",this.el.style.width="50px",this._value=n,this.min=e,this.max=t,this.step=r,this.el.value=this.value.toString(),this.callbacks.push(s),this.el.addEventListener("change",(()=>{const e=parseInt(this.el.value);e>=this.min&&e<=this.max?(this._value=e,this.executeCallbacks()):this.el.value=this.value.toString()})),this.el.addEventListener("keydown",(e=>{"ArrowUp"===e.key&&this.value<this.max?(this._value+=this.step,this.el.value=this.value.toString(),this.executeCallbacks()):"ArrowDown"===e.key&&this.value>this.min&&(this._value-=this.step,this.el.value=this.value.toString(),this.executeCallbacks())}))}executeCallbacks(){this.callbacks.forEach((e=>e(this._value)))}get element(){return this.el}get value(){return this._value}}},777:(e,t,n)=>{n.d(t,{Rw:()=>s,cU:()=>i});var r=n(453);function s(e,t,n=1,r=1,s="rgba8unorm"){const i=n*r,a=new Uint8Array(4*i),[o,u,l,c]=t;for(let e=0;e<i;++e){const t=4*e;a[t]=255*o,a[t+1]=255*u,a[t+2]=255*l,a[t+3]=255*c}const h=e.createTexture({size:{width:n,height:r},format:s,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return e.queue.writeTexture({texture:h},a,{bytesPerRow:4*n,rowsPerImage:r},{width:n,height:r}),h}async function i(e,t,n=!0,i="rgba8unorm"){return"string"==typeof t?await(0,r.WK)(e,t,{mips:n,format:i}):s(e,"number"==typeof t?[t,t,t,1]:t,1,1,i)}},607:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(908),s=n(750),i=n(311),a=n(90),o=n(479),u=n(48),l=n(941),c=n(865),h=n(540),d=n(128);const e=[{name:"Pbr Samples",build:()=>new o.O},{name:"Pbr",build:()=>new u.O},{name:"Benchmark",build:()=>new d.z},{name:"Environment Map",build:()=>new i.c},{name:"Target Light",build:()=>new h.m},{name:"Shadow Map",build:()=>new l.R},{name:"Normal Map",build:()=>new a.N},{name:"Simple",build:()=>new c.O}],f=e[0],p=document.querySelector("canvas"),m=new r.D(f.build(),p);await m.run(),new s.h(m,p,e,f).refresh(),t()}catch(e){t(e)}}),1)},284:(e,t,n)=>{n.d(t,{Ax:()=>l,MO:()=>c,O$:()=>o,Vk:()=>a,nk:()=>r,qw:()=>s,sY:()=>i,v8:()=>u,zS:()=>h});const r="triangle-list",s=36,i={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]},a=new Float32Array([1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,1,1,0,0,1,1,1,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,-1,-1,1,1,0,0,1,0,0,0,-1,0,1,1,-1,1,1,1,0,1,1,0,1,0,-1,0,1,-1,-1,-1,1,0,0,0,1,1,0,0,-1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,1,1,-1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,0,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,-1,1,1,1,0,1,1,0,0,1,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,1,1,0,1,1,1,1,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,-1,-1,-1,1,0,0,0,1,0,0,-1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,0,0,1,-1,1,-1,1,0,1,0,1,1,0,-1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,1,1,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,-1,-1,1,1,0,0,1,1,1,0,0,0,1,1,1,-1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,-1,-1,1,0,0,0,1,1,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1,1,1,-1,1,1,1,0,1,0,0,0,0,-1,1,1,-1,-1,1,1,0,0,1,0,1,0,0,-1,1,-1,1,-1,1,0,1,0,1,1,0,0,0,-1,1]),o=40,u=0,l=32,c=36,h=new Float32Array([1,-1,1,1,1,0,1,1,0,1,-1,-1,1,1,0,0,1,1,1,1,-1,-1,-1,1,0,0,0,1,1,0,1,-1,-1,1,1,0,0,1,0,0,1,-1,1,1,1,0,1,1,0,1,-1,-1,-1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,-1,1,1,1,0,1,1,1,1,1,-1,-1,1,1,0,0,1,1,0,1,1,-1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,-1,-1,1,1,0,0,1,1,0,-1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,0,-1,1,-1,1,0,1,0,1,0,0,-1,1,1,1,0,1,1,1,0,1,1,1,-1,1,1,1,0,1,1,0,-1,-1,1,1,0,0,1,1,0,1,-1,1,1,1,0,1,1,1,1,1,-1,1,-1,1,0,1,0,1,1,0,-1,-1,-1,1,0,0,0,1,0,0,-1,-1,1,1,0,0,1,1,0,1,-1,1,-1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,-1,1,1,1,0,1,1,1,1,1,-1,-1,1,1,0,0,1,1,1,0,-1,-1,1,1,0,0,1,1,1,0,1,-1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,-1,-1,1,1,0,0,1,0,1,-1,-1,-1,1,0,0,0,1,1,1,-1,1,-1,1,0,1,0,1,1,0,1,1,-1,1,1,1,0,1,0,0,1,-1,-1,1,1,0,0,1,0,1,-1,1,-1,1,0,1,0,1,1,0])},102:(e,t,n)=>{n.d(t,{z:()=>x,Y:()=>b,$R:()=>d,xE:()=>y});var r=n(416),s=n(738);class i{name;vertexBuffer;material;boundingBox;normalBuffer;get hasNormals(){return null!=this.normalBuffer}get transform(){return this._transform}_transform=r._E.identity();constructor(e,t,n,s,i=void 0,a=r._E.identity()){this.name=e,this.vertexBuffer=t,this.material=n,this.boundingBox=s,this.normalBuffer=i,this._transform=a}getBoundingBox(){return(0,s.dV)(this.boundingBox,this._transform)}translate(e,t,n){return r._E.translate(this._transform,[e,t,n],this._transform),this}rotate(e,t,n){return r._E.rotateX(this._transform,e/180*Math.PI,this._transform),r._E.rotateY(this._transform,t/180*Math.PI,this._transform),r._E.rotateZ(this._transform,n/180*Math.PI,this._transform),this}scale(e,t,n){return t&&n||(n=t=e),r._E.scale(this._transform,[e,t,n],this._transform),this}get position(){return[...this._transform].slice(12,15)}lerp(e,t){let n=this.position;const s=r.R3.lerp(n,e,t);r.R3.sub(s,n,n),this.translate(...n)}}var a=n(231),o=n(284);const u="triangle-list",l={arrayStride:56,attributes:[{format:"float32x4",offset:0,shaderLocation:0},{format:"float32x4",offset:16,shaderLocation:1},{format:"float32x2",offset:32,shaderLocation:2},{format:"float32x4",offset:40,shaderLocation:3}]};function c(e,t,n,s=[0,0,0]){let i=Math.sin(t*Math.PI/180),a=Math.cos(t*Math.PI/180);return r.R3.fromValues(e*a+s[0],n+s[1],-e*i+s[2])}var h=n(149);function d(e,t,n,r,s){let a=r?p(r,s,n):f??(f=p());return new i(e,a.vertexBuffer,t,a.bb,n?a.normalBuffer:void 0)}let f;function p(e=128,t=!0,n=!0){const s=6*e**2,i=function(e,t=!0,n=1,s=[50,50,50,0]){const i=function(e,t=!0,n=1){const s=[],i=[],a=[];for(let o=0;o<e;o++){const u=o/e*2*Math.PI,l=(o+1)/e*2*Math.PI;for(let c=0;c<e;c++){const h=c/e*Math.PI,d=(c+1)/e*Math.PI,f=[n*Math.sin(h)*Math.cos(u),n*Math.cos(h),-n*Math.sin(h)*Math.sin(u)],p=[n*Math.sin(h)*Math.cos(l),n*Math.cos(h),-n*Math.sin(h)*Math.sin(l)],m=[n*Math.sin(d)*Math.cos(l),n*Math.cos(d),-n*Math.sin(d)*Math.sin(l)],_=[n*Math.sin(d)*Math.cos(u),n*Math.cos(d),-n*Math.sin(d)*Math.sin(u)];s.push(...m,1,...p,1,...f,1),s.push(...f,1,..._,1,...m,1);const g=r.R3.normalize;if(t)i.push(...g(m),0,...g(p),0,...g(f),0),i.push(...g(f),0,...g(_),0,...g(m),0);else{let e=g(r.R3.mulScalar(r.R3.add(r.R3.add(m,p),f),1/3)),t=g(r.R3.mulScalar(r.R3.add(r.R3.add(f,_),m),1/3));i.push(...e,0,...e,0,...e,0),i.push(...t,0,...t,0,...t,0)}const w=o/e,v=(o+1)/e,y=c/e,x=(c+1)/e;a.push(v,x,v,y,w,y),a.push(w,y,w,x,v,x)}}return{vertices:s,normals:i,uvs:a}}(e,t,n);let a=i.vertices.length/4;const o=Array(a).fill([...s]).flat(),u=function(e,...t){if(e.length!=t.length)throw new RangeError("strides lenght has to equal the amount of datasets");let n=t[0].length/e[0];t.forEach(((t,r)=>{if(t.length!=n*e[r])throw new Error(`dataset ${r} has size ${t.length} but should have ${n*e[r]}`)}));const r=[];for(let s=0;s<n;s++)e.forEach(((e,n)=>{r.push(...t[n].slice(s*e,s*e+e))}));return r}([4,4,2,4],i.vertices,o,i.uvs,i.normals);return new Float32Array(u)}(e,t),u=new a.Q(i,s,o.sY,o.nk,"Sphere Vertex Data (default)");let l;if(n){const e=(0,h.P)(i,s);l=new a.Q(e,s,h.a,o.nk,"Sphere Normal Data (default)")}return{vertexBuffer:u,bb:{min:[-1,-1,-1],max:[1,1,1]},normalBuffer:l}}const m={min:[-1,-1,-1],max:[1,1,1]},_=new a.Q(o.Vk,o.qw,o.sY,o.nk,"Cube Vertex Data (default)"),g=(0,h.P)(o.Vk,o.qw),w=new a.Q(g,o.qw,h.a,o.nk,"Cube Normal Data (default)"),v={vertexBuffer:_,bb:m,normalBuffer:void 0};function y(){return v}function x(e,t,n=!0){return new i(e,_,t,m,n?w:void 0)}function b(e,t,n,r,s){let a=n?M(n,r,s):k??(k=M());return new i(e,a.vertexBuffer,t,a.bb,s?a.normalBuffer:void 0)}let k;function M(e=100,t=!0,n=!0){const[s,i,o]=[.7,1.5,3],d=24*e,f=function(e=30,t=!1,n=.7,s=1.5,i=3){if(e<3||n>=s)throw new RangeError("arguments not valid");e+=1;let a=[],o=i/2;const u=[0,0,0];for(let t=0;t<e;t++)a.push([c(s,360*t/(e-1),o,u),c(s,360*t/(e-1),-o,u),c(n,360*t/(e-1),-o,u),c(n,360*t/(e-1),o,u)]);let l,h,d,f,p,m,_,g,w=[],v=[],y=[];for(let o=0;o<e-1;o++){l=a[o][0],h=a[o][1],d=a[o][2],f=a[o][3],p=a[o+1][0],m=a[o+1][1],_=a[o+1][2],g=a[o+1][3],w.push(l[0],l[1],l[2],p[0],p[1],p[2],g[0],g[1],g[2],g[0],g[1],g[2],f[0],f[1],f[2],l[0],l[1],l[2],h[0],h[1],h[2],d[0],d[1],d[2],_[0],_[1],_[2],_[0],_[1],_[2],m[0],m[1],m[2],h[0],h[1],h[2],l[0],l[1],l[2],h[0],h[1],h[2],m[0],m[1],m[2],m[0],m[1],m[2],p[0],p[1],p[2],l[0],l[1],l[2],d[0],d[1],d[2],f[0],f[1],f[2],g[0],g[1],g[2],g[0],g[1],g[2],_[0],_[1],_[2],d[0],d[1],d[2]);let u=[l,p,g,g,f,l];for(let e of u){let t=[e[0],e[2]];t=r.K4.divScalar(t,s),t=r.K4.addScaled(r.K4.create(.5,.5),t,.5),y.push(t)}u=[h,d,_,_,m,h];for(let e of u){let t=[e[2],e[0]];t=r.K4.divScalar(t,s),t=r.K4.addScaled(r.K4.create(.5,.5),t,.5),y.push(t)}const c=t=>Math.sqrt(2*t*t*(1-Math.cos(2*Math.PI/e))),x=1*c(s)/i;let b=o*x,k=(o+1)*x;y.push([b,0]),y.push([b,1]),y.push([k,1]),y.push([k,1]),y.push([k,0]),y.push([b,0]);const M=1*c(n)/i;if(k=-o*M,b=-(o+1)*M,y.push([k,1]),y.push([k,0]),y.push([b,0]),y.push([b,0]),y.push([b,1]),y.push([k,1]),v.push(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0),t){let e=r.R3.normalize([l[0],0,l[2]]),t=r.R3.normalize([m[0],0,m[2]]),n=r.R3.mulScalar(e,-1),s=r.R3.mulScalar(t,-1);v.push(...e),v.push(...e),v.push(...t),v.push(...t),v.push(...t),v.push(...e),v.push(...n),v.push(...n),v.push(...s),v.push(...s),v.push(...s),v.push(...n)}else{let e=[l[0]-p[0],0,l[2]-p[2]],t=r.R3.normalize([e[2],0,-e[0]]),n=r.R3.mulScalar(t,-1);for(let e=0;e<6;e++)v.push(...t);for(let e=0;e<6;e++)v.push(...n)}}let x=[];for(let e=0;e<w.length;e+=3)x.push(...w.slice(e,e+3)),x.push(1,1,0,0,1),x.push(...y[e/3]),x.push(...v.slice(e,e+3)),x.push(1);return new Float32Array(x)}(e,t,s,i,o),p=new a.Q(f,d,l,u,"Cylinder Vertex Data (default)");let m;if(n){const e=(0,h.P)(f,d);m=new a.Q(e,d,h.a,u,"Cylinder Normal Data (default)")}return{vertexBuffer:p,bb:{min:[-1,-1,-1],max:[1,1,1]},normalBuffer:m}}},149:(e,t,n)=>{n.d(t,{P:()=>i,a:()=>s});var r=n(416);const s={arrayStride:24,attributes:[{format:"float32x3",offset:0,shaderLocation:4},{format:"float32x3",offset:12,shaderLocation:5}]};function i(e,t){const n=[],r=14,s=e=>[e.slice(0,3),e.slice(8,10)];for(let i=0;i<t;i++){const[t,o]=s(e.slice(i*r,(i+1)*r));i++;const[u,l]=s(e.slice(i*r,(i+1)*r));i++;const[c,h]=s(e.slice(i*r,(i+1)*r)),[d,f]=a(t,u,c,o,l,h);for(let e=0;e<3;e++)n.push(...d),n.push(...f)}return new Float32Array(n)}function a(e,t,n,s,i,a,o=!0){const u=r.R3.subtract(t,e),l=r.R3.subtract(n,e),c=r.K4.subtract(i,s),h=r.K4.subtract(a,s),d=1/(c[0]*h[1]-c[1]*h[0]);return[r.R3.mulScalar(r.R3.add(r.R3.mulScalar(u,h[1]),r.R3.mulScalar(l,-c[1])),d),r.R3.mulScalar(r.R3.add(r.R3.mulScalar(u,-h[0]),r.R3.mulScalar(l,c[0])),o?-d:d)]}},311:(e,t,n)=>{n.d(t,{c:()=>c});var r=n(218),s=n(877),i=n(18),a=n(121),o=n(838),u=n(878),l=n(102);class c extends u.x{constructor(){super(),this.isAnimated=!1,o.GL,o.GL,o.GL,o.GL,o.GL,o.GL;const e=[`../${o.GL}/assets/hdr/vestibule_1k.png`];this.environmentMap=new a.Q(e),this.camera=new r.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new s._({type:s.v.Direct,direction:[-1,-1,0],intensity:.7})),this.lights.push(new s._({type:s.v.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.forEach((e=>{e.intensity/=this.lights.length}));let t=new i.O({diffuseColor:[20,20,20,1]}),n=(0,l.z)("Floor",t).translate(0,-1,0).scale(100,1,100);this.models.push(n);let u=new i.O({diffuseColor:[1,1,0,0],reflectivness:.2}),c=(0,l.$R)("Sphere01",u).translate(0,15,0).scale(10);this.models.push(c);let h=new i.O({diffuseColor:[235/255,201/255,52/255,1],reflectivness:.71}),d=(0,l.z)("Cube01",h).rotate(0,30,0).translate(25,8,0).scale(8);this.models.push(d)}}},128:(e,t,n)=>{n.d(t,{z:()=>u});var r=n(121),s=n(322),i=n(878),a=n(838),o=n(102);class u extends i.x{constructor(){super(),this.environmentMap=new r.Q(`../${a.GL}/assets/hdr/brown_photostudio_02_1k.hdr`);let e=(0,s.C)(`../${a.GL}/assets/pbr/light-gold/`);for(let t=0;t<9;t++)for(let n=0;n<9;n++)for(let r=0;r<9;r++)this.models.push((0,o.$R)(`[${t}, ${n}]`,e).translate(4*t,4*n,4*r))}}},90:(e,t,n)=>{n.d(t,{N:()=>l});var r=n(218),s=n(877),i=n(18),a=n(838),o=n(878),u=n(102);class l extends o.x{constructor(){super(),this.camera=new r.t({position:[0,10,50],movementSpeed:100,target:[0,0,0]}),this.lights[0]=new s._({type:s.v.Point,position:[-30,5,0]}),this.lights[1]=new s._({type:s.v.Point,position:[30,5,0]}),this.lights[2]=new s._({type:s.v.Direct,direction:[-1,-1,-1]}),this.lights.forEach((e=>e.intensity=.4));let e=new i.O({diffuseMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`}),t=(0,u.z)("Cube01",e).translate(-30,0,0).scale(10,10,10);this.models.push(t);let n=new i.O({diffuseMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/basecolor.jpg`,normalMapPath:`../${a.GL}/assets/Sci-fi_Metal_Plate_003_SD/normal.jpg`,tiling:{u:2.25,v:2}}),o=(0,u.Y)("Cube01",n).translate(30,0,0).scale(10,10/1.125,10);this.models.push(o)}currentTime=0;startPositions=[];update(e){if(this.isAnimated){0==this.startPositions.length&&this.lights.forEach((e=>this.startPositions.push(e.position))),this.currentTime+=e;for(let e=0;e<this.lights.length-1;e++)this.lights[e].position=[this.startPositions[e][0]+25*Math.sin(this.currentTime),this.startPositions[e][1],this.startPositions[e][2]+25*Math.cos(this.currentTime)]}}}},479:(e,t,n)=>{n.d(t,{O:()=>c});var r=n(218),s=n(877),i=n(322),a=n(878),o=n(838),u=n(121),l=n(102);class c extends a.x{constructor(){super(),this.isAnimated=!1,this.environmentMap=new u.Q(`../${o.GL}/assets/hdr/brown_photostudio_02_2k.hdr`),this.camera=new r.t({position:[0,100,100],movementSpeed:100,target:[0,100,0]}),this.lights=[];let e=(0,i.C)(`../${o.GL}/assets/pbr/light-gold/`),t=(0,i.C)(`../${o.GL}/assets/pbr/streaked-metal1/`,!0),n=(0,i.C)(`../${o.GL}/assets/pbr/oxidized-copper/`),a=(0,i.C)(`../${o.GL}/assets/pbr/dirty-flat-stonework/`,!0),c=(0,i.C)(`../${o.GL}/assets/pbr/dull-copper/`,!0),h=((0,i.C)(`../${o.GL}/assets/pbr/gold-scuffed/`),(0,i.C)(`../${o.GL}/assets/pbr/dull-brass/`,!0),(0,i.C)(`../${o.GL}/assets/pbr/wood-floor/`,!0,"jpg")),d=(0,i.C)(`../${o.GL}/assets/pbr/Sci-fi_Metal_Plate_003_SD/`,!0,"jpg"),f=(0,i.C)(`../${o.GL}/assets/pbr/Sci-fi_Metal_Plate_003_SD/`,!0,"jpg");f.tiling={u:2.25,v:2};let p=new i.p({albedo:.1,metallic:.9,roughness:.1});this.lights.push(new s._({type:s.v.Direct,direction:[0,-1,0],diffuseColor:[1,1,1,1],intensity:1,useFalloff:!1})),this.lights.push(new s._({type:s.v.Point,position:[0,100,100],diffuseColor:[1,1,1,1],intensity:2e4,useFalloff:!0})),this.lights.push(new s._({type:s.v.Target,position:[0,130,0],direction:[.5,-1,0],diffuseColor:[1,1,1,1],intensity:1,useFalloff:!0}));let m=(0,l.z)("Floor",h).translate(0,-1,0).scale(100,1,100);this.models.push(m);let _=(0,l.z)("Back",p).translate(0,98,-100).scale(100,100,1);this.models.push(_);let g=-2;const w=100;let v=(0,l.$R)("Sample01",a).translate(25*g++,w,0).scale(10);this.models.push(v);let y=(0,l.$R)("Sample02",t).translate(25*g++,w,0).scale(10);this.models.push(y);let x=(0,l.$R)("Sample03",c).translate(25*g++,w,0).scale(10);this.models.push(x);let b=(0,l.$R)("Sample04",e).translate(25*g++,w,0).scale(10);this.models.push(b);let k=(0,l.$R)("Sample05",n).translate(25*g++,w,0).scale(10);this.models.push(k);let M=(0,l.z)("Cube01",d).translate(-25,50,0).scale(10);this.models.push(M),this.rotatingBoxLight=new s._({type:s.v.Point,position:[-25,50,0],diffuseColor:[1,0,0,1],intensity:10,useFalloff:!1}),this.rotatingBoxLight.isOn=!1,this.lights.push(this.rotatingBoxLight);let S=(0,l.Y)("Cylinder01",f).translate(25,50,0).scale(10,10/1.125,10);this.models.push(S),this.rotatingBoxLight2=new s._({type:s.v.Point,position:[25,50,0],diffuseColor:[0,1,1,1],intensity:10,useFalloff:!1}),this.rotatingBoxLight2.isOn=!1,this.lights.push(this.rotatingBoxLight2)}rotatingBoxLight;rotatingBoxLight2;currentTime=0;startPositions=[];update(e){if(this.isAnimated){0==this.startPositions.length&&(this.startPositions=this.lights.map((e=>e.position)),this.rotatingBoxLight.isOn=this.rotatingBoxLight2.isOn=!0),this.currentTime+=e;for(let e=0;e<this.lights.length;e++)this.lights[e].position=[this.startPositions[e][0]+25*Math.sin(this.currentTime),this.startPositions[e][1],this.startPositions[e][2]+25*Math.cos(this.currentTime)]}}}},48:(e,t,n)=>{n.d(t,{O:()=>c});var r=n(218),s=n(877),i=n(322),a=n(878),o=n(838),u=n(121),l=n(102);class c extends a.x{constructor(){super();let e=[`../${o.GL}/assets/cubemap/posx.jpg`,`../${o.GL}/assets/cubemap/negx.jpg`,`../${o.GL}/assets/cubemap/posy.jpg`,`../${o.GL}/assets/cubemap/negy.jpg`,`../${o.GL}/assets/cubemap/posz.jpg`,`../${o.GL}/assets/cubemap/negz.jpg`];e=`../${o.GL}/assets/hdr/vestibule_1k.png`,e=`../${o.GL}/assets/hdr/brown_photostudio_02_1k.hdr`,this.environmentMap=new u.Q(e),this.camera=new r.t({position:[0,100,150],movementSpeed:100,target:[0,100,0]}),this.lights=[];let t=6e3;this.lights.push(new s._({type:s.v.Point,position:[100,200,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new s._({type:s.v.Point,position:[-100,200,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new s._({type:s.v.Point,position:[-100,0,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0})),this.lights.push(new s._({type:s.v.Point,position:[100,0,100],diffuseColor:[1,1,1,1],intensity:t,useFalloff:!0}));let n=new i.p({albedo:.3,metallic:.2,roughness:.3}),a=(0,l.z)("Floor",n).translate(0,-1,0).scale(200,1,100);this.models.push(a);let c=new i.p({albedo:.3,metallic:.2,roughness:.3}),h=(0,l.z)("Back",c).translate(0,98,-100).scale(200,150,1);this.models.push(h);let d=.8/7;for(let e=0;e<7;e++)for(let t=0;t<7;t++){let n=new i.p({ambientOcclussion:1,albedo:[.8,0,0,1],metallic:.1+e*d,roughness:.1+t*d}),r=(0,l.$R)("Sphere01",n).translate(25*(t-3.5),25*(e-3.5)+100,0).scale(10);this.models.push(r)}}}},941:(e,t,n)=>{n.d(t,{R:()=>c});var r=n(416),s=n(218),i=n(877),a=n(18),o=n(838),u=n(878),l=n(102);class c extends u.x{constructor(){super(),this.isAnimated=!1,this.camera=new s.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i._({type:i.v.Direct,direction:[-2,-1,0]})),this.lights.push(new i._({type:i.v.Direct,direction:[0,-1,1]})),this.lights.push(new i._({type:i.v.Point,position:[50,16,0]})),this.lights.forEach((e=>{e.intensity=1/this.lights.length}));let e=new a.O({diffuseColor:[20,20,20,1]}),t=(0,l.z)("Floor",e).translate(0,-1,0).scale(100,1,100);this.models.push(t);let n=new a.O({diffuseColor:[235/255,201/255,52/255,1]}),r=(0,l.z)("Cube01",n).rotate(0,45,0).translate(0,10,0).scale(10);this.models.push(r);let u=new a.O({diffuseColor:[0,0,.8,1]}),c=(0,l.Y)("Cylinder01",u,5,!1).translate(0,10,-30).scale(20/3);this.models.push(c);let h=new a.O({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${o.GL}/assets/spiral_normal.png`}),d=(0,l.z)("Cube01",h).rotate(0,30,0).translate(25,8,0).scale(8);this.models.push(d);let f=(0,l.z)("Cube01",n).translate(50,7,0).scale(7);this.models.push(f)}update(e){this.isAnimated&&(this.lights[0].direction=r.R3.lerp(this.lights[0].direction,[0,-1,2],.2*e))}}},865:(e,t,n)=>{n.d(t,{O:()=>l});var r=n(218),s=n(877),i=n(18),a=n(838),o=n(878),u=n(102);class l extends o.x{isAnimated;constructor(e=!0){super(),this.isAnimated=e,this.camera=new r.t({position:[0,60,10],movementSpeed:100,target:[0,40,0]}),this.lights[0]=new s._({type:s.v.Point,position:[0,20,-25],useShadowMap:!1}),this.lights[1]=new s._({type:s.v.Direct,direction:[-1,-1,0],useShadowMap:!1}),this.lights.forEach((e=>e.intensity=.7));let t=new i.O({diffuseColor:[0,1,0,1],specularColor:[1,0,0,1]}),n=new i.O({diffuseMapPath:`../${a.GL}/assets/uv_dist.jpg`,shininess:50}),o=new i.O({diffuseColor:[0,0,.8,1]}),l=(0,u.z)("Cube01",t).translate(0,0,-50).rotate(0,30,0).scale(10,10,10);this.models.push(l);let c=(0,u.z)("Floor",t).translate(0,-25,0).scale(100,1,100);this.models.push(c);let h=(0,u.Y)("Cylinder01",n).translate(20,0,-20).rotate(0,0,45).scale(10,10,10);this.models.push(h);let d=(0,u.Y)("Cylinder02",o,5,!1).translate(-20,0,-20).scale(10,10,10);this.models.push(d)}currentTime=0;centerPos;update(e){this.isAnimated&&(this.centerPos=this.centerPos??this.lights[0].position,this.currentTime+=e,this.lights[0].position=[this.centerPos[0]+25*Math.sin(this.currentTime),this.centerPos[1],this.centerPos[2]+25*Math.cos(this.currentTime)])}}},540:(e,t,n)=>{n.d(t,{m:()=>c});var r=n(416),s=n(218),i=n(877),a=n(18),o=n(838),u=n(878),l=n(102);class c extends u.x{constructor(){super(),this.isAnimated=!1,this.camera=new s.t({position:[-30,50,80],movementSpeed:100,target:[0,0,0]}),this.lights=[],this.lights.push(new i._({type:i.v.Target,position:[50,50,0],target:[50,30,0],coneAngleDeg:80})),this.lights.push(new i._({type:i.v.Target,position:[-50,30,-180],target:[-50,0,0],coneAngleDeg:40})),this.lights.forEach((e=>{e.intensity=1/this.lights.length}));let e=new a.O({diffuseColor:[20,20,20,1]}),t=(0,l.z)("Floor",e).translate(0,-1,0).scale(100,1,100);this.models.push(t);let n=new a.O({diffuseColor:[235/255,201/255,52/255,1]}),r=(0,l.z)("Cube01",n).rotate(0,45,0).translate(-50,10,0).scale(10);this.models.push(r);let u=new a.O({diffuseColor:[0,0,.8,1]}),c=(0,l.Y)("Cylinder01",u,5,!1).translate(-50,10,-30).scale(20/3);this.models.push(c);let h=new a.O({diffuseColor:[.4,.6,.5,1],normalMapPath:`../${o.GL}/assets/spiral_normal.png`}),d=(0,l.z)("Cube01",h).rotate(0,30,0).translate(25,18,0).scale(8);this.models.push(d);let f=(0,l.z)("Cube02",n).translate(50,7,0).scale(7);this.models.push(f)}update(e){this.isAnimated&&(this.lights[0].position=r.R3.lerp(this.lights[0].position,[50,40,-70],.2*e),this.lights[1].coneAngleDeg=r.K4.lerp(r.K4.fromValues(this.lights[1].coneAngleDeg,0),r.K4.fromValues(22,0),.1*e)[0])}}},203:e=>{e.exports="const PI = 3.14159265359;\n\nfn fresnelSchlickRoughness(cosTheta : f32, F0 : vec3f, roughness : f32) -> vec3f\n{\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n}\n\nfn fresnelSchlick(cosTheta : f32, F0 : vec3f) -> vec3f\n{\n    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n}\n\nfn DistributionGGX(N : vec3f, H : vec3f, roughness : f32) -> f32\n{\n    let a = roughness * roughness;\n    let a2 = a * a;\n    let NdotH = max(dot(N, H), 0.0);\n    let NdotH2 = NdotH * NdotH;\n\n    let nom = a2;\n    var denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfn GeometrySchlickGGX(NdotV : f32, roughness : f32) -> f32\n{\n    let r = (roughness + 1.0);\n    let k = (r * r) / 8.0;\n\n    let num = NdotV;\n    let denom = NdotV * (1.0 - k) + k;\n\n    return num / denom;\n}\n\nfn GeometrySmith(N : vec3f, V : vec3f, L : vec3f, roughness : f32) -> f32\n{\n    let NdotV = max(dot(N, V), 0.0);\n    let NdotL = max(dot(N, L), 0.0);\n    let ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    let ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\n\n//http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n//efficient VanDerCorpus calculation.\nfn RadicalInverse_VdC(bits_in : u32) -> f32\n{\n    var bits = (bits_in << 16u) | (bits_in >> 16u);\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n    return f32(bits) / 0x100000000;\n}\n\nfn Hammersley(i : u32, N : u32) -> vec2f\n{\n    return vec2(f32(i) / f32(N), RadicalInverse_VdC(i));\n}\n\nfn ImportanceSampleGGX(Xi : vec2f, N : vec3f, roughness : f32) -> vec3f\n{\n    let a = roughness * roughness;\n\n    let phi = 2.0 * PI * Xi.x;\n    let cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n    let sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\n    //from spherical coordinates to cartesian coordinates - halfway vector\n    var H : vec3f = vec3f();\n    H.x = cos(phi) * sinTheta;\n    H.y = sin(phi) * sinTheta;\n    H.z = cosTheta;\n\n    //from tangent-space H vector to world-space sample vector\n    let up = select(vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), abs(N.z) < 0.999);\n    let tangent = normalize(cross(up, N));\n    let bitangent = cross(N, tangent);\n\n    let sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n    return normalize(sampleVec);\n}\n"},453:(e,t,n)=>{n.d(t,{Pk:()=>Re,WK:()=>Ve,zd:()=>Te});const r=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength;Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Int32Array,Uint32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array,Float32Array,Uint16Array;new WeakMap;class s{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class i{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}}class a extends i{constructor(){super()}}class o extends a{constructor(e,t,n,r){super(),this.name=e,this.args=t,this.returnType=n,this.body=r}get astNodeType(){return"function"}}class u extends a{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}}class l extends a{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}}class c extends a{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}}class h extends a{constructor(e,t,n,r){super(),this.init=e,this.condition=t,this.increment=n,this.body=r}get astNodeType(){return"for"}}class d extends a{constructor(e,t,n,r,s){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=s}get astNodeType(){return"var"}}class f extends a{constructor(e,t,n){super(),this.name=e,this.type=t,this.value=n}get astNodeType(){return"override"}}class p extends a{constructor(e,t,n,r,s){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=s}get astNodeType(){return"let"}}class m extends a{constructor(e,t,n,r,s){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=s}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}}var _,g,w,v,y;!function(e){e.increment="++",e.decrement="--"}(_||(_={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for IncrementOperator");return e[n]}}(_||(_={}));class x extends a{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(g||(g={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for AssignOperator");return e[n]}}(g||(g={}));class b extends a{constructor(e,t,n){super(),this.operator=e,this.variable=t,this.value=n}get astNodeType(){return"assign"}}class k extends a{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class M extends a{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class S extends a{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class T extends a{constructor(e,t,n,r){super(),this.condition=e,this.body=t,this.elseif=n,this.else=r}get astNodeType(){return"if"}}class A extends a{constructor(e){super(),this.value=e}get astNodeType(){return"return"}}class P extends a{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class E extends a{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class C extends a{constructor(){super()}get astNodeType(){return"discard"}}class N extends a{constructor(){super()}get astNodeType(){return"break"}}class B extends a{constructor(){super()}get astNodeType(){return"continue"}}class z extends a{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class L extends z{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class R extends z{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"template"}}class V extends z{constructor(e,t,n,r){super(e),this.storage=t,this.type=n,this.access=r}get astNodeType(){return"pointer"}}class G extends z{constructor(e,t,n,r){super(e),this.attributes=t,this.format=n,this.count=r}get astNodeType(){return"array"}get isArray(){return!0}}class F extends z{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"sampler"}}class U extends i{constructor(){super()}}class O extends U{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class I extends U{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class D extends U{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}}class q extends U{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}}class H extends U{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,n;if(this.initializer instanceof I){const r=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),s=null===(n=this.initializer.type)||void 0===n?void 0:n.name,i=e.structs.get(s),a=null==i?void 0:i.getMemberIndex(r);if(-1!=a)return this.initializer.args[a].evaluate(e);console.log(a)}return this.initializer.evaluate(e)}}class $ extends U{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class j extends U{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}}class X extends U{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}}class Y extends U{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}}class W extends U{constructor(){super()}}class K extends W{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}}class Q extends W{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}}class Z extends i{constructor(){super()}}class J extends Z{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}}class ee extends Z{constructor(e){super(),this.body=e}get astNodeType(){return"default"}}class te extends i{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"argument"}}class ne extends i{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}}class re extends i{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"member"}}class se extends i{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(v||(v={}));class ie{constructor(e,t,n){this.name=e,this.type=t,this.rule=n}toString(){return this.name}}class ae{}w=ae,ae.none=new ie("",v.reserved,""),ae.eof=new ie("EOF",v.token,""),ae.reserved={asm:new ie("asm",v.reserved,"asm"),bf16:new ie("bf16",v.reserved,"bf16"),do:new ie("do",v.reserved,"do"),enum:new ie("enum",v.reserved,"enum"),f16:new ie("f16",v.reserved,"f16"),f64:new ie("f64",v.reserved,"f64"),handle:new ie("handle",v.reserved,"handle"),i8:new ie("i8",v.reserved,"i8"),i16:new ie("i16",v.reserved,"i16"),i64:new ie("i64",v.reserved,"i64"),mat:new ie("mat",v.reserved,"mat"),premerge:new ie("premerge",v.reserved,"premerge"),regardless:new ie("regardless",v.reserved,"regardless"),typedef:new ie("typedef",v.reserved,"typedef"),u8:new ie("u8",v.reserved,"u8"),u16:new ie("u16",v.reserved,"u16"),u64:new ie("u64",v.reserved,"u64"),unless:new ie("unless",v.reserved,"unless"),using:new ie("using",v.reserved,"using"),vec:new ie("vec",v.reserved,"vec"),void:new ie("void",v.reserved,"void")},ae.keywords={array:new ie("array",v.keyword,"array"),atomic:new ie("atomic",v.keyword,"atomic"),bool:new ie("bool",v.keyword,"bool"),f32:new ie("f32",v.keyword,"f32"),i32:new ie("i32",v.keyword,"i32"),mat2x2:new ie("mat2x2",v.keyword,"mat2x2"),mat2x3:new ie("mat2x3",v.keyword,"mat2x3"),mat2x4:new ie("mat2x4",v.keyword,"mat2x4"),mat3x2:new ie("mat3x2",v.keyword,"mat3x2"),mat3x3:new ie("mat3x3",v.keyword,"mat3x3"),mat3x4:new ie("mat3x4",v.keyword,"mat3x4"),mat4x2:new ie("mat4x2",v.keyword,"mat4x2"),mat4x3:new ie("mat4x3",v.keyword,"mat4x3"),mat4x4:new ie("mat4x4",v.keyword,"mat4x4"),ptr:new ie("ptr",v.keyword,"ptr"),sampler:new ie("sampler",v.keyword,"sampler"),sampler_comparison:new ie("sampler_comparison",v.keyword,"sampler_comparison"),struct:new ie("struct",v.keyword,"struct"),texture_1d:new ie("texture_1d",v.keyword,"texture_1d"),texture_2d:new ie("texture_2d",v.keyword,"texture_2d"),texture_2d_array:new ie("texture_2d_array",v.keyword,"texture_2d_array"),texture_3d:new ie("texture_3d",v.keyword,"texture_3d"),texture_cube:new ie("texture_cube",v.keyword,"texture_cube"),texture_cube_array:new ie("texture_cube_array",v.keyword,"texture_cube_array"),texture_multisampled_2d:new ie("texture_multisampled_2d",v.keyword,"texture_multisampled_2d"),texture_storage_1d:new ie("texture_storage_1d",v.keyword,"texture_storage_1d"),texture_storage_2d:new ie("texture_storage_2d",v.keyword,"texture_storage_2d"),texture_storage_2d_array:new ie("texture_storage_2d_array",v.keyword,"texture_storage_2d_array"),texture_storage_3d:new ie("texture_storage_3d",v.keyword,"texture_storage_3d"),texture_depth_2d:new ie("texture_depth_2d",v.keyword,"texture_depth_2d"),texture_depth_2d_array:new ie("texture_depth_2d_array",v.keyword,"texture_depth_2d_array"),texture_depth_cube:new ie("texture_depth_cube",v.keyword,"texture_depth_cube"),texture_depth_cube_array:new ie("texture_depth_cube_array",v.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new ie("texture_depth_multisampled_2d",v.keyword,"texture_depth_multisampled_2d"),texture_external:new ie("texture_external",v.keyword,"texture_external"),u32:new ie("u32",v.keyword,"u32"),vec2:new ie("vec2",v.keyword,"vec2"),vec3:new ie("vec3",v.keyword,"vec3"),vec4:new ie("vec4",v.keyword,"vec4"),bitcast:new ie("bitcast",v.keyword,"bitcast"),block:new ie("block",v.keyword,"block"),break:new ie("break",v.keyword,"break"),case:new ie("case",v.keyword,"case"),continue:new ie("continue",v.keyword,"continue"),continuing:new ie("continuing",v.keyword,"continuing"),default:new ie("default",v.keyword,"default"),discard:new ie("discard",v.keyword,"discard"),else:new ie("else",v.keyword,"else"),enable:new ie("enable",v.keyword,"enable"),fallthrough:new ie("fallthrough",v.keyword,"fallthrough"),false:new ie("false",v.keyword,"false"),fn:new ie("fn",v.keyword,"fn"),for:new ie("for",v.keyword,"for"),function:new ie("function",v.keyword,"function"),if:new ie("if",v.keyword,"if"),let:new ie("let",v.keyword,"let"),const:new ie("const",v.keyword,"const"),loop:new ie("loop",v.keyword,"loop"),while:new ie("while",v.keyword,"while"),private:new ie("private",v.keyword,"private"),read:new ie("read",v.keyword,"read"),read_write:new ie("read_write",v.keyword,"read_write"),return:new ie("return",v.keyword,"return"),storage:new ie("storage",v.keyword,"storage"),switch:new ie("switch",v.keyword,"switch"),true:new ie("true",v.keyword,"true"),alias:new ie("alias",v.keyword,"alias"),type:new ie("type",v.keyword,"type"),uniform:new ie("uniform",v.keyword,"uniform"),var:new ie("var",v.keyword,"var"),override:new ie("override",v.keyword,"override"),workgroup:new ie("workgroup",v.keyword,"workgroup"),write:new ie("write",v.keyword,"write"),r8unorm:new ie("r8unorm",v.keyword,"r8unorm"),r8snorm:new ie("r8snorm",v.keyword,"r8snorm"),r8uint:new ie("r8uint",v.keyword,"r8uint"),r8sint:new ie("r8sint",v.keyword,"r8sint"),r16uint:new ie("r16uint",v.keyword,"r16uint"),r16sint:new ie("r16sint",v.keyword,"r16sint"),r16float:new ie("r16float",v.keyword,"r16float"),rg8unorm:new ie("rg8unorm",v.keyword,"rg8unorm"),rg8snorm:new ie("rg8snorm",v.keyword,"rg8snorm"),rg8uint:new ie("rg8uint",v.keyword,"rg8uint"),rg8sint:new ie("rg8sint",v.keyword,"rg8sint"),r32uint:new ie("r32uint",v.keyword,"r32uint"),r32sint:new ie("r32sint",v.keyword,"r32sint"),r32float:new ie("r32float",v.keyword,"r32float"),rg16uint:new ie("rg16uint",v.keyword,"rg16uint"),rg16sint:new ie("rg16sint",v.keyword,"rg16sint"),rg16float:new ie("rg16float",v.keyword,"rg16float"),rgba8unorm:new ie("rgba8unorm",v.keyword,"rgba8unorm"),rgba8unorm_srgb:new ie("rgba8unorm_srgb",v.keyword,"rgba8unorm_srgb"),rgba8snorm:new ie("rgba8snorm",v.keyword,"rgba8snorm"),rgba8uint:new ie("rgba8uint",v.keyword,"rgba8uint"),rgba8sint:new ie("rgba8sint",v.keyword,"rgba8sint"),bgra8unorm:new ie("bgra8unorm",v.keyword,"bgra8unorm"),bgra8unorm_srgb:new ie("bgra8unorm_srgb",v.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new ie("rgb10a2unorm",v.keyword,"rgb10a2unorm"),rg11b10float:new ie("rg11b10float",v.keyword,"rg11b10float"),rg32uint:new ie("rg32uint",v.keyword,"rg32uint"),rg32sint:new ie("rg32sint",v.keyword,"rg32sint"),rg32float:new ie("rg32float",v.keyword,"rg32float"),rgba16uint:new ie("rgba16uint",v.keyword,"rgba16uint"),rgba16sint:new ie("rgba16sint",v.keyword,"rgba16sint"),rgba16float:new ie("rgba16float",v.keyword,"rgba16float"),rgba32uint:new ie("rgba32uint",v.keyword,"rgba32uint"),rgba32sint:new ie("rgba32sint",v.keyword,"rgba32sint"),rgba32float:new ie("rgba32float",v.keyword,"rgba32float"),static_assert:new ie("static_assert",v.keyword,"static_assert")},ae.tokens={decimal_float_literal:new ie("decimal_float_literal",v.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new ie("hex_float_literal",v.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new ie("int_literal",v.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new ie("uint_literal",v.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new ie("ident",v.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new ie("and",v.token,"&"),and_and:new ie("and_and",v.token,"&&"),arrow:new ie("arrow ",v.token,"->"),attr:new ie("attr",v.token,"@"),attr_left:new ie("attr_left",v.token,"[["),attr_right:new ie("attr_right",v.token,"]]"),forward_slash:new ie("forward_slash",v.token,"/"),bang:new ie("bang",v.token,"!"),bracket_left:new ie("bracket_left",v.token,"["),bracket_right:new ie("bracket_right",v.token,"]"),brace_left:new ie("brace_left",v.token,"{"),brace_right:new ie("brace_right",v.token,"}"),colon:new ie("colon",v.token,":"),comma:new ie("comma",v.token,","),equal:new ie("equal",v.token,"="),equal_equal:new ie("equal_equal",v.token,"=="),not_equal:new ie("not_equal",v.token,"!="),greater_than:new ie("greater_than",v.token,">"),greater_than_equal:new ie("greater_than_equal",v.token,">="),shift_right:new ie("shift_right",v.token,">>"),less_than:new ie("less_than",v.token,"<"),less_than_equal:new ie("less_than_equal",v.token,"<="),shift_left:new ie("shift_left",v.token,"<<"),modulo:new ie("modulo",v.token,"%"),minus:new ie("minus",v.token,"-"),minus_minus:new ie("minus_minus",v.token,"--"),period:new ie("period",v.token,"."),plus:new ie("plus",v.token,"+"),plus_plus:new ie("plus_plus",v.token,"++"),or:new ie("or",v.token,"|"),or_or:new ie("or_or",v.token,"||"),paren_left:new ie("paren_left",v.token,"("),paren_right:new ie("paren_right",v.token,")"),semicolon:new ie("semicolon",v.token,";"),star:new ie("star",v.token,"*"),tilde:new ie("tilde",v.token,"~"),underscore:new ie("underscore",v.token,"_"),xor:new ie("xor",v.token,"^"),plus_equal:new ie("plus_equal",v.token,"+="),minus_equal:new ie("minus_equal",v.token,"-="),times_equal:new ie("times_equal",v.token,"*="),division_equal:new ie("division_equal",v.token,"/="),modulo_equal:new ie("modulo_equal",v.token,"%="),and_equal:new ie("and_equal",v.token,"&="),or_equal:new ie("or_equal",v.token,"|="),xor_equal:new ie("xor_equal",v.token,"^="),shift_right_equal:new ie("shift_right_equal",v.token,">>="),shift_left_equal:new ie("shift_left_equal",v.token,"<<=")},ae.storage_class=[w.keywords.function,w.keywords.private,w.keywords.workgroup,w.keywords.uniform,w.keywords.storage],ae.access_mode=[w.keywords.read,w.keywords.write,w.keywords.read_write],ae.sampler_type=[w.keywords.sampler,w.keywords.sampler_comparison],ae.sampled_texture_type=[w.keywords.texture_1d,w.keywords.texture_2d,w.keywords.texture_2d_array,w.keywords.texture_3d,w.keywords.texture_cube,w.keywords.texture_cube_array],ae.multisampled_texture_type=[w.keywords.texture_multisampled_2d],ae.storage_texture_type=[w.keywords.texture_storage_1d,w.keywords.texture_storage_2d,w.keywords.texture_storage_2d_array,w.keywords.texture_storage_3d],ae.depth_texture_type=[w.keywords.texture_depth_2d,w.keywords.texture_depth_2d_array,w.keywords.texture_depth_cube,w.keywords.texture_depth_cube_array,w.keywords.texture_depth_multisampled_2d],ae.texture_external_type=[w.keywords.texture_external],ae.any_texture_type=[...w.sampled_texture_type,...w.multisampled_texture_type,...w.storage_texture_type,...w.depth_texture_type,...w.texture_external_type],ae.texel_format=[w.keywords.r8unorm,w.keywords.r8snorm,w.keywords.r8uint,w.keywords.r8sint,w.keywords.r16uint,w.keywords.r16sint,w.keywords.r16float,w.keywords.rg8unorm,w.keywords.rg8snorm,w.keywords.rg8uint,w.keywords.rg8sint,w.keywords.r32uint,w.keywords.r32sint,w.keywords.r32float,w.keywords.rg16uint,w.keywords.rg16sint,w.keywords.rg16float,w.keywords.rgba8unorm,w.keywords.rgba8unorm_srgb,w.keywords.rgba8snorm,w.keywords.rgba8uint,w.keywords.rgba8sint,w.keywords.bgra8unorm,w.keywords.bgra8unorm_srgb,w.keywords.rgb10a2unorm,w.keywords.rg11b10float,w.keywords.rg32uint,w.keywords.rg32sint,w.keywords.rg32float,w.keywords.rgba16uint,w.keywords.rgba16sint,w.keywords.rgba16float,w.keywords.rgba32uint,w.keywords.rgba32sint,w.keywords.rgba32float],ae.const_literal=[w.tokens.int_literal,w.tokens.uint_literal,w.tokens.decimal_float_literal,w.tokens.hex_float_literal,w.keywords.true,w.keywords.false],ae.literal_or_ident=[w.tokens.ident,w.tokens.int_literal,w.tokens.uint_literal,w.tokens.decimal_float_literal,w.tokens.hex_float_literal],ae.element_count_expression=[w.tokens.int_literal,w.tokens.uint_literal,w.tokens.ident],ae.template_types=[w.keywords.vec2,w.keywords.vec3,w.keywords.vec4,w.keywords.mat2x2,w.keywords.mat2x3,w.keywords.mat2x4,w.keywords.mat3x2,w.keywords.mat3x3,w.keywords.mat3x4,w.keywords.mat4x2,w.keywords.mat4x3,w.keywords.mat4x4,w.keywords.atomic,w.keywords.bitcast,...w.any_texture_type],ae.attribute_name=[w.tokens.ident,w.keywords.block],ae.assignment_operators=[w.tokens.equal,w.tokens.plus_equal,w.tokens.minus_equal,w.tokens.times_equal,w.tokens.division_equal,w.tokens.modulo_equal,w.tokens.and_equal,w.tokens.or_equal,w.tokens.xor_equal,w.tokens.shift_right_equal,w.tokens.shift_left_equal],ae.increment_operators=[w.tokens.plus_plus,w.tokens.minus_minus];class oe{constructor(e,t,n){this.type=e,this.lexeme=t,this.line=n}toString(){return this.lexeme}isTemplateType(){return-1!=ae.template_types.indexOf(this.type)}isArrayType(){return this.type==ae.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ue{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new oe(ae.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=ae.none;for(;;){let n=this._findType(e);const r=this._peekAhead();if(">"==e&&(">"==r||"="==r)){let e=!1,t=this._tokens.length-1;for(let n=0;n<4&&t>=0;++n,--t)if(this._tokens[t].type===ae.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(n),!0}if(n===ae.none){let r=e,s=0;const i=2;for(let e=0;e<i;++e)if(r+=this._peekAhead(e),n=this._findType(r),n!==ae.none){s=e;break}if(n===ae.none)return t!==ae.none&&(this._current--,this._addToken(t),!0);e=r,this._current+=s+1}if(t=n,this._isAtEnd())break;e+=this._advance()}return t!==ae.none&&(this._addToken(t),!0)}_findType(e){for(const t in ae.keywords){const n=ae.keywords[t];if(this._match(e,n.rule))return n}for(const t in ae.tokens){const n=ae.tokens[t];if(this._match(e,n.rule))return n}return ae.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const n=t.exec(e);if(n&&0==n.index&&n[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new oe(e,t,this._line))}}class le{constructor(){this._tokens=[],this._current=0,this._context=new s}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new ue(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==ae.eof}_match(e){if(e instanceof ie)return!!this._check(e)&&(this._advance(),!0);for(let t=0,n=e.length;t<n;++t){const n=e[t];if(this._check(n))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let n=t.type;return-1!=e.indexOf(n)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(ae.tokens.semicolon)&&!this._isAtEnd(););if(this._match(ae.keywords.alias)){const e=this._type_alias();return this._consume(ae.tokens.semicolon,"Expected ';'"),e}if(this._match(ae.keywords.enable)){const e=this._enable_directive();return this._consume(ae.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(ae.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(ae.tokens.semicolon,"Expected ';'."),t}if(this._check(ae.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(ae.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(ae.keywords.fn))return null;const e=this._consume(ae.tokens.ident,"Expected function name.").toString();this._consume(ae.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(ae.tokens.paren_right))do{if(this._check(ae.tokens.paren_right))break;const e=this._attribute(),n=this._consume(ae.tokens.ident,"Expected argument name.").toString();this._consume(ae.tokens.colon,"Expected ':' for argument type.");const r=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=r,t.push(new te(n,s,e)))}while(this._match(ae.tokens.comma));this._consume(ae.tokens.paren_right,"Expected ')' after function arguments.");let n=null;if(this._match(ae.tokens.arrow)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}const r=this._compound_statement();return new o(e,t,n,r)}_compound_statement(){const e=[];for(this._consume(ae.tokens.brace_left,"Expected '{' for block.");!this._check(ae.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(ae.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(ae.tokens.semicolon)&&!this._isAtEnd(););if(this._check(ae.keywords.if))return this._if_statement();if(this._check(ae.keywords.switch))return this._switch_statement();if(this._check(ae.keywords.loop))return this._loop_statement();if(this._check(ae.keywords.for))return this._for_statement();if(this._check(ae.keywords.while))return this._while_statement();if(this._check(ae.keywords.continuing))return this._continuing_statement();if(this._check(ae.keywords.static_assert))return this._static_assert_statement();if(this._check(ae.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(ae.keywords.return)?this._return_statement():this._check([ae.keywords.var,ae.keywords.let,ae.keywords.const])?this._variable_statement():this._match(ae.keywords.discard)?new C:this._match(ae.keywords.break)?new N:this._match(ae.keywords.continue)?new B:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(ae.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(ae.keywords.static_assert))return null;let e=this._optional_paren_expression();return new u(e)}_while_statement(){if(!this._match(ae.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new l(e,t)}_continuing_statement(){if(!this._match(ae.keywords.continuing))return null;const e=this._compound_statement();return new c(e)}_for_statement(){if(!this._match(ae.keywords.for))return null;this._consume(ae.tokens.paren_left,"Expected '('.");const e=this._check(ae.tokens.semicolon)?null:this._for_init();this._consume(ae.tokens.semicolon,"Expected ';'.");const t=this._check(ae.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(ae.tokens.semicolon,"Expected ';'.");const n=this._check(ae.tokens.paren_right)?null:this._for_increment();this._consume(ae.tokens.paren_right,"Expected ')'.");const r=this._compound_statement();return new h(e,t,n,r)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(ae.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(ae.tokens.equal)&&(t=this._short_circuit_or_expression()),new d(e.name,e.type,e.storage,e.access,t)}if(this._match(ae.keywords.let)){const e=this._consume(ae.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(ae.tokens.equal,"Expected '=' for let.");const n=this._short_circuit_or_expression();return new p(e,t,null,null,n)}if(this._match(ae.keywords.const)){const e=this._consume(ae.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(ae.tokens.equal,"Expected '=' for const.");const n=this._short_circuit_or_expression();return new m(e,t,null,null,n)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(ae.increment_operators))return this._current=e,null;const n=this._consume(ae.increment_operators,"Expected increment operator");return new x(n.type===ae.tokens.plus_plus?_.increment:_.decrement,t)}_assignment_statement(){let e=null;if(this._check(ae.tokens.brace_right))return null;let t=this._match(ae.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const n=this._consume(ae.assignment_operators,"Expected assignment operator."),r=this._short_circuit_or_expression();return new b(g.parse(n.lexeme),e,r)}_func_call_statement(){if(!this._check(ae.tokens.ident))return null;const e=this._current,t=this._consume(ae.tokens.ident,"Expected function name."),n=this._argument_expression_list();return null===n?(this._current=e,null):new k(t.lexeme,n)}_loop_statement(){if(!this._match(ae.keywords.loop))return null;this._consume(ae.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let n of t)e.push(n);else e.push(t);t=this._statement()}let n=null;return this._match(ae.keywords.continuing)&&(n=this._compound_statement()),this._consume(ae.tokens.brace_right,"Expected '}' for loop."),new M(e,n)}_switch_statement(){if(!this._match(ae.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(ae.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(ae.tokens.brace_right,"Expected '}' for switch."),new S(e,t)}_switch_body(){const e=[];if(this._match(ae.keywords.case)){const t=this._case_selectors();this._match(ae.tokens.colon),this._consume(ae.tokens.brace_left,"Exected '{' for switch case.");const n=this._case_body();this._consume(ae.tokens.brace_right,"Exected '}' for switch case."),e.push(new J(t,n))}if(this._match(ae.keywords.default)){this._match(ae.tokens.colon),this._consume(ae.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(ae.tokens.brace_right,"Exected '}' for switch default."),e.push(new ee(t))}if(this._check([ae.keywords.default,ae.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,n,r;const s=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(ae.tokens.comma);)s.push(null!==(r=null===(n=this._shift_expression())||void 0===n?void 0:n.evaluate(this._context).toString())&&void 0!==r?r:"");return s}_case_body(){if(this._match(ae.keywords.fallthrough))return this._consume(ae.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(ae.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let n=[];this._match_elseif()&&(n=this._elseif_statement(n));let r=null;return this._match(ae.keywords.else)&&(r=this._compound_statement()),new T(e,t,n,r)}_match_elseif(){return this._tokens[this._current].type===ae.keywords.else&&this._tokens[this._current+1].type===ae.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),n=this._compound_statement();return e.push(new ne(t,n)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(ae.keywords.return))return null;const e=this._short_circuit_or_expression();return new A(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(ae.tokens.or_or);)e=new Q(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(ae.tokens.and_and);)e=new Q(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(ae.tokens.or);)e=new Q(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(ae.tokens.xor);)e=new Q(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(ae.tokens.and);)e=new Q(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([ae.tokens.equal_equal,ae.tokens.not_equal])?new Q(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([ae.tokens.less_than,ae.tokens.greater_than,ae.tokens.less_than_equal,ae.tokens.greater_than_equal]);)e=new Q(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([ae.tokens.shift_left,ae.tokens.shift_right]);)e=new Q(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([ae.tokens.plus,ae.tokens.minus]);)e=new Q(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([ae.tokens.star,ae.tokens.forward_slash,ae.tokens.modulo]);)e=new Q(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([ae.tokens.minus,ae.tokens.bang,ae.tokens.tilde,ae.tokens.star,ae.tokens.and])?new K(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(ae.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(ae.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(ae.tokens.period)){const e=this._consume(ae.tokens.ident,"Expected member name."),t=this._postfix_expression(),n=new O(e.lexeme);return t&&(n.postfix=t),n}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(ae.tokens.ident)){const e=this._previous().toString();if(this._check(ae.tokens.paren_left)){const t=this._argument_expression_list(),n=this._getStruct(e);return null!=n?new I(n,t):new D(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new H(e,t.value)}return new q(e)}if(this._match(ae.const_literal))return new $(parseFloat(this._previous().toString()));if(this._check(ae.tokens.paren_left))return this._paren_expression();if(this._match(ae.keywords.bitcast)){this._consume(ae.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(ae.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new j(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new X(e,t)}_argument_expression_list(){if(!this._match(ae.tokens.paren_left))return null;const e=[];do{if(this._check(ae.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(ae.tokens.comma));return this._consume(ae.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(ae.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(ae.tokens.paren_right),new Y([e])}_paren_expression(){this._consume(ae.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(ae.tokens.paren_right,"Expected ')'."),new Y([e])}_struct_decl(){if(!this._match(ae.keywords.struct))return null;const e=this._consume(ae.tokens.ident,"Expected name for struct.").toString();this._consume(ae.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(ae.tokens.brace_right);){const e=this._attribute(),n=this._consume(ae.tokens.ident,"Expected variable name.").toString();this._consume(ae.tokens.colon,"Expected ':' for struct member type.");const r=this._attribute(),s=this._type_decl();null!=s&&(s.attributes=r),this._check(ae.tokens.brace_right)?this._match(ae.tokens.comma):this._consume(ae.tokens.comma,"Expected ',' for struct member."),t.push(new re(n,s,e))}this._consume(ae.tokens.brace_right,"Expected '}' after struct body.");const n=new L(e,t);return this._context.structs.set(e,n),n}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(ae.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(ae.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(ae.keywords.const))return null;const e=this._consume(ae.tokens.ident,"Expected variable name");let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;if(this._match(ae.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof I)n=e;else if(e instanceof H&&e.initializer instanceof I)n=e.initializer;else try{const t=e.evaluate(this._context);n=new $(t)}catch(t){n=e}}const r=new m(e.toString(),t,"","",n);return this._context.constants.set(r.name,r),r}_global_let_decl(){if(!this._match(ae.keywords.let))return null;const e=this._consume(ae.tokens.ident,"Expected variable name");let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;return this._match(ae.tokens.equal)&&(n=this._const_expression()),new p(e.toString(),t,"","",n)}_const_expression(){if(this._match(ae.const_literal))return new O(this._previous().toString());const e=this._type_decl();this._consume(ae.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(ae.tokens.paren_right)&&(t.push(this._const_expression()),this._check(ae.tokens.comma));)this._advance();return this._consume(ae.tokens.paren_right,"Expected ')'."),new I(e,t)}_variable_decl(){if(!this._match(ae.keywords.var))return null;let e="",t="";this._match(ae.tokens.less_than)&&(e=this._consume(ae.storage_class,"Expected storage_class.").toString(),this._match(ae.tokens.comma)&&(t=this._consume(ae.access_mode,"Expected access_mode.").toString()),this._consume(ae.tokens.greater_than,"Expected '>'."));const n=this._consume(ae.tokens.ident,"Expected variable name");let r=null;if(this._match(ae.tokens.colon)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}return new d(n.toString(),r,e,t,null)}_override_decl(){if(!this._match(ae.keywords.override))return null;const e=this._consume(ae.tokens.ident,"Expected variable name");let t=null;if(this._match(ae.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new f(e.toString(),t,null)}_enable_directive(){const e=this._consume(ae.tokens.ident,"identity expected.");return new P(e.toString())}_type_alias(){const e=this._consume(ae.tokens.ident,"identity expected.");this._consume(ae.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const n=new E(e.toString(),t);return this._context.aliases.set(n.name,n),n}_type_decl(){if(this._check([ae.tokens.ident,...ae.texel_format,ae.keywords.bool,ae.keywords.f32,ae.keywords.i32,ae.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new z(e.toString())}if(this._check(ae.template_types)){let e=this._advance().toString(),t=null,n=null;return this._match(ae.tokens.less_than)&&(t=this._type_decl(),n=null,this._match(ae.tokens.comma)&&(n=this._consume(ae.access_mode,"Expected access_mode for pointer").toString()),this._consume(ae.tokens.greater_than,"Expected '>' for type.")),new R(e,t,n)}if(this._match(ae.keywords.ptr)){let e=this._previous().toString();this._consume(ae.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(ae.storage_class,"Expected storage_class for pointer");this._consume(ae.tokens.comma,"Expected ',' for pointer.");const n=this._type_decl();let r=null;return this._match(ae.tokens.comma)&&(r=this._consume(ae.access_mode,"Expected access_mode for pointer").toString()),this._consume(ae.tokens.greater_than,"Expected '>' for pointer."),new V(e,t.toString(),n,r)}let e=this._texture_sampler_types();if(e)return e;const t=this._attribute();if(this._match(ae.keywords.array)){let e=null,n=-1;const r=this._previous();if(this._match(ae.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(ae.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(ae.tokens.greater_than,"Expected '>' for array."),n=t?parseInt(t):0}return new G(r.toString(),t,e,n)}return null}_texture_sampler_types(){if(this._match(ae.sampler_type))return new F(this._previous().toString(),null,null);if(this._match(ae.depth_texture_type))return new F(this._previous().toString(),null,null);if(this._match(ae.sampled_texture_type)||this._match(ae.multisampled_texture_type)){const e=this._previous();this._consume(ae.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(ae.tokens.greater_than,"Expected '>' for sampler type."),new F(e.toString(),t,null)}if(this._match(ae.storage_texture_type)){const e=this._previous();this._consume(ae.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(ae.texel_format,"Invalid texel format.").toString();this._consume(ae.tokens.comma,"Expected ',' after texel format.");const n=this._consume(ae.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(ae.tokens.greater_than,"Expected '>' for sampler type."),new F(e.toString(),t,n)}return null}_attribute(){let e=[];for(;this._match(ae.tokens.attr);){const t=this._consume(ae.attribute_name,"Expected attribute name"),n=new se(t.toString(),null);if(this._match(ae.tokens.paren_left)){if(n.value=this._consume(ae.literal_or_ident,"Expected attribute value").toString(),this._check(ae.tokens.comma)){this._advance();do{const e=this._consume(ae.literal_or_ident,"Expected attribute value").toString();n.value instanceof Array||(n.value=[n.value]),n.value.push(e)}while(this._match(ae.tokens.comma))}this._consume(ae.tokens.paren_right,"Expected ')'")}e.push(n)}for(;this._match(ae.tokens.attr_left);){if(!this._check(ae.tokens.attr_right))do{const t=this._consume(ae.attribute_name,"Expected attribute name"),n=new se(t.toString(),null);if(this._match(ae.tokens.paren_left)){if(n.value=[this._consume(ae.literal_or_ident,"Expected attribute value").toString()],this._check(ae.tokens.comma)){this._advance();do{const e=this._consume(ae.literal_or_ident,"Expected attribute value").toString();n.value.push(e)}while(this._match(ae.tokens.comma))}this._consume(ae.tokens.paren_right,"Expected ')'")}e.push(n)}while(this._match(ae.tokens.comma));this._consume(ae.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class ce{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class he{constructor(e,t,n){this.name=e,this.type=t,this.attributes=n,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class de extends ce{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class fe extends ce{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class pe extends ce{constructor(e,t,n){super(e,n),this.format=t}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler"}(y||(y={}));class me{constructor(e,t,n,r,s,i){this.name=e,this.type=t,this.group=n,this.binding=r,this.attributes=s,this.resourceType=i}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class _e{constructor(e,t){this.name=e,this.type=t}}class ge{constructor(e,t){this.align=e,this.size=t}}class we{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r,this.interpolation=null}}class ve{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r}}class ye{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.name=e,this.stage=t}}class xe{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class be{constructor(e,t,n,r){this.name=e,this.type=t,this.attributes=n,this.id=r}}class ke{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new xe,this._types=new Map,e&&this.update(e)}update(e){const t=(new le).parse(e);for(const e of t){if(e instanceof L){const t=this._getTypeInfo(e,null);t instanceof de&&this.structs.push(t)}if(e instanceof E&&this.aliases.push(this._getAliasInfo(e)),e instanceof f){const t=e,n=this._getAttributeNum(t.attributes,"id",0),r=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new be(t.name,r,t.attributes,n))}if(this._isUniformVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=new me(t.name,s,n,r,t.attributes,y.Uniform);this.uniforms.push(i)}if(this._isStorageVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=new me(t.name,s,n,r,t.attributes,y.Storage);this.storage.push(i)}if(this._isTextureVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=new me(t.name,s,n,r,t.attributes,y.Texture);this.textures.push(i)}if(this._isSamplerVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),s=this._getTypeInfo(t.type,t.attributes),i=new me(t.name,s,n,r,t.attributes,y.Sampler);this.samplers.push(i)}if(e instanceof o){const t=this._getAttribute(e,"vertex"),n=this._getAttribute(e,"fragment"),r=this._getAttribute(e,"compute"),s=t||n||r;if(s){const t=new ye(e.name,s.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),this.entry[s.name].push(t)}}}}getBindGroups(){const e=[];function t(t,n){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),n>=e[t].length&&(e[t].length=n+1)}for(const n of this.uniforms)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.storage)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.textures)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.samplers)t(n.group,n.binding),e[n.group][n.binding]=n;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof L)this._getStructOutputs(e,t);else{const n=this._getOutputInfo(e);null!==n&&t.push(n)}return t}_getStructOutputs(e,t){for(const n of e.members)if(n.type instanceof L)this._getStructOutputs(n.type,t);else{const e=this._getAttribute(n,"location")||this._getAttribute(n,"builtin");if(null!==e){const r=this._getTypeInfo(n.type,n.type.attributes),s=this._parseInt(e.value),i=new ve(n.name,r,e.name,s);t.push(i)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getTypeInfo(e,e.attributes),r=this._parseInt(t.value);return new ve("",n,t.name,r)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const n of e)if(n.type instanceof L)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const n of e.members)if(n.type instanceof L)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getAttribute(e,"interpolation"),r=this._getTypeInfo(e.type,e.attributes),s=this._parseInt(t.value),i=new we(e.name,r,t.name,s);return null!==n&&(i.interpolation=this._parseString(n.value)),i}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new _e(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof G){const n=e,r=this._getTypeInfo(n.format,n.attributes),s=new fe(n.name,t);return s.format=r,s.count=n.count,this._types.set(e,s),this._updateTypeInfo(s),s}if(e instanceof L){const n=e,r=new de(n.name,t);for(const e of n.members){const t=this._getTypeInfo(e.type,e.attributes);r.members.push(new he(e.name,t,e.attributes))}return this._types.set(e,r),this._updateTypeInfo(r),r}if(e instanceof R){const n=e,r=n.format?this._getTypeInfo(n.format,null):null,s=new pe(n.name,r,t);return this._types.set(e,s),this._updateTypeInfo(s),s}const n=new ce(e.name,t);return this._types.set(e,n),this._updateTypeInfo(n),n}_updateTypeInfo(e){var t,n;const r=this._getTypeSize(e);if(e.size=null!==(t=null==r?void 0:r.size)&&void 0!==t?t:0,e instanceof fe){const t=this._getTypeSize(e.format);e.stride=null!==(n=null==t?void 0:t.size)&&void 0!==n?n:0,this._updateTypeInfo(e.format)}e instanceof de&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let n=0,r=0,s=0,i=0;for(let a=0,o=e.members.length;a<o;++a){const o=e.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(t=this._getAlias(o.type.name))&&void 0!==t||o.type;const l=u.align,c=u.size;n=this._roundUp(l,n+r),r=c,s=n,i=Math.max(i,l),o.offset=n,o.size=c,this._updateTypeInfo(o.type)}e.size=this._roundUp(i,s+r),e.align=i}_getTypeSize(e){var t;if(null==e)return null;const n=this._getAttributeNum(e.attributes,"size",0),r=this._getAttributeNum(e.attributes,"align",0);if(e instanceof he&&(e=e.type),e instanceof ce){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=ke._typeInfo[e.name];if(void 0!==t){const s="f16"===e.format?2:1;return new ge(Math.max(r,t.align/s),Math.max(n,t.size/s))}}{const t=ke._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const s="h"===e.name[e.name.length-1]?2:1;return new ge(Math.max(r,t.align/s),Math.max(n,t.size/s))}}if(e instanceof fe){let s=e,i=8,a=8;const o=this._getTypeSize(s.format);return null!==o&&(a=o.size,i=o.align),a=s.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(i,a)),n&&(a=n),new ge(Math.max(r,i),Math.max(n,a))}if(e instanceof de){let t=0,s=0,i=0,a=0,o=0;for(const n of e.members){const e=this._getTypeSize(n.type);null!==e&&(t=Math.max(e.align,t),i=this._roundUp(e.align,i+a),a=e.size,o=i)}return s=this._roundUp(t,o+a),new ge(Math.max(r,t),Math.max(n,s))}return null}_isUniformVar(e){return e instanceof d&&"uniform"==e.storage}_isStorageVar(e){return e instanceof d&&"storage"==e.storage}_isTextureVar(e){return e instanceof d&&null!==e.type&&-1!=ke._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof d&&null!==e.type&&-1!=ke._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const n=e;if(!n||!n.attributes)return null;const r=n.attributes;for(let e of r)if(e.name==t)return e;return null}_getAttributeNum(e,t,n){if(null===e)return n;for(let r of e)if(r.name==t){let e=null!==r&&null!==r.value?r.value:n;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):n}return n}_roundUp(e,t){return Math.ceil(t/e)*e}}function Me(e,t){const n=function(e){return Array.isArray(e)||r(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),s=Math.max(...n.slice(0,"3d"===t?3:2));return 1+Math.log2(s)|0}ke._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},ke._textureTypes=ae.any_texture_type.map((e=>e.name)),ke._samplerTypes=ae.sampler_type.map((e=>e.name));const Se=new WeakMap;function Te(e,t){let n=Se.get(e);n||(n={pipelineByFormat:{},moduleByView:{}},Se.set(e,n));let{sampler:r}=n;const{pipelineByFormat:s,moduleByView:i}=n,a=function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let o=i[a];o||(o=e.createShaderModule({label:`mip level generation for ${a}`,code:"\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      "}),i[a]=o),r||(r=e.createSampler({minFilter:"linear"}),n.sampler=r);const u=`${t.format}`;s[u]||(s[u]=e.createRenderPipeline({label:`mip level generator pipeline for ${a}`,layout:"auto",vertex:{module:o,entryPoint:"vs"},fragment:{module:o,entryPoint:"fs",targets:[{format:t.format}]}}));const l=s[u],c=e.createCommandEncoder({label:"mip gen encoder"});for(let n=1;n<t.mipLevelCount;++n)for(let s=0;s<t.depthOrArrayLayers;++s){const i=e.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:r},{binding:1,resource:t.createView({dimension:"2d",baseMipLevel:n-1,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1})}]}),a={label:"mip gen renderPass",colorAttachments:[{view:t.createView({baseMipLevel:n,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},o=c.beginRenderPass(a);o.setPipeline(l),o.setBindGroup(0,i),o.draw(3),o.end()}const h=c.finish();e.queue.submit([h])}const Ae=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Pe(e){return r(e)||Array.isArray(e)||function(e){const t=e;return r(t.data)||Array.isArray(t.data)}(e)}function Ee(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Ae.entries()].map((([e,{formats:[t,n]}])=>[[t,e],[n,e]])).flat());const Ce={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Ne=/([a-z]+)(\d+)([a-z]+)/;function Be(e){const[,t,n,r]=Ne.exec(e),s=t.length,i=parseInt(n)/8;return{channels:t,numChannels:s,bytesPerChannel:i,bytesPerElement:s*i,Type:Ce[`${n}${r}`]}}function ze(e,t,n,s={}){n.forEach(((n,i)=>{const a=[0,0,i+(s.baseArrayLayer||0)];if(Pe(n))!function(e,t,n,s){const i=function(e,t){if(r(e))return e;const{Type:n}=Be(t);return new n(e)}(n.data||n,t.format),a=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=Be(t.format),u=s.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:u},i,{bytesPerRow:o*a[0],rowsPerImage:a[1]},a)}(e,t,n,{origin:a});else{const r=n,{flipY:i,premultipliedAlpha:o,colorSpace:u}=s;e.queue.copyExternalImageToTexture({source:r,flipY:i},{texture:t,premultipliedAlpha:o,colorSpace:u,origin:a},Le(r,s))}})),t.mipLevelCount>1&&Te(e,t)}function Le(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const n=e,{width:s,height:i}=n;if(s>0&&i>0&&!Pe(e))return[s,i,1];const a=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:u}=Be(a),l=r(e)||Array.isArray(e)?e:e.data;return function(e,t,n,r="2d"){if(n%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=n/t)%1)throw new Error("can't guess dimensions")}else if((t=n/e)%1)throw new Error("can't guess dimensions")}else{const s=Math.sqrt(n/("cube"===r?6:1));s%1==0?(e=s,t=s):(e=n,t=1)}const s=n/e/t;if(s%1)throw new Error("can't guess dimensions");return[e,t,s]}(s,i,(r(l)?l.byteLength:l.length*u)/o)}}async function Re(e,t,n={}){const r=await Promise.all(t.map((e=>async function(e,t={}){const n=await fetch(e),r=await n.blob(),s={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(r,s)}(e))));return function(e,t,n={}){const r=Le(t[0],n);r[2]=r[2]>1?r[2]:t.length;const s=e.createTexture({dimension:Ee(n.dimension),format:n.format||"rgba8unorm",mipLevelCount:n.mipLevelCount?n.mipLevelCount:n.mips?Me(r):1,size:r,usage:(n.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return ze(e,s,t,n),s}(e,r,n)}async function Ve(e,t,n={}){return Re(e,[t],n)}},416:(e,t,n)=>{n.d(t,{K4:()=>P,R3:()=>te,_E:()=>ge,vh:()=>Ie});let r=1e-6,s=Float32Array;function i(e=0,t=0){const n=new s(2);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t)),n}const a=i;function o(e,t,n){return(n=n||new s(2))[0]=e[0]-t[0],n[1]=e[1]-t[1],n}const u=o;function l(e,t,n){return(n=n||new s(2))[0]=e[0]*t,n[1]=e[1]*t,n}const c=l;function h(e,t){return(t=t||new s(2))[0]=1/e[0],t[1]=1/e[1],t}const d=h;function f(e,t){return e[0]*t[0]+e[1]*t[1]}function p(e){const t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}const m=p;function _(e){const t=e[0],n=e[1];return t*t+n*n}const g=_;function w(e,t){const n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}const v=w;function y(e,t){const n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}const x=y;function b(e,t){return(t=t||new s(2))[0]=e[0],t[1]=e[1],t}const k=b;function M(e,t,n){return(n=n||new s(2))[0]=e[0]*t[0],n[1]=e[1]*t[1],n}const S=M;function T(e,t,n){return(n=n||new s(2))[0]=e[0]/t[0],n[1]=e[1]/t[1],n}const A=T;var P=Object.freeze({__proto__:null,create:i,setDefaultType:function(e){const t=s;return s=e,t},fromValues:a,set:function(e,t,n){return(n=n||new s(2))[0]=e,n[1]=t,n},ceil:function(e,t){return(t=t||new s(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new s(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new s(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,n=1,r){return(r=r||new s(2))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r},add:function(e,t,n){return(n=n||new s(2))[0]=e[0]+t[0],n[1]=e[1]+t[1],n},addScaled:function(e,t,n,r){return(r=r||new s(2))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r},angle:function(e,t){const n=e[0],r=e[1],s=e[0],i=e[1],a=Math.sqrt(n*n+r*r)*Math.sqrt(s*s+i*i),o=a&&f(e,t)/a;return Math.acos(o)},subtract:o,sub:u,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,n,r){return(r=r||new s(2))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r},lerpV:function(e,t,n,r){return(r=r||new s(2))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r},max:function(e,t,n){return(n=n||new s(2))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},min:function(e,t,n){return(n=n||new s(2))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},mulScalar:l,scale:c,divScalar:function(e,t,n){return(n=n||new s(2))[0]=e[0]/t,n[1]=e[1]/t,n},inverse:h,invert:d,cross:function(e,t,n){n=n||new s(3);const r=e[0]*t[1]-e[1]*t[0];return n[0]=0,n[1]=0,n[2]=r,n},dot:f,length:p,len:m,lengthSq:_,lenSq:g,distance:w,dist:v,distanceSq:y,distSq:x,normalize:function(e,t){t=t||new s(2);const n=e[0],r=e[1],i=Math.sqrt(n*n+r*r);return i>1e-5?(t[0]=n/i,t[1]=r/i):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new s(2))[0]=-e[0],t[1]=-e[1],t},copy:b,clone:k,multiply:M,mul:S,divide:T,div:A,random:function(e=1,t){t=t||new s(2);const n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},zero:function(e){return(e=e||new s(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,n){n=n||new s(2);const r=e[0],i=e[1];return n[0]=r*t[0]+i*t[4]+t[12],n[1]=r*t[1]+i*t[5]+t[13],n},transformMat3:function(e,t,n){n=n||new s(2);const r=e[0],i=e[1];return n[0]=t[0]*r+t[4]*i+t[8],n[1]=t[1]*r+t[5]*i+t[9],n}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);let E=Float32Array;function C(e,t,n){const r=new E(3);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t,void 0!==n&&(r[2]=n))),r}const N=C;function B(e,t,n){return(n=n||new E(3))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}const z=B;function L(e,t,n){return(n=n||new E(3))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n}const R=L;function V(e,t){return(t=t||new E(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const G=V;function F(e,t,n){n=n||new E(3);const r=e[2]*t[0]-e[0]*t[2],s=e[0]*t[1]-e[1]*t[0];return n[0]=e[1]*t[2]-e[2]*t[1],n[1]=r,n[2]=s,n}function U(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function O(e){const t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}const I=O;function D(e){const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}const q=D;function H(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2];return Math.sqrt(n*n+r*r+s*s)}const $=H;function j(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2];return n*n+r*r+s*s}const X=j;function Y(e,t){t=t||new E(3);const n=e[0],r=e[1],s=e[2],i=Math.sqrt(n*n+r*r+s*s);return i>1e-5?(t[0]=n/i,t[1]=r/i,t[2]=s/i):(t[0]=0,t[1]=0,t[2]=0),t}function W(e,t){return(t=t||new E(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const K=W;function Q(e,t,n){return(n=n||new E(3))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n}const Z=Q;function J(e,t,n){return(n=n||new E(3))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n}const ee=J;var te=Object.freeze({__proto__:null,create:C,setDefaultType:function(e){const t=E;return E=e,t},fromValues:N,set:function(e,t,n,r){return(r=r||new E(3))[0]=e,r[1]=t,r[2]=n,r},ceil:function(e,t){return(t=t||new E(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new E(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new E(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,n=1,r){return(r=r||new E(3))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r},add:function(e,t,n){return(n=n||new E(3))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},addScaled:function(e,t,n,r){return(r=r||new E(3))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r},angle:function(e,t){const n=e[0],r=e[1],s=e[2],i=e[0],a=e[1],o=e[2],u=Math.sqrt(n*n+r*r+s*s)*Math.sqrt(i*i+a*a+o*o),l=u&&U(e,t)/u;return Math.acos(l)},subtract:B,sub:z,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,n,r){return(r=r||new E(3))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r},lerpV:function(e,t,n,r){return(r=r||new E(3))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r},max:function(e,t,n){return(n=n||new E(3))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},min:function(e,t,n){return(n=n||new E(3))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},mulScalar:L,scale:R,divScalar:function(e,t,n){return(n=n||new E(3))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n},inverse:V,invert:G,cross:F,dot:U,length:O,len:I,lengthSq:D,lenSq:q,distance:H,dist:$,distanceSq:j,distSq:X,normalize:Y,negate:function(e,t){return(t=t||new E(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:W,clone:K,multiply:Q,mul:Z,divide:J,div:ee,random:function(e=1,t){t=t||new E(3);const n=2*Math.random()*Math.PI,r=2*Math.random()-1,s=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*s,t[1]=Math.sin(n)*s,t[2]=r*e,t},zero:function(e){return(e=e||new E(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,n){n=n||new E(3);const r=e[0],s=e[1],i=e[2],a=t[3]*r+t[7]*s+t[11]*i+t[15]||1;return n[0]=(t[0]*r+t[4]*s+t[8]*i+t[12])/a,n[1]=(t[1]*r+t[5]*s+t[9]*i+t[13])/a,n[2]=(t[2]*r+t[6]*s+t[10]*i+t[14])/a,n},transformMat4Upper3x3:function(e,t,n){n=n||new E(3);const r=e[0],s=e[1],i=e[2];return n[0]=r*t[0]+s*t[4]+i*t[8],n[1]=r*t[1]+s*t[5]+i*t[9],n[2]=r*t[2]+s*t[6]+i*t[10],n},transformMat3:function(e,t,n){n=n||new E(3);const r=e[0],s=e[1],i=e[2];return n[0]=r*t[0]+s*t[4]+i*t[8],n[1]=r*t[1]+s*t[5]+i*t[9],n[2]=r*t[2]+s*t[6]+i*t[10],n},transformQuat:function(e,t,n){n=n||new E(3);const r=t[0],s=t[1],i=t[2],a=2*t[3],o=e[0],u=e[1],l=e[2],c=s*l-i*u,h=i*o-r*l,d=r*u-s*o;return n[0]=o+c*a+2*(s*d-i*h),n[1]=u+h*a+2*(i*c-r*d),n[2]=l+d*a+2*(r*h-s*c),n},getTranslation:function(e,t){return(t=t||new E(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||new E(3))[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||new E(3);const n=e[0],r=e[1],s=e[2],i=e[4],a=e[5],o=e[6],u=e[8],l=e[9],c=e[10];return t[0]=Math.sqrt(n*n+r*r+s*s),t[1]=Math.sqrt(i*i+a*a+o*o),t[2]=Math.sqrt(u*u+l*l+c*c),t}});let ne=Float32Array;function re(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const se=re;function ie(e){return(e=e||new ne(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function ae(e,t){t=t||new ne(16);const n=e[0],r=e[1],s=e[2],i=e[3],a=e[4],o=e[5],u=e[6],l=e[7],c=e[8],h=e[9],d=e[10],f=e[11],p=e[12],m=e[13],_=e[14],g=e[15],w=d*g,v=_*f,y=u*g,x=_*l,b=u*f,k=d*l,M=s*g,S=_*i,T=s*f,A=d*i,P=s*l,E=u*i,C=c*m,N=p*h,B=a*m,z=p*o,L=a*h,R=c*o,V=n*m,G=p*r,F=n*h,U=c*r,O=n*o,I=a*r,D=w*o+x*h+b*m-(v*o+y*h+k*m),q=v*r+M*h+A*m-(w*r+S*h+T*m),H=y*r+S*o+P*m-(x*r+M*o+E*m),$=k*r+T*o+E*h-(b*r+A*o+P*h),j=1/(n*D+a*q+c*H+p*$);return t[0]=j*D,t[1]=j*q,t[2]=j*H,t[3]=j*$,t[4]=j*(v*a+y*c+k*p-(w*a+x*c+b*p)),t[5]=j*(w*n+S*c+T*p-(v*n+M*c+A*p)),t[6]=j*(x*n+M*a+E*p-(y*n+S*a+P*p)),t[7]=j*(b*n+A*a+P*c-(k*n+T*a+E*c)),t[8]=j*(C*l+z*f+L*g-(N*l+B*f+R*g)),t[9]=j*(N*i+V*f+U*g-(C*i+G*f+F*g)),t[10]=j*(B*i+G*l+O*g-(z*i+V*l+I*g)),t[11]=j*(R*i+F*l+I*f-(L*i+U*l+O*f)),t[12]=j*(B*d+R*_+N*u-(L*_+C*u+z*d)),t[13]=j*(F*_+C*s+G*d-(V*d+U*_+N*s)),t[14]=j*(V*u+I*_+z*s-(O*_+B*s+G*u)),t[15]=j*(O*d+L*s+U*u-(F*u+I*d+R*s)),t}const oe=ae;function ue(e,t,n){n=n||new ne(16);const r=e[0],s=e[1],i=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],h=e[8],d=e[9],f=e[10],p=e[11],m=e[12],_=e[13],g=e[14],w=e[15],v=t[0],y=t[1],x=t[2],b=t[3],k=t[4],M=t[5],S=t[6],T=t[7],A=t[8],P=t[9],E=t[10],C=t[11],N=t[12],B=t[13],z=t[14],L=t[15];return n[0]=r*v+o*y+h*x+m*b,n[1]=s*v+u*y+d*x+_*b,n[2]=i*v+l*y+f*x+g*b,n[3]=a*v+c*y+p*x+w*b,n[4]=r*k+o*M+h*S+m*T,n[5]=s*k+u*M+d*S+_*T,n[6]=i*k+l*M+f*S+g*T,n[7]=a*k+c*M+p*S+w*T,n[8]=r*A+o*P+h*E+m*C,n[9]=s*A+u*P+d*E+_*C,n[10]=i*A+l*P+f*E+g*C,n[11]=a*A+c*P+p*E+w*C,n[12]=r*N+o*B+h*z+m*L,n[13]=s*N+u*B+d*z+_*L,n[14]=i*N+l*B+f*z+g*L,n[15]=a*N+c*B+p*z+w*L,n}const le=ue;let ce,he,de;function fe(e,t,n){n=n||new ne(16);let r=e[0],s=e[1],i=e[2];const a=Math.sqrt(r*r+s*s+i*i);r/=a,s/=a,i/=a;const o=r*r,u=s*s,l=i*i,c=Math.cos(t),h=Math.sin(t),d=1-c;return n[0]=o+(1-o)*c,n[1]=r*s*d+i*h,n[2]=r*i*d-s*h,n[3]=0,n[4]=r*s*d-i*h,n[5]=u+(1-u)*c,n[6]=s*i*d+r*h,n[7]=0,n[8]=r*i*d+s*h,n[9]=s*i*d-r*h,n[10]=l+(1-l)*c,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}const pe=fe;function me(e,t,n,r){r=r||new ne(16);let s=t[0],i=t[1],a=t[2];const o=Math.sqrt(s*s+i*i+a*a);s/=o,i/=o,a/=o;const u=s*s,l=i*i,c=a*a,h=Math.cos(n),d=Math.sin(n),f=1-h,p=u+(1-u)*h,m=s*i*f+a*d,_=s*a*f-i*d,g=s*i*f-a*d,w=l+(1-l)*h,v=i*a*f+s*d,y=s*a*f+i*d,x=i*a*f-s*d,b=c+(1-c)*h,k=e[0],M=e[1],S=e[2],T=e[3],A=e[4],P=e[5],E=e[6],C=e[7],N=e[8],B=e[9],z=e[10],L=e[11];return r[0]=p*k+m*A+_*N,r[1]=p*M+m*P+_*B,r[2]=p*S+m*E+_*z,r[3]=p*T+m*C+_*L,r[4]=g*k+w*A+v*N,r[5]=g*M+w*P+v*B,r[6]=g*S+w*E+v*z,r[7]=g*T+w*C+v*L,r[8]=y*k+x*A+b*N,r[9]=y*M+x*P+b*B,r[10]=y*S+x*E+b*z,r[11]=y*T+x*C+b*L,e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}const _e=me;var ge=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ne;return ne=e,t},create:function(e,t,n,r,s,i,a,o,u,l,c,h,d,f,p,m){const _=new ne(16);return void 0!==e&&(_[0]=e,void 0!==t&&(_[1]=t,void 0!==n&&(_[2]=n,void 0!==r&&(_[3]=r,void 0!==s&&(_[4]=s,void 0!==i&&(_[5]=i,void 0!==a&&(_[6]=a,void 0!==o&&(_[7]=o,void 0!==u&&(_[8]=u,void 0!==l&&(_[9]=l,void 0!==c&&(_[10]=c,void 0!==h&&(_[11]=h,void 0!==d&&(_[12]=d,void 0!==f&&(_[13]=f,void 0!==p&&(_[14]=p,void 0!==m&&(_[15]=m)))))))))))))))),_},set:function(e,t,n,r,s,i,a,o,u,l,c,h,d,f,p,m,_){return(_=_||new ne(16))[0]=e,_[1]=t,_[2]=n,_[3]=r,_[4]=s,_[5]=i,_[6]=a,_[7]=o,_[8]=u,_[9]=l,_[10]=c,_[11]=h,_[12]=d,_[13]=f,_[14]=p,_[15]=m,_},fromMat3:function(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ne(16);const n=e[0],r=e[1],s=e[2],i=e[3],a=n+n,o=r+r,u=s+s,l=n*a,c=r*a,h=r*o,d=s*a,f=s*o,p=s*u,m=i*a,_=i*o,g=i*u;return t[0]=1-h-p,t[1]=c+g,t[2]=d-_,t[3]=0,t[4]=c-g,t[5]=1-l-p,t[6]=f+m,t[7]=0,t[8]=d+_,t[9]=f-m,t[10]=1-l-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ne(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:re,clone:se,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r&&Math.abs(e[4]-t[4])<r&&Math.abs(e[5]-t[5])<r&&Math.abs(e[6]-t[6])<r&&Math.abs(e[7]-t[7])<r&&Math.abs(e[8]-t[8])<r&&Math.abs(e[9]-t[9])<r&&Math.abs(e[10]-t[10])<r&&Math.abs(e[11]-t[11])<r&&Math.abs(e[12]-t[12])<r&&Math.abs(e[13]-t[13])<r&&Math.abs(e[14]-t[14])<r&&Math.abs(e[15]-t[15])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:ie,transpose:function(e,t){if((t=t||new ne(16))===e){let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,t}const n=e[0],r=e[1],s=e[2],i=e[3],a=e[4],o=e[5],u=e[6],l=e[7],c=e[8],h=e[9],d=e[10],f=e[11],p=e[12],m=e[13],_=e[14],g=e[15];return t[0]=n,t[1]=a,t[2]=c,t[3]=p,t[4]=r,t[5]=o,t[6]=h,t[7]=m,t[8]=s,t[9]=u,t[10]=d,t[11]=_,t[12]=i,t[13]=l,t[14]=f,t[15]=g,t},inverse:ae,determinant:function(e){const t=e[0],n=e[1],r=e[2],s=e[3],i=e[4],a=e[5],o=e[6],u=e[7],l=e[8],c=e[9],h=e[10],d=e[11],f=e[12],p=e[13],m=e[14],_=e[15],g=h*_,w=m*d,v=o*_,y=m*u,x=o*d,b=h*u,k=r*_,M=m*s,S=r*d,T=h*s,A=r*u,P=o*s;return t*(g*a+y*c+x*p-(w*a+v*c+b*p))+i*(w*n+k*c+T*p-(g*n+M*c+S*p))+l*(v*n+M*a+A*p-(y*n+k*a+P*p))+f*(b*n+S*a+P*c-(x*n+T*a+A*c))},invert:oe,multiply:ue,mul:le,setTranslation:function(e,t,n){return e!==(n=n||ie())&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},getTranslation:function(e,t){return(t=t||C())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||C())[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},setAxis:function(e,t,n,r){r!==e&&(r=re(e,r));const s=4*n;return r[s+0]=t[0],r[s+1]=t[1],r[s+2]=t[2],r},getScaling:function(e,t){t=t||C();const n=e[0],r=e[1],s=e[2],i=e[4],a=e[5],o=e[6],u=e[8],l=e[9],c=e[10];return t[0]=Math.sqrt(n*n+r*r+s*s),t[1]=Math.sqrt(i*i+a*a+o*o),t[2]=Math.sqrt(u*u+l*l+c*c),t},perspective:function(e,t,n,r,s){s=s||new ne(16);const i=Math.tan(.5*Math.PI-.5*e);if(s[0]=i/t,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=i,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[11]=-1,s[12]=0,s[13]=0,s[15]=0,r===1/0)s[10]=-1,s[14]=-n;else{const e=1/(n-r);s[10]=r*e,s[14]=r*n*e}return s},ortho:function(e,t,n,r,s,i,a){return(a=a||new ne(16))[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(r-n),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(s-i),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(r+n)/(n-r),a[14]=s/(s-i),a[15]=1,a},frustum:function(e,t,n,r,s,i,a){const o=t-e,u=r-n,l=s-i;return(a=a||new ne(16))[0]=2*s/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*s/u,a[6]=0,a[7]=0,a[8]=(e+t)/o,a[9]=(r+n)/u,a[10]=i/l,a[11]=-1,a[12]=0,a[13]=0,a[14]=s*i/l,a[15]=0,a},aim:function(e,t,n,r){return r=r||new ne(16),ce=ce||C(),he=he||C(),de=de||C(),Y(B(t,e,de),de),Y(F(n,de,ce),ce),Y(F(de,ce,he),he),r[0]=ce[0],r[1]=ce[1],r[2]=ce[2],r[3]=0,r[4]=he[0],r[5]=he[1],r[6]=he[2],r[7]=0,r[8]=de[0],r[9]=de[1],r[10]=de[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},cameraAim:function(e,t,n,r){return r=r||new ne(16),ce=ce||C(),he=he||C(),de=de||C(),Y(B(e,t,de),de),Y(F(n,de,ce),ce),Y(F(de,ce,he),he),r[0]=ce[0],r[1]=ce[1],r[2]=ce[2],r[3]=0,r[4]=he[0],r[5]=he[1],r[6]=he[2],r[7]=0,r[8]=de[0],r[9]=de[1],r[10]=de[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},lookAt:function(e,t,n,r){return r=r||new ne(16),ce=ce||C(),he=he||C(),de=de||C(),Y(B(e,t,de),de),Y(F(n,de,ce),ce),Y(F(de,ce,he),he),r[0]=ce[0],r[1]=he[0],r[2]=de[0],r[3]=0,r[4]=ce[1],r[5]=he[1],r[6]=de[1],r[7]=0,r[8]=ce[2],r[9]=he[2],r[10]=de[2],r[11]=0,r[12]=-(ce[0]*e[0]+ce[1]*e[1]+ce[2]*e[2]),r[13]=-(he[0]*e[0]+he[1]*e[1]+he[2]*e[2]),r[14]=-(de[0]*e[0]+de[1]*e[1]+de[2]*e[2]),r[15]=1,r},translation:function(e,t){return(t=t||new ne(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,n){n=n||new ne(16);const r=t[0],s=t[1],i=t[2],a=e[0],o=e[1],u=e[2],l=e[3],c=e[4],h=e[5],d=e[6],f=e[7],p=e[8],m=e[9],_=e[10],g=e[11],w=e[12],v=e[13],y=e[14],x=e[15];return e!==n&&(n[0]=a,n[1]=o,n[2]=u,n[3]=l,n[4]=c,n[5]=h,n[6]=d,n[7]=f,n[8]=p,n[9]=m,n[10]=_,n[11]=g),n[12]=a*r+c*s+p*i+w,n[13]=o*r+h*s+m*i+v,n[14]=u*r+d*s+_*i+y,n[15]=l*r+f*s+g*i+x,n},rotationX:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,n){n=n||new ne(16);const r=e[4],s=e[5],i=e[6],a=e[7],o=e[8],u=e[9],l=e[10],c=e[11],h=Math.cos(t),d=Math.sin(t);return n[4]=h*r+d*o,n[5]=h*s+d*u,n[6]=h*i+d*l,n[7]=h*a+d*c,n[8]=h*o-d*r,n[9]=h*u-d*s,n[10]=h*l-d*i,n[11]=h*c-d*a,e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationY:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,n){n=n||new ne(16);const r=e[0],s=e[1],i=e[2],a=e[3],o=e[8],u=e[9],l=e[10],c=e[11],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r-d*o,n[1]=h*s-d*u,n[2]=h*i-d*l,n[3]=h*a-d*c,n[8]=h*o+d*r,n[9]=h*u+d*s,n[10]=h*l+d*i,n[11]=h*c+d*a,e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationZ:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,n){n=n||new ne(16);const r=e[0],s=e[1],i=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r+d*o,n[1]=h*s+d*u,n[2]=h*i+d*l,n[3]=h*a+d*c,n[4]=h*o-d*r,n[5]=h*u-d*s,n[6]=h*l-d*i,n[7]=h*c-d*a,e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},axisRotation:fe,rotation:pe,axisRotate:me,rotate:_e,scaling:function(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,n){n=n||new ne(16);const r=t[0],s=t[1],i=t[2];return n[0]=r*e[0],n[1]=r*e[1],n[2]=r*e[2],n[3]=r*e[3],n[4]=s*e[4],n[5]=s*e[5],n[6]=s*e[6],n[7]=s*e[7],n[8]=i*e[8],n[9]=i*e[9],n[10]=i*e[10],n[11]=i*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},uniformScaling:function(e,t){return(t=t||new ne(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,n){return(n=n||new ne(16))[0]=t*e[0],n[1]=t*e[1],n[2]=t*e[2],n[3]=t*e[3],n[4]=t*e[4],n[5]=t*e[5],n[6]=t*e[6],n[7]=t*e[7],n[8]=t*e[8],n[9]=t*e[9],n[10]=t*e[10],n[11]=t*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}});Float32Array;let we=Float32Array;function ve(e,t,n,r){const s=new we(4);return void 0!==e&&(s[0]=e,void 0!==t&&(s[1]=t,void 0!==n&&(s[2]=n,void 0!==r&&(s[3]=r)))),s}const ye=ve;function xe(e,t,n){return(n=n||new we(4))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n}const be=xe;function ke(e,t,n){return(n=n||new we(4))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n}const Me=ke;function Se(e,t){return(t=t||new we(4))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}const Te=Se;function Ae(e){const t=e[0],n=e[1],r=e[2],s=e[3];return Math.sqrt(t*t+n*n+r*r+s*s)}const Pe=Ae;function Ee(e){const t=e[0],n=e[1],r=e[2],s=e[3];return t*t+n*n+r*r+s*s}const Ce=Ee;function Ne(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2],i=e[3]-t[3];return Math.sqrt(n*n+r*r+s*s+i*i)}const Be=Ne;function ze(e,t){const n=e[0]-t[0],r=e[1]-t[1],s=e[2]-t[2],i=e[3]-t[3];return n*n+r*r+s*s+i*i}const Le=ze;function Re(e,t){return(t=t||new we(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Ve=Re;function Ge(e,t,n){return(n=n||new we(4))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n[3]=e[3]*t[3],n}const Fe=Ge;function Ue(e,t,n){return(n=n||new we(4))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n[3]=e[3]/t[3],n}const Oe=Ue;var Ie=Object.freeze({__proto__:null,create:ve,setDefaultType:function(e){const t=we;return we=e,t},fromValues:ye,set:function(e,t,n,r,s){return(s=s||new we(4))[0]=e,s[1]=t,s[2]=n,s[3]=r,s},ceil:function(e,t){return(t=t||new we(4))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},floor:function(e,t){return(t=t||new we(4))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},round:function(e,t){return(t=t||new we(4))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},clamp:function(e,t=0,n=1,r){return(r=r||new we(4))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r[3]=Math.min(n,Math.max(t,e[3])),r},add:function(e,t,n){return(n=n||new we(4))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},addScaled:function(e,t,n,r){return(r=r||new we(4))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r[3]=e[3]+t[3]*n,r},subtract:xe,sub:be,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},lerp:function(e,t,n,r){return(r=r||new we(4))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r[3]=e[3]+n*(t[3]-e[3]),r},lerpV:function(e,t,n,r){return(r=r||new we(4))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r[3]=e[3]+n[3]*(t[3]-e[3]),r},max:function(e,t,n){return(n=n||new we(4))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n[3]=Math.max(e[3],t[3]),n},min:function(e,t,n){return(n=n||new we(4))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n[3]=Math.min(e[3],t[3]),n},mulScalar:ke,scale:Me,divScalar:function(e,t,n){return(n=n||new we(4))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n[3]=e[3]/t,n},inverse:Se,invert:Te,dot:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},length:Ae,len:Pe,lengthSq:Ee,lenSq:Ce,distance:Ne,dist:Be,distanceSq:ze,distSq:Le,normalize:function(e,t){t=t||new we(4);const n=e[0],r=e[1],s=e[2],i=e[3],a=Math.sqrt(n*n+r*r+s*s+i*i);return a>1e-5?(t[0]=n/a,t[1]=r/a,t[2]=s/a,t[3]=i/a):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t},negate:function(e,t){return(t=t||new we(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},copy:Re,clone:Ve,multiply:Ge,mul:Fe,divide:Ue,div:Oe,zero:function(e){return(e=e||new we(4))[0]=0,e[1]=0,e[2]=0,e[3]=0,e},transformMat4:function(e,t,n){n=n||new we(4);const r=e[0],s=e[1],i=e[2],a=e[3];return n[0]=t[0]*r+t[4]*s+t[8]*i+t[12]*a,n[1]=t[1]*r+t[5]*s+t[9]*i+t[13]*a,n[2]=t[2]*r+t[6]*s+t[10]*i+t[14]*a,n[3]=t[3]*r+t[7]*s+t[11]*i+t[15]*a,n}})}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return s[e](n,n.exports,a),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(s,i,a)=>{var o;a&&((o=[]).d=-1);var u,l,c,h=new Set,d=s.exports,f=new Promise(((e,t)=>{c=t,l=e}));f[t]=d,f[e]=e=>(o&&e(o),h.forEach(e),f.catch((e=>{}))),s.exports=f,i((s=>{var i;u=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[e])return s;if(s.then){var i=[];i.d=0,s.then((e=>{a[t]=e,r(i)}),(e=>{a[n]=e,r(i)}));var a={};return a[e]=e=>e(i),a}}var o={};return o[e]=e=>{},o[t]=s,o})))(s);var a=()=>u.map((e=>{if(e[n])throw e[n];return e[t]})),l=new Promise((t=>{(i=()=>t(a)).r=0;var n=e=>e!==o&&!h.has(e)&&(h.add(e),e&&!e.d&&(i.r++,e.push(i)));u.map((t=>t[e](n)))}));return i.r?l:a()}),(e=>(e?c(f[n]=e):l(d),r(o)))),o&&o.d<0&&(o.d=0)},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,